# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem            1.0
PortGroup             python 1.0
PortGroup             github 1.0

name                  pybombs

set pythons_suffixes {27 34 35 36}
python.versions        ${pythons_suffixes}
python.default_version 27

categories            science python
license               GPL-3
platforms             darwin
supported_archs       noarch
maintainers           michaelld

description           Python Build Overlay Managed Bundle System

long_description      PyBOMBS (Python Build Overlay Managed Bundle System) is the GNU Radio install management system for resolving dependencies and pulling in out-of-tree projects from CGRAN (Comprehensive GNU Radio Archive Network).

subport ${name}-devel {}

if {${subport} eq ${name}} {

    github.setup    pybombs pybombs 2.3.1 v
    checksums       rmd160 7d6f4fd90eada4d75cc3615f8be1b48ee6353b90 \
                    sha256 87c422350dd9c6937f1b91a57a7947ab823f70acecbd068d9d2b3a8c21898618
    worksrcdir      gnuradio-pybombs-8d17565

    conflicts       ${name}-devel

    # fix the version to be more explicit
    post-patch {
        reinplace "s@${version}@${version} MacPorts@g" ${worksrcpath}/pybombs/__init__.py
    }

} else {

    github.setup    pybombs pybombs 4004f8c0d0727e9c64d85cd2f88935301f634e60
    version         20170709
    checksums       rmd160 d6d567a0e22ced1fb23dfebe8c0767de262c87f3 \
                    sha256 aff674a4164523a96eb8f5cdcb713f17ca5688477da059a478a732adbeb1e7ff
    worksrcdir      gnuradio-${github.project}-[string range ${github.version} 0 6]

    long_description    ${long_description} \
        This port is kept up with the ${name} GIT 'master' branch, is typically updated weekly to monthly.
    conflicts       ${name}

    # fix the version to be very explicit
    patchfiles-append patch-pybombs__init__.py.diff
    post-patch {
        reinplace "s|@VERSION@|git-[string range ${github.version} 0 7](${version}) MacPorts|g" ${worksrcpath}/pybombs/__init__.py
    }
}

# declare +python* variants

foreach this_py_version_no_dot ${pythons_suffixes} {
    set ndx [lsearch -exact ${this_py_version_no_dot} ${this_py_version_no_dot}]
    set this_conflicts [lreplace ${this_py_version_no_dot} ${ndx} ${ndx}]
    set this_description "Use python${this_py_version_no_dot}"
    eval [subst {
        variant python${this_py_version_no_dot} \
            conflicts ${this_conflicts} \
            description ${this_description} {
                python.versions ${this_py_version_no_dot}
                python.version ${this_py_version_no_dot}
                depends_lib-delete \
                    port:python[option python.default_version]
                depends_lib-append \
                    port:python${this_py_version_no_dot} \
                    port:py${this_py_version_no_dot}-future \
                    port:py${this_py_version_no_dot}-requests \
                    port:py${this_py_version_no_dot}-six \
                    port:py${this_py_version_no_dot}-ruamel-yaml
            }
    }]
}

# set default, if no variants selected

set PY_VER_NO_DOT 0
foreach this_py_version_no_dot ${pythons_suffixes} {
    if {[variant_isset python${this_py_version_no_dot}]} {
        set PY_VER_NO_DOT ${this_py_version_no_dot}
        break
    }
}

if {${PY_VER_NO_DOT} == 0} {
    default_variants +python[option python.default_version]
}

# make sure the default variant is not deselected alone

set PY_VER_NO_DOT 0
foreach this_py_version_no_dot ${pythons_suffixes} {
    if {[variant_isset python${this_py_version_no_dot}]} {
        set PY_VER_NO_DOT ${this_py_version_no_dot}
        break
    }
}

if {${PY_VER_NO_DOT} == 0} {
    ui_error "\n\nYou must select a Python variant; you cannot select -python[option python.default_version] alone.\n"
    return -code error "Invalid variant selection."
}
