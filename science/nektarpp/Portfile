# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               cmake 1.1
PortGroup               mpi 1.0
PortGroup               gitlab 1.0
PortGroup               boost 1.0

gitlab.instance         https://gitlab.nektar.info
gitlab.setup            nektar nektar 5.2.0 v

# Boost 1.71 can't be used because
# Undefined symbols for architecture x86_64:
#   "boost::filesystem::detail::create_directory(boost::filesystem::path const&, boost::filesystem::path const*, boost::system::error_code*)", referenced from:
#       Nektar::LibUtilities::FieldIO::SetUpOutput(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, bool) in FieldIO.cpp.o
#   "boost::filesystem::detail::directory_iterator_construct(boost::filesystem::directory_iterator&, boost::filesystem::path const&, unsigned int, boost::system::error_code*)", referenced from:
#       Nektar::LibUtilities::FieldIO::GetFileType(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<Nektar::LibUtilities::Comm>) in FieldIO.cpp.o
boost.version           1.76

name                    nektarpp
revision                3

categories              science
platforms               darwin
license                 MIT
homepage                http://www.nektar.info/
maintainers             {xyloid.org:dave @mdave} openmaintainer
description             spectral/hp element framework
long_description        Nektar++ is a spectral/hp element framework which aims to be easy \
                        to use and support a wide range of features, including 1D, 2D and \
                        3D element support, hybrid shaped elements and continuous and \
                        discontinuous implementations. As well as a modern C++ API, it \
                        ships with a range of solvers including CFD, advection-diffusion \
                        equations and cardiac electrophysiology.

# Additional dependencies for Tetgen and Triangle
master_sites            ${master_sites}:main \
                        ${homepage}thirdparty/:thirdparty

set main_distfile       ${distfiles}
distfiles               ${main_distfile}:main \
                        tetgen-1.5.zip:thirdparty \
                        triangle-1.6.zip:thirdparty

checksums               nektar-5.2.0.tar.bz2 \
                        rmd160  3d7fa153c316cd00fd50d9ab5c22f0c79cd89379 \
                        sha256  42be94624cd049be4a2d62b89033504f1bfd5e8cda005c3705581b1be7ca63b1 \
                        size    58312042 \
                        tetgen-1.5.zip \
                        rmd160  d8785f4ca6b26608ec9423f7574a0e736380370a \
                        sha256  52207793198746de14abcb30a0aeed617d7348ff37544e7d7e65aaaa76d7fa70 \
                        size    264128 \
                        triangle-1.6.zip \
                        rmd160  c92c011c442157cae5abcf246935d61bdfeede26 \
                        sha256  7d74d7efbe35dc5a497bd179bdc87b4670740e466f67043d41e0b0546ce76cb5 \
                        size    130331

# Only the full Nektar++ source should be extracted - CMake will extract any
# third-party dependencies.
extract.only            ${main_distfile}

patchfiles              no-homebrew.patch \
                        fusion-copy-constructor.patch \
                        opencascade.patch

compiler.cxx_standard   2011
cmake.build_type        Release

mpi.setup

depends_lib-append      port:arpack \
                        port:fftw-3 \
                        port:opencascade \
                        port:scotch \
                        port:tinyxml \
                        port:vtk \
                        port:zlib

# Don't build demos and tests by default.
configure.args-append   -DNEKTAR_BUILD_DEMOS=OFF \
                        -DNEKTAR_ERROR_ON_WARNINGS=OFF \
                        -DNEKTAR_BUILD_TESTS=OFF \
                        -DNEKTAR_BUILD_UNIT_TESTS=OFF \
                        -DNEKTAR_SOLVER_DIFFUSION=OFF \
                        -DNEKTAR_SOLVER_DUMMY=OFF \
                        -DNEKTAR_SOLVER_ELASTICITY=OFF \
                        -DNEKTAR_SOLVER_MMF=OFF \
                        -DNEKTAR_USE_ARPACK=ON \
                        -DNEKTAR_USE_FFTW=ON \
                        -DNEKTAR_USE_MESHGEN=ON \
                        -DNEKTAR_USE_SCOTCH=ON \
                        -DNEKTAR_USE_VTK=ON

variant petsc description {
    Enable PETSc support for linear algebra solvers.
} {
    depends_lib-append port:petsc

    configure.args-append \
                        -DNEKTAR_USE_PETSC=ON
}

if {[mpi_variant_isset]} {
    distfiles-append    gsmpi-1.2.1_1.tar.bz2:thirdparty
    checksums-append    gsmpi-1.2.1_1.tar.bz2 \
                        rmd160 3a1ad71c552ea9d62bebabd4ed528531f9c0eec6 \
                        sha256 c9bc966c92f45e81f4e9d1887dd7c59808e7a4ef9ec41e1e5f1e6c5c01745211 \
                        size 39737

    depends_lib-append port:hdf5

    require_active_variants hdf5 [mpi_variant_name]
    require_active_variants scotch [mpi_variant_name]

    configure.args-append \
                        -DNEKTAR_USE_HDF5=ON \
                        -DNEKTAR_USE_MPI=ON
}

variant oce description {
    use Community Edition version of OpenCASCADE
} {
    depends_lib-replace port:opencascade port:oce
}

# NOTE: v5.2.0 looking for OCE before OpenCASCADE, disable when it doesn't required
if {![variant_isset oce]} {
    post-patch {
        reinplace "/FIND_PACKAGE\(OCE /s/^/#/g" ${worksrcpath}/cmake/FindOCC.cmake
    }
}

post-extract {
    # Copy additional third-party sources into correct position.
    file mkdir ${worksrcpath}/ThirdParty
    foreach distfile ${distfiles} {
        set distfile [lindex [split ${distfile} :] 0]
        if {${distfile} ne ${main_distfile}} {
            copy ${distpath}/${distfile} ${worksrcpath}/ThirdParty/
        }
    }
}

set pythons_suffixes    {37 38 39 310}

set pythons_ports       {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string range ${s} 1 2]
    set pe ${prefix}/bin/python${v}
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    variant ${p} description "Build the Python ${v} bindings" conflicts {*}${c} "
        depends_lib-append      port:${p} \
                                port:py${s}-numpy \
                                port:boost[boost::version_nodot]-numpy

        configure.args-append   -DNEKTAR_BUILD_PYTHON=ON \
                                -DNEKTAR_PYTHON3_STATUS=ON \
                                -DNEKTAR_USE_PYTHON3=ON \
                                -DPYTHON_EXECUTABLE=${pe}

        # Install Python libraries using setup.py.
        post-destroot {
            system -W ${build.dir} \"${pe} setup.py install --root=${destroot}\"
        }

        require_active_variants boost       ${p}
        require_active_variants boost-numpy ${p}
        require_active_variants vtk         ${p}
    "
}
