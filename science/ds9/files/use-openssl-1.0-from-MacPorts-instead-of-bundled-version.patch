--- ds9/macos/Makefile.in.orig	2021-11-08 10:46:07.000000000 -0500
+++ ds9/macos/Makefile.in	2022-03-29 12:12:19.000000000 -0400
@@ -188,7 +188,7 @@
 	$(CXX) $(CFLAGS) -o $@ \
 	$(OBJS) \
 	$(LLIBS) \
-	-L $(prefix)/openssl -lssl -lcrypto \
+	-L @macports_prefix@/lib/openssl-1.0 -lssl -lcrypto \
 	$(TK_LIB_SPEC) \
 	$(TCL_LIB_SPEC) \
 	$(TK_LIBS) \
--- ds9/unix/Makefile.in.orig	2021-11-08 10:46:07.000000000 -0500
+++ ds9/unix/Makefile.in	2022-03-29 12:12:19.000000000 -0400
@@ -193,7 +193,7 @@
 	$(CXX) $(CFLAGS) -o $@ \
 	$(OBJS) \
 	$(LLIBS) \
-	-L $(prefix)/openssl -lssl -lcrypto \
+	-L @macports_prefix@/lib/openssl-1.0 -lssl -lcrypto \
 	$(TK_LIBS) \
 	$(LIBS)
 
--- make.include.orig	2021-11-08 10:46:07.000000000 -0500
+++ make.include	2022-03-29 12:12:19.000000000 -0400
@@ -108,16 +108,7 @@
 
 #--------------------------openssl
 
-openssl	: openssl/Makefile
-	@echo ""
-	@echo "*** $@ ***"
-	$(MAKE) -C openssl -j $(JOBS)
-
-openssl/Makefile:
-	@echo ""
-	@echo "*** $@ ***"
-	cd openssl; \
-	$(SSLCONFIG) --prefix=$(prefix)
+openssl	:
 
 #-------------------------- tclfitsy
 
@@ -186,7 +177,6 @@
 	@echo "*** $@ ***"
 	cd tls; \
 	./configure \
- 	--with-ssl-dir=$(prefix)/openssl \
 	 $(TLSFLAGS) \
 	$(WITHTCL) \
 	$(PREFIX) \

--- tls/aclocal.m4.orig	2022-03-29 12:20:13.000000000 -0400
+++ tls/aclocal.m4	2022-03-29 12:21:38.000000000 -0400
@@ -30,71 +30,12 @@
 AC_DEFUN(TLS_CHECK_SSL, [
 
     #--------------------------------------------------------------------
-    # If the variable OPENSSL is set, we will build with the OpenSSL
-    # libraries.  If it is not set, then we will use RSA BSAFE SSL-C
-    # libraries instead of the default OpenSSL libaries.
-    #--------------------------------------------------------------------
-
-    AC_ARG_ENABLE(bsafe, [  --enable-bsafe          Use RSA BSAFE SSL-C libs.  Default is to use OpenSSL libs], OPENSSL="", OPENSSL="1")
-
-    #--------------------------------------------------------------------
-    # Establish the location of the root directory for OpenSSL.
-    # If we're not using OpenSSL, set the root for BSAFE SSL-C.
-    # If we're using BSAFE, define the BSAFE compiler flag.
-    # The "FLAT_INC" flag is used in the BSAFE ssl.h header file and
-    # doesn't seem to be referenced anywhere else.
-    #--------------------------------------------------------------------
-    if test -n "${OPENSSL}"; then
-	SSL_DIR='/usr /usr/local'
-	AC_DEFINE(NO_IDEA)
-	AC_DEFINE(NO_RC5)
-    else
-	SSL_DIR='/usr/sslc /usr/local/sslc'
-	AC_DEFINE(BSAFE)
-	AC_DEFINE(FLAT_INC)
-    fi
-    
-    AC_MSG_CHECKING([for SSL directory])
-
-    AC_ARG_WITH(ssl-dir, [  --with-ssl-dir=DIR      SSL root directory], with_ssldir=${withval})
-
-    AC_CACHE_VAL(ac_cv_c_ssldir, [
-	# Use the value from --with-ssl-dir, if it was given
-	if test x"${with_ssldir}" != x ; then
-	    if test -d "${with_ssldir}" ; then
-		ac_cv_c_ssldir=${with_ssldir}
-	    else
-		AC_MSG_ERROR([${with_ssldir} is not a valid directory])
-	    fi
-	else
-	    list="`ls -d ${SSL_DIR} 2>/dev/null`"
-	    for i in $list ; do
-		if test -d "$i" ; then
-		    ac_cv_c_ssldir=$i
-		    break
-		fi
-	    done
-	fi
-    ])
-
-    # Print a message based on how we determined the include path
-
-    if test x"${ac_cv_c_ssldir}" = x ; then
-	AC_MSG_ERROR([Could not find SSL directory.
-Please specify its location with --with-ssl-dir])
-    else
-	SSL_DIR=${ac_cv_c_ssldir}
-	AC_MSG_RESULT([${SSL_DIR}])
-    fi
-
-
-    #--------------------------------------------------------------------
     # The OpenSSL and BSAFE SSL-C directory structures differ.
     #--------------------------------------------------------------------
 
     if test -n "${OPENSSL}"; then
-	SSL_LIB_DIR=${SSL_DIR}/lib
-	SSL_INCLUDE_DIR=${SSL_DIR}/include
+	SSL_LIB_DIR=@macports_prefix@/lib/openssl-1.0
+	SSL_INCLUDE_DIR=@macports_prefix@/include/openssl-1.0
 	if test ! -f "${SSL_INCLUDE_DIR}/openssl/opensslv.h"; then
 	    AC_ERROR([bad ssl-dir: cannot find openssl/opensslv.h under ${SSL_INCLUDE_DIR}])
 	fi
