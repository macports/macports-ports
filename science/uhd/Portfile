# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.0
PortGroup           github 1.0
PortGroup           muniversal 1.0
PortGroup           cxx11 1.1

name                uhd
categories          science comms
maintainers         {michaelld @michaelld}
description         USRP Hardware Driver for Ettus Research Products
license             GPL-3+
platforms           darwin

if {${subport} eq ${name}} {

    long_description ${description}: \
Provides the release version, which is typically updated every month or so.

    set base_version "3.10.2.0"
    set spaced_base_version [join [split ${base_version} "."] " "]
    set expanded_base_version [eval "format %03i_%03i_%03i_%03i ${spaced_base_version}"]
    github.setup    EttusResearch uhd ${expanded_base_version} release_
    version         ${base_version}
    revision        1
    conflicts       uhd-devel
    checksums       rmd160 7d6705414d40a55edef4d6d0e40eadae26c12a96 \
                    sha256 6736ae035f19d0859df84798fdb54cdeb252cc76adc618faffca2a2d2a9399bd

    # set the version override string

    set UHD_VERSION_INFO "Release"

    # make uhd compatible with Boost 1.66.0, which removed a
    # deprecated method; use the replacement instead.

    patchfiles-append patch-boost_use_native_handle.diff
    patch.pre_args -p1

    # overload the github livecheck regex to look for versions that
    # are just numbers and '_', no letters (e.g., "3.7.3_rc2").

    livecheck.regex archive/[join ${github.tag_prefix} ""](\[0-9_\]+)${extract.suffix}

}

subport uhd-devel {

    long_description ${description}: \
Provides the UHD GIT maint or master branch, depending on which is more advanced, and is typically updated every few days to week.

    name            uhd-devel
    conflicts       uhd
    github.setup    EttusResearch uhd fc8cd827f6b16b9c8c354a216889e6a9d7f37456
    version         20171222
    checksums       rmd160 a149f5c7a76d7753516cd1b75a135ff78de5966a \
                    sha256 3d41a6dc534029109262508f66b2115c2cfaeb54b7eeb253faf10fe127429856

    # overload the github livecheck URL with the maint branch,
    # when it is more advanced; comment out for master.

    # livecheck.url   ${github.homepage}/commits/maint.atom

    # set the version override string

    set UHD_VERSION_INFO "git-[string range ${github.version} 0 7](${version})"

}

# override the github Portgroup's homepage setting

homepage             http://uhd.ettus.com/

depends_lib-append   port:boost port:ncurses

depends_build-append port:pkgconfig

# do VPATH (out of source tree) build

cmake.out_of_source yes

# remove top-level library path, such that internal libraries are used
# instead of any already-installed ones.

configure.ldflags-delete -L${prefix}/lib

# set last configure argument to the relative path
# to the top-level cmake source

configure.post_args ../${worksrcdir}/host

# explicitly set CMake flags to get MacPorts' curses;
# these are used by some variants, and won't hurt the others.

configure.args-append \
    -DCURSES_CURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_FORM_LIBRARY=${prefix}/lib/libform.dylib \
    -DCURSES_INCLUDE_PATH=${prefix}/include \
    -DCURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_NCURSES_LIBRARY=${prefix}/lib/libncurses.dylib

# override default version string to be MacPorts-specific

configure.args-append \
    -DUHD_GIT_COUNT="MacPorts" \
    -DUHD_GIT_HASH="${UHD_VERSION_INFO}"

# directory to install shared UHD files
# (examples, images, modules, tests, utilities)

configure.args-append \
    -DPKG_LIB_DIR=${prefix}/share/uhd

# directory to install all CMake files; internal appends "uhd"

configure.args-append \
    -DCMAKE_MODULES_DIR=${prefix}/share/cmake

# try to enable C++11 for older compilers too.  for some reason cmake
# doesn't recognize libstdc++ compilers as being c++11 capable, even
# though some are. set this and hope for the best ...

if {${configure.cxx_stdlib} eq "macports-libstdc++" ||
    ${configure.cxx_stdlib} eq "libstdc++"} {
    configure.cxxflags-append -std=gnu++11
}

# per user concensus: enable all variants except +debug and +universal

default_variants +docs +examples +libusb +manual +test +manpages +gpsd

# select Python to use; default to 2.7

variant python27 conflicts python34 python35 python36 description {Build using Python 2.7} {}
variant python34 conflicts python27 python35 python36 description {Build using Python 3.4} {}
variant python35 conflicts python27 python34 python36 description {Build using Python 3.5} {}
variant python36 conflicts python27 python34 python35 description {Build using Python 3.6} {}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    default_variants +python27
}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    ui_error "\n\nYou must select one of the variants +python27 , +python34 , +python35, or +python36 .\n"
    return -code error "Invalid variant selection"
}

set PythonVersionNoDot ""
if {[variant_isset python27]} {
    set PythonVersionNoDot "27"
} elseif {[variant_isset python34]} {
    set PythonVersionNoDot "34"
} elseif {[variant_isset python35]} {
    set PythonVersionNoDot "35"
} else {
    set PythonVersionNoDot "36"
}
set PythonVersionWithDot [join [split ${PythonVersionNoDot} ""] "."]

# required Python

depends_lib-append \
    port:python${PythonVersionNoDot} \
    port:py${PythonVersionNoDot}-requests \
    port:py${PythonVersionNoDot}-mako

# specify the Python version to use

set PythonExe "${prefix}/bin/python${PythonVersionWithDot}"

configure.args-append \
    -DPYTHON_EXECUTABLE=${PythonExe}

# remove this before committing
configure.cxxflags-append -Wall

# after destroot, have uhd fetch its images into the
# destroot area, so that they are also tracked by MacPorts

post-destroot {

    ui_debug "Fetching images:"
    ui_debug "${PythonExe} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --install-location=${destroot}${prefix}/share/uhd/images"
    system "${PythonExe} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --verbose --install-location=${destroot}${prefix}/share/uhd/images"

}

variant test description {enable tests} {
    configure.args-append -DENABLE_TESTS=ON
    test.run yes
}

if {![variant_isset test]} {
    configure.args-append -DENABLE_TESTS=OFF
}

variant examples description {enable examples} {
    configure.args-append -DENABLE_EXAMPLES=ON
}

if {![variant_isset examples]} {
    configure.args-append -DENABLE_EXAMPLES=OFF
}

variant libusb description {enable USB support via libusb version 1.0} {
    depends_lib-append path:lib/libusb-1.0.dylib:libusb
    configure.args-append \
        -DENABLE_USB=ON \
        -DLIBUSB_INCLUDE_DIRS=${prefix}/include/libusb-1.0
}

if {![variant_isset libusb]} {
    configure.args-append -DENABLE_USB=OFF
} else {
    # if using +libusb, enable E300 too
    configure.args-append -DENABLE_E300=ON
}

variant docs description {build documentation} {
    depends_lib-append port:doxygen
    configure.args-append -DENABLE_DOXYGEN=ON
}

if {![variant_isset docs]} {
    configure.args-append -DENABLE_DOXYGEN=OFF
}

variant manual description {build manual} {
    depends_lib-append port:py${PythonVersionNoDot}-docutils
    configure.args-append -DENABLE_MANUAL=ON
}

if {![variant_isset manual]} {
    configure.args-append -DENABLE_MANUAL=OFF
}

variant manpages description {build man pages} {
    depends_run-append port:gzip
    configure.args-append -DENABLE_MAN_PAGES=ON
}

if {![variant_isset manpages]} {
    configure.args-append -DENABLE_MAN_PAGES=OFF
}

variant gpsd description {enable gpsd support} {
    depends_lib-append port:gpsd
    configure.args-append -DENABLE_GPSD=ON \
        -DLIBGPS_LIBRARY=${prefix}/lib/libgps.dylib \
        -DLIBGPS_INCLUDE_DIR=${prefix}/include
}

if {![variant_isset gpsd]} {
    configure.args-append -DENABLE_GPSD=OFF
}
