--- a/host/CMakeLists.txt
+++ b/host/CMakeLists.txt
@@ -284,15 +284,40 @@
 # Choose a version of Python
 ########################################################################
 option(ENABLE_PYTHON3 "Enable Python 3. Default is Python 2" OFF)
-set(BOOST_PYTHON_COMPONENT python)
-set(BOOST_PYTHON_VERSION 2.7)
-if(${ENABLE_PYTHON3})
-    set(BOOST_PYTHON_COMPONENT python3)
-    set(BOOST_PYTHON_VERSION 3)
+
+########################################################################
+# Find Boost Version
+########################################################################
+MESSAGE(STATUS "")
+MESSAGE(STATUS "Determining Boost Version...")
+FIND_PACKAGE(Boost ${BOOST_MIN_VERSION} REQUIRED)
+
+########################################################################
+# Setup Boost : Optional Component(s)
+########################################################################
+
+IF(${Boost_VERSION} VERSION_LESS_EQUAL "106600")
+    IF(${ENABLE_PYTHON3})
+        SET(BOOST_PYTHON_COMPONENT python3)
+        SET(BOOST_PYTHON_VERSION 3)
+    ELSE()
+        SET(BOOST_PYTHON_COMPONENT python)
+        SET(BOOST_PYTHON_VERSION 2.7)
+    ENDIF()
+ELSE()
+    IF(${ENABLE_PYTHON3})
+        SET(BOOST_PYTHON_COMPONENT python@PythonVersionNoDot@)
+        SET(BOOST_PYTHON_VERSION @PythonVersionWithDot@)
+    ELSE()
+        SET(BOOST_PYTHON_COMPONENT python27)
+        SET(BOOST_PYTHON_VERSION 2.7)
+    ENDIF()
 endif()
 
+SET(BOOST_OPTIONAL_COMPONENTS ${BOOST_PYTHON_COMPONENT})
+
 ########################################################################
-# Setup Boost
+# Setup Boost : Required Components
 ########################################################################
 message(STATUS "")
 message(STATUS "Configuring Boost C++ Libraries...")
@@ -307,7 +332,6 @@
     serialization
 )
 
-set(BOOST_OPTIONAL_COMPONENTS ${BOOST_PYTHON_COMPONENT})
 if(MINGW)
     list(APPEND BOOST_REQUIRED_COMPONENTS thread_win32)
 else()
@@ -338,20 +362,25 @@
 message(STATUS "Looking for optional Boost components...")
 find_package(Boost ${BOOST_MIN_VERSION} OPTIONAL_COMPONENTS ${BOOST_OPTIONAL_COMPONENTS})
 
+# NOTE: The next "FIND_PACKAGE" will overwrite certain Boost
+# variables, but we don't care because their info is already saved in
+# various variables that are not overwritten. Also, we want to keep
+# the required Boost libraries separate from the optional ones, which
+# is accompished via separate calls to "FIND_PACKAGE".
+
 message(STATUS "Looking for required Boost components...")
 find_package(Boost ${BOOST_MIN_VERSION} COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
 
+#Check to see if the Python version we're looking for exists
+STRING(TOUPPER ${BOOST_PYTHON_COMPONENT} BOOST_PYTHON_COMPONENT_VAR)
+SET(BOOST_PYTHON_COMPONENT_FOUND "Boost_${BOOST_PYTHON_COMPONENT_VAR}_FOUND")
+SET(BOOST_PYTHON_COMPONENT_LIBRARY "Boost_${BOOST_PYTHON_COMPONENT_VAR}_LIBRARY")
+SET(BOOST_PYTHON_FOUND ${${BOOST_PYTHON_COMPONENT_FOUND}})
+SET(BOOST_PYTHON_LIBRARY ${${BOOST_PYTHON_COMPONENT_LIBRARY}})
+
 # include_directories(${Boost_INCLUDE_DIRS})
 # link_directories(${Boost_LIBRARY_DIRS})
 
-#Check to see if the Python version we're looking for exists
-set(BOOST_PYTHON_FOUND ${Boost_PYTHON_FOUND})
-set(BOOST_PYTHON_LIBRARY ${Boost_PYTHON_LIBRARY})
-if(${ENABLE_PYTHON3})
-    set(BOOST_PYTHON_FOUND ${Boost_PYTHON3_FOUND})
-    set(BOOST_PYTHON_LIBRARY ${Boost_PYTHON3_LIBRARY})
-endif()
-
 message(STATUS "Boost include directories: ${Boost_INCLUDE_DIRS}")
 message(STATUS "Boost library directories: ${Boost_LIBRARY_DIRS}")
 message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
