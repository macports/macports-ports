--- cmake/Modules/FindThrift.cmake.orig
+++ cmake/Modules/FindThrift.cmake
@@ -84,3 +84,9 @@
   THRIFT_LIBRARIES THRIFT_INCLUDE_DIRS
   THRIFT_BIN PYTHON_THRIFT_FOUND THRIFT_FOUND
 )
+
+# set version to be useable by calling script
+
+IF(THRIFT_FOUND)
+  set(THRIFT_VERSION ${PC_THRIFT_VERSION} CACHE INTERNAL "Thrift Version" FORCE)
+ENDIF()
--- gnuradio-runtime/include/gnuradio/CMakeLists.txt.orig
+++ gnuradio-runtime/include/gnuradio/CMakeLists.txt
@@ -72,6 +72,7 @@
   types.h
   sys_pri.h
   unittests.h
+  rpc_shared_ptr_selection.h
   rpccallbackregister_base.h
   rpcmanager_base.h
   rpcmanager.h
--- /dev/null
+++ gnuradio-runtime/include/gnuradio/rpc_shared_ptr_selection.h
@@ -0,0 +1,44 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2019 Free Software Foundation, Inc.
+ *
+ * This file is part of GNU Radio
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef RPC_SHARED_PTR_SELECTION_H
+#define RPC_SHARED_PTR_SELECTION_H
+
+// select a "shared_ptr" type to use: std:: or boost:: . The selection
+// will happen in gnuradio-runtime/lib/controlport/CMakeLists.txt .
+// CTRLPORT_USE_STD_SHARED_PTR will be defined here to 0 or 1.
+
+#if CTRLPORT_USE_STD_SHARED_PTR
+
+// c++11 std::shared_ptr
+#include <memory>
+#define GR_RPC_SHARED_PTR std::shared_ptr
+
+#else /* !CTRLPORT_USE_STD_SHARED_PTR */
+
+// boost::shared_ptr
+#include <gnuradio/types.h>
+#define GR_RPC_SHARED_PTR boost::shared_ptr
+
+#endif /* CTRLPORT_USE_STD_SHARED_PTR */
+
+#endif /* RPC_SHARED_PTR_SELECTION_H */
--- gnuradio-runtime/include/gnuradio/rpcmanager_base.h.orig
+++ gnuradio-runtime/include/gnuradio/rpcmanager_base.h
@@ -23,7 +23,7 @@
 #ifndef RPCMANAGER_BASE_H
 #define RPCMANAGER_BASE_H
 
-#include <boost/shared_ptr.hpp>
+#include <gnuradio/rpc_shared_ptr_selection.h>
 
 class rpcserver_booter_base;
 //class rpcserver_booter_aggregator;
@@ -31,7 +31,7 @@
 class rpcmanager_base
 {
  public:
-  typedef boost::shared_ptr<rpcserver_booter_base> rpcserver_booter_base_sptr;
+  typedef GR_RPC_SHARED_PTR<rpcserver_booter_base> rpcserver_booter_base_sptr;
 
   rpcmanager_base() {;}
   ~rpcmanager_base() {;}
--- gnuradio-runtime/include/gnuradio/rpcserver_base.h.orig
+++ gnuradio-runtime/include/gnuradio/rpcserver_base.h
@@ -23,6 +23,7 @@
 #ifndef RPCSERVER_BASE_H
 #define RPCSERVER_BASE_H
 
+#include <gnuradio/rpc_shared_ptr_selection.h>
 #include <gnuradio/rpccallbackregister_base.h>
 
 class rpcserver_base : public virtual callbackregister_base
@@ -42,7 +43,7 @@
 
   virtual void setCurPrivLevel(const priv_lvl_t priv) { cur_priv = priv; }
 
-  typedef boost::shared_ptr<rpcserver_base> rpcserver_base_sptr;
+  typedef GR_RPC_SHARED_PTR<rpcserver_base> rpcserver_base_sptr;
 protected:
   priv_lvl_t cur_priv;
 
--- gnuradio-runtime/include/gnuradio/rpcserver_booter_aggregator.h.orig
+++ gnuradio-runtime/include/gnuradio/rpcserver_booter_aggregator.h
@@ -24,9 +24,9 @@
 #define RPCSERVER_BOOTER_AGGREGATOR
 
 #include <gnuradio/api.h>
+#include <gnuradio/rpc_shared_ptr_selection.h>
 #include <gnuradio/rpcserver_booter_base.h>
 #include <gnuradio/rpcserver_aggregator.h>
-#include <boost/shared_ptr.hpp>
 #include <string>
 
 class rpcserver_server;
@@ -50,7 +50,7 @@
 
 private:
   std::string d_type;
-  boost::shared_ptr<rpcserver_aggregator> server;
+  GR_RPC_SHARED_PTR<rpcserver_aggregator> server;
 };
 
 #endif /* RPCSERVER_BOOTER_AGGREGATOR */
--- gnuradio-runtime/include/gnuradio/thrift_server_template.h.orig
+++ gnuradio-runtime/include/gnuradio/thrift_server_template.h
@@ -25,6 +25,7 @@
 
 #include <gnuradio/prefs.h>
 #include <gnuradio/logger.h>
+#include <gnuradio/rpc_shared_ptr_selection.h>
 #include <gnuradio/thrift_application_base.h>
 #include <iostream>
 
@@ -50,11 +51,11 @@
   friend class thrift_application_base<TserverBase, TImplClass>;
 
 private:
-  boost::shared_ptr<TserverClass> d_handler;
-  boost::shared_ptr<thrift::TProcessor> d_processor;
-  boost::shared_ptr<thrift::transport::TServerTransport> d_serverTransport;
-  boost::shared_ptr<thrift::transport::TTransportFactory> d_transportFactory;
-  boost::shared_ptr<thrift::protocol::TProtocolFactory> d_protocolFactory;
+  GR_RPC_SHARED_PTR<TserverClass> d_handler;
+  GR_RPC_SHARED_PTR<thrift::TProcessor> d_processor;
+  GR_RPC_SHARED_PTR<thrift::transport::TServerTransport> d_serverTransport;
+  GR_RPC_SHARED_PTR<thrift::transport::TTransportFactory> d_transportFactory;
+  GR_RPC_SHARED_PTR<thrift::protocol::TProtocolFactory> d_protocolFactory;
   /**
    * Custom TransportFactory that allows you to override the default Thrift buffer size
    * of 512 bytes.
@@ -67,10 +68,10 @@
 
     virtual ~TBufferedTransportFactory() {}
 
-    virtual boost::shared_ptr<thrift::transport::TTransport> getTransport(
-        boost::shared_ptr<thrift::transport::TTransport> trans)
+    virtual GR_RPC_SHARED_PTR<thrift::transport::TTransport> getTransport(
+        GR_RPC_SHARED_PTR<thrift::transport::TTransport> trans)
     {
-      return boost::shared_ptr<thrift::transport::TTransport>
+      return GR_RPC_SHARED_PTR<thrift::transport::TTransport>
         (new thrift::transport::TBufferedTransport(trans, bufferSize));
     }
   private:
@@ -126,11 +127,11 @@
   }
   else {
     //std::cout << "Thrift Multi-threaded server : " << d_nthreads << std::endl;
-    boost::shared_ptr<thrift::concurrency::ThreadManager> threadManager
+    GR_RPC_SHARED_PTR<thrift::concurrency::ThreadManager> threadManager
       (thrift::concurrency::ThreadManager::newSimpleThreadManager(nthreads));
 
     threadManager->threadFactory
-      (boost::shared_ptr<thrift::concurrency::PlatformThreadFactory>
+      (GR_RPC_SHARED_PTR<thrift::concurrency::PlatformThreadFactory>
        (new thrift::concurrency::PlatformThreadFactory()));
 
     threadManager->start();
--- gnuradio-runtime/lib/controlport/CMakeLists.txt.orig
+++ gnuradio-runtime/lib/controlport/CMakeLists.txt
@@ -73,6 +73,33 @@
     # yes: thrift is installed; use it as a backend
     MATH(EXPR CTRLPORT_BACKENDS "${CTRLPORT_BACKENDS} + 1")
 
+    # If Thrift was found, make sure the selected c++ standard is
+    # compatible: Thrift <= 0.10 requires using boost:shared_ptr, which
+    # will work with any c++ standard. Thrift >= 0.11.0 requires using
+    # std::shared_ptr, which requires c++11 or later.
+
+    if(${THRIFT_VERSION} VERSION_GREATER_EQUAL 0.11.0)
+        if(CMAKE_CXX_STANDARD)
+            if(${CMAKE_CXX_STANDARD} VERSION_LESS 11)
+                message(WARNING "\nWarning: Thrift version is ${THRIFT_VERSION}, which requires C++11 for building. The current c++ standard to use is C++${CMAKE_CXX_STANDARD}, which will not work with this Thrift version. Trying to set CMake internally to use C++11 ...")
+                set(CMAKE_CXX_STANDARD 11)
+            endif()
+        else()
+            message(WARNING "\nWarning: Thrift version is ${THRIFT_VERSION}, which requires C++11 for building. The c++ standard to use is not currently set. Trying to set CMake internally to use C++11 ...")
+            set(CMAKE_CXX_STANDARD 11)
+        endif()
+    endif()
+
+    # Add a macro for whether to require using std::shared_ptr.
+    # depends on the version of Thrift.
+    if(${THRIFT_VERSION} VERSION_LESS_EQUAL 0.10.0)
+        # old version that uses boost::shared_ptr
+        add_definitions("-DCTRLPORT_USE_STD_SHARED_PTR=0")
+    else()
+        # new version that uses c++11 std::shared_ptr
+        add_definitions("-DCTRLPORT_USE_STD_SHARED_PTR=1")
+    endif()
+
     # Indicate thrift as an installed backend in the cmake summary.
     message(STATUS "Found and enabling Thrift backend to ControlPort")
 
@@ -123,6 +150,20 @@
     # disable using Thrift for ctrlport locally
     set(ENABLE_CTRLPORT_THRIFT NO)
 
+    # building CTRLPORT, but not using Thrift. CTRLPORT does not require
+    # std::shared_ptr, can use either std::shared_ptr or
+    # boost::shared_ptr. If using c++11 or later, choose the former,
+    # else choose the latter.
+    if(CMAKE_CXX_STANDARD)
+        if(${CMAKE_CXX_STANDARD} VERSION_GREATER_EQUAL 11)
+            add_definitions("-DCTRLPORT_USE_STD_SHARED_PTR=1")
+        else()
+            add_definitions("-DCTRLPORT_USE_STD_SHARED_PTR=0")
+        endif()
+    else()
+        add_definitions("-DCTRLPORT_USE_STD_SHARED_PTR=0")
+    endif()
+
 endif(THRIFT_FOUND)
 endif(ENABLE_CTRLPORT_THRIFT)
 
