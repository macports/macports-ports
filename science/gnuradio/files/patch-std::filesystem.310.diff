diff --git cmake/Modules/GnuradioConfig.cmake.in cmake/Modules/GnuradioConfig.cmake.in
index 04cb5e350..0733c4114 100644
--- cmake/Modules/GnuradioConfig.cmake.in
+++ cmake/Modules/GnuradioConfig.cmake.in
@@ -16,6 +16,7 @@ find_dependency(MPLIB)
 set(BOOST_REQUIRED_COMPONENTS
     date_time
     program_options
+    filesystem
     system
     regex
     thread
diff --git cmake/Modules/GrBoost.cmake cmake/Modules/GrBoost.cmake
index afad41717..ff01bb1de 100644
--- cmake/Modules/GrBoost.cmake
+++ cmake/Modules/GrBoost.cmake
@@ -17,6 +17,7 @@ set(__INCLUDED_GR_BOOST_CMAKE TRUE)
 set(BOOST_REQUIRED_COMPONENTS
     date_time
     program_options
+    filesystem
     system
     regex
     thread
diff --git gnuradio-runtime/lib/CMakeLists.txt gnuradio-runtime/lib/CMakeLists.txt
index b502c28fc..1c0cde5d7 100644
--- gnuradio-runtime/lib/CMakeLists.txt
+++ gnuradio-runtime/lib/CMakeLists.txt
@@ -132,6 +132,7 @@ target_link_libraries(gnuradio-runtime PUBLIC
   gnuradio-pmt
   Volk::volk
   Boost::program_options
+  Boost::filesystem
   Boost::thread
   spdlog::spdlog
   MPLib::mplib
@@ -168,9 +169,6 @@ target_compile_features(gnuradio-runtime PUBLIC cxx_std_17)
 
 target_compile_definitions(gnuradio-runtime PUBLIC ${MPLIB_DEFINITIONS})
 
-# constants.cc includes boost::dll headers, force them to use std::filesystem
-target_compile_definitions(gnuradio-runtime PRIVATE BOOST_DLL_USE_STD_FS)
-
 if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.16.0")
   target_precompile_headers(
     gnuradio-runtime
diff --git gnuradio-runtime/lib/constants.cc.in gnuradio-runtime/lib/constants.cc.in
index 4d8e240e2..8cbf6eacf 100644
--- gnuradio-runtime/lib/constants.cc.in
+++ gnuradio-runtime/lib/constants.cc.in
@@ -15,9 +15,9 @@
 #include <gnuradio/constants.h>
 #include <boost/dll/runtime_symbol_info.hpp>
 #include <cstdlib>
-#include <filesystem>
+#include <boost/filesystem/path.hpp>
 
-using std::filesystem::path;
+using boost::filesystem::path;
 
 namespace gr {
 const std::string prefix()
@@ -30,7 +30,7 @@ const std::string prefix()
     path prefix_rel_lib = "@prefix_relative_to_lib@";
     path gr_runtime_lib_path = boost::dll::this_line_location().string();
     // Canonize before decomposing path so result is reliable and without symlinks
-    path canonical_lib_path = std::filesystem::canonical(gr_runtime_lib_path);
+    path canonical_lib_path = boost::filesystem::canonical(gr_runtime_lib_path);
     path prefix_path = canonical_lib_path.parent_path() / prefix_rel_lib;
     return prefix_path.lexically_normal().string();
 }
diff --git gnuradio-runtime/lib/prefs.cc gnuradio-runtime/lib/prefs.cc
index a450644dd..0456c44bd 100644
--- gnuradio-runtime/lib/prefs.cc
+++ gnuradio-runtime/lib/prefs.cc
@@ -17,12 +17,15 @@
 #include <gnuradio/sys_paths.h>
 
 #include <algorithm>
-#include <filesystem>
 #include <fstream>
 #include <iostream>
 
+#include <boost/system/error_code.hpp>
+#include <boost/filesystem/fstream.hpp>
+#include <boost/filesystem/operations.hpp>
+#include <boost/filesystem/path.hpp>
 #include <boost/program_options.hpp>
-namespace fs = std::filesystem;
+namespace fs = boost::filesystem;
 namespace po = boost::program_options;
 typedef std::ifstream::char_type char_t;
 
@@ -142,16 +145,16 @@ void prefs::save()
 
     // Write temp file.
     const fs::path tmp = fs::path(gr::userconf_path()) / "config.conf.tmp";
-    std::ofstream fout(tmp);
+    fs::ofstream fout(tmp);
     fout << conf;
     fout.close();
     if (!fout.good()) {
         const std::string write_err = strerror(errno);
         {
-            std::error_code err;
+            boost::system::error_code err;
             fs::remove(tmp, err);
             if (err) {
-                std::cerr << "Failed to remove temp file: " << err << std::endl;
+                std::cerr << "Failed to remove temp file: " << err.message() << std::endl;
             }
         }
         throw std::runtime_error("failed to write updated config: " + write_err);
diff --git gnuradio-runtime/lib/sys_paths.cc gnuradio-runtime/lib/sys_paths.cc
index 06333ffc6..1c0464cd3 100644
--- gnuradio-runtime/lib/sys_paths.cc
+++ gnuradio-runtime/lib/sys_paths.cc
@@ -9,7 +9,7 @@
 
 #include <gnuradio/sys_paths.h>
 #include <cstdlib> //getenv
-#include <filesystem>
+#include <boost/filesystem/path.hpp>
 
 namespace gr {
 
@@ -56,7 +56,7 @@ std::string __userconf_path()
 
     // First determine if there is an environment variable specifying the prefs path
     path = getenv("GR_PREFS_PATH");
-    std::filesystem::path p;
+    boost::filesystem::path p;
     if (path) {
         p = path;
     } else {
diff --git gnuradio-runtime/lib/vmcircbuf_prefs.cc gnuradio-runtime/lib/vmcircbuf_prefs.cc
index 937b09ba2..56e84c1e6 100644
--- gnuradio-runtime/lib/vmcircbuf_prefs.cc
+++ gnuradio-runtime/lib/vmcircbuf_prefs.cc
@@ -21,8 +21,9 @@
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
-#include <filesystem>
-namespace fs = std::filesystem;
+#include <boost/filesystem/operations.hpp>
+#include <boost/filesystem/path.hpp>
+namespace fs = boost::filesystem;
 
 namespace gr {
 
diff --git gr-fec/lib/ldpc_decoder.cc gr-fec/lib/ldpc_decoder.cc
index 4af94d7f8..16342b0f1 100644
--- gr-fec/lib/ldpc_decoder.cc
+++ gr-fec/lib/ldpc_decoder.cc
@@ -16,10 +16,11 @@
 #include <cmath>
 #include <cstdio>
 #include <cstring> // for memcpy
-#include <filesystem>
+
 #include <sstream>
 #include <vector>
 
+#include <boost/filesystem/operations.hpp>
 
 namespace gr {
 namespace fec {
@@ -33,7 +34,7 @@ ldpc_decoder::make(std::string alist_file, float sigma, int max_iterations)
 ldpc_decoder::ldpc_decoder(std::string alist_file, float sigma, int max_iterations)
     : generic_decoder("ldpc_decoder")
 {
-    if (!std::filesystem::exists(alist_file))
+    if (!boost::filesystem::exists(alist_file))
         throw std::runtime_error("Bad AList file name!");
 
     d_list.read(alist_file.c_str());
diff --git gr-fec/lib/ldpc_encoder_impl.cc gr-fec/lib/ldpc_encoder_impl.cc
index 0ac925b2d..ad70c9dfa 100644
--- gr-fec/lib/ldpc_encoder_impl.cc
+++ gr-fec/lib/ldpc_encoder_impl.cc
@@ -13,9 +13,10 @@
 #include <algorithm> // for std::reverse
 #include <cstdio>
 #include <cstring> // for memcpy
-#include <filesystem>
 #include <sstream>
 
+#include <boost/filesystem/operations.hpp>
+
 namespace gr {
 namespace fec {
 
@@ -26,7 +27,7 @@ generic_encoder::sptr ldpc_encoder::make(std::string alist_file)
 
 ldpc_encoder_impl::ldpc_encoder_impl(std::string alist_file)
 {
-    if (!std::filesystem::exists(alist_file)) {
+    if (!boost::filesystem::exists(alist_file)) {
         throw std::runtime_error("Bad AList file name!");
     }
 
diff --git gr-fft/lib/fft.cc gr-fft/lib/fft.cc
index cd93bf858..e32665064 100644
--- gr-fft/lib/fft.cc
+++ gr-fft/lib/fft.cc
@@ -32,11 +32,12 @@ static int my_fftw_read_char(void* f) { return fgetc((FILE*)f); }
 #define O_NONBLOCK 0
 #endif //_WIN32
 
-#include <filesystem>
 #include <stdexcept>
+#include <boost/filesystem/operations.hpp>
+#include <boost/filesystem/path.hpp>
 
 #include <boost/interprocess/sync/file_lock.hpp>
-namespace fs = std::filesystem;
+namespace fs = boost::filesystem;
 
 namespace gr {
 namespace fft {
