--- gr-blocks/python/blocks/qa_cpp_py_binding.py.orig
+++ gr-blocks/python/blocks/qa_cpp_py_binding.py
@@ -155,11 +155,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
--- gr-blocks/python/blocks/qa_cpp_py_binding_set.py.orig
+++ gr-blocks/python/blocks/qa_cpp_py_binding_set.py
@@ -122,11 +122,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         self.tb.start()
--- gr-blocks/python/blocks/qa_ctrlport_probes.py.orig
+++ gr-blocks/python/blocks/qa_ctrlport_probes.py
@@ -60,11 +60,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
@@ -101,11 +100,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
@@ -141,11 +139,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
@@ -182,11 +179,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
@@ -222,11 +218,10 @@
         ep = gr.rpcmanager_get().endpoints()[0]
         hostname = re.search(r"-h (\S+|\d+\.\d+\.\d+\.\d+)", ep).group(1)
         portnum = re.search(r"-p (\d+)", ep).group(1)
-        argv = [None, hostname, portnum]
 
         # Initialize a simple ControlPort client from endpoint
         from gnuradio.ctrlport.GNURadioControlPortClient import GNURadioControlPortClient
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
         radio = radiosys.client
 
         # Get all exported knobs
--- gr-blocks/examples/ctrlport/simple_copy_controller.py.orig
+++ gr-blocks/examples/ctrlport/simple_copy_controller.py
@@ -13,8 +13,7 @@
 hostname = args[1]
 portnum = int(args[2])
 msg = args[3].lower()
-argv = [None, hostname, portnum]
-radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+radiosys = GNURadioControlPortClient(hostname, portnum, 'thrift')
 radio = radiosys.client
 
 if(msg == 'true'):
--- gr-blocks/examples/ctrlport/usrp_sink_controller.py.orig
+++ gr-blocks/examples/ctrlport/usrp_sink_controller.py
@@ -30,8 +30,7 @@
 else:
     val = pmt.from_double(float(val))
 
-argv = [None, args.host, args.port]
-radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+radiosys = GNURadioControlPortClient(args.host, args.port, 'thrift')
 radio = radiosys.client
 
 radio.postMessage(args.alias, port, pmt.cons(pmt.intern(cmd), val))
--- gr-blocks/examples/ctrlport/usrp_source_controller.py.orig
+++ gr-blocks/examples/ctrlport/usrp_source_controller.py
@@ -30,8 +30,7 @@
 else:
     val = pmt.from_double(float(val))
 
-argv = [None, args.host, args.port]
-radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+radiosys = GNURadioControlPortClient(args.host, args.port, 'thrift')
 radio = radiosys.client
 
 radio.postMessage(args.alias, port, pmt.cons(pmt.intern(cmd), val))
--- gr-dtv/examples/atsc_ctrlport_monitor.py.orig
+++ gr-dtv/examples/atsc_ctrlport_monitor.py
@@ -45,8 +45,7 @@
 
 class atsc_ctrlport_monitor(object):
     def __init__(self, host, port):
-        argv = [None, host, port]
-        radiosys = GNURadioControlPortClient(argv=argv, rpcmethod='thrift')
+        radiosys = GNURadioControlPortClient(host, port, 'thrift')
         self.radio = radiosys.client
         print(self.radio)
 
