--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -56,29 +56,27 @@
     SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O2")
 ENDIF()
 
-# Set C/C++ standard for all targets
-# NOTE: Starting with cmake v3.1 this should be used:
-# set(CMAKE_C_STANDARD 90)
-# set(CMAKE_CXX_STANDARD 98)
-
-IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++98")
-ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++98")
-ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++98")
-ELSE()
-    message(warning "C++ standard could not be set because compiler is not GNU, Clang or MSVC.")
-ENDIF()
+# Configure C++ standard if not externally specified
+# (will actually be set after CppUnit check below)
+if(NOT CMAKE_CXX_STANDARD)
+    SET(CMAKE_CXX_STANDARD 98)
+endif()
 
-IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
-    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
-ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
-    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
-ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
-    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
-ELSE()
-    message(warning "C standard could not be set because compiler is not GNU, Clang or MSVC.")
+# Configure C standard if not externally specified
+if(NOT CMAKE_C_STANDARD)
+    IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
+        SET(CMAKE_C_STANDARD 99)
+    ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
+        SET(CMAKE_C_STANDARD 99)
+    ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
+        SET(CMAKE_C_STANDARD 11)
+    ELSE()
+        # default
+        SET(CMAKE_C_STANDARD 90)
+    ENDIF()
+endif()
+IF(CMAKE_VERSION VERSION_LESS "3.1")
+    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c${CMAKE_C_STANDARD}")
 ENDIF()
 
 # Set cmake policies.
@@ -306,6 +304,27 @@
     CPPUNIT_FOUND
 )
 
+# check if CppUnit version is 1.14.0 or greater; requires c++11 ...
+
+if(CPPUNIT_FOUND AND NOT "${CPPUNIT_VERSION}" VERSION_LESS "1.14.0")
+    message(WARNING "\nWarning: CppUnit version is ${CPPUNIT_VERSION} which requires C++11 for building. Trying to set CMake internally to use C++11 ...")
+    SET(CMAKE_CXX_STANDARD 11)
+endif()
+
+# set actual C++ standard to use, if cmake version is < 3.1
+
+if(CMAKE_VERSION VERSION_LESS "3.1")
+    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++${CMAKE_CXX_STANDARD}")
+    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++${CMAKE_CXX_STANDARD}")
+    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++${CMAKE_CXX_STANDARD}")
+    else()
+        message(WARNING "\nC++ standard could not be set because compiler is not GNU, Clang or MSVC.")
+    endif()
+endif()
+
 ########################################################################
 # Add optional dlls specified in DLL_PATHS
 ########################################################################
