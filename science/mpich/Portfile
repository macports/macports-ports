# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           select 1.0
PortGroup           compilers 1.0
PortGroup           muniversal 1.0

# make sure to keep in sync with mpi-doc
name                mpich
version             3.4
# Note multiple revisions in Portfile (for various sub-ports to reduce builds)
revision            0

license             BSD
categories          science parallel net
platforms           darwin
maintainers         {eborisch @eborisch} \
                    openmaintainer

description         Message Passing Interface (MPI) Library

long_description    MPICH is a high-performance and widely portable\
                    implementation of the Message Passing Interface (MPI) \
                    standard (MPI-1, MPI-2 and MPI-3). The goals of MPICH are:\
                    (1) to provide an MPI implementation that efficiently\
                    supports different computation and communication platforms\
                    including commodity clusters (desktop systems,\
                    shared-memory systems, multicore architectures), high-speed\
                    networks (10 Gigabit Ethernet, InfiniBand, Myrinet,\
                    Quadrics) and proprietary high-end computing systems (Blue\
                    Gene, Cray) and (2) to enable cutting-edge research in MPI\
                    through an easy-to-extend modular framework for other\
                    derived implementations.

homepage            https://www.mpich.org/
master_sites        ${homepage}static/downloads/${version}

checksums \
    rmd160  1407ba488c3be54acfa133cb6b2aefa115183e3c \
    sha256  ce5e238f0c3c13ab94a64936060cff9964225e3af99df1ea11b130f20036c24b \
    size    30716482

livecheck.type      regex
livecheck.regex     {href=.([0-9.p]+)/}
livecheck.url       ${homepage}/static/downloads/

if {[string first "-devel" $subport] > 0} {
    # Delete all traces of -devel Janurary 2022
    PortGroup       obsolete 1.0

    replaced_by     [regsub -- "-devel" $subport ""]
}

# As MPICH creates compiler wrappers, there are lots of
# variants for what compiler the user would like to wrap.

# Please update the mpi portgroup whenever clist is changed.

# Sub-ports names and corresponding configure.compiler value
array set clist {
    clang   {clang}
    clang50 {macports-clang-5.0}
    gcc5    {macports-gcc-5}
    gcc6    {macports-gcc-6}
    gcc7    {macports-gcc-7}
    gcc8    {macports-gcc-8}
}
# gcc 4.x not supported on mac OS 10.12 (Darwin16) or newer
if { ${os.major} < 16 } {
    # Only provide gcc 4.9, as older versions do not build.
    set clist(gcc49)   {macports-gcc-4.9}
}
# gcc 9+ only available on macOS10.7 (Darwin11) and newer
if { ${os.major} > 10 } {
    set clist(gcc9)    {macports-gcc-9}
    set clist(gcc10)    {macports-gcc-10}
}
# clang 6+ only available on macOS10.9 (Darwin13) and newer
if { ${os.major} > 12 } {
    set clist(clang60) {macports-clang-6.0}
    set clist(clang70) {macports-clang-7.0}
    set clist(clang80) {macports-clang-8.0}
    set clist(clang90) {macports-clang-9.0}
    set clist(clang10) {macports-clang-10}
}

foreach key [array name clist] {
    subport ${name}-${key} {}
    subport ${name}-devel-${key} {}
}
subport ${name}-default {}
subport ${name}-devel {}
subport ${name}-devel-default {}

if {${name} ne ${subport} && [string first "-devel" $subport] < 0} {
    set key                  [lindex [split ${subport} -] end]
    if {${key} eq "default"} {
        # make every attempt to avoid MacPorts compilers
        if {${os.major} == 10} {
            configure.cxx_stdlib libstdc++
        }
        set compiler         "default"
        set compiler_version [compiler.command_line_tools_version ${configure.compiler}]
    } else {
        set compiler         [lindex [split $clist($key) -] 1]
        set compiler_version [lindex [split $clist($key) -] 2]
    }
    set fail no
    if {${compiler} eq "gcc"} {
        if { ${os.major} >= 16 && [vercmp ${compiler_version} 5] < 0 } {
            # gcc 4.x not supported on mac OS 10.12 (Darwin16) or newer
            set fail yes
        }
        if { ${os.major} < 11 && [vercmp ${compiler_version} 9] >= 0 } {
            set fail yes
        }
        if { ${os.major} < 10 && [vercmp ${compiler_version} 8] >= 0 } {
            set fail yes
        }
    }
    if {${compiler} eq "clang"} {
        if { ${os.major} < 10 && [vercmp ${compiler_version} 8] >= 0 } {
            set fail yes
        }
        if { ${os.major} <  9 && [vercmp ${compiler_version} 5] >= 0 } {
            set fail yes
        }
    }
    if {${compiler} eq "default" && ${configure.compiler} eq "clang"} {
        if {[vercmp 421.11.66 ${compiler_version}] <= 0 && [vercmp ${compiler_version} 425.0.24] < 0} {
            # Linker for Apple clang version 421.11.66 segfaults
            # See https://trac.macports.org/ticket/36654#comment:9
            set fail yes
        }
    }
    if {${fail}} {
        known_fail yes
        pre-fetch {
            ui_error "${subport} fails on OS ${os.major} with compiler ${compiler}, version ${compiler_version}"
            return -code error "incompatible macOS version"
        }
    }
}

configure.args      --disable-dependency-tracking    \
                    --disable-fortran                \
                    --disable-silent-rules           \
                    --enable-base-cache              \
                    --enable-cache                   \
                    --enable-cxx                     \
                    --enable-fast=O2                 \
                    --enable-shared                  \
                    --enable-versioning              \
                    --with-pm=hydra                  \
                    --with-thread-package=posix      \
                    "F90FLAGS='' F90=''"

variant threads description {Build with full thread support} {
    configure.args-append   --enable-threads=multiple
}

platform darwin {
    configure.args-append   --enable-timer-type=mach_absolute_time

    if {${os.major} < 12} {
        # MPICH requires OpenCL version 1.2, which was not introduced until OS X Mountain Lion
        configure.args-append --enable-opencl=no
    }

    if {${name} ne ${subport}} {
        patchfiles-append       patch-no_qmkshrobj.diff
    }
}

# We're making compiler wrappers here... don't default to -O2 for wrappers.
# Actual library code is compiled with -O2 via --enable-fast=O2 configure arg
configure.optflags-delete   -O2 -Os
configure.cppflags-delete   -I${prefix}/include
configure.ldflags-delete    -L${prefix}/lib

if {${name} ne ${subport} && [string first "-devel" $subport] < 0} {
    set cname                   [lindex [split ${subport} -] end]
    if {${cname} == "default"} {
        set cname                   mp
    }

    set all_name [split ${subport} -]
    conflicts-append mpich-devel-[join [lrange ${all_name} 1 end] -]

    # As we are making wrappers, we depend on the compilers to exist. The
    # compilers group already does this for gcc, but not clangXX.  This adds
    # clang-X.X to the depends_lib (not just depends_build)
    if {[regexp {clang[5-9]\d} ${cname}] == 1} {
        set cport_name          [regsub {(\d)(\d)} ${cname} {-\1.\2}]
        depends_lib-append      port:${cport_name}
    } elseif {[regexp {clang\d\d} ${cname}] == 1} {
        set cport_name          [regsub {(\d)(\d)} ${cname} {-\1\2}]
        depends_lib-append      port:${cport_name}
    }

    if {[lsearch -exact {mp llvm clang} ${cname}] != -1} {
        # Force local builds with Xcode-provided compilers (avoid issues with
        # different Xcode versions on buildbot and user machines)
        archive_sites
    }

    depends_build-append        port:pkgconfig
    depends_lib-append          port:libxml2
    depends_run-append          port:mpi_select
    select.group                mpi
    select.file                 ${filespath}/${name}-${cname}
    depends_run-append      port:mpi-doc

    # Prevent "ccache" and "distcc" from being baked into the wrapper scripts.
    configure.ccache            no
    configure.distcc            no

    # don't need to livecheck all the subports, just the port
    livecheck.type              none

    if {[string first "-default" $subport] < 0} {
        configure.compiler      [lindex $clist($cname) 0]
        append long_description "\\n\\nTHIS SUBPORT WRAPS ${cname}'s C/C++"
    } else {
        append long_description \
"\\n\\nTHIS SUBPORT WRAPS MACPORTS' DEFAULT COMPILER FOR C/C++"
    }

    configure.args-append   \
        --libdir=${prefix}/lib/${name}-${cname} \
        --sysconfdir=${prefix}/etc/${name}-${cname} \
        --program-suffix=-${name}-${cname} \
        --includedir=${prefix}/include/${name}-${cname}

    # avoid dependency on port:bash
    configure.env-append \
        BASH_SHELL=/bin/bash

    # setting xFLAGS resulting in mpicc, etc. always using these flags
    # setting MPICHLIB_xFLAGS only uses them for building the library
    foreach env_var {CFLAGS CPPFLAGS CXXFLAGS FFLAGS FCFLAGS} {
        configure.args-append \
            MPICHLIB_${env_var}=\"\$${env_var}\" \
            ${env_var}=""
    }

    # remove LDFLAGS mpicc, etc. and pkgconfig files
    post-build {
        if {[variant_isset universal]} {
            set archs ${configure.universal_archs}
        } else {
            set archs ${build_arch}
        }
        foreach arch ${archs} {
            if {[variant_isset universal]} {
                set dir ${worksrcpath}-${arch}
            } else {
                set dir ${worksrcpath}
            }
            foreach f [glob \
                           ${dir}/src/env/*.bash \
                           ${dir}/src/env/*.sh \
                           ${dir}/src/packaging/pkgconfig/*.pc] {
                reinplace \
                    "s| ${configure.ldflags}||g" \
                    ${f}
                reinplace \
                    "s| -arch ${arch}||g" \
                    ${f}
            }
        }
    }

    # Fortran headers do not understand preprocessors commands like __LP64__
    # Fortran mod files can not be merged for different architectures
    # create a architecture specific folder for the non-build_arch architecture
    if {[variant_isset universal]} {
        patchfiles-append patch-universal_fortran.diff
        post-patch {
            if {${build_arch} eq "ppc" || ${build_arch} eq "ppc64"} {
                set arch32 "ppc"
                set arch64 "ppc64"
            } else {
                set arch32 "i386"
                set arch64 "x86_64"
            }
            reinplace \
                "s|__MACPORTS_32_BIT_ARCH__|${arch32}|g" \
                ${worksrcpath}/src/env/mpifort.bash.in
            reinplace \
                "s|__MACPORTS_64_BIT_ARCH__|${arch64}|g" \
                ${worksrcpath}/src/env/mpifort.bash.in
            reinplace \
                "s|__MACPORTS_BUILD_ARCH__|${build_arch}|g" \
                ${worksrcpath}/src/env/mpifort.bash.in
        }
        merger-post-destroot {
            foreach arch ${configure.universal_archs} {
                set incdir  ${destroot}-${arch}${prefix}/include/${name}-${cname}
                if {${arch} ne ${build_arch}} {
                    set archinc ${incdir}/${arch}
                    xinstall -d -m 0755 ${archinc}
                    foreach f [glob -nocomplain -directory ${incdir} *.mod mpif.h] {
                        move ${f} ${archinc}
                    }
                }
            }
        }
    }

    post-destroot {
        # This version doesn't supply doc/manpages
        if {[file isdirectory ${destroot}${prefix}/share/man]} {
            delete ${destroot}${prefix}/share/man
        }
        if {[file isdirectory ${destroot}${prefix}/share/doc]} {
            delete ${destroot}${prefix}/share/doc
        }
    }

    if { [string first gcc $cname] == 0 } {
        append long_description " AND FORTRAN COMPILERS"
        configure.args-replace  --disable-fortran \
                                --enable-fortran
        select.file             ${filespath}/${name}-${cname}-fortran
        variant fortran description {
            Stub : fortran always enabled for gcc-based version
        } {}
        default_variants-append     +fortran

        if {${cname} eq "gcc10"} {
            # see https://lists.mpich.org/pipermail/discuss/2020-January/005862.html
            # see https://github.com/pmodels/mpich/issues/4300
            # see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91556
            configure.fflags-append -fallow-argument-mismatch
        }

        # GCC C++ always uses libstdc++
        # see https://trac.macports.org/ticket/59185
        configure.cxx_stdlib libstdc++
    } else {
        append long_description " (AND THE FORTRAN COMPILER SELECTED BY THE VARIANT, IF ANY)"

        compilers.choose   fc f77 f90
        compilers.setup    default_fortran

        if {[fortran_variant_isset]} {
            configure.args-replace  --disable-fortran \
                                    --enable-fortran
            select.file             ${filespath}/${name}-${cname}-fortran

            # Ask the portgroup for the correct dependency - the Fortran
            # variants gccX and g95 match the name of the ports but
            # gccdevel does not.
            depends_lib-append      [fortran_variant_depends]

            if {[variant_isset g95]} {
                configure.args-append lt_cv_ld_force_load=no
            }

            if {[variant_isset gcc10]} {
                # see https://lists.mpich.org/pipermail/discuss/2020-January/005862.html
                # see https://github.com/pmodels/mpich/issues/4300
                # see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91556
                configure.fflags-append -fallow-argument-mismatch
            }
        }
    }

notes "

+--- MPICH Usage note ----
| The mpicc wrapper (and friends) are installed as:
|
|   ${prefix}/bin/mpicc-${name}-${cname} (likewise mpicxx, ...)
|
| To make ${subport}'s wrappers the default (what you get when
| you execute 'mpicc' etc.) please run:
|
|   sudo port select --set mpi [file tail ${select.file}]
+-------------------------

"

    if {[variant_isset gcc48] ||
        [variant_isset gcc49] ||
        [variant_isset gcc5] ||
        [variant_isset gcc6] ||
        [variant_isset gcc7] ||
        [variant_isset gcc8] ||
        [variant_isset gcc9] } {
        set DEFAULT_MSG "
NOTE: Default fortran changed to +gcc10; consider switching variants to enable
pre-built packages for ${subport} by running:
\"sudo port clean ${subport} && sudo port upgrade ${subport} +gcc10 -[gcc_variant_name]\"
"
        notes-append    ${DEFAULT_MSG}

        pre-fetch {
            ui_msg ${DEFAULT_MSG}
            system "sleep 3"
            ui_msg "Continuing with local build."
        }
    }

    variant gforker description {
        Use gforker process manager instead of the default hydra
    } {
        configure.args-replace  --with-pm=hydra \
                                --with-pm=gforker
    }

    variant tuned description {Build with more optimizations} {
        configure.args-replace  --enable-fast=O2 \
                                --enable-fast=all
        configure.args-append   MPICHLIB_CFLAGS='-fomit-frame-pointer -O2'
    }
} else {
    depends_lib-append  port:${name}-default
    conflicts-append    mpich-devel
    distfiles
    patchfiles
    supported_archs         noarch
    use_configure           no
    build {}
    destroot {
        set docdir          ${destroot}${prefix}/share/doc/${name}
        xinstall -d ${docdir}
        system "echo $name is a stub port > ${docdir}/README"
    }
}
