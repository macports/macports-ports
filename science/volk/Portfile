# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.0
PortGroup           github 1.0
PortGroup           muniversal 1.0

# although Volk does not technically require C++11, forcing the use of
# modern compilers reduces build failures. Also, it will require C++11
# in the future, so let's just get on the bandwagon early.
PortGroup           cxx11 1.1

name                volk
categories          science comms
maintainers         {michaelld @michaelld}
description         Vector-Optimized Library of Kernels
long_description    VOLK is the Vector-Optimized Library of Kernels, a library that contains kernels of hand-written single-instruction multiple data (SIMD) code for different mathematical operations, providing portable SIMD code that is optimized for a variety of platforms.
license             GPL-3
platforms           darwin

if {${name} eq ${subport}} {

    github.setup    gnuradio volk 1.4 v
    revision        1
    checksums       \
        rmd160 cf9e7a2a6d981871cc3321135f2f97fa872da94f \
        sha256 369dffa2ad16c0439f72bdb6d948d91a66cc274388e3bb343e1c19348dcb0ead \
        size   233428

    # bump the epoch because I moved the version from 20150707 to 1.0.1
    epoch           1
    long_description ${long_description} ${subport} \
provides the release version, which is typically updated every month or so.
    conflicts       volk-devel

}

subport volk-devel {

    github.setup    gnuradio volk 3f3c91ee3ce51a31d8c23398124df74d3aa42955
    version         20180626
    checksums       \
        rmd160 74bb06c06781a9a5866511de736f625e39a68a35 \
        sha256 9dd176a0577e14c0f001b18b9dc321004aa09a4a4f52f51d947ecf0e2933312f \
        size   235242

    conflicts       volk
    long_description ${long_description} ${subport} \
provides the Volk GIT maint or master branch, depending on which is more advanced, and is typically updated every few days to week.

}

# fix include_directories ordering so-as to pick up project
# headers before external headers. allows for in-place building
# while a prior version is already installed.
patchfiles-append patch-CMakeLists.txt.diff
patch.pre_args -p1

# fix naming of *Clang compiler to just "Clang" for internal use
patchfiles-append patch-fix-clang.diff

# fix C++11 for internal use only
patchfiles-append patch-fix-cxx11.diff

# override githib PortGroup homepage setting

homepage            http://libvolk.org/

depends_build-append port:pkgconfig
depends_lib-append   port:boost

# do VPATH (out of source tree) build

cmake.out_of_source yes

# remove top-level library path, such that internal libraries are used
# instead of any already-installed ones.

configure.ldflags-delete -L${prefix}/lib

# specify the Python dependencies; these are checked for at configure,
# then used for building, but not at runtime.

# select Python to use; default to 2.7

variant python27 conflicts python34 python35 python36 description {Build using Python 2.7} {}
variant python34 conflicts python27 python35 python36 description {Build using Python 3.4} {}
variant python35 conflicts python27 python34 python36 description {Build using Python 3.5} {}
variant python36 conflicts python27 python34 python35 description {Build using Python 3.6} {}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    default_variants +python27
}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    ui_error "\n\nYou must select one of the variants +python27 , +python34 , +python35, or +python36 .\n"
    return -code error "Invalid variant selection"
}

set PythonVersionNoDot ""
if {[variant_isset python27]} {
    set PythonVersionNoDot "27"
} elseif {[variant_isset python34]} {
    set PythonVersionNoDot "34"
} elseif {[variant_isset python35]} {
    set PythonVersionNoDot "35"
} else {
    set PythonVersionNoDot "36"
}
set PythonVersionWithDot [join [split ${PythonVersionNoDot} ""] "."]

# required Python

depends_lib-append \
    port:python${PythonVersionNoDot}

depends_build-append \
    port:py${PythonVersionNoDot}-six \
    port:py${PythonVersionNoDot}-mako

# override default version string to be MacPorts-specific
# git / "devel" only for now

set VOLK_VERSION_INFO "git-[string range ${github.version} 0 7](${version})"

configure.args-append \
    -DVOLK_GIT_COUNT="MacPorts" \
    -DVOLK_GIT_HASH="${VOLK_VERSION_INFO}"

# install CMake files into this directory

configure.args-append \
    -DCMAKE_MODULES_DIR=${prefix}/share/cmake

# specify the Python version to use

configure.args-append \
    -DPYTHON_EXECUTABLE=${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/bin/python${PythonVersionWithDot} \
    -DVOLK_PYTHON_DIR=${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/lib/python${PythonVersionWithDot}/site-packages

default_variants +docs +orc

variant docs description "Install Volk documentation" {

    depends_build-append \
        port:doxygen

    configure.args-append \
        -DDOXYGEN_EXECUTABLE=${prefix}/bin/doxygen
}

if {![variant_isset docs]} {

    configure.args-append \
        -DDOXYGEN_EXECUTABLE=

}

variant orc description "Install Volk with support for ORC" {

    depends_lib-append \
        port:orc

    configure.args-append \
        -DORCC_EXECUTABLE=${prefix}/bin/orcc \
        -DORC_INCLUDE_DIR=${prefix}/include/orc-0.4 \
        -DORC_LIBRARY_DIR=${prefix}/lib

}

if {![variant_isset orc]} {

    configure.args-append \
        -DORCC_EXECUTABLE= \
        -DORC_INCLUDE_DIR= \
        -DORC_LIBRARY_DIR=

}

pre-extract {

    # tell the user to force deactivate gnuradio-(devel,next) if one
    # is active and version is before Volk was split off (20150329 for
    # devel and next). gnuradio 3.7.6.2+ provides this split, too (as
    # of 2015-04-12).

    set not_found [catch {set installed [lindex [registry_active gnuradio-devel] 0]}]
    if {${not_found}} {
        set not_found [catch {set installed [lindex [registry_active gnuradio-next] 0]}]
    }
    if {${not_found}} {
        set not_found [catch {set installed [lindex [registry_active gnuradio] 0]}]
    }
    if (!${not_found}) {

        set _portname [lindex ${installed} 0]
        set _version [lindex ${installed} 1]

        if {${_portname} eq "gnuradio"} {
            set _vcmp [vercmp ${_version} 3.7.6.2]
        } else {
            set _vcmp [vercmp ${_version} 20150329]
        }

        if {${_vcmp} < 0} {

            ui_msg "\nVolk is currently installed by the port '${_portname}'."
            ui_msg "Use the command"
            ui_msg "  sudo port -f deactivate ${_portname}"
            ui_msg "to deactivate the port owning volk, then proceed with"
            ui_msg "  sudo port upgrade ${_portname}\n"
            return -code error "Port Needs Deactivation"

        }
    }
}
