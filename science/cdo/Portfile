# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   mpi 1.0

name                        cdo
version                     2.0.5
revision                    1
platforms                   darwin
maintainers                 {takeshi @tenomoto} openmaintainer
license                     GPL-2
categories                  science
description                 Climate Data Operators
homepage                    https://code.mpimet.mpg.de/projects/cdo
master_sites                https://code.mpimet.mpg.de/attachments/download/26823

checksums           rmd160  c2b6c60cba15c37dca3c4573d6734abbb0c74d96 \
                    sha256  edeebbf1c3b1a1f0c642dae6bc8c7624e0c54babe461064dc5c7daca4a5b0dce \
                    size    11791780

long_description \
    CDO is a collection of command line Operators               \
    to manipulate and analyse Climate and NWP model Data.       \
    Supported data formats are GRIB 1/2, netCDF 3/4, SERVICE,   \
    EXTRA and IEG. There are more than 600 operators available.

fetch.ignore_sslcert        yes

compiler.cxx_standard       2014
compiler.thread_local_storage yes
compilers.choose            cc cxx
mpi.setup
mpi.enforce_variant         hdf5

depends_lib                 port:netcdf \
                            port:hdf5 \
                            port:curl \
                            port:udunits2 \
                            port:proj8 \
                            port:fftw-3

patchfiles                  patch-skip-nc4-test.diff

configure.args              --with-netcdf=${prefix} \
                            --disable-dependency-tracking \
                            --disable-openmp \
                            --with-proj=${prefix}/lib/proj8 \
                            --with-hdf5=${prefix} \
                            --with-udunits2=${prefix} \
                            --with-fftw3 \
                            --with-curl=${prefix} \
                            --with-zlib=${prefix}
configure.cppflags-append   -I${prefix}/include/udunits2
configure.ldflags-append    -lhdf5

test.run                    yes
test.dir                    ${worksrcpath}/test
test.args                   -j1
test.target                 check

# Setting configure.cc h5pcc has been removed because it causes error
# because -Wl,-headerpad_max_install_names does not work with -pthread.
# See hdfeos5 Portfile to set h5pcc.

post-destroot {
    xinstall -m 755 -d ${destroot}${prefix}/share/doc/${name}
    xinstall -m 644 {*}[glob ${worksrcpath}/doc/*.pdf] ${destroot}${prefix}/share/doc/${name}
    foreach f {AUTHORS  ChangeLog NEWS OPERATORS README} {
        xinstall -m 644 {*}[glob ${worksrcpath}/${f}] ${destroot}${prefix}/share/doc/${name}
    }
    xinstall -m 755 -d ${destroot}${prefix}/share/${name}
    file copy ${worksrcpath}/contrib ${destroot}${prefix}/share/${name}
}

default_variants    +eccodes

if {[clang_variant_isset]} {
    configure.args-delete  --disable-openmp
    configure.args-append  --enable-openmp
}

variant grib2 description {obsoleted by grib_api variant} {
    default_variants    +eccodes
}

variant grib_api description {obsoleted by eccodes variant} {
    default_variants    +eccodes
}

variant eccodes description {enable grib2 support} {
    depends_lib-append      port:ecCodes
    configure.args-append   --with-eccodes=${prefix} \
                            --disable-cgribex
    configure.ldflags-append    -lpng -lopenjpeg
}

variant szip description {compile with szip support} {
    depends_lib-append      port:szip
    configure.args-append   --with-szlib=${prefix}
}

variant magicspp description {compile with ECMWF magics support} {
    depends_lib-append      port:libxml2 \
                            port:magicspp
    configure.args-append   --with-libxml2=${prefix} \
                            --with-magics=${prefix}
}

variant cdi description {build, install and link to a CDI library} {
    configure.args-append   --enable-cdi-lib
}

livecheck.type              regex
livecheck.url               ${homepage}
livecheck.regex             {Version ([0-9]+\.[0-9]+\.[0-9]+\.*[0-9]*)}
