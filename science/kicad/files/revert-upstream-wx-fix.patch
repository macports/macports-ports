Try to revert an upstream patch to make kicad build against wxWidgets 3.2 again

Please note that this is not the correct patch, it's just a workaround.

https://gitlab.com/kicad/code/kicad/-/issues/17461

--- common/dialog_about/dialog_about.cpp
+++ common/dialog_about/dialog_about.cpp
@@ -51,30 +51,11 @@
 
 
 DIALOG_ABOUT::DIALOG_ABOUT( EDA_BASE_FRAME *aParent, ABOUT_APP_INFO& aAppInfo )
-    : DIALOG_ABOUT_BASE( aParent ),
-        m_images( nullptr ),
-        m_info( aAppInfo )
+    : DIALOG_ABOUT_BASE( aParent ), m_info( aAppInfo )
 {
     wxASSERT( aParent != nullptr );
 
     SetEvtHandlerEnabled( false );
-
-#ifdef __WXMAC__
-    // HiDPI-aware API; will be generally available in wxWidgets 3.4
-    wxVector<wxBitmapBundle> images;
-
-    images.push_back( KiBitmapBundle( BITMAPS::info ) );              // INFORMATION
-    images.push_back( KiBitmapBundle( BITMAPS::recent ) );            // VERSION
-    images.push_back( KiBitmapBundle( BITMAPS::preference ) );        // DEVELOPERS
-    images.push_back( KiBitmapBundle( BITMAPS::editor ) );            // DOCWRITERS
-    images.push_back( KiBitmapBundle( BITMAPS::library ) );           // LIBRARIANS
-    images.push_back( KiBitmapBundle( BITMAPS::color_materials ) );   // ARTISTS
-    images.push_back( KiBitmapBundle( BITMAPS::language ) );          // TRANSLATORS
-    images.push_back( KiBitmapBundle( BITMAPS::zip ) );               // PACKAGERS
-    images.push_back( KiBitmapBundle( BITMAPS::tools ) );             // LICENSE
-
-    m_notebook->SetImages( images );
-#else
     // TODO: Change these to 16x16 versions when available
     m_images = new wxImageList( 24, 24, false, 9 );
 
@@ -89,7 +70,6 @@ DIALOG_ABOUT::DIALOG_ABOUT( EDA_BASE_FRAME *aParent, ABOUT_APP_INFO& aAppInfo )
     m_images->Add( KiBitmap( BITMAPS::tools ) );             // LICENSE
 
     m_notebook->SetImageList( m_images );
-#endif
 
     if( m_info.GetAppIcon().IsOk() )
     {
@@ -128,9 +108,7 @@ DIALOG_ABOUT::DIALOG_ABOUT( EDA_BASE_FRAME *aParent, ABOUT_APP_INFO& aAppInfo )
 
 DIALOG_ABOUT::~DIALOG_ABOUT()
 {
-#ifndef __WXMAC__
     delete m_images;
-#endif
 }
 
 
--- common/dialogs/git/dialog_git_commit.cpp
+++ common/dialogs/git/dialog_git_commit.cpp
@@ -57,21 +57,6 @@ DIALOG_GIT_COMMIT::DIALOG_GIT_COMMIT( wxWindow* parent, git_repository* repo,
     m_listCtrl->SetColumnWidth( 1, 200 );
 
     // Set up image list for icons
-#ifdef __WXMAC__
-    // HiDPI-aware API; will be generally available in wxWidgets 3.4
-    wxVector<wxBitmapBundle> stateImages;
-    stateImages.push_back( wxBitmapBundle() );                          // GIT_STATUS_UNTRACKED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_good_check ) ); // GIT_STATUS_CURRENT
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_modified ) ); // GIT_STATUS_MODIFIED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_add ) );    // GIT_STATUS_ADDED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_delete ) ); // GIT_STATUS_DELETED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_out_of_date ) );   // GIT_STATUS_BEHIND
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_changed_ahead ) ); // GIT_STATUS_AHEAD
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_conflict ) ); // GIT_STATUS_CONFLICTED
-
-    m_listCtrl->SetNormalImages( stateImages );
-    m_listCtrl->SetSmallImages( stateImages );
-#else
     wxImageList* imageList = new wxImageList(
             16, 16, true, static_cast<int>( KIGIT_COMMON::GIT_STATUS::GIT_STATUS_LAST ) );
 
@@ -86,7 +71,6 @@ DIALOG_GIT_COMMIT::DIALOG_GIT_COMMIT( wxWindow* parent, git_repository* repo,
 
     // Assign the image list to the list control
     m_listCtrl->SetImageList( imageList, wxIMAGE_LIST_SMALL );
-#endif
 
     // Populate list control with items
     for( auto& [filename, status] : filesToCommit )
--- eeschema/widgets/hierarchy_pane.cpp
+++ eeschema/widgets/hierarchy_pane.cpp
@@ -80,13 +80,6 @@ HIERARCHY_PANE::HIERARCHY_PANE( SCH_EDIT_FRAME* aParent ) :
     SetSizer( sizer );
     m_tree = new HIERARCHY_TREE( this );
 
-#ifdef __WXMAC__
-    // HiDPI-aware API; will be generally available in wxWidgets 3.4
-    wxVector<wxBitmapBundle> images;
-    images.push_back( KiBitmapBundle( BITMAPS::tree_nosel ) );
-    images.push_back( KiBitmapBundle( BITMAPS::tree_sel ) );
-    m_tree->SetImages( images );
-#else
     // Make an image list containing small icons
     // All icons are expected having the same size.
     wxBitmap tree_nosel_bm( KiBitmap( BITMAPS::tree_nosel ) );
@@ -97,7 +90,6 @@ HIERARCHY_PANE::HIERARCHY_PANE( SCH_EDIT_FRAME* aParent ) :
     imageList->Add( KiBitmap( BITMAPS::tree_sel ) );
 
     m_tree->AssignImageList( imageList );
-#endif
 
     sizer->Add( m_tree, 1, wxEXPAND, wxBORDER_NONE, 0 );
 
--- kicad/project_tree.cpp
+++ kicad/project_tree.cpp
@@ -68,59 +68,11 @@ PROJECT_TREE::~PROJECT_TREE()
 
 void PROJECT_TREE::LoadIcons()
 {
-    // KiCad for macOS currently has backported high-DPI support for this control
-    // that is not in a released version of wxWidgets 3.2 yet.  This can become the
-    // main codepath once wxWidgets 3.4 is released.
-#ifdef __WXMAC__
-    wxVector<wxBitmapBundle> images;
-    images.push_back( KiBitmapBundle( BITMAPS::project ) );                // TREE_LEGACY_PROJECT
-    images.push_back( KiBitmapBundle( BITMAPS::project_kicad ) );          // TREE_JSON_PROJECT
-    images.push_back( KiBitmapBundle( BITMAPS::icon_eeschema_24 ) );       // TREE_LEGACY_SCHEMATIC
-    images.push_back( KiBitmapBundle( BITMAPS::icon_eeschema_24 ) );       // TREE_SEXPR_SCHEMATIC
-    images.push_back( KiBitmapBundle( BITMAPS::icon_pcbnew_24 ) );         // TREE_LEGACY_PCB
-    images.push_back( KiBitmapBundle( BITMAPS::icon_pcbnew_24 ) );         // TREE_SEXPR_PCB
-    images.push_back( KiBitmapBundle( BITMAPS::icon_gerbview_24 ) );       // TREE_GERBER
-    images.push_back( KiBitmapBundle( BITMAPS::file_gerber_job ) );        // TREE_GERBER_JOB_FILE (.gbrjob)
-    images.push_back( KiBitmapBundle( BITMAPS::file_html ) );              // TREE_HTML
-    images.push_back( KiBitmapBundle( BITMAPS::file_pdf ) );               // TREE_PDF
-    images.push_back( KiBitmapBundle( BITMAPS::editor ) );                 // TREE_TXT
-    images.push_back( KiBitmapBundle( BITMAPS::editor ) );                 // TREE_MD
-    images.push_back( KiBitmapBundle( BITMAPS::netlist ) );                // TREE_NET
-    images.push_back( KiBitmapBundle( BITMAPS::file_cir ) );               // TREE_NET_SPICE
-    images.push_back( KiBitmapBundle( BITMAPS::unknown ) );                // TREE_UNKNOWN
-    images.push_back( KiBitmapBundle( BITMAPS::directory ) );              // TREE_DIRECTORY
-    images.push_back( KiBitmapBundle( BITMAPS::icon_cvpcb_24 ) );          // TREE_CMP_LINK
-    images.push_back( KiBitmapBundle( BITMAPS::tools ) );                  // TREE_REPORT
-    images.push_back( KiBitmapBundle( BITMAPS::file_pos ) );               // TREE_POS
-    images.push_back( KiBitmapBundle( BITMAPS::file_drl ) );               // TREE_DRILL
-    images.push_back( KiBitmapBundle( BITMAPS::file_drl ) );               // TREE_DRILL_NC (similar TREE_DRILL)
-    images.push_back( KiBitmapBundle( BITMAPS::file_drl ) );               // TREE_DRILL_XNC (similar TREE_DRILL)
-    images.push_back( KiBitmapBundle( BITMAPS::file_svg ) );               // TREE_SVG
-    images.push_back( KiBitmapBundle( BITMAPS::icon_pagelayout_editor_24 ) ); // TREE_PAGE_LAYOUT_DESCR
-    images.push_back( KiBitmapBundle( BITMAPS::module ) );                 // TREE_FOOTPRINT_FILE
-    images.push_back( KiBitmapBundle( BITMAPS::library ) );                // TREE_SCHEMATIC_LIBFILE
-    images.push_back( KiBitmapBundle( BITMAPS::library ) );                // TREE_SEXPR_SYMBOL_LIB_FILE
-    images.push_back( KiBitmapBundle( BITMAPS::editor ) );                 // DESIGN_RULES
-    images.push_back( KiBitmapBundle( BITMAPS::zip ) );                    // ZIP_ARCHIVE
-    SetImages( images );
-
-    wxVector<wxBitmapBundle> stateImages;
-    stateImages.push_back( wxBitmapBundle() );                          // GIT_STATUS_UNTRACKED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_good_check ) ); // GIT_STATUS_CURRENT
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_modified ) ); // GIT_STATUS_MODIFIED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_add ) );    // GIT_STATUS_ADDED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_delete ) ); // GIT_STATUS_DELETED
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_out_of_date ) );   // GIT_STATUS_BEHIND
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_changed_ahead ) ); // GIT_STATUS_AHEAD
-    stateImages.push_back( KiBitmapBundle( BITMAPS::git_conflict ) ); // GIT_STATUS_CONFLICTED
-
-    SetStateImages( stateImages );
-#else
     delete m_imageList;
 
-    // Make an image list containing small icons
     int size = 24;
 
+    // Make an image list containing small icons
     m_imageList = new wxImageList( size, size, true,
                                    static_cast<int>( TREE_FILE_TYPE::MAX ) );
 
@@ -175,7 +127,6 @@ void PROJECT_TREE::LoadIcons()
     m_statusImageList->Add( KiBitmap( BITMAPS::git_conflict, size ) ); // GIT_STATUS_CONFLICTED
 
     SetStateImageList( m_statusImageList );
-#endif
 
 }
 
--- kicad/project_tree_item.cpp
+++ kicad/project_tree_item.cpp
@@ -60,9 +60,10 @@ PROJECT_TREE_ITEM::PROJECT_TREE_ITEM( TREE_FILE_TYPE type, const wxString& data,
 
 void PROJECT_TREE_ITEM::SetState( int state )
 {
-    int treeEnumMax = static_cast<int>( TREE_FILE_TYPE::MAX );
+    wxImageList* imglist     = m_parent->GetImageList();
+    int          treeEnumMax = static_cast<int>( TREE_FILE_TYPE::MAX );
 
-    if( state < 0 || state >= m_parent->GetImageCount() / ( treeEnumMax - 2 ) )
+    if( !imglist || state < 0 || state >= imglist->GetImageCount() / ( treeEnumMax - 2 ) )
         return;
 
     m_state   = state;
