PortSystem 1.0
PortGroup           cmake 1.0
PortGroup           active_variants 1.1
PortGroup           cxx11 1.1
cmake.out_of_source yes

name                ompl
version             1.4.1
revision            0
categories          science
maintainers         {mmoll @mamoll}
description         The Open Motion Planning Library (OMPL)
long_description    The Open Motion Planning Library (OMPL) consists of a set \
                    of sampling-based motion planning algorithms.
homepage            http://ompl.kavrakilab.org
platforms           darwin
license             BSD
master_sites        https://bitbucket.org/ompl/ompl/downloads
distname            ${name}-${version}-Source
checksums           rmd160  4558261a7feada4d35400f6d9a80dd5d8cb8b5fe \
                    sha256  409b968b4174df347eeb77945adb5d03c093480c50c20add958664ad2a8ab29b \
                    size    22775817
depends_build-append port:pkgconfig
depends_lib-append  port:boost port:ode port:flann port:triangle port:eigen3

configure.args-append   -DOMPL_BUILD_DEMOS=OFF \
                        -DOMPL_BUILD_TESTS=OFF \
                        -DCMAKE_DISABLE_FIND_PACKAGE_spot=ON

# generate the extra C++ code needed for Python bindings. This code seems
# somewhat dependent on compiler and/or boost version, so we can't
# pre-generate them and make them available as an extra download.
post-configure {
    if {[variant_isset python27] || [variant_isset python34] || [variant_isset python35] || [variant_isset python36] || [variant_isset python37]} {
        # enable parallel build on at most 2 cores. Generating the bindings
        # uses large amounts of memory, so don't use more cores.
        if { ${use_parallel_build} } { set cj "-j 2" } else { set cj "" }
        system -W ${cmake.build_dir} "${build.cmd} ${cj} update_bindings"
    }
}

# The +app variant includes all the content of the regular OMPL version, but
# adds a simple GUI and an extra library with bindings to the assimp and fcl
# libraries. The cascade of dependencies due to pyqt5 is rather large, so by
# default the +app variant is not enabled. Also, the additions to OMPL in
# this variant are distributed under a slightly different license than the
# regular OMPL version.
variant app description {Include GUI and extra demo code} {
    license             noncommercial
    pre-extract {
        ui_warn "The +app variant causes some extra code to be compiled that is
distributed under the Rice University Software Distribution License. For
details, please read:
http://ompl.kavrakilab.org/license.html#ricelicense"
    }
    depends_lib-append  port:assimp port:fcl port:redis
    # ompl needs some help finding assimp for some reason
    configure.args-append \
        -DCMAKE_DISABLE_FIND_PACKAGE_PQP=ON \
        -DOMPLAPP_RESOURCE_DIR=${prefix}/share/ompl/resources \
        -DASSIMP_LIBRARIES=assimp -DASSIMP_INCLUDE_DIRS=${prefix}/include
    distname            omplapp-${version}-Source
    checksums           rmd160  c9fcda7977b9b2ab000f38333a8ea0a2e33eb52f \
                        sha256  d4951a051ba7d5364b1786db618da6fde7ddfd19309b15ef5b0a6a44b8ee058a \
                        size    51934086
    notes "
    If you intend to use ompl_webapp, you need to first launch the redis server:

        sudo port load redis
    "
}

variant spot description {Include support for automaton generation from LTL specifications using Spot} {
    configure.args-delete -DCMAKE_DISABLE_FIND_PACKAGE_spot=ON
    depends_lib-append    port:spot
}

set pythons_suffixes {27 34 35 36 37}

set pythons_ports {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

proc python_dir {} {
    global pythons_suffixes
    foreach s ${pythons_suffixes} {
        if {[variant_isset python${s}]} {
            set p python[string index ${s} 0].[string index ${s} 1]
            return [file normalize [exec ${p} -c "import sys; print(sys.prefix)"]/lib/${p}/site-packages]
        }
    }
    error "Python support not enabled."
}

foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string index ${s} 1]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    variant ${p} description "Use Python ${v} for python bindings" conflicts {*}${c} debug "
        depends_build-append    port:py${s}-pyplusplus
        depends_lib-append      port:${p} port:boost-numpy
        configure.args-append   -DPYTHON_EXEC=${prefix}/bin/python${v}

        # the python bindings rely on Boost.Python, so make sure it is installed.
        require_active_variants boost-numpy ${p}

        # use PyPy to generate Python bindings, which is *much* faster than CPython
        if { ${v} eq \"2.7\" } {
            depends_build-append port:pypy
        } else {
            depends_build-append port:pypy3
        }
        if { [variant_isset app] } {
            patch.pre_args      -p0
            depends_lib-append \
                port:py${s}-pyqt5 \
                port:py${s}-opengl \
                port:py${s}-flask \
                port:py${s}-celery \
                port:py${s}-redis \
                port:redis
            post-destroot {
                reinplace \"s|broker=rabbitmq|broker=redis|g\" \
                    ${destroot}${prefix}/share/ompl/ompl.conf
                # extra copy of libs not needed in site_packages and causes problems with rpaths
                set site_packages \[python_dir\]
                delete ${destroot}\${site_packages}/ompl/util/libompl.dylib \
                       ${destroot}\${site_packages}/ompl/app/libompl_app.dylib \
                       ${destroot}\${site_packages}/ompl/app/libompl_app_base.dylib
            }
        } else {
            patch.pre_args      -p1
            post-destroot {
                # extra copy of libs not needed in site_packages and causes problems with rpaths
                set site_packages \[python_dir\]
                delete ${destroot}\${site_packages}/ompl/util/libompl.dylib
            }
        }
    "
}

# enable one python variant so that the python bindings can be compiled
set selected_python python27
foreach s ${pythons_suffixes} {
    if {[variant_isset python${s}]} {
        set selected_python python${s}
    }
}
default_variants +${selected_python}

livecheck.type  regex
livecheck.url   http://ompl.kavrakilab.org/download.html
livecheck.regex (\[0-9.\]+), released
