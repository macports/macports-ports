use MacPorts versions of external libraries
--- configure.ac.orig	2018-05-24 08:24:31.000000000 -0700
+++ configure.ac	2019-01-26 23:12:22.000000000 -0700
@@ -38,16 +38,6 @@
 fi
 
 
-# BAM related:
- ac_bam_path=samtools-0.1.18
- BAM_LIB="-lbam"
- BAM_LDFLAGS="-L./$ac_bam_path"
- BAM_CPPFLAGS="-I./$ac_bam_path"
- AC_SUBST(BAM_CPPFLAGS)
- AC_SUBST(BAM_LDFLAGS)
- AC_SUBST(BAM_LIB)
-
-
 # Checks for header files.
 AC_CHECK_HEADERS([stdlib.h string.h unistd.h])
 
@@ -104,8 +94,7 @@
       [debug_CFLAGS="-DNDEBUG"])
 	  
 CFLAGS="${generic_CFLAGS} ${ext_CFLAGS} ${user_CFLAGS} ${debug_CFLAGS}"
-CXXFLAGS="$CFLAGS"
-CXXFLAGS="$CXXFLAGS $BAM_CPPFLAGS $BOOST_CPPFLAGS -I./SeqAn-1.4.2"
+CXXFLAGS="$CXXFLAGS $BAM_CPPFLAGS $BOOST_CPPFLAGS"
 LDFLAGS="$BAM_LDFLAGS $BOOST_LDFLAGS $user_LDFLAGS"
 
 AM_INIT_AUTOMAKE([-Wall foreign tar-pax foreign])
--- src/Makefile.am.orig	2018-05-24 08:24:31.000000000 -0700
+++ src/Makefile.am	2019-01-26 23:13:48.000000000 -0700
@@ -681,17 +681,12 @@
 SeqAn-1.4.2/seqan/system/system_thread.h \
 SeqAn-1.4.2/seqan/version.h
 
-SAMDIR = ./samtools-0.1.18
-SAMLIB = libbam.a
-SAMPROG = samtools_0.1.18
-BAM_LIB = -lbam
-BAM_CPPFLAGS = -I$(SAMDIR)
-BAM_LDFLAGS = -L$(SAMDIR)
+BAM_LIB = -lbam.1
+BAM_CPPFLAGS =
 
 #-- progs to be installed in $prefix/bin
 
 bin_PROGRAMS = \
-	$(SAMPROG) \
 	prep_reads \
 	gtf_to_fasta \
 	fix_map_ordering \
@@ -730,7 +725,7 @@
 	sed -e 's|__VERSION__|$(VERSION)|' tophat.py > tophat && chmod 755 tophat
 
 #-- tophat library for linking convienence
-noinst_LIBRARIES = $(SAMLIB) libgc.a libtophat.a
+noinst_LIBRARIES = libgc.a libtophat.a
 
 noinst_HEADERS = \
 	reads.h \
@@ -844,15 +839,5 @@
 gtf_to_fasta_LDADD = libtophat.a libgc.a $(BAM_LIB)
 gtf_to_fasta_LDFLAGS = $(BAM_LDFLAGS) $(LDFLAGS)
 
-libbam_a_SOURCES = 
-samtools_0_1_18_SOURCES = 
-
-$(SAMPROG): $(SAMLIB)
-	true
-
-$(SAMLIB):
-	echo "ZORG!"
-	cd $(SAMDIR) && make $(SAMPROG) && cp $(SAMLIB) $(SAMPROG) ..
-
 install-data-hook:
 	cp -r intervaltree sortedcontainers $(DESTDIR)$(bindir)
--- src/tophat.py.orig	2019-01-27 00:19:36.000000000 -0700
+++ src/tophat.py	2019-01-27 00:45:30.000000000 -0700
@@ -182,7 +182,7 @@
 unmapped_reads_fifo = None # if use_BWT_FIFO is True, this tricks bowtie into writing the
                            # unmapped reads into a compressed file
 
-samtools_path = "samtools_0.1.18"
+samtools_path = "samtools_0.1"
 bowtie_path = None
 fail_str = "\t[FAILED]\n"
 gtf_juncs = None #file name with junctions extracted from given GFF file
@@ -1569,7 +1569,7 @@
 def check_samtools():
     #th_log("Checking for Samtools")
     global samtools_path
-    samtools_path=prog_path("samtools_0.1.18")
+    samtools_path=prog_path("samtools_0.1")
     #samtools_version_str, samtools_version_arr = get_samtools_version()
     #if samtools_version_str == None:
     if not samtools_path:
--- src/common.cpp.orig	2018-05-24 08:24:31.000000000 -0700
+++ src/common.cpp	2019-01-27 00:46:14.000000000 -0700
@@ -151,7 +151,7 @@
 string sam_header = "";
 string sam_readgroup_id = "";
 string zpacker = "";
-string samtools_path = "samtools_0.1.18";
+string samtools_path = "samtools_0.1";
 
 bool solexa_quals = false;
 bool phred64_quals = false;
