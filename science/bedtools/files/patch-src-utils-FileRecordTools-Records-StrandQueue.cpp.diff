--- src/utils/FileRecordTools/Records/StrandQueue.cpp.orig
+++ src/utils/FileRecordTools/Records/StrandQueue.cpp
@@ -25,11 +25,11 @@ StrandQueue::~StrandQueue() {
 	}
 }
 
-Record *StrandQueue::top() const
+Record *StrandQueue::top()
 {
 	int minIdx = getMinIdx();
 	if (minIdx == -1) return NULL;
-	return const_cast<Record *>(_queues[minIdx]->top());
+	return _queues[minIdx]->top();
 }
 
 void StrandQueue::pop() {
@@ -38,8 +38,8 @@ void StrandQueue::pop() {
 	_queues[minIdx]->pop();
 }
 
-Record * StrandQueue::top(Record::strandType strand) const {
-	const Record *record = NULL;
+Record * StrandQueue::top(Record::strandType strand) {
+	Record *record = NULL;
 	switch (strand) {
 	case Record::FORWARD:
 		if (_queues[0]->empty()) return NULL;
@@ -57,10 +57,10 @@ Record * StrandQueue::top(Record::strandType strand) const {
 	default:
 		break;
 	}
-	return const_cast<Record *>(record);
+	return record;
 }
 
-void StrandQueue::pop(Record::strandType strand) const {
+void StrandQueue::pop(Record::strandType strand) {
 	switch (strand) {
 	case Record::FORWARD:
 		if (_queues[0]->empty()) return;
@@ -95,7 +95,7 @@ void StrandQueue::push(Record *record) {
 	}
 }
 
-size_t StrandQueue::size() const {
+size_t StrandQueue::size() {
 	size_t sumSize = 0;
 	for (int i = 0; i < NUM_QUEUES; i++) {
 		sumSize += _queues[i]->size();
@@ -103,7 +103,7 @@ size_t StrandQueue::size() const {
 	return sumSize;
 }
 
-bool StrandQueue::empty() const {
+bool StrandQueue::empty() {
 	for (int i = 0; i < NUM_QUEUES; i++) {
 		if (!_queues[i]->empty()) {
 			return false;
@@ -113,7 +113,7 @@ bool StrandQueue::empty() const {
 }
 
 
-int StrandQueue::getMinIdx() const {
+int StrandQueue::getMinIdx() {
 	if (empty()) return -1;
 	const Record *minRec = NULL;
 	int minIdx = -1;
