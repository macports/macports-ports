# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.1
PortGroup           github 1.0

github.setup        LLNL zfp f15d00720e454cd70206a85d7013d8240ad38585
version             2023.02.11
revision            0
categories          science devel
license             BSD
maintainers         {@barracuda156 gmail.com:vital.had} openmaintainer
description         zfp is a compressed format for representing multi-dimensional floating-point and integer arrays
long_description    {*}${description}
homepage            https://zfp.llnl.gov

checksums           rmd160  cac426354ae3f5f7ffd15442d044a0dbad876bba \
                    sha256  d9ceb27be5a8591c204b2599e60f178edeaf0139da24aeee5d3f1768fe3cc3e2 \
                    size    504306

compiler.c_standard 1999
# index.hpp: error: integer constant is too large for ‘unsigned long’ type
compiler.blacklist-append \
                    *gcc-4.*

configure.args-append \
                    -DBUILD_EXAMPLES=OFF \
                    -DBUILD_TESTING=ON \
                    -DBUILD_UTILITIES=ON \
                    -DZFP_WITH_ALIGNED_ALLOC=OFF \
                    -DZFP_WITH_OPENMP=OFF

variant openmp description {use OpenMP} {
    compiler.openmp_version 3.0

    configure.args-replace \
                    -DZFP_WITH_OPENMP=OFF \
                    -DZFP_WITH_OPENMP=ON

    if {[string match *clang* ${configure.compiler}]} {
        configure.ldflags-append \
                    -L${prefix}/lib/libomp \
                    -lomp
    }
}

# Note, that tests are likely to fail on 32-bit platforms due to insufficient precision:
# https://github.com/LLNL/zfp/issues/205
test.run            yes
