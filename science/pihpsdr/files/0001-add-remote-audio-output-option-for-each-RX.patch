From 67e0bc16ca6f4c1f8b3af0a8ef8da1ee5076ea8c Mon Sep 17 00:00:00 2001
From: Davide Gerhard <rainbow@irh.it>
Date: Mon, 3 May 2021 08:51:54 +0200
Subject: [PATCH] add remote audio output option for each RX

we can enable or disable the remote audio output for each receiver.
The audio volume remains the same for local and remote audio.
---
 receiver.c | 14 +++++++++++---
 receiver.h |  2 ++
 rx_menu.c  | 18 +++++++++++++++++-
 3 files changed, 30 insertions(+), 4 deletions(-)

diff --git receiver.c receiver.c
index 0ac4b10..c4058de 100644
--- receiver.c
+++ receiver.c
@@ -198,6 +198,9 @@ void receiver_save_state(RECEIVER *rx) {
   sprintf(name,"receiver.%d.audio_channel",rx->id);
   sprintf(value,"%d",rx->audio_channel);
   setProperty(name,value);
+  sprintf(name,"receiver.%d.remote_audio",rx->id);
+  sprintf(value,"%d",rx->remote_audio);
+  setProperty(name,value);
   sprintf(name,"receiver.%d.local_audio",rx->id);
   sprintf(value,"%d",rx->local_audio);
   setProperty(name,value);
@@ -372,6 +375,9 @@ g_print("%s: id=%d\n",__FUNCTION__,rx->id);
   sprintf(name,"receiver.%d.audio_channel",rx->id);
   value=getProperty(name);
   if(value) rx->audio_channel=atoi(value);
+  sprintf(name,"receiver.%d.remote_audio",rx->id);
+  value=getProperty(name);
+  if(value) rx->remote_audio=atoi(value);
   sprintf(name,"receiver.%d.local_audio",rx->id);
   value=getProperty(name);
   if(value) rx->local_audio=atoi(value);
@@ -936,6 +942,7 @@ g_print("%s: id=%d buffer_size=%d\n",__FUNCTION__,id,buffer_size);
   rx->audio_channel=STEREO;
   rx->audio_device=-1;
   rx->mute_radio=0;
+  rx->remote_audio=1;
 
   rx->low_latency=0;
 
@@ -1068,6 +1075,7 @@ g_print("%s: id=%d sample_rate=%d\n",__FUNCTION__,rx->id, rx->sample_rate);
   rx->mute_when_not_active=0;
   rx->audio_channel=STEREO;
   rx->audio_device=-1;
+  rx->remote_audio=1;
 
   rx->low_latency=0;
 
@@ -1096,7 +1104,7 @@ g_print("%s: id=%d sample_rate=%d\n",__FUNCTION__,rx->id, rx->sample_rate);
   rx->pixel_samples=g_new(float,rx->pixels);
 
 
-g_print("%s (after restore): rx=%p id=%d audio_buffer_size=%d local_audio=%d\n",__FUNCTION__,rx,rx->id,rx->audio_buffer_size,rx->local_audio);
+g_print("%s (after restore): rx=%p id=%d audio_buffer_size=%d local_audio=%d remote_audio=%d\n",__FUNCTION__,rx,rx->id,rx->audio_buffer_size,rx->local_audio,rx->remote_audio);
   int scale=rx->sample_rate/48000;
   rx->output_samples=rx->buffer_size/scale;
   rx->audio_output_buffer=g_new(gdouble,2*rx->output_samples);
@@ -1403,7 +1411,7 @@ static void process_rx_buffer(RECEIVER *rx) {
           if(rx->mute_radio) {
             old_protocol_audio_samples(rx,(short)0,(short)0);
           } else {
-            old_protocol_audio_samples(rx,left_audio_sample,right_audio_sample);
+            old_protocol_audio_samples(rx, rx->remote_audio ? left_audio_sample : (short)0, rx->remote_audio ? right_audio_sample : (short)0);
           }
           break;
         case NEW_PROTOCOL:
@@ -1411,7 +1419,7 @@ static void process_rx_buffer(RECEIVER *rx) {
             if(rx->mute_radio) {
               new_protocol_audio_samples(rx,(short)0,(short)0);
             } else {
-              new_protocol_audio_samples(rx,left_audio_sample,right_audio_sample);
+              new_protocol_audio_samples(rx, rx->remote_audio ? left_audio_sample : (short)0, rx->remote_audio ? right_audio_sample : (short)0);
             }
           }
           break;
diff --git receiver.h receiver.h
index 93aee97..d3cc56c 100644
--- receiver.h
+++ receiver.h
@@ -142,6 +142,8 @@ typedef struct _receiver {
   gint local_audio_buffer_offset;
   GMutex local_audio_mutex;
 
+  gboolean remote_audio;
+
   gint low_latency;
 
   gint squelch_enable;
diff --git rx_menu.c rx_menu.c
index b47ef25..858c739 100644
--- rx_menu.c
+++ rx_menu.c
@@ -39,6 +39,7 @@ static GtkWidget *menu_b=NULL;
 static GtkWidget *dialog=NULL;
 static GtkWidget *local_audio_b=NULL;
 static GtkWidget *output=NULL;
+static GtkWidget *remote_audio_b=NULL;
 
 static void cleanup() {
   if(dialog!=NULL) {
@@ -127,6 +128,11 @@ fprintf(stderr,"local_audio_cb: audio_open_output failed\n");
 fprintf(stderr,"local_audio_cb: local_audio=%d\n",active_receiver->local_audio);
 }
 
+static void remote_audio_cb(GtkWidget *widget, gpointer data) {
+  fprintf(stderr,"remote_audio_cb: rx=%d\n",active_receiver->id);
+  active_receiver->remote_audio=gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
+}
+
 static void mute_audio_cb(GtkWidget *widget, gpointer data) {
   active_receiver->mute_when_not_active=gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
 }
@@ -356,8 +362,18 @@ void rx_menu(GtkWidget *parent) {
     x++;
   }
 
-
   int row=0;
+
+  // radio that don't have remote audio codec
+  // should not visualize the option
+  if (radio->device != DEVICE_HERMES_LITE2) {
+    remote_audio_b=gtk_check_button_new_with_label("Remote Audio Output");
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (remote_audio_b), active_receiver->remote_audio);
+    gtk_widget_show(remote_audio_b);
+    gtk_grid_attach(GTK_GRID(grid),remote_audio_b,x,++row,1,1);
+    g_signal_connect(remote_audio_b,"toggled",G_CALLBACK(remote_audio_cb),NULL);
+  }
+
   if(n_output_devices>0) {
     local_audio_b=gtk_check_button_new_with_label("Local Audio Output");
     gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (local_audio_b), active_receiver->local_audio);
