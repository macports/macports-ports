# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compilers 1.0

name                ape
version             2.2.1
revision            3
categories          science
platforms           darwin
license             GPL-2+
maintainers         {dstrubbe @dstrubbe}

description         A tool for generating atomic pseudopotentials within a Density-Functional Theory framework.
long_description    APE (Atomic Pseudopotentials Engine) is a computer package designed to generate \
                    and test norm-conserving pseudo-potentials within Density Functional Theory. \
                    The generated pseudo-potentials can be either non-relativistic, scalar \
                    relativistic or fully relativistic and can explicitly include \
                    semi-core states. A wide range of exchange-correlation functionals is included. \
                    APE can generate pseudopotential files for use with SIESTA, Abinit, Octopus, \
                    and Quantum Espresso.
homepage            http://www.tddft.org/programs/APE
master_sites        ${homepage}/sites/default/files

checksums           rmd160  8f2b77ccc94772148893f341a8489a2d9f132db8 \
                    sha256  91c09e1d5ddcfb1d421a0d1d416c760de10afbf7f54e6ba1ad767661e1671357

depends_lib         port:libxc port:gsl

configure.args      --with-libxc-prefix=${prefix}
configure.optflags  -O3

# cpp from gcc5 and gcc6 do not work for FCCPP currently. gfortran is ok though.
compilers.choose    fc cc cpp
compilers.setup     require_fortran -g95 -clang -gcc5 -gcc6 -gcc7

# g95 is disabled because of constructs regarded as illegal by this compiler.
# :info:build In file mesh_ape.f90:58
# :info:build
# :info:build     integer, private :: type !mesh type
# :info:build                     1
# :info:build Error: PRIVATE attribute at (1) is not allowed in a TYPE definition

compilers.enforce_fortran libxc
# libxc does not have universal variant, so APE cannot either
universal_variant   no

# Note: numerous tests will probably fail.
test.run            yes
test.target         check

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     New version (\[0-9.\]+)</a>
