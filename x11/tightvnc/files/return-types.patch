--- Xvnc/lib/Xau/AuUnlock.c.orig	2000-06-11 22:00:51.000000000 +1000
+++ Xvnc/lib/Xau/AuUnlock.c	2018-07-21 16:31:00.000000000 +1000
@@ -44,7 +44,7 @@ char	*file_name;
     char	link_name[1025];
 
     if (strlen (file_name) > 1022)
-	return;
+	return 0;
 #ifndef WIN32
     (void) strcpy (creat_name, file_name);
     (void) strcat (creat_name, "-c");
@@ -58,4 +58,5 @@ char	*file_name;
     (void) unlink (creat_name);
 #endif
     (void) unlink (link_name);
+    return 1;
 }
--- Xvnc/lib/font/bitmap/fontink.c.orig	2000-06-11 22:00:51.000000000 +1000
+++ Xvnc/lib/font/bitmap/fontink.c	2018-07-21 16:39:06.000000000 +1000
@@ -44,7 +44,7 @@ static unsigned char ink_mask_lsb[8] = {
     0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
 };
 
-FontCharInkMetrics(pFont, pCI, pInk)
+void FontCharInkMetrics(pFont, pCI, pInk)
     FontPtr     pFont;
     CharInfoPtr pCI;
     xCharInfo  *pInk;
@@ -157,7 +157,7 @@ found_right:
 #define Min(a,b)    ((a)<(b)?(a):(b))
 #define Max(a,b)    ((a)>(b)?(a):(b))
 
-FontCharReshape(pFont, pSrc, pDst)
+void FontCharReshape(pFont, pSrc, pDst)
     FontPtr     pFont;
     CharInfoPtr pSrc,
                 pDst;
--- Xvnc/lib/font/Type1/regions.c.orig	2000-06-11 22:00:51.000000000 +1000
+++ Xvnc/lib/font/Type1/regions.c	2018-07-21 16:47:17.000000000 +1000
@@ -59,7 +59,7 @@ static int touches();
 static int crosses();
 static void edgemin();
 static void edgemax();
-static discard();
+static void discard();
 static edgecheck();
 static struct edgelist *NewEdge();
 static struct edgelist *swathxsort();  /* 'SortSwath' function               */
@@ -1345,7 +1345,7 @@ So, to mark a 'edgelist' structure as di
 of the list and set ymin=ymax.
 */
  
-static discard(left, right)
+static void discard(left, right)
        register struct edgelist *left,*right;  /* all edges between here exclusive */
                                        /* should be discarded */
 {
--- Xvnc/lib/font/Type1/t1malloc.c.orig	2018-07-21 16:48:24.000000000 +1000
+++ Xvnc/lib/font/Type1/t1malloc.c	2018-07-21 16:53:23.000000000 +1000
@@ -47,7 +47,7 @@ and Darwin.
 
 #include "objects.h"	/* get #define for abort() */
 
-static combine();
+static void combine();
 static freeuncombinable();
 static unhook();
 static dumpchain();
@@ -270,7 +270,7 @@ In any event, that block will be moved t
 'firstcombined').
 */
  
-static combine()
+static void combine()
 {
         register struct freeblock *p;   /* block we will try to combine */
         register long *addr;            /* identical to 'p' for 'long' access */
@@ -657,7 +657,7 @@ static dumpchain()
 :h3.reportarea() - Display a Contiguous Set of Memory Blocks
 */
  
-static reportarea(area)
+static void reportarea(area)
        register long *area;   /* start of blocks (from addmemory)            */
 {
        register long size;    /* size of current block                       */
--- Xvnc/lib/font/Type1/type1.c.orig	2000-06-11 22:00:51.000000000 +1000
+++ Xvnc/lib/font/Type1/type1.c	2018-07-21 17:11:44.000000000 +1000
@@ -160,21 +160,21 @@ static int *ModeP;
 /************************/
 static double Div();
 static double PSFakePop();
-static DoCommand();
-static Escape();
-static HStem();
-static VStem();
+static void DoCommand();
+static void Escape();
+static void HStem();
+static void VStem();
 static RLineTo();
 static RRCurveTo();
 static DoClosePath();
-static CallSubr();
+static void CallSubr();
 static Return();
 static EndChar();
 static RMoveTo();
 static DotSection();
-static Seac();
+static void Seac();
 static Sbw();
-static CallOtherSubr();
+static void CallOtherSubr();
 static SetCurrentPoint();
 
 /*****************************************/
@@ -297,7 +297,7 @@ static FinitStems()  /* Terminate the ST
 /* Compute the dislocation that a stemhint should cause for points */
 /* inside the stem.                                                */
 /*******************************************************************/
-static ComputeStem(stemno)
+static void ComputeStem(stemno)
 int stemno;
 {
   int verticalondevice, idealwidth;
@@ -697,7 +697,7 @@ static ClearStack()
   Top = -1;
 }
  
-static Push(Num)
+static void Push(Num)
         double Num;
 {
   if (++Top < MAXSTACK) Stack[Top] = Num;
@@ -709,7 +709,7 @@ static ClearCallStack()
   CallTop = -1;
 }
  
-static PushCall(CurrStrP, CurrIndex, CurrKey)
+static void PushCall(CurrStrP, CurrIndex, CurrKey)
   psobj *CurrStrP;
   int CurrIndex;
   unsigned short CurrKey;
@@ -722,7 +722,7 @@ static PushCall(CurrStrP, CurrIndex, Cur
   else Error0("PushCall: Stack full\n");
 }
  
-static PopCall(CurrStrPP, CurrIndexP, CurrKeyP)
+static void PopCall(CurrStrPP, CurrIndexP, CurrKeyP)
   psobj **CurrStrPP;
   int *CurrIndexP;
   unsigned short *CurrKeyP;
@@ -741,7 +741,7 @@ static ClearPSFakeStack()
 }
  
 /* PSFakePush: Pushes a number onto the fake PostScript stack */
-static PSFakePush(Num)
+static void PSFakePush(Num)
   double Num;
 {
   if (++PSFakeTop < MAXPSFAKESTACK) PSFakeStack[PSFakeTop] = Num;
@@ -862,7 +862,7 @@ static void StartDecrypt()
       Error0("StartDecrypt: Premature end of CharString\n");
 }
  
-static Decode(Code)
+static void Decode(Code)
   int Code;
 {
   int Code1, Code2, Code3, Code4;
@@ -892,7 +892,7 @@ ended: Error0("Decode: Premature end of 
 }
  
 /* Interpret a command code */
-static DoCommand(Code)
+static void DoCommand(Code)
   int Code;
 {
   switch(Code) {
@@ -1010,7 +1010,7 @@ static DoCommand(Code)
   }
 }
  
-static Escape(Code)
+static void Escape(Code)
   int Code;
 {
   int i, Num;
@@ -1105,7 +1105,7 @@ static Escape(Code)
 /* Declares the vertical range of a horizontal stem zone */
 /* between coordinates y and y + dy */
 /* y is relative to the left sidebearing point */
-static HStem(y, dy)
+static void HStem(y, dy)
   double y, dy;
 {
   IfTrace2((FontDebug), "Hstem %f %f\n", &y, &dy);
@@ -1126,7 +1126,7 @@ static HStem(y, dy)
 /* Declares the horizontal range of a vertical stem zone */
 /* between coordinates x and x + dx */
 /* x is relative to the left sidebearing point */
-static VStem(x, dx)
+static void VStem(x, dx)
   double x, dx;
 {
   IfTrace2((FontDebug), "Vstem %f %f\n", &x, &dx);
@@ -1214,7 +1214,7 @@ static DoClosePath()
 /* subr# CALLSUBR - */
 /* Calls a CharString subroutine with index */
 /* subr# from the Subrs array */
-static CallSubr(subrno)
+static void CallSubr(subrno)
   int subrno;
 {
   IfTrace1((FontDebug), "CallSubr %d\n", subrno);
@@ -1289,7 +1289,7 @@ static DotSection()
  
 /* |- asb adx ady bchar achar SEAC |- */
 /* Standard Encoding Accented Character. */
-static Seac(asb, adx, ady, bchar, achar)
+static void Seac(asb, adx, ady, bchar, achar)
   double asb, adx, ady;
   unsigned char bchar, achar;
 {
@@ -1666,7 +1666,7 @@ static void HintReplace()
 /* arg1 ... argn n othersubr# CALLOTHERSUBR - */
 /* Make calls on the PostScript interpreter (or call equivalent C code) */
 /* NOTE: The n arguments have been pushed on the fake PostScript stack */
-static CallOtherSubr(othersubrno)
+static void CallOtherSubr(othersubrno)
   int othersubrno;
 {
   IfTrace1((FontDebug), "CallOtherSubr %d\n", othersubrno);
