# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

name             openjdk17-graalvm
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer
platforms        darwin
# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror
# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

# https://github.com/graalvm/graalvm-ce-builds/releases
supported_archs  x86_64 arm64

# There is no macOS aarch64 build for 22.3.2
set x86_64_version  22.3.2
set aarch64_version 22.3.1

revision     0

description  GraalVM Community Edition based on OpenJDK 17
long_description GraalVM is a universal virtual machine for running applications written in JavaScript, Python, Ruby, R,\
                 JVM-based languages like Java, Scala, Groovy, Kotlin, Clojure, and LLVM-based languages such as C and C++.

if {${configure.build_arch} eq "x86_64"} {
    version      ${x86_64_version}
    master_sites https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${x86_64_version}/
    distname     graalvm-ce-java17-darwin-amd64-${version}
    checksums    rmd160  c0dd0bbf1c976a1b89a749d5f28d03befde5f364 \
                 sha256  470d538e34dc168255ee8ceadca74aab4b028ec6c699c4bd8e0226b0a7d3f155 \
                 size    261116951
} elseif {${configure.build_arch} eq "arm64"} {
    version      ${aarch64_version}
    master_sites https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${aarch64_version}/
    distname     graalvm-ce-java17-darwin-aarch64-${version}
    checksums    rmd160  2243e23de57909f7cb6f88b51d51e623b4f0ca87 \
                 sha256  e3307c29e71423038960c38a6f8c0525f7c6f430c494d9c16935335c291c7ce1 \
                 size    258360745
}

worksrcdir   graalvm-ce-java17-${version}

homepage     https://www.graalvm.org

livecheck.type  none

use_configure    no
build {}

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set target /Library/Java/JavaVirtualMachines/${name}
set destroot_target ${destroot}${target}

destroot {
    xinstall -m 755 -d ${destroot_target}
    copy ${worksrcpath}/Contents ${destroot_target}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${target}/Contents/Home
"

subport ${name}-native-image {
    depends_lib        port:${name}
    description        Native Image component for GraalVM
    long_description   ${description}

    if {${configure.build_arch} eq "x86_64"} {
        version      ${x86_64_version}
        set jar_file native-image-installable-svm-java17-darwin-amd64-${version}.jar
        distfiles    ${jar_file}
        checksums    rmd160  889bbd69a50db60314d2e23d4aa69a6f9c744f74 \
                     sha256  f3325ba7fbbcb865c3cc38ee531398482344fae2dd364073391568b0e5b0a77a \
                     size    30685976
    } elseif {${configure.build_arch} eq "arm64"} {
        version      ${aarch64_version}
        set jar_file native-image-installable-svm-java17-darwin-aarch64-${version}.jar
        distfiles    ${jar_file}
        checksums    rmd160  c1fe4d16e586fd7302271c8f2a5f8bd22dd10f81 \
                     sha256  f69cc832db03db6698b41346bbee0a58ef4a5277971b6f7629d82a8f3ae98726 \
                     size    30569608
    }

    set java_home ${target}/Contents/Home

    extract {}

    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/java/${subport}
        file copy ${distpath}/${jar_file} ${destroot}${prefix}/share/java/${subport}
    }

    post-activate {
        # Graal Updater doesn't signal errors if the component is already installed.
        # Unfortunately, we require root privileges to invoke Graal Updater.
        system "sudo ${java_home}/bin/gu -L install ${prefix}/share/java/${subport}/${jar_file}"
    }

    post-deactivate {
        # This helps prevent breakage if the user removed native-image themselves
        # and wants to deactivate or uninstall this port.
        if {[regexp {(?i)native-image} [exec ${java_home}/bin/gu list] match]} {
            system "sudo ${java_home}/bin/gu remove native-image"
        }
    }

    notes "The Native Image component of GraalVM has been installed for you"
}
