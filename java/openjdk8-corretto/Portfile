# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

name             openjdk8-corretto
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer

# See https://github.com/corretto/corretto-8/blob/release-8.392.08.1/CHANGELOG.md for minimum supported OS version
# macOS 11 â†’ Darwin 20 (https://trac.macports.org/wiki/PortfileRecipes#compare-osx-darwin-version)
platforms        {darwin any} {darwin >= 20}

# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror

# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

# https://github.com/corretto/corretto-8/releases
supported_archs  x86_64 arm64

version      8.392.08.1
revision     0

description  Amazon Corretto OpenJDK 8 (Long Term Support)
long_description No-cost, multiplatform, production-ready distribution of OpenJDK from Amazon.

master_sites https://corretto.aws/downloads/resources/${version}/

if {${configure.build_arch} eq "x86_64"} {
    distname     amazon-corretto-${version}-macosx-x64
    checksums    rmd160  4a055f2b8cacf5acb5cc277b1ac5df25986b4ddf \
                 sha256  2ea69e415912f7ad5358d016b1a82068e36c2a625d8573cd28c1c2a9a5b39cba \
                 size    118773590
} elseif {${configure.build_arch} eq "arm64"} {
    distname     amazon-corretto-${version}-macosx-aarch64
    checksums    rmd160  063ccc2bd0d79220a6472ba3c30dd169584c2d2c \
                 sha256  eb1aedaad5505605f17a81692f9882edbcb69f34494330dd5cd2a31f65bbd0e0 \
                 size    103788913
}

worksrcdir   amazon-corretto-8.jdk

homepage     https://aws.amazon.com/corretto/

livecheck.type      regex
livecheck.url       https://github.com/corretto/corretto-8/releases
livecheck.regex     amazon-corretto-(8\.\[0-9\.\]+)-macosx-.*\.tar\.gz

use_configure    no
build {}

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set jvms /Library/Java/JavaVirtualMachines
set jdk ${jvms}/${name}

destroot {
    xinstall -m 755 -d ${destroot}${prefix}${jdk}
    copy ${worksrcpath}/Contents ${destroot}${prefix}${jdk}

    # macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, so let's create a symlink there
    xinstall -m 755 -d ${destroot}${jvms}
    ln -s ${prefix}${jdk} ${destroot}${jdk}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${jdk}/Contents/Home
"
