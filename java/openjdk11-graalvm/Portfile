# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

name             openjdk11-graalvm
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer
platforms        darwin
# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror
# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

# https://github.com/graalvm/graalvm-ce-builds/releases
supported_archs  x86_64 arm64

version      22.3.1
revision     0

description  GraalVM Community Edition based on OpenJDK 11
long_description GraalVM is a universal virtual machine for running applications written in JavaScript, Python, Ruby, R,\
                 JVM-based languages like Java, Scala, Groovy, Kotlin, Clojure, and LLVM-based languages such as C and C++.

master_sites https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${version}/

if {${configure.build_arch} eq "x86_64"} {
    distname     graalvm-ce-java11-darwin-amd64-${version}
    checksums    rmd160  2905f35da1e544301215f832b97cd8813b73bfed \
                 sha256  325afad5f1c4a07a458c95e7c444cff63514a6afa6f2655c12b4f494dccf2228 \
                 size    254200487
} elseif {${configure.build_arch} eq "arm64"} {
    distname     graalvm-ce-java11-darwin-aarch64-${version}
    checksums    rmd160  3421d1754a491b0cfa44d09df798ff5053fcefc8 \
                 sha256  c59f32289d92671bea46a34f4227fef484a4aa9eeece159e59a486205aaa6c31 \
                 size    249144742
}

worksrcdir   graalvm-ce-java11-${version}

homepage     https://www.graalvm.org

livecheck.type  none

use_configure    no
build {}

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set target /Library/Java/JavaVirtualMachines/${name}
set destroot_target ${destroot}${target}

destroot {
    xinstall -m 755 -d ${destroot_target}
    copy ${worksrcpath}/Contents ${destroot_target}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${target}/Contents/Home
"

subport ${name}-native-image {
    depends_lib        port:${name}
    description        Native Image component for GraalVM
    long_description   ${description}

    if {${configure.build_arch} eq "x86_64"} {
        set jar_file native-image-installable-svm-java11-darwin-amd64-${version}.jar
        distfiles    ${jar_file}
        checksums    rmd160  844176cbaca0f02bc46c326a2b8bdc24c5aff647 \
                     sha256  2aae087a4a012e86b0db4afb1fe0c8cf25345e35088c8c659d8668d66a4bdc0c \
                     size    28427632
    } elseif {${configure.build_arch} eq "arm64"} {
        set jar_file native-image-installable-svm-java11-darwin-aarch64-${version}.jar
        distfiles    ${jar_file}
        checksums    rmd160  65a84d8dd894be0830673ffdf7e77a0ca19cf1ac \
                     sha256  df923df186826dcb7cb0eac0f5e93c3e215584f0377bad0c76310e09d7dc58cd \
                     size    28504616
    }

    set java_home ${target}/Contents/Home

    extract {}

    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/java/${subport}
        file copy ${distpath}/${jar_file} ${destroot}${prefix}/share/java/${subport}
    }

    post-activate {
        # Graal Updater doesn't signal errors if the component is already installed.
        # Unfortunately, we require root privileges to invoke Graal Updater.
        system "sudo ${java_home}/bin/gu -L install ${prefix}/share/java/${subport}/${jar_file}"
    }

    post-deactivate {
        # This helps prevent breakage if the user removed native-image themselves
        # and wants to deactivate or uninstall this port.
        if {[regexp {(?i)native-image} [exec ${java_home}/bin/gu list] match]} {
            system "sudo ${java_home}/bin/gu remove native-image"
        }
    }

    notes "The Native Image component of GraalVM has been installed for you"
}
