# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                openjdk8
# use format based on macports:
# https://guide.macports.org/chunked/reference.portgroup.html#reference.portgroup.java
# https://github.com/openjdk/jdk8u/tags
set u 322
version             1.8.0_${u}
revision            1
categories          java devel
platforms           darwin
supported_archs     x86_64
license             GPL-2+
maintainers         {outlook.com:usersword123 @usersxx} openmaintainer
description         Openjdk 8
long_description    JDK 8 and JRE 8 builds of Openjdk, the Open-Source implementation \
                    of the Java Platform, Standard Edition, and related projects.
homepage            https://openjdk.java.net/
fetch.type          git
git.url             https://github.com/openjdk/jdk8u
git.branch             jdk8u${u}-ga
patchfiles          patch-openjdk8-xcode1.diff \
                    patch-openjdk8-xcode2.diff
depends_lib         port:freetype
depends_build       port:autoconf \
                    port:gmake \
                    port:bash \
                    port:openjdk8-bootstrap

# remove pre-patch phase after jdk8u341-ga tag
pre-patch {
    reinplace "s|JDK_UPDATE_VERSION=|JDK_UPDATE_VERSION=${u}|g" ${worksrcpath}/common/autoconf/version-numbers
}

default_variants    +server +release

set tpath /Library/Java
use_xcode           yes
use_configure    yes
configure.cmd       ${prefix}/bin/bash ./configure
configure.pre_args  --prefix=${tpath}
# default configure args
configure.args      --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk8-bootstrap/Contents/Home \
                    --with-debug-level=release \
                    --with-freetype-include=${prefix}/include/freetype2 \
                    --with-freetype-lib=${prefix}/lib \
                    --with-jvm-variants=server \
                    --with-conf-name=openjdk${version}

variant server \
    description {JVM with normal interpreter and a tiered C1/C2 compiler} {}

variant release \
    description {OpenJDK with no debug information, all optimizations and no asserts} {}

variant debug \
    description {OpenJDK with debug information, all optimizations and all asserts} {
    configure.args-append   --enable-debug
}

variant core \
    conflicts server \
    description {JVM with interpreter only and no compiler} {
    configure.args-replace   --with-jvm-variants=server --with-jvm-variants=core
}

build.type          gnu
build.target        images
use_parallel_build  no
worksrcdir          openjdk8
set jdkn jdk${version}.jdk
set jren jre${version}.jre
set jdk_bundle_dir build/openjdk${version}/images/j2sdk-bundle/${jdkn}/Contents
set jre_bundle_dir build/openjdk${version}/images/j2re-bundle/${jren}/Contents
set jdk_path ${tpath}/JavaVirtualMachines/${name}
set jre_path ${tpath}/JavaVirtualMachines/${name}-jre

test.run            yes
test.cmd            ${jdk_bundle_dir}/Home/bin/java
test.target         --version

destroot {
    xinstall -m 755 -d ${destroot}${jdk_path}
    xinstall -m 755 -d ${destroot}${jre_path}
    copy ${worksrcpath}/${jdk_bundle_dir} ${destroot}${jdk_path}
    copy ${worksrcpath}/${jre_bundle_dir} ${destroot}${jre_path}
}
destroot.violate_mtree      yes

post-destroot {
    delete ${worksrcpath}
}

notes "
If you want to make ${subport} the default JDK, add this to shell profile:
export JAVA_HOME=${jdk_path}/Contents/Home
If you want to make the JRE installed by the ${subport} the default JRE, add this to shell profile:
export JAVA_HOME=${jre_path}/Contents/Home
"
    
