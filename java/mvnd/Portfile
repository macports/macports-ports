# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0

version         0.9.0
revision        0
name            mvnd
categories      java
platforms       darwin
maintainers     {breun.nl:nils @breun} openmaintainer
license         Apache-2

description     mvnd aims at providing faster Maven builds using techniques known from Gradle and Takari.

long_description mvnd aims at providing faster Maven builds using techniques known from Gradle and Takari.\
                \n\
                \n* mvnd embeds Maven (so there is no need to install Maven separately).\
                \n* The actual builds happen inside a long living background process, a.k.a. daemon.\
                \n* One daemon instance can serve multiple consecutive requests from the mvnd client.\
                \n* The mvnd client is a native executable built using GraalVM.\
                It starts faster and uses less memory compared to starting a traditional JVM.\
                \n* Multiple daemons can be spawned in parallel if there is no idle daemon to serve a build request.\
                \n* The JVM for running the actual builds does not need to get started anew for each build.\
                \n* The classloaders holding classes of Maven plugins are cached over multiple builds.\
                The plugin jars are thus read and parsed just once. SNAPSHOT versions of Maven plugins are not cached.\
                \n* The native code produced by the Just-In-Time (JIT) compiler inside the JVM is kept too.\
                Compared to stock Maven, less time is spent by the JIT compilation.\
                During the repeated builds the JIT-optimized code is available immediately.\
                This applies not only to the code coming from Maven plugins and Maven Core,\
                but also to all code coming from the JDK itself.

homepage        https://github.com/apache/maven-mvnd
supported_archs x86_64 arm64

master_sites    https://downloads.apache.org/maven/mvnd/${version}/

use_configure   no

if {${configure.build_arch} eq "x86_64"} {
    distname        maven-mvnd-${version}-darwin-amd64
    checksums       rmd160  55c61ba1091fdba6ada6f5bf31eb694e862ea964 \
                    sha256  b94fb24d92cd971b6368df14f44bf77b5614a422dfe9f6f115b32b11860c1d6b \
                    size    19693811
} elseif {${configure.build_arch} eq "arm64"} {
    distname        maven-mvnd-${version}-darwin-aarch64
    checksums       rmd160  765eceeacc278517900fe0b5f0907ce783528b95 \
                    sha256  bca67a44cc3716a7da46926acff41b3864d62e5da6982b9e998eca42d2f9bfac \
                    size    19882709
}

build {}

destroot {
    set target ${prefix}/share/java/${name}
    set dest_target ${destroot}${target}

    # Create the target directory in the destroot
    xinstall -m 755 -d ${dest_target}

    # Copy files into destroot
    foreach f [glob -directory ${worksrcpath} *] {
        copy ${f} ${dest_target}
    }

    # Remove files that are not needed on macOS
    delete ${dest_target}/bin/mvnd.cmd

    # Create launch script
    set launch_script [open ${destroot}${prefix}/bin/mvnd w 0755]
    puts $launch_script "${target}/bin/mvnd $@"
    close $launch_script
}
