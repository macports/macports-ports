# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0
PortGroup        github 1.0

set feature 21
set openjdk_version ${feature}.0.8
set jbr_version b1038.68
github.setup     JetBrains JetBrainsRuntime ${openjdk_version}${jbr_version} jbr-release-
github.tarball_from archive
name             openjdk${feature}-jetbrains
categories       java devel
maintainers      {danchr @danchr} openmaintainer

# JVMMinimumSystemVersion in Contents/Info.plist is set to macOS 10.12 for x86_64:
# /usr/libexec/PlistBuddy -c "Print :JavaVM:JVMMinimumSystemVersion" Contents/Info.plist
# Mapping to Darwin version: https://trac.macports.org/wiki/PortfileRecipes#compare-osx-darwin-version
platforms        {darwin any >= 16 }

# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror
# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

# https://github.com/JetBrains/JetBrainsRuntime/releases
supported_archs  x86_64 arm64

description      JetBrains Runtime on OpenJDK ${feature}
long_description JetBrains Runtime is a fork of OpenJDK available for \
                 Windows, Mac OS X, and Linux. It supports enhanced \
                 class redefinition (DCEVM), features optional JCEF, a \
                 framework for embedding Chromium-based browsers, \
                 includes a number of improvements in font rendering, \
                 keyboards support, windowing/focus subsystems, HiDPI, \
                 accessibility, and performance, provides better \
                 desktop integration and bugfixes not yet present in \
                 OpenJDK.

master_sites     https://cache-redirector.jetbrains.com/intellij-jbr
use_bzip2        no

if {${configure.build_arch} eq "x86_64"} {
    set jbr_arch x64
    checksums    rmd160  4fdfc129c65379963530e7616a4b91c8ba86e914 \
                 sha256  0d15754f4b845ce781d233cee58d56a854a5fa30cb82b07c879e72f52c2f4d7e \
                 size    95813019
} else {
    set jbr_arch aarch64
    checksums    rmd160  7f68a3228c95d7f0d053603b0fdfaa7f952f7d5c \
                 sha256  f892f49ad8742694d884cd67eee6baa13dc29f53005243bf1ab1d437e531e286 \
                 size    94710807
}

distname         jbr-${openjdk_version}-osx-${jbr_arch}-${jbr_version}
extract.rename   yes

use_configure    no
build {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

patch {
    foreach var { BundledApp JNI } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set target /Library/Java/JavaVirtualMachines/${name}
set destroot_target ${destroot}${target}

destroot {
    xinstall -m 755 -d ${destroot_target}
    copy ${worksrcpath}/Contents ${destroot_target}
}

livecheck.type          regex
livecheck.url   ${github.homepage}/releases.atom
livecheck.regex <title>jb\([lindex [split ${version} .] 0]\.\[^<\]*\)</title>


notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${target}/Contents/Home
"
