# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

set feature 25
name             openjdk${feature}-zulu
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer
platforms        {darwin any}
# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror
# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

supported_archs  x86_64 arm64

# https://www.azul.com/downloads/?version=java-25-ea&os=macos&package=jdk#zulu
version      ${feature}.0.45
set build    33
revision     0

set openjdk_version ${feature}.0.0

description  Azul Zulu Community OpenJDK ${feature} (Early Access)
long_description {*}${description} \
    \n\nAzul® Zulu® is a Java Development Kit (JDK), and a compliant \
    implementation of the Java Standard Edition (SE) specification that \
    contains all the Java components needed to build and run Java SE \
    applications. Zulu has been verified by passing all tests of the OpenJDK \
    Community Technology Compatibility Kit (TCK) as available for each \
    respective Java SE version.

master_sites https://cdn.azul.com/zulu/bin/

# No .tar.gz (yet?) for arm64
use_zip yes

if {${configure.build_arch} eq "x86_64"} {
    distname     zulu${version}-beta-jdk${openjdk_version}-beta.${build}-macosx_x64
    checksums    rmd160  185eb5144336949ced5be9cc2aad8acff8d53372 \
                 sha256  abbabc6271f6d867f7f7bdfc5d7d7e79e511b8e3a226ea14ea897c929e3712b5 \
                 size    229986097
} elseif {${configure.build_arch} eq "arm64"} {
    distname     zulu${version}-beta-jdk${openjdk_version}-beta.${build}-macosx_aarch64
    checksums    rmd160  fd1eaaaba21961500f679a53c07a545601a3e2e3 \
                 sha256  d4fe968859b2e5b733327648681dfa2cfe6182533f6c7b117dcc85d8a2642d79 \
                 size    227463392
}

worksrcdir   ${distname}/zulu-${feature}.jdk

homepage     https://www.azul.com/downloads/

livecheck.type      regex
livecheck.url       https://cdn.azul.com/zulu/bin/
livecheck.regex     zulu(${feature}\.\[0-9\.\]+)-ca-jdk\[0-9\.\]+-macosx_.*\.tar\.gz

use_configure    no
build {}

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set jvms /Library/Java/JavaVirtualMachines
set jdk ${jvms}/jdk-${feature}-azul-zulu.jdk

destroot {
    xinstall -m 755 -d ${destroot}${prefix}${jdk}
    copy ${worksrcpath}/Contents ${destroot}${prefix}${jdk}

    # macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, so let's create a symlink there
    xinstall -m 755 -d ${destroot}${jvms}
    ln -s ${prefix}${jdk} ${destroot}${jdk}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${jdk}/Contents/Home
"
