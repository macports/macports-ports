# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

name             openjdk11-corretto
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer

# See https://github.com/corretto/corretto-11/blob/release-11.0.21.9.1/CHANGELOG.md
# and https://trac.macports.org/wiki/PortfileRecipes#compare-osx-darwin-version
platforms        {darwin any} {darwin >= 20}

# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GPL-2 NoMirror

# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

supported_archs  x86_64 arm64

# https://github.com/corretto/corretto-11/releases
version      11.0.21.9.1
revision     0

description  Amazon Corretto OpenJDK 11 (Long Term Support)
long_description No-cost, multiplatform, production-ready distribution of OpenJDK from Amazon.

master_sites https://corretto.aws/downloads/resources/${version}/

if {${configure.build_arch} eq "x86_64"} {
    distname     amazon-corretto-${version}-macosx-x64
    checksums    rmd160  3d707310a4f54d0b5ca97718e9c27abd6a07576f \
                 sha256  2ce6100b43b102dbd631ec53c14b39b5251e319e431dc4cae2abf5059d2e04fd \
                 size    188103525
} elseif {${configure.build_arch} eq "arm64"} {
    distname     amazon-corretto-${version}-macosx-aarch64
    checksums    rmd160  8f0fb57a27b258995a5b5bded86bdd59bc4b6043 \
                 sha256  c5f5a059203de3b1b3c239331082f36dcad0f261c80a1766e2dc7ab46807f6bd \
                 size    186393704
}

worksrcdir   amazon-corretto-11.jdk

homepage     https://aws.amazon.com/corretto/

livecheck.type      regex
livecheck.url       https://github.com/corretto/corretto-11/releases
livecheck.regex     amazon-corretto-(11\.\[0-9\.\]+)-macosx-.*\.tar\.gz

use_configure    no
build {}

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set jvms /Library/Java/JavaVirtualMachines
set jdk ${jvms}/${name}

destroot {
    xinstall -m 755 -d ${destroot}${prefix}${jdk}
    copy ${worksrcpath}/Contents ${destroot}${prefix}${jdk}

    # macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, so let's create a symlink there
    xinstall -m 755 -d ${destroot}${jvms}
    ln -s ${prefix}${jdk} ${destroot}${jdk}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${jdk}/Contents/Home
"
