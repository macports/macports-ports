# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem       1.0

set feature 23
name             jdk${feature}-graalvm
categories       java devel
maintainers      {breun.nl:nils @breun} openmaintainer
platforms        {darwin any}
# GraalVM Free Terms and Conditions: https://www.oracle.com/downloads/licenses/graal-free-license.html
# This port uses prebuilt binaries; 'NoMirror' makes sure MacPorts doesn't mirror/distribute these third-party binaries
license          GFTC NoMirror
# This port uses prebuilt binaries for a particular architecture; they are not universal binaries
universal_variant no

# https://www.oracle.com/java/technologies/downloads/#graalvmjava23-mac
supported_archs  x86_64 arm64

version     ${feature}.0.2
set build 7
revision    0

master_sites https://download.oracle.com/graalvm/${feature}/archive/

homepage     https://www.oracle.com/java/graalvm/

livecheck.type  none

use_configure    no
build {}

description  Oracle GraalVM for JDK ${feature} (Short Term Support until March 2025)
long_description Oracle GraalVM for JDK ${feature} compiles your Java applications ahead of time into standalone \
    binaries that start instantly, provide peak performance with no warmup, and use fewer cloud resources.

if {${configure.build_arch} eq "x86_64"} {
    distname     graalvm-jdk-${version}_macos-x64_bin
    checksums    rmd160  033a52345e8cfb3270c3248335b75a7a4494bab3 \
                 sha256  b4599fbfd394304a84e9435bf7c673069d4fe0c565d2d44d70f0f6f5804cea35 \
                 size    337796764
} elseif {${configure.build_arch} eq "arm64"} {
    distname     graalvm-jdk-${version}_macos-aarch64_bin
    checksums    rmd160  cf8c4ad2fbab57f78132f5828bf2b7e5f5745ee4 \
                 sha256  0e644b92d03d39bdf4842e378b8b22713faaa4edae8efff0da9929d1e04dd0cb \
                 size    352088817
}

worksrcdir   graalvm-jdk-${version}+${build}.1

variant Applets \
    description { Advertise the JVM capability "Applets".} {}

variant BundledApp \
    description { Advertise the JVM capability "BundledApp". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant JNI \
    description { Advertise the JVM capability "JNI". This is required by some java-based app bundles to recognize and use the JVM.} {}

variant WebStart \
    description { Advertise the JVM capability "WebStart".} {}

patch {
    foreach var { Applets BundledApp JNI WebStart } {
        if {[variant_isset ${var}]} {
            reinplace -E "s|^(\[\[:space:\]\]*<string>)CommandLine(</string>)|\\1${var}\\2\\\n\\1CommandLine\\2|" ${worksrcpath}/Contents/Info.plist
        }
    }
}

test.run    yes
test.cmd    Contents/Home/bin/java
test.target
test.args   -version

# macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, which is not under ${prefix}.
destroot.violate_mtree yes

set jvms /Library/Java/JavaVirtualMachines
set jdk ${jvms}/jdk-${feature}-oracle-graalvm.jdk

destroot {
    xinstall -m 755 -d ${destroot}${prefix}${jdk}
    copy ${worksrcpath}/Contents ${destroot}${prefix}${jdk}

    # macOS Java tools expect to find Java virtual machines under /Library/Java/JavaVirtualMachines, so let's create a symlink there
    xinstall -m 755 -d ${destroot}${jvms}
    ln -s ${prefix}${jdk} ${destroot}${jdk}
}

notes "
If you have more than one JDK installed you can make ${name} the default\
by adding the following line to your shell profile:

    export JAVA_HOME=${jdk}/Contents/Home
"

