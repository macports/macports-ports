# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                openjdk11
# https://github.com/openjdk/jdk11u/tags
# remove 'jdk-' from the latest tag without '-ga' that has commit that corresponds to the latest tag with '-ga'
version             11.0.15+10
set ver [string map {+10 {}} ${version}]
revision            0
categories          java devel
platforms           darwin
supported_archs     x86_64 arm64
license             GPL-2+
maintainers         {outlook.com:usersword123 @usersxx} openmaintainer
description         Openjdk 11
long_description    JDK 11 builds of Openjdk, the Open-Source implementation \
                    of the Java Platform, Standard Edition, and related projects.
homepage            https://openjdk.java.net/
master_sites        https://git.openjdk.java.net/jdk11u/archive/refs/tags
distname            jdk-11.0.15+10

checksums           rmd160  4e54be9b3a7ee2a0c7d8c5596f6b95396d30bb25 \
                    sha256  a125f0f2e34061ea1509c9f24caec51e6e23411552d6b660a6f60c054853dc63 \
                    size    122892672

depends_build       port:autoconf \
                    port:gmake \
                    port:bash

pre-patch {
    reinplace "s|assert|vmassert|g" ${worksrcpath}/src/hotspot/share/jfr/periodic/jfrNetworkUtilization.cpp
}

if {${configure.build_arch} eq "x86_64"} {
    depends_build-append       port:openjdk11-bootstrap
} elseif {${configure.build_arch} eq "arm64"} {
    depends_build-append       port:openjdk11-zulu
    use_xcode           yes
}

if {${os.major} < 16} {
    default_variants    +zero +release
} else {
    default_variants    +server +release
}

set tpath /Library/Java
use_configure    yes
configure.cmd       ${prefix}/bin/bash configure
configure.pre_args  --prefix=${tpath}
set extrachflags "-isysroot `xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set extracxxflags "-isysroot `xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set extraldflags "-Wl,-syslibroot,`xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set bug_url "https://trac.macports.org/newticket?port=${name}"
# default configure args
configure.args      --with-debug-level=release \
                    --with-native-debug-symbols=none \
                    --with-version-string=${version} \
                    --with-target-bits=64 \
                    --with-sysroot=`xcrun --sdk macosx --show-sdk-path` \
                    --with-extra-cflags="${configure.cflags} ${extrachflags}" \
                    --with-extra-cxxflags="${configure.cxxflags} ${extracxxflags}" \
                    --with-extra-ldflags="${configure.ldflags} ${extraldflags}" \
                    --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk11-bootstrap/Contents/Home \
                    --disable-warnings-as-errors \
                    --disable-precompiled-headers \
                    --with-vendor-name="OpenJDK Porters Group" \
                    --with-vendor-url="${homepage}" \
                    --with-vendor-bug-url="${bug_url}" \
                    --with-vendor-vm-bug-url="${bug_url}" \
                    --with-conf-name=openjdk11

variant release \
    description {OpenJDK with no debug information, all optimizations and no asserts} {
    configure.args-append   --with-debug-level=release
}

variant optimized \
    description {OpenJDK with no debug information, all optimizations, no asserts and HotSpot is 'optimized'} {
    configure.args-append   --with-debug-level=optimized
}

variant debug \
    description {OpenJDK with debug information, all optimizations and all asserts} {
    configure.args-append   --with-debug-level=fastdebug
    configure.args-delete   --with-native-debug-symbols=none
}

variant client \
    description {JVM with normal interpreter, C1 and no C2 compiler} {
    configure.args-append   --with-jvm-variants=client
}

variant server \
    description {JVM with normal interpreter, and a tiered C1/C2 compiler} {
    configure.args-append   --with-jvm-variants=server
}

variant minimal \
    description {JVM with reduced form of normal interpreter having C1, no C2 compiler and optional features stripped out} {
    configure.args-append   --with-jvm-variants=minimal
}

variant core \
    description {JVM with normal interpreter only and no compiler} {
    configure.args-append   --with-jvm-variants=core
}

variant zero \
    description {JVM with C++ based interpreter only, no compiler} {
    post-patch {
        reinplace "s|libffi.so.?|libffi.?.dylib|g" ${worksrcpath}/make/autoconf/lib-ffi.m4
    }
    configure.args-append   --with-jvm-variants=zero \
                            --with-libffi=${prefix} \
                            --enable-libffi-bundling
    depends_lib-append         port:libffi
}

if {${configure.build_arch} eq "arm64"} {
    configure.args-delete      --with-target-bits=64
    configure.post_args        --openjdk-target=aarch64-apple-darwin
} elseif {${configure.build_arch} eq "x86_64"} {
    configure.post_args
}
build.type          gnu
build.target        images
use_parallel_build  no
set jdkn jdk-${ver}.jdk
set bundle_dir build/openjdk11/images/jdk-bundle/${jdkn}/Contents

test.run            yes
test.cmd            ${bundle_dir}/Home/bin/java
test.target         --version

set pathb ${tpath}/JavaVirtualMachines/${name}
destroot {
    xinstall -m 755 -d ${destroot}${pathb}
    copy ${worksrcpath}/${bundle_dir} ${destroot}${pathb}
}
destroot.violate_mtree      yes

post-destroot {
    delete ${worksrcpath}
}

notes "
If you want to make ${name} the default JDK, add this to shell profile:
export JAVA_HOME=${pathb}/Contents/Home
"
    
