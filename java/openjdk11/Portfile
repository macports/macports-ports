# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                openjdk11
# https://github.com/openjdk/jdk11u/tags
version             11.0.14.1
revision            3
categories          java devel
platforms           darwin
supported_archs     x86_64 arm64
license             GPL-2+
maintainers         {outlook.com:usersword123 @usersxx} openmaintainer
description         Openjdk 11
long_description    JDK 11 builds of Openjdk, the Open-Source implementation \
                    of the Java Platform, Standard Edition, and related projects.
homepage            https://openjdk.java.net/
fetch.type          git
git.url             https://github.com/openjdk/jdk11u
git.branch             jdk-${version}-ga
depends_build       port:autoconf \
                    port:gmake \
                    port:bash \
                    port:openjdk11-bootstrap

if {${configure.build_arch} eq "x86_64"} {
    patchfiles          patch-openjdk11-build2.diff
} elseif {${configure.build_arch} eq "arm64"} {
    depends_build-replace       port:openjdk11-bootstrap port:openjdk11-zulu
    patchfiles          patch-openjdk11-build2.diff \
                        patch-openjdk11-arm64-fix.diff \
                        patch-openjdk11-arm64.diff \
                        patch-openjdk11-arm64-fix2.diff \
                        patch-openjdk11-arm64-fix3.diff
    if {${os.major} == 21} {
        patchfiles-append          patch-openjdk11-build1.diff
    }
    use_xcode           yes
}

default_variants    +server +release

set tpath /Library/Java
use_configure    yes
configure.cmd       ${prefix}/bin/bash configure
configure.pre_args  --prefix=${tpath}
set extrachflags "-isysroot `xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set extracxxflags "-isysroot `xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set extraldflags "-Wl,-syslibroot,`xcrun --sdk macosx --show-sdk-path` -arch ${configure.build_arch}"
set jchflags "-Wno-implicit-function-declaration -Wno-unused-parameter"
set jcxxflags "-Wno-implicit-function-declaration -Wno-unused-parameter"
set jldflags "-L`xcrun --sdk macosx --show-sdk-path`/usr/lib -L`xcrun --sdk macosx --show-sdk-path`/usr/lib/system"
# default configure args
configure.args      --with-debug-level=release \
                    --with-native-debug-symbols=none \
                    --with-version-pre=release \
                    --with-jvm-variants=server \
                    --with-sysroot=`xcrun --sdk macosx --show-sdk-path` \
                    --with-extra-cflags="${configure.cflags} ${extrachflags} ${jchflags}" \
                    --with-extra-cxxflags="${configure.cxxflags} ${extracxxflags} ${jcxxflags}" \
                    --with-extra-ldflags="${configure.ldflags} ${extraldflags} ${jldflags}" \
                    --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk11-bootstrap/Contents/Home \
                    --disable-warnings-as-errors \
                    --disable-precompiled-headers \
                    --with-conf-name=openjdk${version}

variant server \
    description {JVM with normal interpreter, and a tiered C1/C2 compiler} {}

variant release \
    description {OpenJDK with no debug information, all optimizations and no asserts} {}

variant optimized \
    description {OpenJDK with no debug information, all optimizations, no asserts and HotSpot is 'optimized'} {
    configure.args-replace   --with-debug-level=release --with-debug-level=optimized
}

variant debug \
    description {OpenJDK with debug information, all optimizations and all asserts} {
    configure.args-replace  --with-debug-level=release --with-debug-level=fastdebug
    configure.args-delete   --with-native-debug-symbols=none
}

variant client \
    description {JVM with normal interpreter, C1 and no C2 compiler} {
    configure.args-replace   --with-jvm-variants=server --with-jvm-variants=client
}

variant minimal \
    description {JVM with reduced form of normal interpreter having C1, no C2 compiler and optional features stripped out} {
    configure.args-replace   --with-jvm-variants=server --with-jvm-variants=minimal
}

variant core \
    conflicts server client minimal \
    description {JVM with normal interpreter only and no compiler} {
    configure.args-replace   --with-jvm-variants=server --with-jvm-variants=core
}

if {${configure.build_arch} eq "arm64"} {
    configure.args-replace      --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk11-bootstrap/Contents/Home \
                                --with-boot-jdk=/Library/Java/JavaVirtualMachines/openjdk11-zulu/Contents/Home
    configure.post_args --with-build-jdk=/Library/Java/JavaVirtualMachines/openjdk11-zulu/Contents/Home \
                        --openjdk-target=aarch64-apple-darwin
} elseif {${configure.build_arch} eq "x86_64"} {
    configure.post_args
}
build.type          gnu
build.target        images
use_parallel_build  no
set jdkn jdk-${version}.jdk
set bundle_dir build/openjdk${version}/images/jdk-bundle/${jdkn}/Contents

test.run            yes
test.cmd            ${bundle_dir}/Home/bin/java
test.target         --version

set pathb ${tpath}/JavaVirtualMachines/${name}
destroot {
    xinstall -m 755 -d ${destroot}${pathb}
    copy ${worksrcpath}/${bundle_dir} ${destroot}${pathb}
}
destroot.violate_mtree      yes

post-destroot {
    delete ${worksrcpath}
}

notes "
If you want to make ${name} the default JDK, add this to shell profile:
export JAVA_HOME=${pathb}/Contents/Home
"
    
