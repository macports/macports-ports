# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0
PortGroup       java 1.0

name            spring-boot-cli
version         2.5.7
revision        0

categories      java
platforms       darwin
maintainers     {breun.nl:nils @breun} openmaintainer
license         Apache-2
supported_archs noarch

description     Spring Boot CLI -- An opinionated view of building \
                production-ready Spring applications.

long_description The Spring Boot CLI is a command line tool that can be used \
                if you want to quickly prototype with Spring. It allows you to \
                run Groovy scripts, which means that you have a familiar \
                Java-like syntax, without much boilerplate code. \
                \
                You don't need to use the CLI to work with Spring Boot but \
                it's definitely the quickest way to get a Spring application \
                off the ground.

homepage        https://projects.spring.io/spring-boot/
master_sites    https://repo.spring.io/release/org/springframework/boot/${name}/${version}/

distname        ${name}-${version}-bin

checksums       rmd160  affdc2ece44898a58d0b1949066005574155ebb9 \
                sha256  c75ade609eb57f3a9e6a0d1eee4113df56443761383f800594aa9eeedb6ac2d5 \
                size    14290405

worksrcdir      spring-${version}.RELEASE

use_configure   no

java.version    1.8+
java.fallback   openjdk8

build {}

test.run    yes
test.cmd    bin/spring
test.target
test.args   --version

destroot {
    set target ${destroot}${prefix}/share/java/${name}

    # Create the target java directory
    xinstall -m 755 -d ${target}

    # Copy over the needed elements of our directory tree
    foreach d { bin lib } {
        copy ${worksrcpath}/${d} ${target}
    }

    # Remove extraneous bat files
    foreach f [glob -directory ${target}/bin *.bat] {
        delete ${f}
    }

    # Add symlink to the script
    ln -s ../share/java/${name}/bin/spring ${destroot}${prefix}/bin
}

variant bash_completion {
    depends_run-append path:etc/bash_completion:bash-completion
    post-destroot {
        xinstall -d ${destroot}${prefix}/etc/bash_completion.d
        copy ${worksrcpath}/shell-completion/bash/spring \
             ${destroot}${prefix}/etc/bash_completion.d/spring
    }
}
