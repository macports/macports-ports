Apple's changes between upstream screen-4.0.3
and their release of screen, called screen-22.
You can view the screen-22 source at
https://opensource.apple.com/tarballs/screen/

Upstream screen-4.0.3 is released under the GPLv2,
so Apple's changes (this patch) is a derivative work and
also licensed under the GPLv2.

This patch was then rebased against the latest upstream
GNU Screen, which was version 4.6.2 and no longer required
many of Apple's changes. This was done by David Gilman
for MacPorts.

diff -rU 3 screen-4.6.2-orig/screen.c screen-4.6.2/screen.c
--- screen.c	2018-08-22 14:34:15.477730848 -0400
+++ screen.c	2018-08-22 14:53:19.778162637 -0400
@@ -118,6 +118,14 @@
 
 #include "logfile.h" /* islogfile, logfflush, logfopen/logfclose */
 
+#ifdef __APPLE__
+#include <TargetConditionals.h>
+#if !TARGET_OS_EMBEDDED
+#include <vproc.h>
+#include <vproc_priv.h>
+#endif
+#endif
+
 #ifdef DEBUG
 FILE *dfp;
 #endif
@@ -1049,6 +1057,15 @@
         Panic(0, "No $SCREENDIR with multi screens, please.");
 #endif
     }
+#ifdef __APPLE__
+    else if (!multi && real_uid == eff_uid) {
+      static char DarwinSockDir[PATH_MAX];
+      if (confstr(_CS_DARWIN_USER_TEMP_DIR, DarwinSockDir, sizeof(DarwinSockDir))) {
+	strlcat(DarwinSockDir, ".screen", sizeof(DarwinSockDir));
+	SockDir = DarwinSockDir;
+      }
+    }
+#endif	/* __APPLE__ */
 
 #ifdef MULTIUSER
     if (multiattach) {
@@ -1312,6 +1329,11 @@
   freopen("/dev/null", "w", stderr);
   debug("-- screen.back debug started\n");
 
+#if defined(__APPLE__) && !TARGET_OS_EMBEDDED
+	if (_vprocmgr_detach_from_console(0) != NULL)
+		errx(1, "can't detach from console");
+#endif
+
   /*  This guarantees that the session owner is listed, even when we
    *  start detached. From now on we should not refer to 'LoginName'
    *  any more, use users->u_name instead.
diff -rU 3 screen-4.6.2-orig/socket.c screen-4.6.2/socket.c
--- socket.c	2018-08-22 14:34:15.476989022 -0400
+++ socket.c	2018-08-22 14:39:24.526567573 -0400
@@ -1410,7 +1410,10 @@
   char *p;
   int pid;
   int noshowwin;
+
+#ifndef __APPLE__
   struct win *wi;
+#endif
 
   ASSERT(display);
   pid = D_userpid;
diff -rU 3 screen-4.6.2-orig/window.c screen-4.6.2/window.c
--- window.c	2018-08-22 14:34:15.475905157 -0400
+++ window.c	2018-08-22 14:56:04.836374114 -0400
@@ -33,6 +33,9 @@
 #include <sys/stat.h>
 #include <signal.h>
 #include <fcntl.h>
+#ifdef __APPLE__
+#include <unistd.h>
+#endif __APPLE__
 #ifndef sun
 # include <sys/ioctl.h>
 #endif
@@ -1482,6 +1485,40 @@
 }
 
 #ifndef HAVE_EXECVPE
+#ifdef __APPLE__
+#ifdef RUN_LOGIN
+/*
+ * All of the logic to maintain utmpx is now built into /usr/bin/login, so
+ * all we need to do is call it, and pass the shell command to it.
+ */
+extern char *LoginName;
+
+static int
+run_login(const char *path, char *const argv[], char *const envp[])
+{
+  const char *shargs[MAXARGS + 1 + 3];
+  const char **fp, **tp;
+
+  if (access(path, X_OK) < 0)
+    return -1;
+  shargs[0] = "login";
+  shargs[1] = (*argv[0] == '-') ? "-pfq" : "-pflq";
+  shargs[2] = LoginName;
+  shargs[3] = path;
+  fp = (const char **)argv + 1;
+  tp = shargs + 4;
+  /* argv has already been check for length */
+  while ((*tp++ = *fp++) != NULL) {}
+  /* shouldn't return unless there was an error */
+  return (execve("/usr/bin/login", (char *const*)shargs, envp));
+}
+
+/* replace the following occurrences of execve() with run_login() */
+#define execve run_login
+
+#endif /* RUN_LOGIN */
+#endif /* __APPLE__ */
+
 void
 execvpe(prog, args, env)
 char *prog, **args, **env;
