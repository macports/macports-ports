diff --git a/src/x86/apic.c b/src/x86/apic.c
index 2d9ecf7..1edcfc4 100644
--- src/x86/apic.c
+++ src/x86/apic.c
@@ -102,6 +102,7 @@ bool bind_to_cpu(int cpu_id) {
 }
 #endif
 
+#ifdef __linux__
 int get_total_cores_module(int total_cores, int module) {
   int total_modules = 2;
   int32_t current_module_idx = -1;
@@ -154,6 +155,7 @@ int get_total_cores_module(int total_cores, int module) {
   //printf("Module %d has %d cores\n", module, cores_in_module);
   return cores_in_module;
 }
+#endif
 
 bool fill_topo_masks_apic(struct topology* topo) {
   uint32_t eax = 0x00000001;
diff --git a/src/x86/apic.h b/src/x86/apic.h
index 98b6337..0f79995 100644
--- src/x86/apic.h
+++ src/x86/apic.h
@@ -21,6 +21,8 @@ uint32_t is_smt_enabled_amd(struct topology* topo);
 bool bind_to_cpu(int cpu_id);
 #endif
 
+#ifdef __linux__
 int get_total_cores_module(int total_cores, int module);
+#endif
 
 #endif
diff --git a/src/x86/cpuid.c b/src/x86/cpuid.c
index bdc397d..b433fa9 100644
--- src/x86/cpuid.c
+++ src/x86/cpuid.c
@@ -398,6 +398,10 @@ bool set_cpu_module(int m, int total_modules, int32_t* first_core) {
       return false;
     }
   }
+  else {
+    // This is a normal architecture
+    *first_core = 0;
+  }
 
   return true;
 }
@@ -652,7 +656,11 @@ struct topology* get_topology_info(struct cpuInfo* cpu, struct cache* cach, int
   #endif
 
   if(cpu->hybrid_flag) {
-    topo->total_cores_module = get_total_cores_module(topo->total_cores, module);
+    #ifdef __linux__
+      topo->total_cores_module = get_total_cores_module(topo->total_cores, module);
+    #else
+      topo->total_cores_module = topo->total_cores;
+    #endif
   }
   else {
     topo->total_cores_module = topo->total_cores;
diff --git src/common/cpu.c src/common/cpu.c
index 5cbbf9d..2faa4bb 100644
--- src/common/cpu.c
+++ src/common/cpu.c
@@ -16,8 +16,6 @@
   #include "../arm/uarch.h"
 #endif
 
-#define UNUSED(x) (void)(x)
-
 #define STRING_YES        "Yes"
 #define STRING_NO         "No"
 #define STRING_NONE       "None"
diff --git src/common/global.h src/common/global.h
index 5e5a0b3..4b61c4e 100644
--- src/common/global.h
+++ src/common/global.h
@@ -5,6 +5,7 @@
 #include <stddef.h>
 
 #define STRING_UNKNOWN "Unknown"
+#define UNUSED(x) (void)(x)
 
 void set_log_level(bool verbose);
 void printWarn(const char *fmt, ...);
diff --git src/x86/apic.c src/x86/apic.c
index 1edcfc4..1757110 100644
--- src/x86/apic.c
+++ src/x86/apic.c
@@ -7,8 +7,6 @@
 #elif defined __FreeBSD__
   #include <sys/param.h>
   #include <sys/cpuset.h>
-#elif defined __APPLE__
-  #define UNUSED(x) (void)(x)
 #endif
 
 #include <stdlib.h>
@@ -355,6 +353,7 @@ void add_apic_to_array(uint32_t apic, uint32_t* apic_ids, int n) {
 bool fill_apic_ids(uint32_t* apic_ids, int first_core, int n, bool x2apic_id) {
 #ifdef __APPLE__
   // macOS extremely dirty approach...
+  UNUSED(first_core);
   printf("cpufetch is computing APIC IDs, please wait...\n");
   bool end = false;
   uint32_t apic;
diff --git src/x86/cpuid.c src/x86/cpuid.c
index b433fa9..fdc8869 100644
--- src/x86/cpuid.c.orig	2023-01-05 04:17:49
+++ src/x86/cpuid.c	2023-01-06 08:04:53
@@ -356,6 +356,11 @@
 
 bool set_cpu_module(int m, int total_modules, int32_t* first_core) {
   if(total_modules > 1) {
+    #ifdef __APPLE__
+    UNUSED(m);
+    printBug("Hybrid architectures are not supported under macOS");
+    return false;
+    #else
     // We have a hybrid architecture.
     // 1. Find the first core from module m
     int32_t core_id = -1;
@@ -397,6 +402,7 @@
     if(!bind_to_cpu(core_id)) {
       return false;
     }
+    #endif
   }
 
   return true;
@@ -655,6 +661,7 @@
     topo->total_cores_module = get_total_cores_module(topo->total_cores, module);
   }
   else {
+    UNUSED(module);
     topo->total_cores_module = topo->total_cores;
   }
