From 28a70a81e70ea5919938958ce48112eafe24154c Mon Sep 17 00:00:00 2001
From: Wez Furlong <wez@fb.com>
Date: Wed, 2 May 2018 14:39:12 -0700
Subject: [PATCH] fixup compilation error on macos

Summary:
This only seems to be breaking our autoconf based builds
on the mac hosts.  The cmake based builds on macs are succeeding.
Weird!

I've removed the use of container_of; all instances can be
replaced with a simple cast as the members were all at
the front of their respective structs.

Longer term, I'd like to migrate this to folly::dynamic and the
bser implementation there.

```
bser.cpp:345:17: error: offset of on non-standard-layout type 'json_object_t' [-Werror,-Winvalid-offsetof]
  auto object = json_to_object(obj);
```

Reviewed By: chadaustin

Differential Revision: D7849156

fbshipit-source-id: 9d8115a1fc73ee6360d3857644bc736e89205b67
---
 bser.cpp                             |  3 +--
 thirdparty/jansson/jansson_private.h | 27 +++++++++++++++++++--------
 thirdparty/jansson/load.cpp          |  4 +++-
 3 files changed, 23 insertions(+), 11 deletions(-)

diff --git a/bser.cpp b/bser.cpp
index 4c858724..8db9baf2 100644
--- a/bser.cpp
+++ b/bser.cpp
@@ -342,8 +342,7 @@ static int bser_object(const bser_ctx_t* ctx, const json_ref& obj, void* data) {
     return -1;
   }
 
-  auto object = json_to_object(obj);
-  for (auto& it : object->map) {
+  for (auto& it : obj.object()) {
     auto &key = it.first;
     auto &val = it.second;
 
diff --git a/thirdparty/jansson/jansson_private.h b/thirdparty/jansson/jansson_private.h
index 318b0698..b70f6e68 100644
--- a/thirdparty/jansson/jansson_private.h
+++ b/thirdparty/jansson/jansson_private.h
@@ -15,9 +15,6 @@
 #include <unordered_map>
 #include <vector>
 
-#define container_of(ptr_, type_, member_)  \
-    ((type_ *)((char *)ptr_ - offsetof(type_, member_)))
-
 /* va_copy is a C99 feature. In C89 implementations, it's sometimes
    available as __va_copy. If not, memcpy() should do the trick. */
 #ifndef va_copy
@@ -68,11 +65,25 @@ struct json_integer_t {
   json_integer_t(json_int_t value);
 };
 
-#define json_to_object(json_)  container_of((json_t*)json_, json_object_t, json)
-#define json_to_array(json_)   container_of((json_t*)json_, json_array_t, json)
-#define json_to_string(json_)  container_of((json_t*)json_, json_string_t, json)
-#define json_to_real(json_)   container_of((json_t*)json_, json_real_t, json)
-#define json_to_integer(json_) container_of((json_t*)json_, json_integer_t, json)
+inline json_object_t* json_to_object(const json_t* json) {
+  return reinterpret_cast<json_object_t*>(const_cast<json_t*>(json));
+}
+
+inline json_array_t* json_to_array(const json_t* json) {
+  return reinterpret_cast<json_array_t*>(const_cast<json_t*>(json));
+}
+
+inline json_string_t* json_to_string(const json_t* json) {
+  return reinterpret_cast<json_string_t*>(const_cast<json_t*>(json));
+}
+
+inline json_real_t* json_to_real(const json_t* json) {
+  return reinterpret_cast<json_real_t*>(const_cast<json_t*>(json));
+}
+
+inline json_integer_t* json_to_integer(const json_t* json) {
+  return reinterpret_cast<json_integer_t*>(const_cast<json_t*>(json));
+}
 
 void jsonp_error_init(json_error_t *error, const char *source);
 void jsonp_error_set_source(json_error_t *error, const char *source);
diff --git a/thirdparty/jansson/load.cpp b/thirdparty/jansson/load.cpp
index 0c369cdd..391fb058 100644
--- a/thirdparty/jansson/load.cpp
+++ b/thirdparty/jansson/load.cpp
@@ -68,7 +68,9 @@ typedef struct {
     } value;
 } lex_t;
 
-#define stream_to_lex(stream) container_of(stream, lex_t, stream)
+inline lex_t* stream_to_lex(stream_t* stream) {
+  return reinterpret_cast<lex_t*>(stream);
+}
 
 
 /*** error reporting ***/