diff --color=auto -Naur gkrellm-2.3.11/server/main.c gkrellm/server/main.c
--- gkrellm-2.3.11/server/main.c	2019-07-25 09:51:21
+++ gkrellm/server/main.c	2023-04-17 16:49:45
@@ -35,6 +35,8 @@
 #include "gkrellmd-private.h"
 #include "log-private.h"
 
+#include "../src/inet.h" // for INET6 define
+
 #if !defined(WIN32)
 	#include <syslog.h>
 #endif // !WIN32
@@ -473,22 +475,43 @@
 	addr = inet_ntoa(((struct sockaddr_in *)sa)->sin_addr);
 #endif
 
+	gkrellm_debug(DEBUG_SERVER, "Connect from %s[%s]\n", hostname ? hostname : "[unknown]", addr);
+
 	client->hostname = g_strdup(hostname ? hostname : addr);
 
 	if (!allow_host_list)
+		{
+		gkrellm_debug(DEBUG_SERVER, "Client %s[%s] allowed, no allowed hosts list\n", (hostname ? hostname : "[unknown]"), addr);
 		return TRUE;
+		}
 
 	for (list = allow_host_list; list; list = list->next)
 		{
 		allowed = (gchar *) list->data;
-		if (   (hostname && !strcmp(hostname, allowed))
-			|| (addr && !strcmp(addr, allowed))
-			|| !strcmp("ALL", allowed)
-		   )
+
+		if (!strcmp("ALL", allowed))
+			{
+			gkrellm_debug(DEBUG_SERVER, "Client %s[%s] matches ALL\n", (hostname ? hostname : "[unknown]"), addr);
 			return TRUE;
+			}
 
+		if (hostname && !strcmp(hostname, allowed))
+			{
+			gkrellm_debug(DEBUG_SERVER, "Client %s[%s] matches hostname %s\n", (hostname ? hostname : "[unknown]"), addr, allowed);
+			return TRUE;
+			}
+
+		if (addr && !strcmp(addr, allowed))
+			{
+			gkrellm_debug(DEBUG_SERVER, "Client %s[%s] matches address %s\n", (hostname ? hostname : "[unknown]"), addr, allowed);
+			return TRUE;
+			}
+
 		if (addr && cidr_match(sa, salen, allowed))
+			{
+			gkrellm_debug(DEBUG_SERVER, "Client %s[%s] matches CIDR address %s\n", (hostname ? hostname : "[unknown]"), addr, allowed);
 			return TRUE;
+			}
 
 		/* Check for simple IPv4 subnet match.  Worry later about ranges and
 		|  other hosts_access type patterns.
@@ -498,7 +521,12 @@
 			&& *(s + 1) == '*' && *(s + 2) == '\0'
 			&& !strncmp(addr, allowed, (gint) (s - allowed + 1))
 		   )
-				return TRUE;
+			{
+			gkrellm_debug(DEBUG_SERVER, "Client %s[%s] matches IPv4 wildcard %s\n", (hostname ? hostname : "[unknown]"), addr, allowed);
+			return TRUE;
+			}
+
+		gkrellm_debug(DEBUG_SERVER, "Client %s[%s] not matched by %s\n", (hostname ? hostname : "[unknown]"), addr, allowed);
 		}
 
 	snprintf(buf, sizeof(buf), _("Connection not allowed from %s\n"),
diff --color=auto -Naur gkrellm-2.3.11/src/clock.c gkrellm/src/clock.c
--- gkrellm-2.3.11/src/clock.c	2019-07-25 09:49:59
+++ gkrellm/src/clock.c	2023-04-17 16:49:45
@@ -1,5 +1,5 @@
 /* GKrellM
-|  Copyright (C) 1999-2019 Bill Wilson
+|  Copyright (C) 1999-2021 Bill Wilson
 |
 |  Author:  Bill Wilson    billw@gkrellm.net
 |  Latest versions might be found at:  http://gkrellm.net
@@ -272,6 +272,9 @@
 	cal_string = strftime_format(cal_format, cal_alt_color_string);
 	d_cal = gkrellm_create_decal_text_markup(pcal, cal_string,
 				gkrellm_meter_textstyle(cal_style_id), style, -1, -1, -1);
+	/* Calendar formats with %n have multiple lines which should be centered.
+	*/
+	d_cal->flags |= DF_TEXT_CENTER;
 	g_free(cal_string);
 
 	gkrellm_panel_configure(pcal, NULL, style);
@@ -378,6 +381,9 @@
 	clock_string = strftime_format(clock_format, clock_alt_color_string);
 	d_clock = gkrellm_create_decal_text_markup(pclock, clock_string,
 				gkrellm_meter_textstyle(clock_style_id), style, -1, -1, -1);
+	/* Clock formats with %n have multiple lines which should be centered.
+	*/
+	d_clock->flags |= DF_TEXT_CENTER;
 	g_free(clock_string);
 
 	gkrellm_panel_configure(pclock, NULL, style);
diff --color=auto -Naur gkrellm-2.3.11/src/gkrellm.h gkrellm/src/gkrellm.h
--- gkrellm-2.3.11/src/gkrellm.h	2019-07-25 09:49:59
+++ gkrellm/src/gkrellm.h	2023-04-17 16:49:45
@@ -1,5 +1,5 @@
 /* GKrellM
-|  Copyright (C) 1999-2019 Bill Wilson
+|  Copyright (C) 1999-2021 Bill Wilson
 |
 |  Author:  Bill Wilson    billw@gkrellm.net
 |  Latest versions might be found at:  http://gkrellm.net
@@ -262,8 +262,8 @@
 #define DF_LOCAL_PIXMAPS		0x4
 #define	DF_OVERLAY_PIXMAPS		0x8
 #define	DF_TEXT_OVERLAPS		0x10
-#define	DF_SCROLL_TEXT_DIVERTED	0x20
-#define	DF_SCROLL_TEXT_CENTER	0x40
+#define	DF_TEXT_CENTER			0x20
+#define	DF_SCROLL_TEXT_DIVERTED	0x40
 #define	DF_SCROLL_TEXT_H_LOOP	0x80
 #define	DF_SCROLL_TEXT_V_LOOP	0x100
 #define	DF_TEXT_USE_MARKUP		0x200
diff --color=auto -Naur gkrellm-2.3.11/src/krell.c gkrellm/src/krell.c
--- gkrellm-2.3.11/src/krell.c	2019-07-25 09:49:59
+++ gkrellm/src/krell.c	2023-04-17 16:49:45
@@ -1,5 +1,5 @@
 /* GKrellM
-|  Copyright (C) 1999-2019 Bill Wilson
+|  Copyright (C) 1999-2021 Bill Wilson
 |
 |  Author:  Bill Wilson    billw@gkrellm.net
 |  Latest versions might be found at:  http://gkrellm.net
@@ -542,14 +542,14 @@
 
 	if (!d)
 		return;
-	prev_center = d->flags & DF_SCROLL_TEXT_CENTER;
+	prev_center = d->flags & DF_TEXT_CENTER;
 	if ((center && prev_center) || (!center && !prev_center))
 		return;
 
 	if (center)
-		d->flags |= DF_SCROLL_TEXT_CENTER;
+		d->flags |= DF_TEXT_CENTER;
 	else
-		d->flags &= ~DF_SCROLL_TEXT_CENTER;
+		d->flags &= ~DF_TEXT_CENTER;
 	d->modified = TRUE;
 	}
 
@@ -612,7 +612,7 @@
 	ts = &d->text_style;
 	layout = gtk_widget_create_pango_layout(gkrellm_get_top_window(), NULL);
 	pango_layout_set_spacing(layout, 0);
-	if (d->flags & DF_SCROLL_TEXT_CENTER)
+	if (d->flags & DF_TEXT_CENTER)
 		pango_layout_set_alignment(layout, PANGO_ALIGN_CENTER);
 	pango_layout_set_font_description(layout, ts->font);
 	if (d->flags & DF_TEXT_USE_MARKUP)
@@ -757,7 +757,7 @@
 
 	if (dx >= 0)
 		pixbuf = gdk_pixbuf_get_from_drawable(NULL, p->bg_pixmap, NULL,
-				d->x + ((d->flags & DF_SCROLL_TEXT_CENTER) ? dx / 2 : 0), d->y,
+				d->x + ((d->flags & DF_TEXT_CENTER) ? dx / 2 : 0), d->y,
 				0, 0, d->scroll_width, d->h);
 	else
 		{
diff --color=auto -Naur gkrellm-2.3.11/src/mail.c gkrellm/src/mail.c
--- gkrellm-2.3.11/src/mail.c	2019-07-25 09:49:59
+++ gkrellm/src/mail.c	2023-04-17 16:49:45
@@ -1,5 +1,5 @@
 /* GKrellM
-|  Copyright (C) 1999-2019 Bill Wilson
+|  Copyright (C) 1999-2021 Bill Wilson
 |
 |  Author:  Bill Wilson    billw@gkrellm.net
 |  Latest versions might be found at:  http://gkrellm.net
@@ -1145,7 +1145,7 @@
 		snprintf(line, sizeof(line), "%s%s", key, account->password);
 		g_free(challenge);
 		MD5Init(&ctx);
-		MD5Update(&ctx, line, strlen(line));
+		MD5Update(&ctx, (unsigned char *)line, strlen(line));
 		MD5Final(digest, &ctx);
 		for (i = 0;  i < 16;  i++)
 			{
diff --color=auto -Naur gkrellm-2.3.11/src/panel.c gkrellm/src/panel.c
--- gkrellm-2.3.11/src/panel.c	2019-07-25 09:49:59
+++ gkrellm/src/panel.c	2023-04-17 16:49:45
@@ -1,5 +1,5 @@
 /* GKrellM
-|  Copyright (C) 1999-2019 Bill Wilson
+|  Copyright (C) 1999-2021 Bill Wilson
 |
 |  Author:  Bill Wilson    billw@gkrellm.net
 |  Latest versions might be found at:  http://gkrellm.net
@@ -657,7 +657,7 @@
 		y = tx->y_off;
 		if (d->flags & DF_SCROLL_TEXT_DIVERTED)
 			{
-			if (d->flags & DF_SCROLL_TEXT_CENTER)
+			if (d->flags & DF_TEXT_CENTER)
 				pango_layout_set_alignment(layout, PANGO_ALIGN_CENTER);
 			if (d->flags & DF_SCROLL_TEXT_H_LOOP)
 				{
@@ -693,6 +693,8 @@
 			}
 		else
 			{
+			if (d->flags & DF_TEXT_CENTER)
+				pango_layout_set_alignment(layout, PANGO_ALIGN_CENTER);
 			if (d->flags & DF_TEXT_USE_MARKUP)
 				pango_layout_set_markup(layout, tx->text, strlen(tx->text));
 			else
diff --color=auto -Naur gkrellm-2.3.11/src/sysdeps/solaris.c gkrellm/src/sysdeps/solaris.c
--- gkrellm-2.3.11/src/sysdeps/solaris.c	2019-07-25 09:50:12
+++ gkrellm/src/sysdeps/solaris.c	2023-04-17 16:49:45
@@ -50,41 +50,41 @@
 
 void
 gkrellm_sys_main_init(void)
-	{
-	/* 
-	 * Most of stats (cpu, proc, disk, memory, net and uptime) are 
-	 * unavailable if kstat_open() failed. So we just exit in that case.
-	 */
-	if ((kc = kstat_open()) == NULL) {
-		perror("kstat_open");
-		exit(1);
-	}
+{
+    /* 
+     * Most of stats (cpu, proc, disk, memory, net and uptime) are 
+     * unavailable if kstat_open() failed. So we just exit in that case.
+     */
+    if ((kc = kstat_open()) == NULL) {
+        perror("kstat_open");
+        exit(1);
+    }
 
-	/*
-	 * kvm is utilized solely for getting a value for proc.n_forks 
-	 * from kernel variable called mpid. Even if kvm_open() fails,
-	 * we proceed without it.
-	 */
-	if ((kd = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL)) != NULL) { 
-		kvm_nlist(kd, nl);
-	}
+    /*
+     * kvm is utilized solely for getting a value for proc.n_forks 
+     * from kernel variable called mpid. Even if kvm_open() fails,
+     * we proceed without it.
+     */
+    if ((kd = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL)) != NULL) { 
+        kvm_nlist(kd, nl);
+    }
 
-        /*
-         * a function called by the following requires sys gid privilege.
-         * the following function should be performed here just for that reason.
-         */ 
-        solaris_list_harddisks();
+    /*
+     * a function called by the following requires sys gid privilege.
+     * the following function should be performed here just for that reason.
+     */ 
+    solaris_list_harddisks();
 
-        if (setgid(getgid()) != 0) {
-		perror("Failed to drop setgid privilege");
-		exit(1);
-        }
-	}
+    if (setgid(getgid()) != 0) {
+        perror("Failed to drop setgid privilege");
+        exit(1);
+    }
+}
 
 void
 gkrellm_sys_main_cleanup(void)
-	{
-	}
+{
+}
 
 
 /* ===================================================================== */
@@ -112,11 +112,11 @@
             perror("kstat_read");
             continue;
         }
-		gkrellm_cpu_assign_data(ksp->ks_instance,
-				cs.cpu_sysinfo.cpu[CPU_USER],
-				cs.cpu_sysinfo.cpu[CPU_WAIT],
-				cs.cpu_sysinfo.cpu[CPU_KERNEL],
-				cs.cpu_sysinfo.cpu[CPU_IDLE]);
+        gkrellm_cpu_assign_data(ksp->ks_instance,
+                cs.cpu_sysinfo.cpu[CPU_USER],
+                cs.cpu_sysinfo.cpu[CPU_WAIT],
+                cs.cpu_sysinfo.cpu[CPU_KERNEL],
+                cs.cpu_sysinfo.cpu[CPU_IDLE]);
 
     }
 }
@@ -130,7 +130,7 @@
 gkrellm_sys_cpu_init() {
     extern kstat_ctl_t *kc;
     kstat_t *ksp;
-	gint	n_cpus = 0;
+    gint    n_cpus = 0;
 
     if(kstat_chain_update(kc) == -1) {
         perror("kstat_chain_update");
@@ -141,12 +141,12 @@
         if (strcmp(ksp->ks_module, "cpu_stat")) 
             continue;
         if (kstat_read(kc, ksp, NULL) != -1) {
-			gkrellm_cpu_add_instance(ksp->ks_instance);
-			++n_cpus;
-			}
+            gkrellm_cpu_add_instance(ksp->ks_instance);
+            ++n_cpus;
+            }
     }
-	gkrellm_cpu_set_number_of_cpus(n_cpus);
-	return TRUE;
+    gkrellm_cpu_set_number_of_cpus(n_cpus);
+    return TRUE;
 }
 
 
@@ -167,7 +167,7 @@
 {
 
     double avenrun[LOADAVG_NSTATS], fload = 0;
-	guint	n_processes = 0, n_forks = 0; 
+    guint   n_processes = 0, n_forks = 0; 
     int last_pid;
     extern kstat_ctl_t *kc;
     kstat_t *ksp;
@@ -203,15 +203,15 @@
     /* NOTE: code to get 'n_running' is not implemented (stays untouched).
      * but it wouldn't do any harm since nobody seems to refer to it.
      */
-	gkrellm_proc_assign_data(n_processes, 0, n_forks, fload);
+    gkrellm_proc_assign_data(n_processes, 0, n_forks, fload);
 }
 
 
 void
 gkrellm_sys_proc_read_users(void)
-	{
+{
     static struct utmp *utmpp;
-	gint	n_users;
+    gint    n_users;
 
     n_users = 0;
     setutent();
@@ -219,14 +219,14 @@
         if (utmpp->ut_type == USER_PROCESS && utmpp->ut_name[0] != '\0')
             n_users++;
     }    
-	gkrellm_proc_assign_users(n_users);
+    gkrellm_proc_assign_users(n_users);
 }
 
 gboolean
 gkrellm_sys_proc_init(void)
-    {
-	return TRUE;
-	}
+{
+    return TRUE;
+}
 
 
 
@@ -270,16 +270,16 @@
 
 gchar *
 gkrellm_sys_disk_name_from_device(gint device_number, gint unit_number,
-			gint *order)
-	{
-	return NULL;	/* Disk data by device not implemented in Solaris */
-	}
+            gint *order)
+{
+    return NULL;    /* Disk data by device not implemented in Solaris */
+}
 
 gint
 gkrellm_sys_disk_order_from_name(const gchar *name)
-	{
-	return -1;  /* Append as added */
-	}
+{
+    return -1;  /* Append as added */
+}
 
 void
 gkrellm_sys_disk_read_data(void)
@@ -296,26 +296,37 @@
         return;
     }
     for (ksp = kc->kc_chain; ksp; ksp = ksp->ks_next) {
-	for (list = hard_disk_list; list; list = list->next) {
-            drive = (probed_harddisk *)list->data;
+        if (ksp->ks_type != KSTAT_TYPE_IO || 
+            strcmp(ksp->ks_class, "disk")) {
+            continue;
+        }
+        for (list = hard_disk_list; list; list = list->next) {
+                drive = (probed_harddisk *)list->data;
 
-            if(strcmp(drive->name, ksp->ks_name))
-                continue;
+                if (strcmp(drive->name, ksp->ks_name))
+                    continue;
 
-            memset((void *)&kios, 0, sizeof(kstat_io_t));
-            kstat_read(kc, ksp, &kios);
+                memset((void *)&kios, 0, sizeof(kstat_io_t));
 
-	    gkrellm_disk_assign_data_by_name(drive->name,
-						kios.nread, kios.nwritten, FALSE);
-	}
+                if (kstat_read(kc, ksp, &kios) == -1) {
+                    perror("kstat_read");
+                    return;
+                }
+
+            gkrellm_disk_assign_data_by_name(drive->name,
+                            kios.nread, kios.nwritten, FALSE);
+            /* We don't need to keep searching the list
+             * for a matching hard drive name if we've reached here */
+            break;
+        }
     }
 }
 
 gboolean
 gkrellm_sys_disk_init(void)
-	{
-	return TRUE;
-	}
+{
+    return TRUE;
+}
 
 
   /* Is this needed any longer? */
@@ -477,29 +488,23 @@
                 return -1; /* EACCESS (unless setgid sys) or suchlike */
             }
         }
-#if 0
-	/* Not supported on Solaris 7 */
-        if (ioctl(fd, DKIOCGMEDIAINFO, &dk) < 0)
-#else
-	if (ioctl(fd, DKIOCREMOVABLE, &dkRemovable) < 0)
-#endif
-	{
-            close(fd);
-            di_devfs_path_free(phys_path);
-            return -1;
+        if (ioctl(fd, DKIOCREMOVABLE, &dkRemovable) < 0)
+        {
+                close(fd);
+                di_devfs_path_free(phys_path);
+                return -1;
         }
-#if 0
-        if (dk.dki_media_type == DK_FIXED_DISK)
-#else
+
         if (!dkRemovable)
-#endif
-	{
-	   close(fd);
-	   di_devfs_path_free(phys_path);
-	   return 1;
+        {
+           close(fd);
+           di_devfs_path_free(phys_path);
+           return 1;
         }
-	return 0;
+
+        return 0;
     }
+
     return -1; /* shouldn't be reached */
 } 
 
@@ -663,7 +668,7 @@
                 tcp.local_port          = tp6->tcp6ConnLocalPort;
                 tcp.remote_port         = tp6->tcp6ConnRemPort;
                 memcpy(&tcp.remote_addr6, &tp6->tcp6ConnRemAddress, 
-			sizeof(struct in6_addr));
+            sizeof(struct in6_addr));
                 tcp.family              = AF_INET6;
                 tcp_status = (tp6->tcp6ConnState == MIB2_TCP_established);
                 if (tcp_status == TCP_ALIVE)
@@ -679,9 +684,9 @@
 
 gboolean
 gkrellm_sys_inet_init(void)
-	{
-	return TRUE;
-	}
+{
+    return TRUE;
+}
 
 
 /* ===================================================================== */
@@ -699,36 +704,38 @@
 
 void
 gkrellm_sys_net_read_data(void)
-	{
-	gulong	rx, tx;
+{
+    gulong  rx, tx;
     extern kstat_ctl_t *kc;
     kstat_t *ksp;
     kstat_named_t *knp;
 
-	if (kstat_chain_update(kc) == -1) {
-			perror("kstat_chain_update");
-			return;
-	}
+    if (kstat_chain_update(kc) == -1) {
+            perror("kstat_chain_update");
+            return;
+    }
 
     for (ksp = kc->kc_chain; ksp; ksp = ksp->ks_next) {
-	    if (!strcmp(ksp->ks_class, "net")) {
-		    kstat_read(kc, ksp, NULL);
+        if (!strcmp(ksp->ks_class, "net") && !strcmp(ksp->ks_name, "link")) {
+            kstat_read(kc, ksp, NULL);
 
-		    knp = kstat_data_lookup(ksp, "rbytes");
-		    if (knp == NULL)
-			    continue;
-		    rx = knp->value.ui32;
+            knp = kstat_data_lookup(ksp, "rbytes");
+            if (knp == NULL) 
+                continue;
 
-		    knp = kstat_data_lookup(ksp, "obytes");
-		    if (knp == NULL)
-			    continue;
-		    tx = knp->value.ui32;
+            rx = knp->value.ui32;
 
-		    gkrellm_net_assign_data(ksp->ks_name, rx, tx);
-	    }
+            knp = kstat_data_lookup(ksp, "obytes");
+            if (knp == NULL) 
+                continue;
+
+            tx = knp->value.ui32;
+
+            gkrellm_net_assign_data(ksp->ks_name, rx, tx);
+        }
     }
 
-	}
+}
 
 #if 0
 /* New way is for above gkrellm_sys_net_read_data() to just assign data
@@ -736,17 +743,17 @@
 */
 void
 gkrellm_sys_net_sync(void)
-	{
-    GList *list;	
+    {
+    GList *list;    
     int numifs, numifreqs;
     int i, sockfd;
     size_t bufsize;
-    gchar	*buf;
+    gchar   *buf;
     struct ifreq ifr, *ifrp;
     struct ifconf ifc;
 
     if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) 
-	return;
+    return;
     
     if (ioctl(sockfd, SIOCGIFNUM, (char *)&numifs) < 0) {
         perror("SIOCGIFNUM");
@@ -784,29 +791,29 @@
     numifreqs = ifc.ifc_len / sizeof(struct ifreq);
 
     for (i = 0; i < numifreqs; i++, ifrp++)
-		{
-		memset((char *)&ifr, 0, sizeof(ifr));
-		strncpy(ifr.ifr_name, ifrp->ifr_name, sizeof(ifr.ifr_name));
-		if (!strncmp(ifr.ifr_name, "lo", 2)) 
-			continue;
-		if (ioctl(sockfd, SIOCGIFFLAGS, &ifr) < 0)
-			{
-			perror("SIOCGIFFLAGS");
-			continue;
-			}
-		if (ifr.ifr_flags & IFF_UP)
-			gkrellm_net_interface_is_up(ifr.ifr_name);
-    	}
+        {
+        memset((char *)&ifr, 0, sizeof(ifr));
+        strncpy(ifr.ifr_name, ifrp->ifr_name, sizeof(ifr.ifr_name));
+        if (!strncmp(ifr.ifr_name, "lo", 2)) 
+            continue;
+        if (ioctl(sockfd, SIOCGIFFLAGS, &ifr) < 0)
+            {
+            perror("SIOCGIFFLAGS");
+            continue;
+            }
+        if (ifr.ifr_flags & IFF_UP)
+            gkrellm_net_interface_is_up(ifr.ifr_name);
+        }
     free(buf);
     close(sockfd);
-	}
+    }
 #endif
 
 gboolean
 gkrellm_sys_net_isdn_online(void)
-	{
-	return FALSE;
-	}
+{
+    return FALSE;
+}
 
 void
 gkrellm_sys_net_check_routes(void)
@@ -815,12 +822,12 @@
 
 gboolean
 gkrellm_sys_net_init(void)
-	{
-	gkrellm_net_set_lock_directory("/var/spool/locks");
-	gkrellm_net_add_timer_type_ppp("ipdptp0");
-	gkrellm_net_add_timer_type_ppp("ppp0");
-	return TRUE;
-	}
+{
+    gkrellm_net_set_lock_directory("/var/spool/locks");
+    gkrellm_net_add_timer_type_ppp("ipdptp0");
+    gkrellm_net_add_timer_type_ppp("ppp0");
+    return TRUE;
+}
 
 
 
@@ -838,7 +845,7 @@
 gkrellm_sys_mem_read_data() {
 
     gulong pagesize;
-	guint64	total, used = 0, free = 0;
+    guint64 total, used = 0, free = 0;
     static gulong pageshift = 0, physpages = 0;
     extern kstat_ctl_t *kc;
     kstat_t *ksp;
@@ -869,12 +876,12 @@
             used = total - free;
         }
     }
-	gkrellm_mem_assign_data(total, used, free, 0, 0, 0);
+    gkrellm_mem_assign_data(total, used, free, 0, 0, 0);
     if (swapctl(SC_AINFO, &ai) == -1) {
         perror("swapctl");
     }
-	swap_total = ai.ani_max;
-	swap_total <<= pageshift;
+    swap_total = ai.ani_max;
+    swap_total <<= pageshift;
 
     swap_used  = ai.ani_resv;
     swap_used  <<= pageshift;
@@ -888,16 +895,16 @@
 
 void
 gkrellm_sys_swap_read_data(void)
-	{
+{
     /* page in/out UNIMPLEMENTED */
-	gkrellm_swap_assign_data(swap_total, swap_used, 0, 0);
-	}
+    gkrellm_swap_assign_data(swap_total, swap_used, 0, 0);
+}
 
 gboolean
 gkrellm_sys_mem_init(void)
-	{
-	return TRUE;
-	}
+{
+    return TRUE;
+}
 
 
 /* ===================================================================== */
@@ -910,16 +917,16 @@
 
 gboolean
 gkrellm_sys_fs_fstab_modified(void)
-	{
-	struct stat		s;
-	static time_t	fstab_mtime;
-	gint			modified = FALSE;
+{
+    struct stat     s;
+    static time_t   fstab_mtime;
+    gint            modified = FALSE;
 
-	if (stat("/etc/fstab", &s) == 0 && s.st_mtime != fstab_mtime)
-		modified = TRUE;
-	fstab_mtime = s.st_mtime;
-	return modified;
-	}
+    if (stat("/etc/fstab", &s) == 0 && s.st_mtime != fstab_mtime)
+        modified = TRUE;
+    fstab_mtime = s.st_mtime;
+    return modified;
+}
 
 
 void
@@ -933,11 +940,11 @@
     while (getvfsent(fp, &vfsbuf) == 0) {
         if (!vfsbuf.vfs_fstype || strcmp(vfsbuf.vfs_fstype, "ufs"))
             continue;
-		gkrellm_fs_add_to_fstab_list(
-				vfsbuf.vfs_mountp  ? vfsbuf.vfs_mountp  : "",
-				vfsbuf.vfs_special ? vfsbuf.vfs_special : "",				
-				vfsbuf.vfs_fstype  ? vfsbuf.vfs_fstype  : "",
-				vfsbuf.vfs_mntopts ? vfsbuf.vfs_mntopts : "");
+        gkrellm_fs_add_to_fstab_list(
+                vfsbuf.vfs_mountp  ? vfsbuf.vfs_mountp  : "",
+                vfsbuf.vfs_special ? vfsbuf.vfs_special : "",               
+                vfsbuf.vfs_fstype  ? vfsbuf.vfs_fstype  : "",
+                vfsbuf.vfs_mntopts ? vfsbuf.vfs_mntopts : "");
     }
 
     fclose(fp);
@@ -955,10 +962,10 @@
         if (strcmp(mntbuf.mnt_fstype, "ufs") && 
                                   strcmp(mntbuf.mnt_fstype, "nfs"))
             continue;
-		gkrellm_fs_add_to_mounts_list(
-				mntbuf.mnt_mountp  ? mntbuf.mnt_mountp  : "",
-				mntbuf.mnt_special ? mntbuf.mnt_special : "",
-				mntbuf.mnt_fstype  ? mntbuf.mnt_fstype  : "");
+        gkrellm_fs_add_to_mounts_list(
+                mntbuf.mnt_mountp  ? mntbuf.mnt_mountp  : "",
+                mntbuf.mnt_special ? mntbuf.mnt_special : "",
+                mntbuf.mnt_fstype  ? mntbuf.mnt_fstype  : "");
     }
     fclose(fp);
 }
@@ -967,12 +974,12 @@
 gkrellm_sys_fs_get_fsusage(gpointer fs, gchar *dir){
     struct statvfs st;
 
-	if (dir && statvfs(dir, &st) == 0) {
-		gkrellm_fs_assign_fsusage_data(fs,
-					(gint64) st.f_blocks, (gint64) st.f_bavail,
-					(glong) st.f_bfree, (glong) st.f_bsize);
+    if (dir && statvfs(dir, &st) == 0) {
+        gkrellm_fs_assign_fsusage_data(fs,
+                    (gint64) st.f_blocks, (gint64) st.f_bavail,
+                    (glong) st.f_bfree, (glong) st.f_bsize);
     } else {
-		gkrellm_fs_assign_fsusage_data(fs, 0, 0, 0, 0);
+        gkrellm_fs_assign_fsusage_data(fs, 0, 0, 0, 0);
     } 
 }
 
@@ -981,35 +988,34 @@
 #if defined(CDROMEJECT)
         gint    d;
 
-		if ((d = open(device, O_RDONLY)) >= 0) {
-				ioctl(d, CDROMEJECT);
-				close(d);
+        if ((d = open(device, O_RDONLY)) >= 0) {
+                ioctl(d, CDROMEJECT);
+                close(d);
         }
 #endif
 }
 
 gboolean
 gkrellm_sys_fs_init(void)
-	{
-	gkrellm_fs_setup_eject(NULL, NULL, eject_solaris_cdrom, NULL);
-	return TRUE;
-	}
+{
+    gkrellm_fs_setup_eject(NULL, NULL, eject_solaris_cdrom, NULL);
+    return TRUE;
+}
 
 
 /* ===================================================================== */
 /* Battery monitor interface */
 void
 gkrellm_sys_battery_read_data(void)
-	{
-	}
-
+{
+}
+ 
 gboolean
 gkrellm_sys_battery_init()
-	{
-	return FALSE;
-	}
-
-
+{
+      return FALSE;
+}
+ 
 /* ===================================================================== */
 /* Uptime monitor interface */
 
@@ -1018,9 +1024,9 @@
 
 time_t
 gkrellm_sys_uptime_read_uptime(void)
-	{
-	return (time_t) 0;  /* Will calculate using base_uptime */
-	}
+{
+    return (time_t) 0;  /* Will calculate using base_uptime */
+}
 
 gboolean
 gkrellm_sys_uptime_init(void) {
@@ -1050,7 +1056,7 @@
 
     base_uptime = now - boot;
     base_uptime += 30;
-	gkrellm_uptime_set_base_uptime(base_uptime);
+    gkrellm_uptime_set_base_uptime(base_uptime);
 
     return (base_uptime == (time_t) 0) ? FALSE : TRUE; 
 }
@@ -1063,24 +1069,24 @@
 gboolean
 gkrellm_sys_sensors_init(void)
 {
-	return FALSE;
+    return FALSE;
 }
 
 gboolean
 gkrellm_sys_sensors_get_temperature(gchar *name, gint id, gint iodev, gint inter, gfloat *t)
 {
-	return FALSE;
+    return FALSE;
 }
 
 gboolean
 gkrellm_sys_sensors_get_fan(gchar *name, gint id, gint iodev, gint inter, gfloat *t)
 {
-	return FALSE;
+    return FALSE;
 }
 
 gboolean
 gkrellm_sys_sensors_get_voltage(gchar *name, gint id, gint iodev, gint inter, gfloat *t)
 {
-	return FALSE;
+    return FALSE;
 }
 
