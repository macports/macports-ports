From f6061f58992f50e0897edcbe7a405482f952b3f4 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sun, 4 Aug 2024 05:41:15 +0800
Subject: [PATCH] Revert some display-related breakages

diff --git src/detection/displayserver/displayserver.c src/detection/displayserver/displayserver.c
index 73f1cd0c..20a36623 100644
--- src/detection/displayserver/displayserver.c
+++ src/detection/displayserver/displayserver.c
@@ -1,6 +1,24 @@
 #include "displayserver.h"
 
-FFDisplayResult* ffdsAppendDisplay(
+uint32_t ffdsParseRefreshRate(int32_t refreshRate)
+{
+    if(refreshRate <= 0)
+        return 0;
+
+    int remainder = refreshRate % 5;
+    if(remainder >= 3)
+        refreshRate += (5 - remainder);
+    else
+        refreshRate -= remainder;
+
+    // All other typicall refresh rates are dividable by 5
+    if(refreshRate == 145)
+        refreshRate = 144;
+
+    return (uint32_t) refreshRate;
+}
+
+bool ffdsAppendDisplay(
     FFDisplayServerResult* result,
     uint32_t width,
     uint32_t height,
@@ -11,12 +29,10 @@ FFDisplayResult* ffdsAppendDisplay(
     FFstrbuf* name,
     FFDisplayType type,
     bool primary,
-    uint64_t id,
-    uint32_t physicalWidth,
-    uint32_t physicalHeight)
+    uint64_t id)
 {
     if(width == 0 || height == 0)
-        return NULL;
+        return false;
 
     FFDisplayResult* display = ffListAdd(&result->displays);
     display->width = width;
@@ -27,16 +43,10 @@ FFDisplayResult* ffdsAppendDisplay(
     display->rotation = rotation;
     ffStrbufInitMove(&display->name, name);
     display->type = type;
-    display->id = id;
-    display->physicalWidth = physicalWidth;
-    display->physicalHeight = physicalHeight;
     display->primary = primary;
+    display->id = id;
 
-    display->bitDepth = 0;
-    display->hdrEnabled = false;
-    display->wcgEnabled = false;
-
-    return display;
+    return true;
 }
 
 void ffConnectDisplayServerImpl(FFDisplayServerResult* ds);
diff --git src/detection/displayserver/displayserver.h src/detection/displayserver/displayserver.h
index aa0bd900..ffe46466 100644
--- src/detection/displayserver/displayserver.h
+++ src/detection/displayserver/displayserver.h
@@ -58,13 +58,8 @@ typedef struct FFDisplayResult
     FFstrbuf name;
     FFDisplayType type;
     uint32_t rotation;
-    uint64_t id; // platform dependent
-    uint32_t physicalWidth;
-    uint32_t physicalHeight;
     bool primary;
-    uint8_t bitDepth;
-    bool hdrEnabled;
-    bool wcgEnabled;
+    uint64_t id; // platform dependent
 } FFDisplayResult;
 
 typedef struct FFDisplayServerResult
@@ -79,7 +74,9 @@ typedef struct FFDisplayServerResult
 
 const FFDisplayServerResult* ffConnectDisplayServer();
 
-FFDisplayResult* ffdsAppendDisplay(
+uint32_t ffdsParseRefreshRate(int32_t refreshRate);
+
+bool ffdsAppendDisplay(
     FFDisplayServerResult* result,
     uint32_t width,
     uint32_t height,
@@ -90,6 +87,4 @@ FFDisplayResult* ffdsAppendDisplay(
     FFstrbuf* name,
     FFDisplayType type,
     bool primary,
-    uint64_t id,
-    uint32_t physicalWidth,
-    uint32_t physicalHeight);
+    uint64_t id);
diff --git src/detection/displayserver/displayserver_apple.c src/detection/displayserver/displayserver_apple.c
index d2e87ecf..7402ea1a 100644
--- src/detection/displayserver/displayserver_apple.c.orig	2024-07-26 10:27:31.000000000 +0800
+++ src/detection/displayserver/displayserver_apple.c	2024-08-04 11:11:20.000000000 +0800
@@ -1,117 +1,78 @@
 #include "displayserver.h"
 #include "util/apple/cf_helpers.h"
-#include "util/stringUtils.h"
+#include "common/sysctl.h"
 
 #include <stdlib.h>
+#include <ctype.h>
 #include <string.h>
 #include <assert.h>
-#include <CoreGraphics/CGDirectDisplay.h>
-#include <CoreVideo/CVDisplayLink.h>
+#include <ApplicationServices/ApplicationServices.h>
+#include <AvailabilityMacros.h>
 
-extern CFDictionaryRef CoreDisplay_DisplayCreateInfoDictionary(CGDirectDisplayID display) __attribute__((weak_import));
-#ifndef MAC_OS_X_VERSION_10_15
-#import <IOKit/graphics/IOGraphicsLib.h>
-extern CFDictionaryRef CoreDisplay_IODisplayCreateInfoDictionary(io_service_t framebuffer, IOOptionBits options)  __attribute__((weak_import));
-#endif
+typedef union
+{
+    uint8_t rawData[0xDC];
+    struct
+    {
+        uint32_t mode;
+        uint32_t flags;		// 0x4
+        uint32_t width;		// 0x8
+        uint32_t height;	// 0xC
+        uint32_t depth;		// 0x10
+        uint32_t dc2[42];
+        uint16_t dc3;
+        uint16_t freq;		// 0xBC
+        uint32_t dc4[4];
+        float density;		// 0xD0
+    } derived;
+} modes_D4;
+
+void CGSGetCurrentDisplayMode(CGDirectDisplayID display, int* modeNum);
+void CGSGetDisplayModeDescriptionOfLength(CGDirectDisplayID display, int idx, modes_D4* mode, int length);
 
 static void detectDisplays(FFDisplayServerResult* ds)
 {
-    CGDirectDisplayID screens[128];
-    uint32_t screenCount;
-    if(CGGetOnlineDisplayList(sizeof(screens) / sizeof(screens[0]), screens, &screenCount) != kCGErrorSuccess)
+    CGDisplayCount screenCount;
+    CGGetOnlineDisplayList(INT_MAX, NULL, &screenCount);
+    if(screenCount == 0)
         return;
 
+    CGDirectDisplayID* screens = malloc(screenCount * sizeof(CGDirectDisplayID));
+    CGGetOnlineDisplayList(INT_MAX, screens, &screenCount);
+
     for(uint32_t i = 0; i < screenCount; i++)
     {
-        CGDirectDisplayID screen = screens[i];
-        CGDisplayModeRef mode = CGDisplayCopyDisplayMode(screen);
-        if(mode)
-        {
-            //https://github.com/glfw/glfw/commit/aab08712dd8142b642e2042e7b7ba563acd07a45
-            double refreshRate = CGDisplayModeGetRefreshRate(mode);
-
-            if (refreshRate == 0)
-            {
-                CVDisplayLinkRef link;
-                if(CVDisplayLinkCreateWithCGDisplay(screen, &link) == kCVReturnSuccess)
-                {
-                    const CVTime time = CVDisplayLinkGetNominalOutputVideoRefreshPeriod(link);
-                    if (!(time.flags & kCVTimeIsIndefinite))
-                        refreshRate = time.timeScale / (double) time.timeValue + 0.5; //59.97...
-                    CVDisplayLinkRelease(link);
-                }
-            }
-
-            FF_STRBUF_AUTO_DESTROY name = ffStrbufCreate();
-            #ifdef MAC_OS_X_VERSION_10_15
-            if(CoreDisplay_DisplayCreateInfoDictionary)
-            {
-                CFDictionaryRef FF_CFTYPE_AUTO_RELEASE displayInfo = CoreDisplay_DisplayCreateInfoDictionary(screen);
-                if(displayInfo)
-                {
-                    CFDictionaryRef productNames;
-                    if(!ffCfDictGetDict(displayInfo, CFSTR(kDisplayProductName), &productNames))
-                        ffCfDictGetString(productNames, CFSTR("en_US"), &name);
-                }
-            }
-            #else
-            if(CoreDisplay_IODisplayCreateInfoDictionary)
-            {
-                io_service_t servicePort = CGDisplayIOServicePort(screen);
-                CFDictionaryRef FF_CFTYPE_AUTO_RELEASE displayInfo = CoreDisplay_IODisplayCreateInfoDictionary(servicePort, kIODisplayOnlyPreferredName);
-                if(displayInfo)
-                {
-                    CFDictionaryRef productNames;
-                    if(!ffCfDictGetDict(displayInfo, CFSTR(kDisplayProductName), &productNames))
-                        ffCfDictGetString(productNames, CFSTR("en_US"), &name);
-                }
-            }
-            #endif
-
-            CGSize size = CGDisplayScreenSize(screen);
-
-            FFDisplayResult* display = ffdsAppendDisplay(ds,
-                (uint32_t)CGDisplayModeGetPixelWidth(mode),
-                (uint32_t)CGDisplayModeGetPixelHeight(mode),
-                refreshRate,
-                (uint32_t)CGDisplayModeGetWidth(mode),
-                (uint32_t)CGDisplayModeGetHeight(mode),
-                (uint32_t)CGDisplayRotation(screen),
-                &name,
-                CGDisplayIsBuiltin(screen) ? FF_DISPLAY_TYPE_BUILTIN : FF_DISPLAY_TYPE_EXTERNAL,
-                CGDisplayIsMain(screen),
-                (uint64_t)screen,
-                (uint32_t) (size.width + 0.5),
-                (uint32_t) (size.height + 0.5)
-            );
-            if (display)
-            {
-                // Shitty code
-                uint8_t bitDepth = 0;
-                FF_CFTYPE_AUTO_RELEASE CFStringRef desc = CFCopyDescription(mode);
-                CFRange start = CFStringFind(desc, CFSTR("BitsPerSample = "), 0);
-                if (start.location != kCFNotFound)
-                {
-                    for (CFIndex idx = start.location + start.length; idx < CFStringGetLength(desc); ++idx)
-                    {
-                        UniChar ch = CFStringGetCharacterAtIndex(desc, idx);
-                        if (!ffCharIsDigit((char) ch))
-                            break;
-                        bitDepth = (uint8_t) (bitDepth * 10 + (ch - '0'));
-                    }
-                }
-                display->bitDepth = bitDepth;
-            }
-            CGDisplayModeRelease(mode);
-        }
-        CGDisplayRelease(screen);
+        int modeID;
+        CGSGetCurrentDisplayMode(screens[i], &modeID);
+        modes_D4 mode;
+        CGSGetDisplayModeDescriptionOfLength(screens[i], modeID, &mode, 0xD4);
+
+        double refreshRate = ffdsParseRefreshRate(mode.derived.freq);
+        ffdsAppendDisplay(ds,
+            mode.derived.width,
+            mode.derived.height,
+            refreshRate,
+            0,
+            0,
+            0,
+            NULL,
+            FF_DISPLAY_TYPE_UNKNOWN,
+            true,
+            0
+        );
     }
+
+    free(screens);
 }
 
 void ffConnectDisplayServerImpl(FFDisplayServerResult* ds)
 {
     {
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
         FF_CFTYPE_AUTO_RELEASE CFMachPortRef port = CGWindowServerCreateServerPort();
+#else
+        FF_CFTYPE_AUTO_RELEASE CFMachPortRef port = CGWindowServerCFMachPort();
+#endif
         if (port)
         {
             ffStrbufSetStatic(&ds->wmProcessName, "WindowServer");

diff --git src/detection/monitor/monitor_apple.m src/detection/monitor/monitor_apple.m
index c6219fe5..f2bd2245 100644
--- src/detection/monitor/monitor_apple.m
+++ src/detection/monitor/monitor_apple.m
@@ -106,9 +106,10 @@ const char* ffDetectMonitor(FFlist* results)
         monitor->physicalHeight = (uint32_t) (size.height + 0.5);
         monitor->hdrCompatible = CFDictionaryContainsKey(displayInfo, CFSTR("ReferencePeakHDRLuminance")) ||
             detectHdrSupportWithNSScreen(display);
-        monitor->serial = CGDisplaySerialNumber((CGDirectDisplayID) display->id);
 
-        int64_t year, week;
+        int64_t serial, year, week;
+        if (ffCfDictGetInt64(displayInfo, CFSTR("DisplaySerialNumber"), &serial) == NULL)
+            monitor->serial = (uint32_t) (uint64_t) serial;
         if (ffCfDictGetInt64(displayInfo, CFSTR("DisplayYearManufacture"), &year) == NULL)
             monitor->manufactureYear = (uint16_t) year;
         if (ffCfDictGetInt64(displayInfo, CFSTR("DisplayWeekManufacture"), &week) == NULL)
diff --git src/modules/display/display.c src/modules/display/display.c
index d89a042a..008f4ce6 100644
--- src/modules/display/display.c
+++ src/modules/display/display.c
@@ -4,9 +4,7 @@
 #include "modules/display/display.h"
 #include "util/stringUtils.h"
 
-#include <math.h>
-
-#define FF_DISPLAY_NUM_FORMAT_ARGS 16
+#define FF_DISPLAY_NUM_FORMAT_ARGS 9
 
 static int sortByNameAsc(FFDisplayResult* a, FFDisplayResult* b)
 {
@@ -91,55 +89,42 @@ void ffPrintDisplay(FFDisplayOptions* options)
         }
         else
         {
-            FF_PARSE_FORMAT_STRING_CHECKED(&key, &options->moduleArgs.key, 4, ((FFformatarg[]){
+            FF_PARSE_FORMAT_STRING_CHECKED(&key, &options->moduleArgs.key, 3, ((FFformatarg[]){
                 {FF_FORMAT_ARG_TYPE_UINT, &moduleIndex, "index"},
                 {FF_FORMAT_ARG_TYPE_STRBUF, &result->name, "name"},
                 {FF_FORMAT_ARG_TYPE_STRING, displayType, "type"},
-                {FF_FORMAT_ARG_TYPE_STRBUF, &options->moduleArgs.keyIcon, "icon"},
             }));
         }
 
-        FF_STRBUF_AUTO_DESTROY buffer = ffStrbufCreate();
-        double inch = sqrt(result->physicalWidth * result->physicalWidth + result->physicalHeight * result->physicalHeight) / 25.4;
-
         if(options->moduleArgs.outputFormat.length == 0)
         {
             ffPrintLogoAndKey(key.chars, 0, &options->moduleArgs, FF_PRINT_TYPE_NO_CUSTOM_KEY);
 
-            ffStrbufAppendF(&buffer, "%ix%i", result->width, result->height);
+            printf("%ix%i", result->width, result->height);
 
             if(result->refreshRate > 0)
             {
                 if(options->preciseRefreshRate)
-                    ffStrbufAppendF(&buffer, " @ %g Hz", ((int) (result->refreshRate * 1000 + 0.5)) / 1000.0);
+                    printf(" @ %gHz", ((int) (result->refreshRate * 1000 + 0.5)) / 1000.0);
                 else
-                    ffStrbufAppendF(&buffer, " @ %i Hz", (uint32_t) (result->refreshRate + 0.5));
+                    printf(" @ %iHz", (uint32_t) (result->refreshRate + 0.5));
             }
 
             if(
                 result->scaledWidth > 0 && result->scaledWidth != result->width &&
                 result->scaledHeight > 0 && result->scaledHeight != result->height)
-                ffStrbufAppendF(&buffer, " (as %ix%i)", result->scaledWidth, result->scaledHeight);
-
-            if (inch > 0)
-                ffStrbufAppendF(&buffer, " in %i″", (uint32_t) (inch + 0.5));
+                printf(" (as %ix%i)", result->scaledWidth, result->scaledHeight);
 
             if(result->type != FF_DISPLAY_TYPE_UNKNOWN)
-                ffStrbufAppendS(&buffer, result->type == FF_DISPLAY_TYPE_BUILTIN ? " [Built-in]" : " [External]");
-
-            if (result->hdrEnabled)
-                ffStrbufAppendS(&buffer, " [HDR]");
+                fputs(result->type == FF_DISPLAY_TYPE_BUILTIN ? " [Built-in]" : " [External]", stdout);
 
             if(moduleIndex > 0 && result->primary)
-                ffStrbufAppendS(&buffer, " *");
+                printf(" *");
 
-            ffStrbufPutTo(&buffer, stdout);
-            ffStrbufClear(&buffer);
+            putchar('\n');
         }
         else
         {
-            double ppi = sqrt(result->width * result->width + result->height * result->height) / inch;
-
             FF_PRINT_FORMAT_CHECKED(key.chars, 0, &options->moduleArgs, FF_PRINT_TYPE_NO_CUSTOM_KEY, FF_DISPLAY_NUM_FORMAT_ARGS, ((FFformatarg[]) {
                 {FF_FORMAT_ARG_TYPE_UINT, &result->width, "width"},
                 {FF_FORMAT_ARG_TYPE_UINT, &result->height, "height"},
@@ -150,13 +135,6 @@ void ffPrintDisplay(FFDisplayOptions* options)
                 {FF_FORMAT_ARG_TYPE_STRING, displayType, "type"},
                 {FF_FORMAT_ARG_TYPE_UINT, &result->rotation, "rotation"},
                 {FF_FORMAT_ARG_TYPE_BOOL, &result->primary, "is-primary"},
-                {FF_FORMAT_ARG_TYPE_UINT, &result->physicalWidth, "physical-width"},
-                {FF_FORMAT_ARG_TYPE_UINT, &result->physicalHeight, "physical-height"},
-                {FF_FORMAT_ARG_TYPE_DOUBLE, &inch, "inch"},
-                {FF_FORMAT_ARG_TYPE_DOUBLE, &ppi, "ppi"},
-                {FF_FORMAT_ARG_TYPE_UINT8, &result->bitDepth, "bit-depth"},
-                {FF_FORMAT_ARG_TYPE_BOOL, &result->hdrEnabled, "hdr-enabled"},
-                {FF_FORMAT_ARG_TYPE_BOOL, &result->wcgEnabled, "wcg-enabled"},
             }));
         }
     }
@@ -306,28 +284,15 @@ void ffGenerateDisplayJsonResult(FF_MAYBE_UNUSED FFDisplayOptions* options, yyjs
     FF_LIST_FOR_EACH(FFDisplayResult, item, dsResult->displays)
     {
         yyjson_mut_val* obj = yyjson_mut_arr_add_obj(doc, arr);
+        yyjson_mut_obj_add_uint(doc, obj, "width", item->width);
+        yyjson_mut_obj_add_uint(doc, obj, "height", item->height);
         yyjson_mut_obj_add_uint(doc, obj, "id", item->id);
         yyjson_mut_obj_add_strbuf(doc, obj, "name", &item->name);
         yyjson_mut_obj_add_bool(doc, obj, "primary", item->primary);
-
-        yyjson_mut_val* output = yyjson_mut_obj_add_obj(doc, obj, "output");
-        yyjson_mut_obj_add_uint(doc, output, "width", item->width);
-        yyjson_mut_obj_add_uint(doc, output, "height", item->height);
-
-        yyjson_mut_val* scaled = yyjson_mut_obj_add_obj(doc, obj, "scaled");
-        yyjson_mut_obj_add_uint(doc, scaled, "width", item->scaledWidth);
-        yyjson_mut_obj_add_uint(doc, scaled, "height", item->scaledHeight);
-
-        yyjson_mut_val* physical = yyjson_mut_obj_add_obj(doc, obj, "physical");
-        yyjson_mut_obj_add_uint(doc, physical, "width", item->physicalWidth);
-        yyjson_mut_obj_add_uint(doc, physical, "height", item->physicalHeight);
-
         yyjson_mut_obj_add_real(doc, obj, "refreshRate", item->refreshRate);
         yyjson_mut_obj_add_uint(doc, obj, "rotation", item->rotation);
-        yyjson_mut_obj_add_uint(doc, obj, "bitDepth", item->bitDepth);
-        yyjson_mut_obj_add_bool(doc, obj, "hdrEnabled", item->hdrEnabled);
-        yyjson_mut_obj_add_bool(doc, obj, "wcgEnabled", item->wcgEnabled);
-
+        yyjson_mut_obj_add_uint(doc, obj, "scaledHeight", item->scaledHeight);
+        yyjson_mut_obj_add_uint(doc, obj, "scaledWidth", item->scaledWidth);
         switch (item->type)
         {
             case FF_DISPLAY_TYPE_BUILTIN:
@@ -355,13 +320,6 @@ void ffPrintDisplayHelpFormat(void)
         "Screen type (builtin, external or unknown) - type",
         "Screen rotation (in degrees) - rotation",
         "True if being the primary screen - is-primary",
-        "Screen physical width (in millimeters) - physical-width",
-        "Screen physical height (in millimeters) - physical-height",
-        "Physical diagonal length in inches - inch",
-        "Pixels per inch (PPI) - ppi",
-        "Bits per color channel - bit-depth",
-        "True if high dynamic range (HDR) is enabled - hdr-enabled",
-        "True if wide color gamut (WCG) is enabled - wcg-enabled",
     }));
 }
 
