--- test/parallel.bats.orig	2021-09-21 21:40:08.000000000 +1200
+++ test/parallel.bats	2021-09-21 21:41:54.000000000 +1200
@@ -113,19 +113,20 @@
   [[ "${#lines[@]}" -eq 3 ]]
 }
 
-@test "parallelity factor is met exactly" {
-  parallelity=5 # run the 10 tests in 2 batches with 5 test each
-  bats --jobs $parallelity "$FIXTURE_ROOT/parallel_factor.bats" & # run in background to avoid blocking
-  # give it some time to start the tests
-  sleep 2
-  # find how many semaphores are started in parallel; don't count grep itself
-  run bash -c "ps -ef | grep bats-exec-test | grep parallel/parallel_factor.bats | grep -v grep"
-  echo "$output"
-  
-  # This might fail spuriously if we got bad luck with the scheduler
-  # and hit the transition between the first and second batch of tests.
-  [[ "${#lines[@]}" -eq $parallelity  ]]
-}
+# Processes with sandboxing enabled can not run setuid binaries.
+# @test "parallelity factor is met exactly" {
+#   parallelity=5 # run the 10 tests in 2 batches with 5 test each
+#   bats --jobs $parallelity "$FIXTURE_ROOT/parallel_factor.bats" & # run in background to avoid blocking
+#   # give it some time to start the tests
+#   sleep 2
+#   # find how many semaphores are started in parallel; don't count grep itself
+#   run bash -c "ps -ef | grep bats-exec-test | grep parallel/parallel_factor.bats | grep -v grep"
+#   echo "$output"
+#   
+#   # This might fail spuriously if we got bad luck with the scheduler
+#   # and hit the transition between the first and second batch of tests.
+#   [[ "${#lines[@]}" -eq $parallelity  ]]
+# }
 
 @test "parallel mode correctly forwards failure return code" {
   run bats --jobs 2 "$FIXTURE_ROOT/../bats/failing.bats"
