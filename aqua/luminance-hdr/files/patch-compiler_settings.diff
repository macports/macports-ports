--- build_files/Modules/CompilerSettings.cmake.orig	2019-06-09 12:18:38.000000000 -0700
+++ build_files/Modules/CompilerSettings.cmake	2019-06-15 08:52:52.000000000 -0700
@@ -6,7 +6,7 @@
 
 IF(APPLE)
 # optimize for 64-bit core 2 architecture on Apple
-ADD_DEFINITIONS(-march=core2)
+#ADD_DEFINITIONS(-march=core2)
 ENDIF()
 ENDIF()
 
@@ -29,7 +29,7 @@
     message(STATUS "C++11 activated for Clang")
     set(CMAKE_CXX_STANDARD 11)
     if (APPLE)
-        set(CMAKE_EXE_LINKER_FLAGS "-lc++abi -stdlib=libc++ -rpath @loader_path/../Frameworks/")
+        #set(CMAKE_EXE_LINKER_FLAGS "-lc++abi -stdlib=libc++ -rpath @loader_path/../Frameworks/")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
     endif()
     add_definitions(-DLHDR_CXX11_ENABLED)
@@ -38,9 +38,9 @@
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wreturn-type -Wself-assign -Wunused-argument -Wunused-function -Wtautological-compare")
     #OpenMP support under Linux with clang
     if (UNIX)
-        FIND_PACKAGE(OpenMP REQUIRED)
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
-        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+        #FIND_PACKAGE(OpenMP REQUIRED)
+        #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+        #SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
     endif()
 elseif(MSVC)
     message(STATUS "C++11 is active by default on Microsoft Visual Studio")
