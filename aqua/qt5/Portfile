# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                qt5

categories          aqua
platforms           macosx
maintainers         mcalhoun openmaintainer
license             {LGPL-2.1 LGPL-3 GPL-3}

homepage            http://qt.io

version             5.6.2

set qt_name ${name}

set just_want_qt5_variables yes
PortGroup qt5 1.0
unset just_want_qt5_variables

# get Qt's version numbers
set branch          [join [lrange [split ${version} .] 0 1] .]
set qt_major        [lindex [split ${version} .] 0]

master_sites        \
    http://download.qt.io/official_releases/qt/${branch}/${version}/submodules \
    http://download.qt.io/community_releases/${branch}/${version}

# file sizes are significantly smaller using xz
if { ${subport} ne ${name} && ${subport} ne "${name}-docs" } {
    use_xz yes
}

conflicts qt3 qt3-mac
# conflict with all other version of qt5
foreach test_qt_name ${available_qt_versions} {
    if { ${name} ne ${test_qt_name} } {
        if { [string range ${test_qt_name} end-3 end] eq "-kde" } {
            conflicts-append ${test_qt_name}
        } else {
            conflicts-append ${test_qt_name}-qtbase
        }
    }
}

# see https://trac.macports.org/ticket/51358
conflicts-append libressl libressl-devel

############################################################################### Modules Not Considered
#
# No qtactiveqt      (Windows Only)
# No qtandroidextras (Android Only)
# No qtwayland       (Linux Only)
# No qtx11extras     (X11 Only)
# No qtwinextras     (Windows Only)
#
###############################################################################

############################################################################### Finding Dependencies
#
# grep -r "%dependencies" *
# find ./ -name sync.profile
#
# grep -r qtCompileTest *
#
# find ./ -name config.tests
#
# find ./ -name Find\*.cmake
#
###############################################################################

############################################################################### Notes
#
# qtconnectivity checks for bluetooth libraries
#    bluez and bluez_le (Linux Only)
#
# qtconnectivity depends on
#    qtandroidextras    (Android Only)
#
# qtserialport depends on
#    ntddmodm           (Windows Only)
#
# qttools depends on
#    qtactiveqt         (Windows Only)
#
# qtwebkit has tests for libraries in:
#     Tools/qmake/mkspecs/features/configure.prf
#     Tools/qmake/config.tests/
#
###############################################################################

############################################################################### TODO
#
# TODO: possible to trim dependencies of qtbase?
#
###############################################################################

############################################################################### Module Format
#
# "Qt Module Name" {
#     checksum, rmd160
#     checksum, sha256
#     dependencies, build
#     dependencies, lib
#     dependencies, Qt module name
#     Qt components provided
#     included in "standard" installation of Qt (empty string is no, explanation string is yes)
#     variant overrides
#     revision number
# }
#
# module info found at https://doc.qt.io/qt-5/qtmodules.html
#
###############################################################################
array set modules {
    qt3d {
        0bba8e3553b1d4fe603f1d2fde2f8e3626e87288
        a21786db6e0f5c6c70213fe1a3530ed3d7f28f28401a0f793970e9bc860ce941
        ""
        "port:assimp"
        "qtbase qtxmlpatterns qtdeclarative qtimageformats"
        {"Qt3D Core" "Qt3D Input" "Qt3D Logic" "Qt3D Renderer"}
        "technology preview modules"
        "variant overrides: "
        "revision 0"
    }
    qtbase {
        55b2d2d9474cb565e872eed1ab0e8e01bf5031a8
        2f6eae93c5d982fe0a387a01aeb3435571433e23e9d9d9246741faf51f1ee787
        ""
        "port:zlib port:libpng port:jpeg port:fontconfig port:freetype path:bin/dbus-daemon:dbus path:lib/libssl.dylib:openssl port:tiff port:libmng path:lib/pkgconfig/glib-2.0.pc:glib2 port:icu port:pcre port:libiconv port:harfbuzz"
        ""
        {"Qt Gui" "Qt Widgets" "Qt Print Support" "Qt OpenGL" "Qt Core" "Qt XML" "Qt SQL" "Qt Network" "Qt Test" "Qt D-Bus" "Qt Concurrent" "Qt Platform Headers"}
        ""
        "variant overrides: ~docs"
        "revision 0"
    }
    qtcanvas3d {
        12e5460320bd6e7fbe01d85a8f39e24e4ca9a74d
        d7584d006b03f99692ccabce922e755a6f12bb1ed1fbc99c2b84842b9e0aa0ad
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt Canvas 3D"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtconnectivity {
        6b4645eaa4fe4cb1e725e2bc445a8909cc470af6
        1b672923e0703d62f605ccec97b454b1a04c1f0db47f54b687d009e84eabedf9
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Qt Bluetooth" "Qt NFC"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtenginio {
        c62811096a313efde96c034673a2bc047419a6d2
        90ffc38d214a75ab0ef90a4760843f12bc073ae49c17de24c677d1d403bddcc3
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Enginio"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtdeclarative {
        3c35a848052f0e228b838ed1277ff53165b33c6a
        0086a986bc36b398ba518c404d08cdff0a0d7978c30aa3fa2ab73d71654209da
        "port:python27"
        ""
        "qtbase qtxmlpatterns"
        {"Qt QML" "Qt Quick" "Qt Quick Widgets"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtdoc {
        a2695d89272018607deb33215d03b8793a3c2a12
        f6691eeaa9954f6990c744d246f4fe5a9bdd9936aa78d187e98c12795761e868
        ""
        ""
        "qtbase qttools sqlite-plugin"
        {"Qt Reference Documentation"}
        "requires all documentation"
        "variant overrides: ~examples ~tests ~debug noarch ~docs"
        "revision 0"
    }
    qtgraphicaleffects {
        c2b77a5ce9b33d85bb50aa722c8de9645c40e99c
        1e9f0fac2c72a812d396db74b2d9d12f513d2ec9135d5982ca85aee7f00be75e
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Qt Graphical Effects"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtimageformats {
        4abf0b602430b199e6bfa35ce079c9d48dd584ea
        4fb153be62dac393cbcebab65040b3b9d6edecd1ebbe5e543401b0e45bd147e4
        ""
        "port:jasper port:libmng port:tiff port:webp"
        "qtbase"
        {"Qt Image Formats"}
        ""
        "variant overrides: "
        "revision 1"
    }
    qtlocation {
        a0fa5fad9541a2d7c98392b77ed9ae6b49a00800
        7a8995206ed0220f943a33c037527a1a8243d5386f5ca77bf88152675c28d23a
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative qtquickcontrols qtserialport"
        {"Qt Location" "Qt Positioning"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtmacextras {
        bb4ca30a9880f5b0d37dc5ce5b1acde0c6489d2f
        855263a9f3daea67eee57a16b6f877d0f4096eb731f9e0f0fd8eee87dbc19015
        ""
        ""
        "qtbase"
        {"Qt Mac Extras"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtmultimedia {
        772af0d21129d9a53e677e6aa3fbbaf46c6ba28e
        cb9a70a7c6c0eb5be4a3fcaf9590863479e95a255308bbf07d5b7aa303bb8caf
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative"
        {"Qt Multimedia" "Qt Multimedia Widgets"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtquickcontrols {
        4ced8969881294afd022bca40da84be4d5f2e32e
        5ed0f2292be10222dfb1b57a05472798fd759279f65455d91c02ef4fb746102c
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns qtgraphicaleffects"
        {"Qt Quick Controls" "Qt Quick Dialogs" "Qt Quick Layouts" "Qt Quick Extras"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtquickcontrols2 {
        0ba46bb90e625e590ebfa14cef7112244e37c9e9
        09dc1710aa4701aebe145829eb99bab94d0870cf578f7dddcec0af92286dfec1
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative qtquickcontrols qtgraphicaleffects"
        {"Qt Labs Controls"}
        "technology preview module"
        "variant overrides: "
        "revision 0"
    }
    qtscript {
        57a0edd3199a5e93e0eb71be8e98f8c57886444b
        e06ef6b271cae2187b57cd4ffdd6759428fd47f94a060e2ed2af024a8c14110e
        ""
        ""
        "qtbase"
        {"Qt Script" "Qt Script Tools"}
        "deprecated in favor QJS* in Qt QML"
        "variant overrides: "
        "revision 0"
    }
    qtsensors {
        329ea8fc1d4bac44902b79ec666ed5231fea6c8d
        a7809081aab4f2f0d7a4f40c3abb02e1690bb390d1dd410d7c6c5019a5053427
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative"
        {"Qt Sensors"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtserialbus {
        352bba29042cc4ea4d2ad5b0b3eaa8e2797181da
        b39260091691532382935ed51de9ead8e66cfb5f7a6e5410c17cd0695ccaf826
        ""
        ""
        "qtbase qtserialport"
        {"Qt Serial Bus"}
        "technology preview module"
        "variant overrides: "
        "revision 0"
    }
    qtserialport {
        5720c53ca1df11c99671a6ad28bc8415be895daf
        af76281bad2c2bd283189635316b46091f6712134b845ae1b9e3016eec94f376
        ""
        ""
        "qtbase"
        {"Qt Serial Port"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtsvg {
        d7cf472f55d616947b4b7f3cc9c6321aaeaf86de
        f7a361bf661b31ae7779513559dd0b774171911bc57f5cfb6bed6878ddc8bc4e
        ""
        ""
        "qtbase"
        {"Qt SVG"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qttools {
        be6defa428764023910ee36097dd708c2faa4888
        db2bb4318786257a47172c377d9c456d5d5ec760d5d69240a4693dc87989e1b7
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative sqlite-plugin"
        {"Qt Help" "Qt UI Tools" "Qt Designer"}
        ""
        "variant overrides: "
        "revision 1"
    }
    qttranslations {
        7ad0fb2b75674ae08921e7793135b17b6d4c40e5
        7d793b447c1673206e0c5512883ad1435554dbaebf2152475b6d4a7ba6efa421
        ""
        ""
        "qtbase qttools"
        {"translation files"}
        ""
        "variant overrides: ~examples ~tests ~debug noarch ~docs"
        "revision 0"
    }
    qtwebchannel {
        835a31720a47769116e241f5b08bfa78cc2fd4a7
        700efdef5f51bdb77093f4db212afe275ad35a710ea08ba0e9e9cbc8f09f1a52
        ""
        ""
        "qtbase qtwebsockets qtdeclarative"
        {"Qt WebChannel"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtwebengine {
        442da681b949e3cd0216e29f38d53ec5f1c646e4
        2f0a1648e1a8b22bad0134f2b37d69d185074393c398c1a3c6a83b910ff39740
        "port:python27 port:py27-ply"
        ""
        "qtbase qtdeclarative qtxmlpatterns qtquickcontrols qtwebchannel"
        {"Qt WebEngine" "Qt WebEngine Widgets"}
        "very large and relatively new; requires newer version of OS X"
        "variant overrides: ~universal"
        "revision 0"
    }
    qtwebkit {
        84ccf4ee1448b29ac967ca51e0dabc2ab2c48bbc
        528a6b8b1c5095367b26e8ce4f3a46bb739e2e9913ff4dfc6ef58a04fcd73966
        "port:python27"
        "port:fontconfig port:icu port:leveldb port:webp port:libxml2 port:libxslt port:zlib port:sqlite3"
        "qtbase qtxmlpatterns qtdeclarative qtlocation qtmultimedia qtsensors qtwebchannel"
        {"Qt WebKit" "Qt WebKit Widgets"}
        "community support only (use Qt WebEngine)"
        "variant overrides: "
        "revision 0"
    }
    qtwebsockets {
        ea47648c15f032b45deac9ea841048a958763550
        3cd9d4bbff8e6be5e252f00fc9ecb9ac2d8a193020288c7d1e82583daeb5ba35
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt WebSockets"}
        ""
        "variant overrides: "
        "revision 0"
    }
    qtwebview {
        b5c91572de5a45f844829a8173678c6df88f6da2
        5a7a36cedcbb5f737357d11b7e856d69f7f3dea11a3636bd413cf47038e951d6
        ""
        ""
        "qtbase qtdeclarative qtwebengine"
        {"Qt WebView"}
        "new in 5.6.0; requires qtwebengine"
        "variant overrides: ~universal"
        "revision 0"
    }
    qtxmlpatterns {
        c8a49d54736c571b39515d349da51a3e6bdef384
        7c6df3eebf188d8ce6822a22cebbc63da5ac27047cf1bd7236d5b988244782cc
        ""
        ""
        "qtbase"
        {"Qt XML Patterns"}
        ""
        "variant overrides: "
        "revision 0"
    }
}

############################################################################### SQL Plugin Format
#
# {
#     variant name
#     dependency, library
#     include path
#     link requirement
#     obsolete? (empty string is no)
# }
#
###############################################################################
array set sql_plugins {
    {sqlite SQLite "revision 0"} {
        {
            "sqlite3"
            "port:sqlite3"
            "${prefix}/include"
            "-L${prefix}/lib -lsqlite3"
            ""
        }
    }
    {psql PostgreSQL "revision 0"} {
        {
            "postgresql95"
            "port:postgresql95"
            "${prefix}/include/postgresql95"
            "-L${prefix}/lib/postgresql95 -lpq"
            ""
        }
        {
            "postgresql94"
            "port:postgresql94"
            "${prefix}/include/postgresql94"
            "-L${prefix}/lib/postgresql94 -lpq"
            ""
        }
        {
            "postgresql84"
            "port:postgresql84"
            "${prefix}/include/postgresql84"
            "-L${prefix}/lib/postgresql84 -lpq"
            ""
        }
    }
    {mysql MySQL "revision 0"} {
        {
            "mariadb55"
            "port:mariadb"
            "${prefix}/include/mariadb/mysql"
            "-L${prefix}/lib/mariadb/mysql -lmysqlclient_r"
            ""
        }
        {
            "mysql57"
            "port:mysql57"
            "${prefix}/include/mysql57/mysql"
            "-L${prefix}/lib/mysql57/mysql -lmysqlclient_r"
            ""
        }
        {
            "mysql56"
            "port:mysql56"
            "${prefix}/include/mysql56/mysql"
            "-L${prefix}/lib/mysql56/mysql -lmysqlclient_r"
            ""
        }
    }
}

foreach {module module_info} [array get modules] {

    set revision_string [string trim [lindex ${module_info} 8]]
    set revision_string [string range ${revision_string} 1+[string last " " ${revision_string}] end]

    subport ${name}-${module} {

        # special case
        if { ${module} ne "qtenginio" } {
            distname        ${module}-opensource-src-${version}
        } else {
            distname        ${module}-opensource-src-1.[join [lrange [split ${version} "."] 1 end] "."]
        }

        if { ${revision_string} ne "0" } {
            revision ${revision_string}
        }

        # see https://bugreports.qt.io/browse/QTBUG-35514
        build.target

        checksums                              \
            rmd160  [lindex ${module_info} 0]  \
            sha256  [lindex ${module_info} 1]

        foreach deps [lindex ${module_info} 2] {
            depends_build-append [subst ${deps}]
        }

        foreach deps [lindex ${module_info} 3] {
            depends_lib-append [subst ${deps}]
        }

        foreach qtdeps [lindex ${module_info} 4] {
            if { ${qtdeps} ne "qtbase" } {
                depends_lib-append port:${name}-${qtdeps}
            }
        }

        description       Tools and Module(s) for Qt Tool Kit ${qt_major}

        set modules_provided_list [lindex ${module_info} 5]
        if { [llength ${modules_provided_list}] == 1 } {
            set modules_provided_join [lindex ${modules_provided_list} 0]
        } elseif { [llength ${modules_provided_list}] == 2 } {
            set modules_provided_join [join ${modules_provided_list} " and "]
        } else {
            set modules_provided_join [join [list [join [lrange ${modules_provided_list} 0 end-1] ", "] [lindex ${modules_provided_list} end]] ", and "]
        }

        long_description  "Tools and Module(s) for Qt Tool Kit ${qt_major}: ${modules_provided_join}"

        if { ${module} eq "qtbase" } {
            # this subport uses configure script (NOT qmake)

            # use the qt5 group; set 'building_qt5' so that the portgroup
            # does not include certain parts
            set building_qt5    1
            PortGroup           qt5 1.0
            unset building_qt5

            if { ${os.platform} ne "darwin" } {
                pre-fetch {
                    ui_warn "${subport} is untested on \"${os.platform}\"."
                }
            }

            if { [variant_isset universal] } {
                pre-fetch {
                    ui_warn "Multiple architectures is not a Reference Configuration for Qt."
                    ui_warn "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
                }
            } else {
                if { ${configure.build_arch} eq "i386" } {
                    pre-fetch {
                        ui_warn "32-bit mode is not a Reference Configuration for Qt."
                        ui_warn "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
                    }
                }
            }

            # https://codereview.qt-project.org/#/c/141654/
            patchfiles-append patch-add_sdk.diff

            # see http://lists.qt-project.org/pipermail/interest/2015-January/thread.html#14954
            # see http://comments.gmane.org/gmane.comp.lib.qt.user/21422
            patchfiles-append patch-fontconfig.diff

            # the build system automatically uses OpenGL frameworks (-framework OpenGL -framework AGL)
            # the build system also uses pkgconfig to look for an OpenGL installation (gl.pc)
            # if mesa is installed, the build system will try to use both OpenGL systems
            # later, this will cause problems
            #    Undefined symbols: "_CGLGetCurrentContext"
            patchfiles-append patch-configure.diff

            # undo part of https://codereview.qt-project.org/#/c/140954/
            # .pc files still needed by some port
            # see https://github.com/Homebrew/homebrew-core/blob/master/Formula/qt5.rb
            patchfiles-append patch-pc_files.diff

            # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
            # only runs test code on 32-bit systems
            patchfiles-append patch-tst_benchlibcallgrind.diff

            # this test might still cause problems, but with 5.4.2->5.5.0, it is no longer run
            # tests/auto/corelib/plugin/qpluginloader/qpluginloader.pro:
            #     -macx-*: SUBDIRS += machtest
            #     +macx-*: contains(QT_CONFIG, private_tests): SUBDIRS += machtest
            #
            # When testing, ensure that a universal object file is not inadvertently created.
            patchfiles-append patch-machtest.diff

            #-----------------------------------------------------------------------------
            # qtbase is used for:
            #    1) building qtbase
            #    2) building MacPorts projects via qmake
            #    3) building end-user projects
            #
            # 1 & 2 require consistency with the MacPorts environment
            # 3 requires consistency with the default Qt installation
            #
            # 2 can be achieved via environment variables
            #    (e.g. QMAKE_MACOSX_DEPLOYMENT_TARGET=${macosx_deployment_target})
            #
            # the only way 3 can be achieved is if no changes are made to the build system
            #
            # the following is an attempt to achieve 1 without destroying 3
            #-----------------------------------------------------------------------------

            # save default spec files
            post-extract {
                copy ${worksrcpath}/mkspecs ${worksrcpath}/mkspecs-save
            }

            # use compiler specified by configure.compiler
            if { ${configure.compiler} ne "clang" } {

                patchfiles-append patch-mkspecs_compiler.diff

                post-patch {
                    reinplace \
                        "s|__MACPORTS_CC__|${configure.cc}|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf

                    reinplace \
                        "s|__MACPORTS_CXX__|${configure.cxx}|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf
                }

                if { [string match macports-clang-* ${configure.compiler}] && [vercmp ${xcodeversion} "7.0"] >= 0 } {
                    # non-Xcode clang does not seem to be able to understand tbd files
                    # for an explanation of tbd files, see
                    #    http://stackoverflow.com/questions/31450690/why-xcode-7-shows-tbd-instead-of-dylib
                    # see https://trac.macports.org/ticket/53151
                    pre-fetch {
                        ui_error "This configuration is known to fail"
                        ui_error "See https://trac.macports.org/ticket/53151"
                        ui_error "As a workaround, do not set configure.compiler manually"
                        return -code error "incompatible configuration"
                    }
                }
            }

            # change default compiler flags for the purpose of building qtbase
            patchfiles-append patch-mkspecs.diff
            post-patch {

                reinplace \
                    "s|__MACPORTS__CXX_STDLIB__|${cxx_stdlib}|g" \
                    ${worksrcpath}/mkspecs/common/clang-mac.conf

                foreach spec {macx-clang macx-clang-32 macx-g++ macx-g++-32 macx-g++40 macx-g++42 macx-icc macx-llvm} {
                    reinplace \
                        "s|__MACPORTS_DEPLOYMENT_TARGET__|${macosx_deployment_target}|g" \
                        ${worksrcpath}/mkspecs/${spec}/qmake.conf
                }
            }

            # return modified spec files to the default values
            post-build {
                if { [variant_exists universal] && [variant_isset universal] } {
                    foreach arch ${universal_archs_to_use} {
                        move -force ${worksrcpath}-${arch}/mkspecs-save/common/clang-mac.conf ${worksrcpath}-${arch}/mkspecs/common/clang-mac.conf

                        foreach spec {macx-clang macx-clang-32 macx-g++ macx-g++-32 macx-g++40 macx-g++42 macx-icc macx-llvm} {
                            move -force ${worksrcpath}-${arch}/mkspecs-save/${spec}/qmake.conf ${worksrcpath}-${arch}/mkspecs/${spec}/qmake.conf
                        }
                    }
                } else {
                    move -force ${worksrcpath}/mkspecs-save/common/clang-mac.conf ${worksrcpath}/mkspecs/common/clang-mac.conf

                    foreach spec {macx-clang macx-clang-32 macx-g++ macx-g++-32 macx-g++40 macx-g++42 macx-icc macx-llvm} {
                        move -force ${worksrcpath}/mkspecs-save/${spec}/qmake.conf ${worksrcpath}/mkspecs/${spec}/qmake.conf
                    }
                }
            }

            # --prefix is not recognized.
            configure.pre_args-delete       --prefix=${prefix}

            # --disable-dependency-tracking is not recognized.
            configure.universal_args-delete --disable-dependency-tracking

            # Installation options:
            #-extprefix     SYSROOT/PREFIX
            #-hostprefix    EXTPREFIX
            #-libexecdir    ARCHDATADIR/libexec
            #-hostbindir    HOSTPREFIX/bin
            #-hostlibdir    HOSTPREFIX/lib
            configure.args-append                      \
                -prefix         ${qt_dir}              \
                -bindir         ${qt_bins_dir}         \
                -headerdir      ${qt_includes_dir}     \
                -libdir         ${qt_libs_dir}         \
                -archdatadir    ${qt_archdata_dir}     \
                -plugindir      ${qt_plugins_dir}      \
                -importdir      ${qt_imports_dir}      \
                -qmldir         ${qt_qml_dir}          \
                -datadir        ${qt_data_dir}         \
                -docdir         ${qt_docs_dir}         \
                -translationdir ${qt_translations_dir} \
                -sysconfdir     ${qt_sysconf_dir}      \
                -examplesdir    ${qt_examples_dir}     \
                -testsdir       ${qt_tests_dir}        \
                -hostdatadir    ${qt_host_data_dir}

            # Configure options:
            configure.args-append \
                -release          \
                -opensource       \
                -confirm-license  \
                -shared           \
                -largefile        \
                -accessibility

            foreach driver { db2 ibase mysql oci odbc psql sqlite sqlite2 tds } {
                configure.args-append -no-sql-${driver}
            }

            if { ![variant_isset universal] } {
                configure.args-append "-platform ${qt_qmake_spec}"
            } else {
                set merger_configure_args(i386)   "-platform ${qt_qmake_spec_32}"
                set merger_configure_args(x86_64) "-platform ${qt_qmake_spec_64}"
            }

            configure.args-append \
                -no-testcocoon    \
                -no-gcov          \
                -force-pkg-config

            # turn off CFG_CLOEXEC if gnulib is installed

            # Third Party Libraries:
            configure.args-append   \
                -system-zlib        \
                -no-mtdev           \
                -no-journald        \
                -no-syslog          \
                -system-libpng      \
                -system-libjpeg     \
                -system-freetype    \
                -system-harfbuzz    \
                -openssl-linked     \
                -no-libproxy        \
                -system-pcre        \
                --disable-xcb       \
                -no-xkbcommon-x11   \
                -no-xkbcommon-evdev \
                -no-xinput2         \
                -no-xcb-xlib        \
                -glib               \
                -no-pulseaudio      \
                -no-alsa            \
                -no-gtkstyle

            # from the configure script:
            #     NOTE: -optimized-tools is not useful in -release mode.

            # Additional options:
            configure.args-append       \
                {-make libs}            \
                {-make tools}           \
                {-nomake examples}      \
                {-nomake tests}         \
                -gui                    \
                -widgets                \
                -no-rpath               \
                -verbose                \
                -cups                   \
                -iconv                  \
                -no-evdev               \
                -no-tslib               \
                -icu                    \
                -fontconfig             \
                -strip                  \
                -no-pch                 \
                -no-ltcg                \
                -dbus-linked            \
                -no-use-gold-linker     \
                -no-separate-debug-info \
                -no-xcb                 \
                -no-eglfs               \
                -no-gbm                 \
                -no-directfb            \
                -no-linuxfb             \
                -no-kms                 \
                -no-mirclient           \
                -no-libinput            \
                -no-gstreamer           \
                -no-system-proxies

            # MacOS/iOS options:
            configure.args-append    \
                -framework

            if {${configure.sdkroot} ne ""} {
                configure.args-append \
                    -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
            }

            # configure options that don't show up in configure --help
            configure.args-append \
                -no-libudev       \
                -no-egl           \
                -no-openvg

            # Qt builds part of the system using environment provided my MacPorts.
            # It builds the rest using its own internal environment.
            # For consistency, clear MacPorts environment.

            configure.cxx_stdlib
            configure.sdkroot
            configure.cc_archflags
            configure.cxx_archflags
            configure.objc_archflags
            configure.objcxx_archflags
            configure.ld_archflags
            configure.cppflags
            configure.cflags
            configure.cxxflags
            configure.objcflags
            configure.objcxxflags
            configure.ldflags
            configure.pipe  no
            if { [variant_isset universal] } {
                set merger_arch_flag no
            }
            configure.march
            configure.mtune
            configure.universal_ldflags
            configure.universal_cflags
            configure.universal_cxxflags
            configure.universal_cppflags

            # cofigure script looks for perl but doesn't seem to use it for our configuration

            # configure script uses gawk if it can find it,
            #    so require it for consistency
            depends_build-append port:gawk

            # unless overridden, configure script uses gmake if it can find it
            configure.env-append MAKE=${build.cmd}

            if { [variant_isset universal] } {

                post-destroot {
                    # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
                    reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                    reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
                    reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                }

                # The file ${qt_mkspecs_dir}/qconfig.pri is still not properly merged
                # A workaround is to set QT_ARCH and QT_TARGET_ARCH manually (see e.g. the qmake5 PortGroup)
            }

            variant tests description {Enable tests} {
                configure.args-replace {-nomake tests} {-make tests}
            }

            variant examples description {Build examples} {
                configure.args-replace {-nomake examples} {-make examples}
            }

            variant debug description {Build both release and debug libraries} {
                configure.args-replace -release -debug-and-release
            }

            variant pulseaudio description {Compile PulseAudio support} {
                depends_lib-append port:pulseaudio
                configure.args-replace -no-pulseaudio -pulseaudio
            }

            variant gstreamer description {Compile GStreamer support} {
                depends_lib-append port:gstreamer1 port:gstreamer1-gst-plugins-base
                configure.args-replace -no-gstreamer {-gstreamer 1.0}
            }

        } else {
            # these subports use qmake
            PortGroup            qmake5 1.0

            # detremint which variants are to be turned off
            set request_examples true
            set request_tests    true
            set def_var          ""

            if { [lsearch -exact [lindex ${module_info} 7] "~universal"] != -1 } {
                universal_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 7] "noarch"] != -1 } {
                supported_archs   noarch
                universal_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 7] "~debug"] != -1 } {
                qt5.debug_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 7] "~examples"] != -1 } {
                set request_examples false
            }

            if { [lsearch -exact [lindex ${module_info} 7] "~tests"] != -1 } {
                set request_tests    false
            }

            if { [lsearch -exact [lindex ${module_info} 7] "++examples"] != -1 } {
                set request_examples true
                lappend def_var "+examples"
            }

            if { ${request_examples} } {
                variant examples description {Build examples} {}
            }

            if { ${request_tests} } {
                variant tests description {Enable tests} {}
            }

            if { ${def_var} ne "" } {
                default_variants-append ${def_var}
            }

            # accommodating variant request varies depending on how qtbase was built
            pre-configure {

                # determine if qmake builds examples by default (set via variants)
                if {[active_variants ${name}-qtbase examples ""]} {
                    set base_examples true
                } else {
                    set base_examples false
                }

                # determine if qmake runs tests by default (set via varians)
                if {[active_variants ${name}-qtbase tests ""]} {
                    set base_tests true
                } else {
                    set base_tests false
                }

                # determine if the user wants to build examples
                if { [variant_exists examples] && [variant_isset examples] } {
                    set this_examples true
                } else {
                    set this_examples false
                }

                # determine if the user wants to run tests
                if { [variant_exists tests] && [variant_isset tests] } {
                    set this_tests true
                } else {
                    set this_tests false
                }

                # determine of qmake's default and user requests are compatible; override qmake if necessary
                if { ${this_examples} && !${base_examples}  } {
                    configure.args-append "QT_BUILD_PARTS+=\"examples\""
                }

                if { !${this_examples} && ${base_examples}  } {
                    configure.args-append "QT_BUILD_PARTS-=\"examples\""
                }

                if { ${this_tests} && !${base_tests}  } {
                    configure.args-append "QT_BUILD_PARTS+=\"tests\""
                }

                if { !${this_tests} && ${base_tests}  } {
                    configure.args-append "QT_BUILD_PARTS-=\"tests\""
                }
            }

            ###############################################################################
            # Special Cases
            ###############################################################################

            # special case
            if { ${module} eq "qtdoc" } {
                build.target    docs
                destroot.target install_docs

                # in the process of building the html files, qtdoc looks for all installed modules
                #    with no clear way to select only a subset
                # unless a way is found, ReproducibleBuilds (https://trac.macports.org/wiki/ReproducibleBuilds)
                #    requires qtdoc depend on all the documentation modules
                foreach {module_doc module_doc_info} [array get modules] {
                    if { [lsearch -exact [lindex ${module_doc_info} 7] "~docs"] == -1 } {
                        depends_lib-append port:${name}-${module_doc}-docs
                    }
                }
            }

            # special case
            if { ${module} eq "qtlocation" } {
                # qtlocation uses
                #    Gypsy (https://gypsy.freedesktop.org/wiki/)
                #    if they can be found
                # Ensure that test fails even if software is installed
                post-patch {
                    foreach test { gypsy } {
                        reinplace "s|return 0;|return 0;\\\n#error turn off test|g" ${worksrcpath}/config.tests/${test}/main.cpp
                    }
                }
            }

            # special case
            if { ${module} eq "qtwebkit" } {

                PortGroup cxx11 1.0

                # use MacPorts icu
                #
                # qmake uses pkgconfig to look for icu
                # this feature does not work without "CONFIG += link_pkgconfig"
                patchfiles-append patch-icu.diff

                # qtwebkit uses
                #    glx
                #    libXcomposite
                #    libXrender
                #    if they can be found
                # Ensure that test fails even if software is installed
                post-patch {
                    foreach test { glx libXcomposite libXrender } {
                        reinplace "s|return 0;|return 0;\\\n#error turn off test|g" ${worksrcpath}/Tools/qmake/config.tests/${test}/${test}.cpp
                    }
                }
            }

            # special case
            if { ${module} eq "qttools" } {
                # prevent qttools from opportunistically using qtwebkit if it can be found
                patchfiles-append patch-no_qtwebkit.diff

                variant qtwebkit description {build with QtWebkit support} {
                    patchfiles-delete patch-no_qtwebkit.diff
                    depends_lib-append port:${name}-qtwebkit
                }

                post-extract {
                    # these folders are installed and conflict with ${name}-qttools-docs
                    delete ${worksrcpath}/examples/assistant/simpletextviewer/documentation
                    delete ${worksrcpath}/examples/help/contextsensitivehelp/docs
                }

                # see #44934 (and #35067 for the qt4-mac version)
                set framework_list [split ${qt_frameworks_dir} '/']
                set qt_list        [split ${qt_dir} '/']

                while {[llength ${qt_list}] && [llength ${framework_list}]} {
                    set var_qt        [lindex $qt_list        0]
                    set var_framework [lindex $framework_list 0]

                    if { ${var_qt} ne ${var_framework} } {
                        break
                    }

                    # remove first element from list
                    set qt_list        [lreplace ${qt_list}        0 0]
                    set framework_list [lreplace ${framework_list} 0 0]
                }
                set libreplace [string repeat ../ [llength ${qt_list}]][join ${framework_list} /]
                if { ${libreplace} ne "lib" } {
                    patchfiles-append patch-shared.diff
                    post-patch {
                        reinplace "s|__MACPORTS_FRAMWORK_DIR__|${libreplace}|g" ${worksrcpath}/src/macdeployqt/shared/shared.cpp
                    }
                }
            }

            # special case
            if { ${module} eq "qtwebengine" } {
                # see http://doc.qt.io/qt-5/qtwebengine-platform-notes.html
                PortGroup           xcodeversion 1.0
                minimum_xcodeversions   {13 5.1}

                # see http://lists.qt-project.org/pipermail/interest/2016-February/thread.html#20946
                # see http://googleappsupdates.blogspot.co.uk/2014/09/google-chrome-64-bit-for-mac-and-windows.html
                # see http://doc.qt.io/qt-5/qtwebengine-platform-notes.html
                supported_archs x86_64

                # UsingTheRightCompiler (https://trac.macports.org/wiki/UsingTheRightCompiler)
                build.env-append      CXX=${configure.cxx}
                build.env-append      CC=${configure.cc}
                configure.args-append QMAKE_LINK=${configure.cxx}

                # see http://code.qt.io/cgit/qt/qtwebengine-chromium.git/commit/chromium/base/mac/sdk_forward_declarations.h?h=53-based&id=28b1110370900897ab652cb420c371fab8857ad4
                patchfiles-append patch-bluetooth.diff
            }

            # special case
            if { ${module} eq "qtsensors" && [variant_isset examples] } {
                if { [variant_isset debug] } {
                    set debug "_debug"
                } else {
                    set debug ""
                }
                # fix library path names or MacPorts will try to reinstall
                post-destroot {
                    foreach dylib "grue/Grue/libdeclarative_grue${debug}.dylib grue/libgruesensor.1.dylib grue/sensors/libqtsensors_grue${debug}.dylib sensor_explorer/Explorer/libdeclarative_explorer${debug}.dylib" {
                        system "/usr/bin/install_name_tool -id ${qt_examples_dir}/sensors/${dylib} ${destroot}${qt_examples_dir}/sensors/${dylib}"
                    }
                    foreach dylib "grue/Grue/libdeclarative_grue${debug}.dylib grue/sensors/libqtsensors_grue${debug}.dylib" {
                        system "/usr/bin/install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib ${destroot}${qt_examples_dir}/sensors/${dylib}"
                    }
                }
            }

            # special case
            if { ${module} eq "qtserialbus" } {
                PortGroup cxx11 1.0
            }

            # special case
            if { ${module} eq "qtconnectivity" } {
                # https://codereview.qt-project.org/#/c/172619/
                patchfiles-append patch-qtconn-for-10.12.diff
            }

            # special case
            if { ${module} eq "qtmultimedia" } {
                if { [vercmp ${os.version} 12] < 0} {
                    # see https://trac.macports.org/ticket/52922
                    patchfiles-append patch-firstObject.diff
                }
            }
        }
    }

    if { [lsearch -exact [lindex ${module_info} 7] "~docs"] == -1 } {

        subport ${name}-${module}-docs {

            supported_archs   noarch
            installs_libs     no
            universal_variant no

            # special case
            if { ${module} ne "qtenginio" } {
                distname        ${module}-opensource-src-${version}
            } else {
                distname        ${module}-opensource-src-1.[join [lrange [split ${version} "."] 1 end] "."]
            }

            if { ${revision_string} ne "0" } {
                revision ${revision_string}
            }

            description       Documentation for the port ${name}-${module}
            long_description  ${description}

            build.target    docs
            destroot.target install_docs

            checksums                              \
                rmd160  [lindex ${module_info} 0]  \
                sha256  [lindex ${module_info} 1]

            depends_build-append            \
                port:${name}-qttools        \
                port:${name}-sqlite-plugin

            PortGroup           qmake5 1.0

            qt5.debug_variant   no

            # special cases
            if { ${module} eq "qtdeclarative" } {
                depends_build-append \
                    port:python27
            } elseif { ${module} eq "qtserialbus" } {
                depends_build-append \
                    port:${name}-qtserialport
            } elseif { ${module} eq "qtwebview" } {
                depends_build-append \
                    port:${name}-qtwebengine
            } elseif { ${module} eq "qttools" } {
                post-extract {
                    # generated makefiles assume full Qt was built locally
                    xinstall -d -m 0755                 ${worksrcpath}/bin/
                    ln -s ${qt_bins_dir}/qdoc           ${worksrcpath}/bin/
                    ln -s ${qt_bins_dir}/qhelpgenerator ${worksrcpath}/bin/
                }
            } elseif { ${module} eq "qtwebengine" } {
                depends_build-append \
                    port:python27 \
                    port:${name}-qtwebchannel

                # UsingTheRightCompiler (https://trac.macports.org/wiki/UsingTheRightCompiler)
                build.env-append      CXX=${configure.cxx}

            } elseif { ${module} eq "qtwebkit" } {
                post-extract {
                    # without this file, the makefile ${worksrcpath}/qtwebkit/Source/WebCore/Makefile.WebCore.Target
                    #    keeps generating itself over and over again
                    # this file is only created when the library is being built, however
                    xinstall -d -m 0755 ${worksrcpath}/Source/WebCore/generated
                    touch ${worksrcpath}/Source/WebCore/generated/InspectorBackendCommands.qrc
                }

                # avoid
                #    ! Missing GStreamer or QtMultimedia, disabling HTML5 media element support
                depends_build-append \
                    port:${name}-qtmultimedia
            }
        }
    }
}

# see http://doc.qt.io/qt-5/sql-driver.html for info on building SQL Database Drivers
foreach {sql_names sql_info} [array get sql_plugins] {
    set driver          [lindex ${sql_names} 0]
    set dbms            [lindex ${sql_names} 1]
    set revision_string [lindex ${sql_names} 2]
    set revision_string [string range ${revision_string} 1+[string last " " ${revision_string}] end]

    subport ${name}-${driver}-plugin {

        PortGroup qmake5 1.0

        distname        qtbase-opensource-src-${version}

        if { ${revision_string} ne "0" } {
            revision ${revision_string}
        }

        checksums                               \
            rmd160  [lindex $modules(qtbase) 0] \
            sha256  [lindex $modules(qtbase) 1]

        description       ${dbms} Database Driver for Qt Tool Kit ${qt_major}
        long_description  ${dbms} Database Driver for Qt Tool Kit ${qt_major}

        # if there is more than one version of the database system, create variants for each version
        if { [llength ${sql_info}] > 1 } {

            set any_variant_set false

            foreach variant_info ${sql_info} {

                set varName [lindex ${variant_info} 0]

                # find every other variant so it can be marked as conflicting
                set conflicts_list ""
                foreach variant_info2 ${sql_info} {
                    set varName2 [lindex ${variant_info2} 0]

                    if { ${varName} ne ${varName2} } {
                        lappend conflicts_list ${varName2}
                    }
                }

                # get only the numbers from the name
                regexp {[0-9].} ${varName} varVer

                variant ${varName} conflicts ${conflicts_list} description "use version ${varVer} of ${dbms}" {}

                # check if any variant has been set
                if { [variant_isset ${varName}] } {
                    set any_variant_set true
                }
            }

            # ensure at least one variant is set
            if { !${any_variant_set} } {
                default_variants-append +[lindex [lindex ${sql_info} 0] 0]
            }
        }

        foreach variant_info ${sql_info} {
            set varName [lindex ${variant_info} 0]

            if { ( [variant_exists ${varName}] && [variant_isset ${varName}] ) || [llength ${sql_info}]==1 } {
                depends_lib-append [lindex ${variant_info} 1]

                configure.args-append                                    \
                    [subst INCLUDEPATH+=\"[lindex ${variant_info} 2]\"]  \
                    [subst LIBS+=\"[lindex ${variant_info} 3]\"]
            }
        }

        # for single architecture, easier to use
        #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/${driver},
        #    but doesn't work for universal build
        configure.dir ${worksrcpath}/src/plugins/sqldrivers/${driver}
        build.dir     ${configure.dir}
        destroot.dir  ${configure.dir}

        # see https://trac.macports.org/ticket/53248
        qt5.top_level ${worksrcpath}
    }
}

subport ${name}-docs {
    # meta-port to install documentation for various modules

    #revision 0

    description         Documentation for Qt Tool Kit ${qt_major}
    long_description    Documentation for Qt Tool Kit ${qt_major}

    master_sites
    distfiles
    use_configure     no
    supported_archs   noarch
    installs_libs     no
    universal_variant no

    build {}

    # create a dummy file so the port can be successfully activated
    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/doc/${subport}
        set docfile   [open ${destroot}${prefix}/share/doc/${subport}/README.txt "w"]
        puts ${docfile} "Meta-port for ${name}"
        puts ${docfile} "${long_description}"
        close ${docfile}
    }

    foreach {module module_info} [array get modules] {
        if { [lindex ${module_info} 6] eq "" } {
            if { [lsearch -exact [lindex ${module_info} 7] "~docs"] == -1 } {
                depends_run-append port:${name}-${module}-docs
            }
        }
    }
}

if { ${subport} eq ${name} } {
    # the main port is Meta-port to install various modules

    #revision 0

    description         Qt Tool Kit ${qt_major}
    long_description    Qt Tool Kit: A cross-platform framework \
        (headers, data, and libraries) for writing \
        cross-platform GUI-based applications.

    master_sites
    distfiles
    use_configure     no
    supported_archs   noarch
    installs_libs     no
    universal_variant no

    build {}

    # create a dummy file so the port can be successfully activated
    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/doc/${subport}
        set docfile   [open ${destroot}${prefix}/share/doc/${subport}/README.txt "w"]
        puts ${docfile} "Meta-port for ${name}"
        puts ${docfile} "${long_description}"
        close ${docfile}
    }

    foreach {module module_info} [array get modules] {
        if { [lindex ${module_info} 6] eq "" } {
            depends_run-append port:${name}-${module}
        }
    }

    depends_run-append port:${name}-sqlite-plugin
}

set python_framework ""
set depends_check ""
if { [info exists depends_build] } {
    set depends_check "${depends_check} ${depends_build}"
}
if { [info exists depends_lib] } {
    set depends_check "${depends_check} ${depends_lib}"
}

foreach deps ${depends_check} {
    if { [string first ":python27" ${deps}] >= 0 } {
        # If Qt components use Python, ensure that MacPorts python27 is used
        #
        # a better solution would be to force components to use a specific python program
        # how to accomplish such a thing is not entirely clear
        #
        # see #49838
        #
        # version 5.5.1 (at least) of qtwebengine must find a python version in the interval [2.7, 3)
        #    (see tools/qmake/mkspecs/features/functions.prf)
        # versions 5.5.1 of qtdeclarative and qtwebkit also use python with no way of specifying which one
        #
        set python_framework ${frameworks_dir}/Python.framework/Versions/2.7
    }
}
if { ${python_framework} ne "" } {
    configure.env-append PATH=${python_framework}/bin:$env(PATH)
    build.env-append     PATH=${python_framework}/bin:$env(PATH)
}
unset python_framework

if { ![exists universal_variant] || [option universal_variant] } {
    PortGroup muniversal  1.0
}

if { [variant_exists universal] && [variant_isset universal] } {

    merger-post-destroot {
        foreach arch ${universal_archs_to_use} {

            set dir ${destroot}-${arch}

            foreach prlfl [glob -nocomplain ${dir}${qt_libs_dir}/*.framework/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            foreach prlfl [glob -nocomplain ${dir}${qt_libs_dir}/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            foreach prlfl [glob -nocomplain ${dir}${qt_examples_dir}/widgets/tools/plugandpaint/plugins/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            if { [file exists ${dir}${qt_libs_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake] } {
                reinplace "s|macx-clang-32|macx-clang|g" ${dir}${qt_libs_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }

            # Libs.private contains the value of ${worksrcpath}-${arch}, which prevents merging
            if { [file exists ${dir}${qt_libs_dir}/pkgconfig/Qt5WebKit.pc] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_libs_dir}/pkgconfig/Qt5WebKit.pc
            }
            if { [file exists ${dir}${qt_libs_dir}/pkgconfig/Qt5WebEngineCore.pc] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_libs_dir}/pkgconfig/Qt5WebEngineCore.pc
            }

            if { [file exists ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E "/\\w*-arch \\\\/d"                      ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E "/\\w*${arch} \\\\/d"                    ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E {s:-arch +[^ ]+::g}                      ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace "s|macx-clang-32|macx-clang|g"              ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
            }

            if { [file exists ${dir}${qt_examples_dir}/multimedia/spectrum/fftreal.framework/fftreal.prl] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/multimedia/spectrum/fftreal.framework/fftreal.prl
            }

            if { [file exists ${dir}${qt_examples_dir}/multimedia/spectrum/spectrum.app/Contents/Frameworks/fftreal.framework/fftreal.prl] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/multimedia/spectrum/spectrum.app/Contents/Frameworks/fftreal.framework/fftreal.prl
            }

            if { [file exists ${dir}${qt_examples_dir}/sensors/grue/libgruesensor.prl] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/sensors/grue/libgruesensor.prl
            }
        }
    }
}

post-destroot {
    # see #44204
    foreach f [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir} *.framework] {
        set framework [file rootname ${f}]

        set include_list   [split ${qt_includes_dir}   '/']
        set framework_list [split ${qt_libs_dir} '/']

        while {[llength ${include_list}] && [llength ${framework_list}]} {
            set var_include   [lindex $include_list   0]
            set var_framework [lindex $framework_list 0]

            if { ${var_include} ne ${var_framework} } {
                break
            }

            # remove first element from list
            set include_list   [lreplace ${include_list} 0 0]
            set framework_list [lreplace ${framework_list} 0 0]
        }

        xinstall -d -m 0755 ${destroot}${qt_includes_dir}
        ln -s [string repeat ../ [llength ${include_list}]][join ${framework_list} /]/${f}/Headers ${destroot}${qt_includes_dir}/${framework}
    }

    # .app and non-.app programs are both put in qt_bins_dir
    # put a link of any .app programs in the ${qt_apps_dir}
    if { ${qt_bins_dir} ne ${qt_apps_dir} } {
        xinstall -d -m 0755 ${destroot}${qt_apps_dir}
        foreach app [glob -nocomplain -tails -directory ${destroot}${qt_bins_dir} *.app] {
            ln -s ${qt_bins_dir}/${app} ${destroot}${qt_apps_dir}
        }
    }

    # put configuration files in places they will be found automatically
    if { ${qt_libs_dir} ne "${prefix}/lib" } {

        # put link to pkgconfig files in place where pkgconfig will find it
        # most Qt 5 pkgconfig files begin with Qt5, so link should not conflict with any other Qt installations
        #    exceptions: Enginio (new in Qt 5.3, removed in Qt 5.7)
        xinstall -d -m 0755 ${destroot}${prefix}/lib/pkgconfig
        foreach pcfile [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir}/pkgconfig *.pc] {
            ln -s ${qt_libs_dir}/pkgconfig/${pcfile} ${destroot}${prefix}/lib/pkgconfig
        }

        # put link to cmake files in place where cmake will find it
        # most Qt 5 cmake directories begin with Qt5, so link should not conflict with any other Qt installations
        #    exceptions: Enginio (new in Qt 5.3, removed in Qt 5.7)
        xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake
        foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
            xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake/${cmakedir}
            foreach cmakefile [glob -tails -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                ln -s ${qt_libs_dir}/cmake/${cmakedir}/${cmakefile} ${destroot}${prefix}/lib/cmake/${cmakedir}/
            }
        }

        # if cmake finds configuration files in ${prefix}/lib/cmake, CMAKE_CURRENT_LIST_DIR expands to ${prefix}/lib/cmake/xxx
        # cmake configuration files actually installed in ${qt_cmake_module_dir}/xxx
        foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
            foreach cmakefile [glob -nocomplain -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                reinplace "s|\\\${CMAKE_CURRENT_LIST_DIR}|${qt_cmake_module_dir}/${cmakedir}|g" ${cmakefile}
            }
        }
    }
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/${branch}/
livecheck.regex     (\\d+(\\.\\d+)+)

foreach {component component_info} [array get qt5pg::qt5_component_lib] {

    set suffix [lindex ${component_info} 3]

    set qt_version            ${version}
    set qt_version_introduced [lindex ${component_info} 0]
    set qt_version_removed    [lindex ${component_info} 1]

    if { [vercmp ${qt_version_removed} ${qt_version}] <= 0 } {
        subport ${name}-${component}${suffix} {
            PortGroup obsolete 1.0
            #revision 0
        }

        if { ${component} ne "qtquick1" && ${component} ne "qtwebkit-examples" && ${component} ne "qtdoc" && ${suffix} ne "-plugin" } {
            subport ${name}-${component}${suffix}-docs {
                PortGroup obsolete 1.0
                #revision 0
            }
        }
    }
}
