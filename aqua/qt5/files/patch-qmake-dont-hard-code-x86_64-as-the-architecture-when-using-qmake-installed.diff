From <https://github.com/qt/qtbase/commit/9082cc8e8d5a6441dabe5e7a95bc0cd9085b95fe>

This patch is for the mkspecs that we are going to install with qt5-qtbase




diff --git mkspecs-save/common/macx.conf mkspecs-save/common/macx.conf
index 1f99c8ff5ab..1b8bbbe047c 100644
--- mkspecs-save/common/macx.conf
+++ mkspecs-save/common/macx.conf
@@ -6,7 +6,6 @@ QMAKE_PLATFORM         += macos osx macx
 QMAKE_MAC_SDK           = macosx
 
 QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.13
-QMAKE_APPLE_DEVICE_ARCHS = x86_64
 
 # Should be 10.15, but as long as the CI builds with
 # older SDKs we have to keep this.
diff --git mkspecs-save/features/mac/default_post.prf mkspecs-save/features/mac/default_post.prf
index 92a9112bca6..d888731ec8d 100644
--- mkspecs-save/features/mac/default_post.prf
+++ mkspecs-save/features/mac/default_post.prf
@@ -90,6 +90,11 @@ app_extension_api_only {
     QMAKE_LFLAGS              += $$QMAKE_CFLAGS_APPLICATION_EXTENSION
 }
 
+# Non-universal builds do not set QMAKE_APPLE_DEVICE_ARCHS,
+# so we pick it up from what the arch test resolved instead.
+isEmpty(QMAKE_APPLE_DEVICE_ARCHS): \
+    QMAKE_APPLE_DEVICE_ARCHS = $$QT_ARCH
+
 macx-xcode {
     qmake_pkginfo_typeinfo.name = QMAKE_PKGINFO_TYPEINFO
     !isEmpty(QMAKE_PKGINFO_TYPEINFO): \
@@ -145,9 +150,6 @@ macx-xcode {
     simulator: VALID_SIMULATOR_ARCHS = $$QMAKE_APPLE_SIMULATOR_ARCHS
     VALID_ARCHS = $$VALID_DEVICE_ARCHS $$VALID_SIMULATOR_ARCHS
 
-    isEmpty(VALID_ARCHS): \
-        error("QMAKE_APPLE_DEVICE_ARCHS or QMAKE_APPLE_SIMULATOR_ARCHS must contain at least one architecture")
-
     single_arch: VALID_ARCHS = $$first(VALID_ARCHS)
 
     ACTIVE_ARCHS = $(filter $(EXPORT_VALID_ARCHS), $(ARCHS))
diff --git mkspecs/features/toolchain.prf mkspecs/features/toolchain.prf
index 2a1f7cba3dd..0040b6c4b9f 100644
--- mkspecs-save/features/toolchain.prf
+++ mkspecs-save/features/toolchain.prf
@@ -182,9 +182,14 @@ isEmpty($${target_prefix}.INCDIRS) {
         # UIKit simulator platforms will see the device SDK's sysroot in
         # QMAKE_DEFAULT_*DIRS, because they're handled in a single build pass.
         darwin {
-            # Clang doesn't pick up the architecture from the sysroot, and will
-            # default to the host architecture, so we need to manually set it.
-            cxx_flags += -arch $$QMAKE_APPLE_DEVICE_ARCHS
+            uikit {
+                # Clang doesn't automatically pick up the architecture, just because
+                # we're passing the iOS sysroot below, and we will end up building the
+                # test for the host architecture, resulting in linker errors when
+                # linking against the iOS libraries. We work around this by passing
+                # the architecture explicitly.
+                cxx_flags += -arch $$first(QMAKE_APPLE_DEVICE_ARCHS)
+            }
 
             uikit:macx-xcode: \
                 cxx_flags += -isysroot $$sdk_path_device.value
