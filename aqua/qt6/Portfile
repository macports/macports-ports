# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                qt6

categories          aqua
platforms           macosx
maintainers         nomaintainer

# for OpenSSLException, see source and header files in src/network/ssl of qtbase
license             {LGPL-3 GPL-3 OpenSSLException}

homepage            https://www.qt.io

version             6.2.1
set middle_name     everywhere

set just_want_qt6_variables yes
PortGroup qt6 1.0

unset just_want_qt6_variables

# get Qt's version numbers
set branch          [join [lrange [split ${version} .] 0 1] .]
set qt_major        [lindex [split ${version} .] 0]

# see https://www.qt.io/blog/qt-6.0-released
compiler.c_standard 2011
compiler.cxx_standard 2017

# Save off the actual macports prefix for use late
set mp_prefix       ${prefix}
set isSQL_module    false

master_sites        https://download.qt.io/official_releases/qt/${branch}/${version}/submodules
# file sizes are significantly smaller using xz
if { ${subport} ne ${name} && ${subport} ne "${name}-docs" } {
    use_xz yes
}

conflicts qt3 qt3-mac
# conflict with all other version of qt6
foreach {qt_test_name qt_test_info} [array get available_qt_versions] {
    if {${name} ne ${qt_test_name}} {
        conflicts-append [lindex ${qt_test_info} 0]
    }
}

# MacPorts LLVM/Clang version to use when required.
set llvm_version 13

############################################################################### Modules Not Considered
#
# No qtactiveqt      (Windows Only)
# No qtandroidextras (Android Only)
# No qtwayland       (Linux Only)
# No qtx11extras     (X11 Only)
# No qtwinextras     (Windows Only)
#
###############################################################################

############################################################################### Finding Dependencies
#
# grep -r "%dependencies" *
# find ./ -name sync.profile
#
# grep -r qtCompileTest *
#
# find ./ -name config.tests
#
# find ./ -name Find\*.cmake
#
# grep -r qtHaveModule *
#
# grep -r packagesExist *
#
# port provides `find ./ -name \*.dylib -exec otool -L {} \; | grep /opt/local/libexec/qt6 | cut -d ' ' -f1` | cut -d : -f2 | sort -u
# port provides `find ./ -name \*.dylib -exec otool -L {} \; | grep /opt/local/lib/ | cut -d ' ' -f1` | cut -d : -f2 | sort -u
#
# https://code.qt.io/cgit/qt/qt6.git/tree/.gitmodules?h=6.2
#
###############################################################################

############################################################################### Module Format
#
# "Qt Module Name" {
#     {
#         checksum, rmd160
#         checksum, sha256
#         checksum, size
#     }
#     dependencies, build
#     dependencies, lib
#     dependencies, Qt module name
#     Qt components provided
#     included in "standard" installation of Qt (empty string is no, explanation string is yes)
#     variant overrides
#     revision number
#     license replacement
# }
#
# module info found at https://doc.qt.io/qt-6.2/qtmodules.html
#
###############################################################################
array set modules {
    qt3d {
        {
            18887bc685306ad2f2a1213a98763c5babb619b3 \
            730c0e8e1a1a59c4acbeca68e206bab14ef770f5dacb94b84103a82243cfeeb3
            104023248
        }
        ""
        "port:assimp"
        "qtbase qtdeclarative qtimageformats"
        {"Qt 3D"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qt5compat {
        {
            5f539c3eeda04b63124b1d14ee45c2ea28f9fb44 \
            3865c031450a3c2616de1e20104ca9470ac5447adf51faa918f8b01a2c425de7
            8198156
        }
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt5 Compatibility"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtbase {
        {
            5f790b52b28e90e762929bc9c3a66ccd8953722a \
            2c5f07b5c3ea27d3fc1a46686ea3fb6724f94dddf1fb007de3eb0bdb87429079
            46641424
        }
        "port:ninja port:pkgconfig"
        "port:assimp port:brotli path:bin/cmake:cmake path:bin/dbus-daemon:dbus port:double-conversion port:freetype
            path:lib/pkgconfig/glib-2.0.pc:glib2 path:lib/pkgconfig/harfbuzz.pc:harfbuzz
            port:hunspell port:icu path:lib/pkgconfig/jasper.pc:jasper path:include/turbojpeg.h:libjpeg-turbo port:libb2
            port:libiconv port:libpng port:md4c port:nodejs16 path:lib/pkgconfig/libpcre2-posix.pc:pcre2
            port:tiff port:webp port:zlib path:lib/pkgconfig/libzstd.pc:zstd"

        ""
        {"Qt Core" "Qt GUI" "Qt Network" "Qt SQL" "Qt Test" "Qt Widgets" "Qt Concurrent" "Qt D-Bus" \
         "Qt OpenGL" "Qt Platform Headers" "Qt Print Support" "Qt XML"}
        ""
        "variant overrides: "
        "revision 4"
        "License: "
    }
    qtconnectivity {
        {
            c15218f42ec48aad9633d82a6b5594d46e533c44 \
            8dcc366b0f5f124b20bf25e1b207a5ae4b75e45c62d2cc1f4dce138075c2714e
            1072208
        }
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt Bluetooth" "Qt NFC"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtdeclarative {
        {
            13849d151710f3c8078c5b09ad1fc5f8a0c313d8 \
            5aeb841a5665f79672a302569754ea7d541c69102c551707e43489e797213c71
            29764804
        }
        "port:python310"
        ""
        "qtbase qtsvg qtimageformats"
        {"Qt QML" "Qt Quick" "Qt Quick Layouts" "Qt Quick Widgets"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtimageformats {
        {
            d7fc2ceddb89495a67644233feb47f3bf9fe70a9 \
            df61dc1a517988bfa123117c78a7dbeda859cbb6d9cbd080ce60058277bca3df
            1845284
        }
        ""
        "path:lib/pkgconfig/jasper.pc:jasper port:libmng port:tiff port:webp"
        "qtbase"
        {"Qt Image Formats"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtlocation {
        {
            438885e8a07f1a307cc278c95bb9b461533641d8 \
            a99e92c762d45b17e14685cd8a3c1564a3da0ce1cfd1a68ffd5b3fd7c409dcad
            6675600
        }
        ""
        "port:icu port:zlib"
        "qtbase qtdeclarative qtserialport"
        {"Qt Location" "Qt Positioning"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtnetworkauth {
        {
            56547cc10525dbf557c151a8455ac2055d680bb7 \
            8027f85095a9c56d8cada988527454f786a5f8dd4157206db4f21299016d1c9e
            144292
        }
        ""
        ""
        "qtbase"
        {"Qt Network Authorization"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtremoteobjects {
       {
           94d3e5037e083243c7df9ef25c628ed8b3ad63e8 \
           76681b03bb63e1cafa38a1bfde23c194f232aaff4b010d5f58c065fdcc0b379f
           358628
       }
       ""
       ""
       "qtbase qtdeclarative"
       {"Qt Remote Objects"}
       ""
       "variant overrides: "
       "revision 0"
       "License: "
    }
    qtsensors {
        {
            d7f061244537b3b483529e8b5766198a978c502c \
            5f55c972c52848f5c828148fded1b30de32955f7ee04867568c559991214739a
            2045476
        }
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt Sensors"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtserialbus {
        {
            00c46347f19928501a798a6f73a6a35af7c9a457 \
            15e7a0a578dc9ed306ff2598edb9822081902ef1a4b52b20f1d2dd6461239f85
            378596
        }
        ""
        ""
        "qtbase qtserialport"
        {"Qt Serial Bus"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtserialport {
        {
            13b54c9622e90aa17dbba118eba214882ffeddc8 \
            ec77f4c9d6096588f3e735315f873976103479be453985b27f27fe8994e0776a
            318916
        }
        ""
        ""
        "qtbase"
        {"Qt Serial Port"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtsvg {
        {
            dea5b2492dd16c71a30714c75ab3b3864063fffa \
            86e27e005c2421052ca90e619c8d13f1bd19c6bf1a7b84dd4e0f7855fc884fd7
            1717684
        }
        ""
        ""
        "qtbase"
        {"Qt SVG"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qttools {
        {
            a2afeabfe2037491631891333d8d226db4479548 \
            5a856d3d3d5fe6e15dc3f1af707a0ef1df2e687850403fc94af635edb9312bfb
            8668512
        }
        ""
        "port:clang-${llvm_version}"
        "qtbase qtdeclarative"
        {"Qt Designer" "Qt Help" "Qt UI Tools"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qttranslations {
        {
            623817eb7f3967fe3911aad89f537d48dc2d291c \
            3f680b520da585697fc725697a52c7d2074a6a728f6830366b491a6f8b9183c7
            1444712
        }
        ""
        ""
        "qttools"
        {"translation files"}
        ""
        "variant overrides: ~examples ~tests noarch ~docs"
        "revision 0"
        "License: "
    }
    qtwebchannel {
        {
            88773d8e3904df163d9593c04c5e9262412bad0d \
            035ba2e9a0e9de0baddd40f9d50014e6eb5f0b4ec741e9aec1b434e7c9e4e9c9
            211188
        }
        ""
        ""
        "qtbase qtdeclarative qtwebsockets"
        {"Qt WebChannel"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
    qtwebsockets {
        {
            da59cdb38216ad2fd8a563b39bb6b697fe1399d1 \
            23344e21e96a839697abed7bf7931a8c08a752f08bf25edf240748501aba3816
            258064
        }
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt WebSockets"}
        ""
        "variant overrides: "
        "revision 0"
        "License: "
    }
}

############################################################################### SQL Plugin Format
#
# {
#     variant name
#     dependency, library
#     include directory
#     library directory
#     library name
#     obsolete? (empty string is no)
# }
#
###############################################################################
array set sql_plugins {
    {sqlite SQLite "revision 0"} {
        {
            "sqlite3"
            "port:sqlite3"
            "${prefix}/include"
            "${prefix}/lib"
            "libsqlite3.dylib"
            ""
        }
    }
    {psql PostgreSQL "revision 0"} {
        {
            "postgresql13"
            "port:postgresql13"
            "${prefix}/include/postgresql13"
            "${prefix}/lib/postgresql13"
            "libpq.dylib"
            ""
        }
        {
            "postgresql12"
            "port:postgresql12"
            "${prefix}/include/postgresql12"
            "${prefix}/lib/postgresql12"
            "libpq.dylib"
            ""
        }
        {
            "postgresql11"
            "port:postgresql11"
            "${prefix}/include/postgresql11"
            "${prefix}/lib/postgresql11"
            "libpq.dylib"
            ""
        }
        {
            "postgresql10"
            "port:postgresql10"
            "${prefix}/include/postgresql10"
            "${prefix}/lib/postgresql10"
            "libpq.dylib"
            ""
        }
    }
    {mysql MySQL "revision 0"} {
        {
            "mariadb10_5"
            "port:mariadb-10.5"
            "${prefix}/include/mariadb-10.5/mysql"
            "${prefix}/lib/mariadb-10.5/mysql"
            "libmysqlclient_r.dylib"
            ""
        }
        {
            "mariadb10_4"
            "port:mariadb-10.4"
            "${prefix}/include/mariadb-10.4/mysql"
            "${prefix}/lib/mariadb-10.4/mysql"
            "libmysqlclient_r.dylib"
            ""
        }
        {
            "mariadb10_3"
            "port:mariadb-10.3"
            "${prefix}/include/mariadb-10.3/mysql"
            "${prefix}/lib/mariadb-10.3/mysql"
            "libmysqlclient_r.dylib"
            ""
        }
        {
            "mariadb10_2"
            "port:mariadb-10.2"
            "${prefix}/include/mariadb-10.2/mysql"
            "${prefix}/lib/mariadb-10.2/mysql"
            "libmysqlclient_r.dylib"
            ""
        }
        {
            "mysql8"
            "port:mysql8"
            "${prefix}/include/mysql8/mysql"
            "${prefix}/lib/mysql8/mysql"
            "libmysqlclient.dylib"
            ""
        }
    }
}

# because CPATH is set, pkgconfig does not include ${prefix}/lib and ${prefix}/include even when requested
# this means that files in ${prefix}/lib and ${prefix}/include are the *last* to be found
# this causes problems when there are files in ${worksrpath} that are unintentionally found instead
configure.env-append \
    PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
    PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
build.env-append \
    PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
    PKG_CONFIG_ALLOW_SYSTEM_LIBS=1

if { ${os.major} < 18 } {
    known_fail  yes
    pre-fetch {
        ui_error "${subport} requires macOS 10.14 or later"
        return -code error "incompatible OS version"
    }
}

foreach {module module_info} [array get modules] {

    set revision_string [string trim [lindex ${module_info} 7]]
    set revision_string [string range ${revision_string} 1+[string last " " ${revision_string}] end]

    subport ${name}-${module} {

        distname        ${module}-${middle_name}-src-${version}

        revision ${revision_string}

        # see https://bugreports.qt.io/browse/QTBUG-35514
        build.target

        checksums                                        \
            rmd160  [lindex [lindex ${module_info} 0] 0] \
            sha256  [lindex [lindex ${module_info} 0] 1] \
            size    [lindex [lindex ${module_info} 0] 2]

        set license_string [lindex ${module_info} 8]
        set license_string [string range ${license_string} 1+[string first ":" ${license_string}] end]
        set license_string [string trim  ${license_string}]

        if { ${license_string} ne "" } {
            license {*}${license_string}
        }

        foreach deps [lindex ${module_info} 1] {
            depends_build-append [subst ${deps}]
        }

        foreach deps [lindex ${module_info} 2] {
            depends_lib-append [subst ${deps}]
        }

        foreach qtdeps [lindex ${module_info} 3] {
            depends_lib-append port:${name}-${qtdeps}
        }

        description       Tools and Module(s) for Qt Tool Kit ${qt_major}

        set modules_provided_list [lindex ${module_info} 4]
        if { [llength ${modules_provided_list}] == 1 } {
            set modules_provided_join [lindex ${modules_provided_list} 0]
        } elseif { [llength ${modules_provided_list}] == 2 } {
            set modules_provided_join [join ${modules_provided_list} " and "]
        } else {
            set modules_provided_join [join [list [join [lrange ${modules_provided_list} 0 end-1] ", "] [lindex ${modules_provided_list} end]] ", and "]
        }

        long_description  "Tools and Module(s) for Qt Tool Kit ${qt_major}: ${modules_provided_join}"


        if { ${module} eq "qtbase" } {
            # this subport uses configure script (NOT qmake)
            PortGroup               qt6 1.0
            PortGroup               developerversion 1.0
            PortGroup               openssl 1.0

            # use ninja for the build/installation
            build.cmd               "ninja"
            build.post_args-append  -v
            destroot.target         install
            # ninja needs the DESTDIR argument in the environment
            destroot.destdir
            destroot.env-append     DESTDIR=${destroot}

            if { ${os.platform} ne "darwin" } {
                pre-fetch {
                    ui_warn "${subport} is untested on \"${os.platform}\"."
                }
            }

            if { [variant_isset universal] } {
                pre-fetch {
                    ui_warn "Multiple architectures is not a Reference Configuration for Qt."
                    ui_warn "See https://doc.qt.io/qt-6/supported-platforms.html#reference-configurations"
                }
            }

            minimum_developerversions 18 9

            # see https://trac.macports.org/ticket/63805#comment:13
            patchfiles-append patch-sdk-no-stderr.diff

            # Allow building with macOS 10.14 SDK
            # see https://trac.macports.org/ticket/64345
            patchfiles-append patch-macos-10.14-sdk.diff

            #-----------------------------------------------------------------------------
            # qtbase is used for:
            #    1) building qtbase
            #    2) building MacPorts projects via qt-cmake
            #    3) building end-user projects
            #
            # 1 & 2 require consistency with the MacPorts environment
            # 3 requires consistency with the default Qt installation
            #
            # 2 can be achieved via environment variables
            #    (e.g. QMAKE_MACOSX_DEPLOYMENT_TARGET=${macosx_deployment_target})
            #
            # the only way 3 can be achieved is if no changes are made to the build system
            #
            # the following is an attempt to achieve 1 without destroying 3
            #-----------------------------------------------------------------------------

            # save default spec files
            post-extract {
                copy ${worksrcpath}/mkspecs ${worksrcpath}/mkspecs-save
            }

            # respect MacPorts build variables
            patchfiles-append patch-mkspecs.diff

            # Backported upstream patch to build with the macOS 12 SDK.
            # https://github.com/qt/qtbase/commit/dece6f5840463ae2ddf927d65eb1b3680e34a547
            patchfiles-append patch-qiosurfacegraphicsbuffer.h.diff

            # respect configure.compiler
            if { ${configure.compiler} eq "clang" } {
                # let xargs find correct compiler (default behaviour)
                post-patch {
                    # let xargs find correct compiler
                    reinplace \
                        "s|__MACPORTS_CC__|clang|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf

                    reinplace \
                        "s|__MACPORTS_CXX__|clang++|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf
                }
            } else {
                post-patch {
                    reinplace \
                        "s|__MACPORTS_CC__|${configure.cc}|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf

                    reinplace \
                        "s|__MACPORTS_CXX__|${configure.cxx}|g" \
                        ${worksrcpath}/mkspecs/common/clang.conf
                }
            }

            if { [string match macports-clang-* ${configure.compiler}] && [vercmp ${xcodeversion} "7.0"] >= 0 } {
                # non-Xcode clang does not seem to be able to understand tbd files
                # for an explanation of tbd files, see
                #    https://stackoverflow.com/questions/31450690/why-xcode-7-shows-tbd-instead-of-dylib
                # see https://trac.macports.org/ticket/53151
                pre-fetch {
                    ui_error "This configuration is known to fail"
                    ui_error "See https://trac.macports.org/ticket/53151"
                    ui_error "As a workaround, do not set configure.compiler manually"
                    return -code error "incompatible configuration"
                }
            }

            post-patch {
                # respect configure.cxx_stdlib
                reinplace \
                    "s|__MACPORTS_CXX_STDLIB__|${configure.cxx_stdlib}|g" \
                    ${worksrcpath}/mkspecs/common/clang-mac.conf

                # respect macosx_deployment_target
                reinplace \
                    "s|__MACPORTS_DEPLOYMENT_TARGET__|${macosx_deployment_target}|g" \
                    ${worksrcpath}/mkspecs/common/macx.conf

                #respect configure.optflags
                reinplace \
                    "s|__MACPORTS_OPTFLAGS__|${configure.optflags}|g" \
                    ${worksrcpath}/mkspecs/common/gcc-base.conf
            }

            # starting with Xcode 7.0, the SDK for build OS version might not be available
            # see https://trac.macports.org/ticket/53597
            if { ${use_xcode} } {
                set sdks_dir ${configure.developer_dir}/Platforms/MacOSX.platform/Developer/SDKs
            } else {
                set sdks_dir ${configure.developer_dir}/SDKs
            }
            if { ![file exists ${sdks_dir}/MacOSX${configure.sdk_version}.sdk] } {
                configure.sdk_version
            }

            # respect configure.sdk_version
            post-patch {
                reinplace \
                    "s|__MACPORTS_MAC_SDK__|macosx${configure.sdk_version}|g" \
                    ${worksrcpath}/mkspecs/common/macx.conf
            }

            # use MacPorts X11
            post-patch {
                foreach spec {macx-clang} {
                    reinplace \
                        "s|__MACPORTS_PREFIX__|${prefix}|g" \
                        ${worksrcpath}/mkspecs/${spec}/qmake.conf
                }
            }

            # return modified spec files to the default values
            post-build {
                foreach conf {clang.conf macx.conf clang-mac.conf gcc-base.conf} {
                    move -force ${worksrcpath}/mkspecs-save/common/${conf} ${worksrcpath}/mkspecs/common/${conf}
                }
                foreach spec {macx-clang macx-g++ macx-icc} {
                        move -force ${worksrcpath}/mkspecs-save/${spec}/qmake.conf ${worksrcpath}/mkspecs/${spec}/qmake.conf
                    }
                }

            # --prefix is not recognized.
            configure.pre_args-delete       --prefix=${prefix}

            # worksrcpatch is not necessary since using the qt configure script
            configure.post_args-delete     ${worksrcpath}

            configure.post_args-append     -DFEATURE_pkg_config=ON

            # Installation options:
            #-extprefix     SYSROOT/PREFIX
            #-hostprefix    EXTPREFIX
            #-libexecdir    ARCHDATADIR/libexec
            #-hostbindir    HOSTPREFIX/bin
            #-hostlibdir    HOSTPREFIX/lib
            configure.args-append                      \
                -prefix         ${qt_dir}              \
                -bindir         ${qt_bins_dir}         \
                -headerdir      ${qt_includes_dir}     \
                -libdir         ${qt_libs_dir}         \
                -libexecdir     ${qt_bins_dir}         \
                -archdatadir    ${qt_archdata_dir}     \
                -plugindir      ${qt_plugins_dir}      \
                -qmldir         ${qt_qml_dir}          \
                -datadir        ${qt_data_dir}         \
                -docdir         ${qt_docs_dir}         \
                -translationdir ${qt_translations_dir} \
                -sysconfdir     ${qt_sysconf_dir}      \
                -examplesdir    ${qt_examples_dir}     \
                -testsdir       ${qt_tests_dir}        \
                -hostdatadir    ${qt_host_data_dir}

            # Configure options:
            configure.args-append \
                -release          \
                -opensource       \
                -confirm-license  \
                -shared           \
                -accessibility

            # SQL Options
            foreach driver { db2 ibase mysql oci odbc psql sqlite } {
                configure.args-append -no-sql-${driver}
            }

            configure.args-append "-platform ${qt_qmake_spec}"

            # use -Os instead of -O2
            configure.args-append -optimize-size

            # Set CMake variables (similar to what cmake portgroup does)
            # to allow using ccache (and possibly compiler selection
            # if .tbd file support was not an issue; see comment above)
            configure.post_args --
            configure.post_args-append \
                -DCMAKE_C_COMPILER=[option configure.cc] \
                -DCMAKE_CXX_COMPILER=[option configure.cxx] \
                -DCMAKE_OBJC_COMPILER=[option configure.objc] \
                -DCMAKE_OBJCXX_COMPILER=[option configure.objcxx]
            if {[option configure.ccache]} {
                # Do not use `configure.args-append -ccache`
                # or `configure.post_args-append -DQT_USE_CCACHE=1`
                # since that affects installed files.
                configure.post_args-append \
                    -DCMAKE_C_COMPILER_LAUNCHER=${prefix}/bin/ccache \
                    -DCMAKE_CXX_COMPILER_LAUNCHER=${prefix}/bin/ccache \
                    -DCMAKE_OBJC_COMPILER_LAUNCHER=${prefix}/bin/ccache \
                    -DCMAKE_OBJCXX_COMPILER_LAUNCHER=${prefix}/bin/ccache
            }

            configure.args-append \
                -no-testcocoon    \
                -force-pkg-config

            # Third Party Libraries:
            configure.args-append   \
                -system-zlib        \
                -no-mtdev           \
                -no-journald        \
                -no-syslog          \
                -system-libpng      \
                -system-libjpeg     \
                -system-freetype    \
                -system-harfbuzz    \
                -system-pcre        \
                -no-openssl         \
                -no-libproxy        \
                -glib               \
                -no-gtk

            # Additional options:
            configure.args-append       \
                {-make tools}           \
                {-nomake examples}      \
                {-nomake tests}         \
                -gui                    \
                -widgets                \
                -no-rpath               \
                -cups                   \
                -no-evdev               \
                -no-tslib               \
                -icu                    \
                -no-fontconfig          \
                -no-pch                 \
                -no-ltcg                \
                -dbus-linked            \
                -no-use-gold-linker     \
                -no-separate-debug-info \
                -no-xcb                 \
                -no-eglfs               \
                -no-gbm                 \
                -no-directfb            \
                -no-linuxfb             \
                -no-kms                 \
                -no-libinput            \
                -no-system-proxies      \
                -no-libudev             \
                -no-egl

            # do not opportunistically enable Vulkan support
            # (TODO: is Vulkan support desirable?)
            # see https://trac.macports.org/ticket/62104
            configure.args-append \
                -no-feature-vulkan

            # MacOS/iOS options:
            configure.args-append       \
                -framework              \
                -securetransport

            # Qt builds part of the system using environment provided by MacPorts.
            # It builds the rest using its own internal environment.
            # For consistency, clear MacPorts environment.
            #configure.cxx_stdlib
            proc portconfigure::should_add_stdlib {} {return false}
            configure.sdkroot
            configure.cc_archflags
            configure.cxx_archflags
            configure.objc_archflags
            configure.objcxx_archflags
            configure.ld_archflags
            configure.cppflags
            configure.cflags
            configure.cxxflags
            configure.objcflags
            configure.objcxxflags
            configure.ldflags
            configure.pipe  no
            configure.march
            configure.mtune
            configure.universal_ldflags
            configure.universal_cflags
            configure.universal_cxxflags
            configure.universal_cppflags

            # configure script uses gawk if it can find it,
            #    so require it for consistency
            depends_build-append port:gawk

            variant tests description {Enable tests} {
                configure.args-replace {-nomake tests} {-make tests}
            }

            variant examples description {Build examples} {
                configure.args-replace {-nomake examples} {-make examples}
            }

            variant debug description {Build both release and debug libraries} {
                configure.args-replace -release -debug-and-release
            }

            variant openssl description {Use OpenSSL instead of Secure Transport} {
                configure.args-delete -securetransport -no-openssl
                configure.args-append -openssl-linked

                # see https://trac.macports.org/ticket/51358
                #     for why not a path dependency
                depends_lib-append path:lib/libssl.dylib:openssl

                # configure has issues locating openssl files
                configure.pre_args-append                            \
                    -DOPENSSL_ROOT_DIR=[openssl::install_area]       \
                    -DOPENSSL_INCLUDE_DIR=[openssl::include_dir]     \
                    -DOPENSSL_LIBRARIES=[openssl::install_area]/lib  \
                    -DOPENSSL_LIBS='-L[openssl::install_area]/lib -lssl -lcrypto'
            }
            default_variants-append +openssl

        } else {

            # these subports use qt-cmake
            PortGroup                    qt6 1.0
            PortGroup                    active_variants 1.1

            # We need to use qt-cmake to configure the build
            configure.cmd                ${qt_configure_module_cmd}

            # Attempting to match module configure instructions from here: https://www.qt.io/blog/qt-6-build-system
            # --prefix is not recognized.
            configure.pre_args-delete    --prefix=${prefix}
            configure.pre_args-append    ${worksrcpath}
            configure.dir                ${workpath}/build

            # Qt suggests using Ninja to build
            depends_build-append         port:ninja
            build.cmd                    ninja
            build.post_args-append       -v
            build.dir                    ${workpath}/build

            destroot.target install
            # ninja needs the DESTDIR argument in the environment
            destroot.destdir
            destroot.env-append DESTDIR=${destroot}

            # special case (needs to go before compiler options are read from)
            if { ${module} eq "qtdeclarative" } {
                PortGroup compiler_blacklist_versions 1.0
                # Xcode 10.3 compiler segfaults
                compiler.blacklist-append {clang < 1100}
            }

            # Set CMake variables (similar to what cmake portgroup does)
            # to allow using ccache and controlling compiler selection
            configure.post_args --
            configure.post_args-append \
                -DCMAKE_C_COMPILER=[option configure.cc] \
                -DCMAKE_CXX_COMPILER=[option configure.cxx] \
                -DCMAKE_OBJC_COMPILER=[option configure.objc] \
                -DCMAKE_OBJCXX_COMPILER=[option configure.objcxx]
            if {[option configure.ccache]} {
                configure.post_args-append -DQT_USE_CCACHE=1
            }

            # determine which variants are to be turned off
            set request_examples true
            set request_tests    true
            set def_var          ""

            if { [lsearch -exact [lindex ${module_info} 6] "~universal"] != -1 } {
                universal_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 6] "noarch"] != -1 } {
                supported_archs   noarch
                universal_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 6] "~debug"] != -1 } {
                qt6.debug_variant no
            }

            if { [lsearch -exact [lindex ${module_info} 6] "~examples"] != -1 } {
                set request_examples false
            }

            if { [lsearch -exact [lindex ${module_info} 6] "~tests"] != -1 } {
                set request_tests    false
            }

            if { [lsearch -exact [lindex ${module_info} 6] "++examples"] != -1 } {
                set request_examples true
                lappend def_var "+examples"
            }

            if { ${request_examples} } {
                variant examples description {Build examples} {}
            }

            if { ${request_tests} } {
                variant tests description {Enable tests} {}
            }

            if { ${def_var} ne "" } {
                default_variants-append ${def_var}
            }

            # accommodating variant request varies depending on how qtbase was built
            pre-configure {

                # determine if qmake builds examples by default (set via variants)
                if {[active_variants ${name}-qtbase examples ""]} {
                    set base_examples true
                } else {
                    set base_examples false
                }

                # determine if qmake runs tests by default (set via variants)
                if {[active_variants ${name}-qtbase tests ""]} {
                    set base_tests true
                } else {
                    set base_tests false
                }

                # determine if the user wants to build examples
                if { [variant_exists examples] && [variant_isset examples] } {
                    set this_examples true
                } else {
                    set this_examples false
                }

                # determine if the user wants to run tests
                if { [variant_exists tests] && [variant_isset tests] } {
                    set this_tests true
                } else {
                    set this_tests false
                }

                # determine if qmake's default and user requests are compatible; override qmake if necessary
                if { ${this_examples} && !${base_examples}  } {
                    configure.args-append "QT_BUILD_PARTS+=\"examples\""
                }

                if { !${this_examples} && ${base_examples}  } {
                    configure.args-append "QT_BUILD_PARTS-=\"examples\""
                }

                if { ${this_tests} && !${base_tests}  } {
                    configure.args-append "QT_BUILD_PARTS+=\"tests\""
                }

                if { !${this_tests} && ${base_tests}  } {
                    configure.args-append "QT_BUILD_PARTS-=\"tests\""
                }
            }

            ###############################################################################
            # Special Cases
            ###############################################################################

            # special case
            if { ${module} eq "qtlocation" } {
                PortGroup       conflicts_build 1.0

                # do not allow ${prefix}/include/boost to conflict with bundled boost (in bundled mapbox-gl-native)
                conflicts_build boost
            }
        }
    }
}

# see https://doc.qt.io/qt-6/sql-driver.html for info on building SQL Database Drivers
foreach {sql_names sql_info} [array get sql_plugins] {
    set driver          [lindex ${sql_names} 0]
    set dbms            [lindex ${sql_names} 1]
    set revision_string [lindex ${sql_names} 2]
    set revision_string [string range ${revision_string} 1+[string last " " ${revision_string}] end]

    subport ${name}-${driver}-plugin {
        PortGroup       cmake 1.1

        distname        qtbase-${middle_name}-src-${version}

        revision ${revision_string}

        checksums                                          \
            rmd160  [lindex [lindex $modules(qtbase) 0] 0] \
            sha256  [lindex [lindex $modules(qtbase) 0] 1] \
            size    [lindex [lindex $modules(qtbase) 0] 2]

        depends_build-append  port:${name}-qtbase

        description       ${dbms} Database Driver for Qt Tool Kit ${qt_major}
        long_description  ${dbms} Database Driver for Qt Tool Kit ${qt_major}

        # qtbase already creates the symlinks for the sql plugins
        set isSQL_module             true
        cmake.install_prefix         ${qt_dir}

        # We need to use qt-cmake to configure the build
        configure.cmd                ${qt_cmake_cmd}
        configure.dir                ${workpath}/build

        # need to specify ninja for the build environment
        cmake.generator         Ninja

        # if there is more than one version of the database system, create variants for each version
        if { [llength ${sql_info}] > 1 } {

            set any_variant_set false

            foreach variant_info ${sql_info} {

                set varName [lindex ${variant_info} 0]

                # find every other variant so it can be marked as conflicting
                set conflicts_list ""
                foreach variant_info2 ${sql_info} {
                    set varName2 [lindex ${variant_info2} 0]

                    if { ${varName} ne ${varName2} } {
                        lappend conflicts_list ${varName2}
                    }
                }

                # get only the numbers from the name
                regexp {[0-9].} ${varName} varVer

                variant ${varName} conflicts ${conflicts_list} description "use version ${varVer} of ${dbms}" {}

                # check if any variant has been set
                if { [variant_isset ${varName}] } {
                    set any_variant_set true
                }
            }

            # ensure at least one variant is set
            if { !${any_variant_set} } {
                default_variants-append +[lindex [lindex ${sql_info} 0] 0]
            }
        }

        set use_name [string toupper ${driver}]

        # In QT6, the include and library paths are now SQL database specific
        # with dbms name embedded in the argument name
        foreach variant_info ${sql_info} {
            set varName [lindex ${variant_info} 0]

            if { ( [variant_exists ${varName}] && [variant_isset ${varName}] ) || [llength ${sql_info}]==1 } {
                depends_lib-append [lindex ${variant_info} 1]

                configure.args-append                                              \
                    [subst -D${dbms}_INCLUDE_DIR=\"[lindex ${variant_info} 2]\"]   \
                    [subst -DCMAKE_INCLUDE_PATH=\"[lindex ${variant_info} 2]\"]    \
                    [subst -D${dbms}_LIBRARY=\"[lindex ${variant_info} 3]/[lindex ${variant_info} 4]\"] \
                    [subst -DCMAKE_LIBRARY_PATH=\"[lindex ${variant_info} 3]\"]
            }
        }

        post-destroot {
            # qt6-qtbase installs some Sql cmake files by default, we want to skip installing these
            # as of 6.2.1 this is necessary for:
            if { [ file exists ${qt_dir}/lib/cmake/Qt6Sql/Qt6QSQLiteDriverPluginConfig.cmake ] } {
                set cmake_SQL_dir ${destroot}${qt_dir}/lib/cmake/Qt6Sql
                file delete -force ${cmake_SQL_dir}/Qt6QSQLiteDriverPluginAdditionalTargetInfo.cmake
                file delete -force ${cmake_SQL_dir}/Qt6QSQLiteDriverPluginConfig.cmake
                file delete -force ${cmake_SQL_dir}/Qt6QSQLiteDriverPluginConfigVersion.cmake
                file delete -force ${cmake_SQL_dir}/Qt6QSQLiteDriverPluginTargets-release.cmake
                file delete -force ${cmake_SQL_dir}/Qt6QSQLiteDriverPluginTargets.cmake
            }
        }

        # Specify the actual location of the sqldrivers
        cmake.source_dir        ${cmake.source_dir}/src/plugins/sqldrivers/
    }
}

if { ${subport} eq ${name} } {
    # the main port is Meta-port to install various modules

    revision 0

    description         Qt Tool Kit ${qt_major}
    long_description    Qt Tool Kit: A cross-platform framework \
        (headers, data, and libraries) for writing \
        cross-platform GUI-based applications.

    master_sites
    distfiles
    use_configure     no
    supported_archs   noarch
    installs_libs     no
    universal_variant no

    build {}

    # create a dummy file so the port can be successfully activated
    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/doc/${subport}
        set docfile   [open ${destroot}${prefix}/share/doc/${subport}/README.txt "w"]
        puts ${docfile} "Meta-port for ${name}"
        puts ${docfile} "${long_description}"
        close ${docfile}
    }

    foreach {module module_info} [array get modules] {
        if { [lindex ${module_info} 6] eq "" } {
            depends_run-append port:${name}-${module}
        }
    }

    depends_run-append port:${name}-qtbase port:${name}-sqlite-plugin
}

set python_framework ""
set depends_check ""
if { [info exists depends_build] } {
    set depends_check "${depends_check} ${depends_build}"
}
if { [info exists depends_lib] } {
    set depends_check "${depends_check} ${depends_lib}"
}

foreach deps ${depends_check} {
    if { [string first ":python310" ${deps}] >= 0 } {
        # If Qt components use Python, ensure that MacPorts python310 is used
        set python_framework ${frameworks_dir}/Python.framework/Versions/3.10
    }
}
if { ${python_framework} ne "" } {
    configure.env-append PATH=${python_framework}/bin:$env(PATH)
    build.env-append     PATH=${python_framework}/bin:$env(PATH)
}
unset python_framework

post-destroot {
    # see #44204
    foreach f [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir} *.framework] {
        set framework [file rootname ${f}]

        set include_list   [split ${qt_includes_dir}   '/']
        set framework_list [split ${qt_libs_dir} '/']

        while {[llength ${include_list}] && [llength ${framework_list}]} {
            set var_include   [lindex $include_list   0]
            set var_framework [lindex $framework_list 0]

            if { ${var_include} ne ${var_framework} } {
                break
            }

            # remove first element from list
            set include_list   [lreplace ${include_list} 0 0]
            set framework_list [lreplace ${framework_list} 0 0]
        }

        xinstall -d -m 0755 ${destroot}${qt_includes_dir}
        ln -s [string repeat ../ [llength ${include_list}]][join ${framework_list} /]/${f}/Headers ${destroot}${qt_includes_dir}/${framework}
    }

    # .app and non-.app programs are both put in qt_bins_dir
    # put a link of any .app programs in the ${qt_apps_dir}
    if { ${qt_bins_dir} ne ${qt_apps_dir} } {
        xinstall -d -m 0755 ${destroot}${qt_apps_dir}
        foreach app [glob -nocomplain -tails -directory ${destroot}${qt_bins_dir} *.app] {
            ln -s ${qt_bins_dir}/${app} ${destroot}${qt_apps_dir}
        }
    }

    # put configuration files in places they will be found automatically
    if { ${qt_libs_dir} ne "${mp_prefix}/lib" } {
        # put link to pkgconfig files in place where pkgconfig will find it
        # most Qt 6 pkgconfig files begin with Qt6, so link should not conflict with any other Qt installations
        xinstall -d -m 0755 ${destroot}${mp_prefix}/lib/pkgconfig
        foreach pcfile [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir}/pkgconfig *.pc] {
            ln -s ${qt_libs_dir}/pkgconfig/${pcfile} ${destroot}${mp_prefix}/lib/pkgconfig
        }

        # put link to cmake files in place where cmake will find it
        # most Qt 6 cmake directories begin with Qt6, so link should not conflict with any other Qt installations
        xinstall -d -m 0755 ${destroot}${mp_prefix}/lib/cmake
        foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
            # only symlink the top folder, checking to see if the symlink already exists
            if { ![ file exists ${mp_prefix}/lib/cmake/${cmakedir} ] } {
                ln -s ${qt_libs_dir}/cmake/${cmakedir} ${destroot}${mp_prefix}/lib/cmake/${cmakedir}
            }
        }
        # grab the cmake files in qt_bins_dir too
        foreach cmakefile [glob -type f -nocomplain -tails -directory ${destroot}${qt_bins_dir}/ *.cmake] {
            if { ![ file exists ${mp_prefix}/lib/cmake/${cmakefile} ] } {
                ln -s ${qt_bins_dir}/${cmakefile} ${destroot}${mp_prefix}/lib/cmake/${cmakefile}
            }
        }

        # if cmake finds configuration files in ${mp_prefix}/lib/cmake, CMAKE_CURRENT_LIST_DIR expands to ${mp_prefix}/lib/cmake/xxx
        # cmake configuration files actually installed in ${qt_cmake_module_dir}/xxx
        set cmakepath ${destroot}${qt_libs_dir}/cmake/
        foreach cmakefile [ rglob ${cmakepath} *.cmake ] {
            if { ![file isdirectory ${cmakefile} ] } {
                set cmakedir [file dirname ${cmakefile}]
                set cmakedir [string replace $cmakedir 0 [string length $cmakepath]-1]
                reinplace -q "s|\\\${CMAKE_CURRENT_LIST_DIR}|${qt_cmake_module_dir}/${cmakedir}|g" ${cmakefile}
            }
        }
    }
}

if {${subport} eq ${name}} {
    livecheck.type      regex
    livecheck.url       https://download.qt.io/archive/qt/${branch}/
    livecheck.regex     (\\d+(\\.\\d+)+)
} else {
    livecheck.type      none
}

foreach {component component_info} [array get qt6pg::qt6_component_lib] {

    set suffix [lindex ${component_info} 3]

    set qt_version            ${version}
    set qt_version_introduced [lindex ${component_info} 0]
    set qt_version_removed    [lindex ${component_info} 1]

    if { [vercmp ${qt_version_removed} ${qt_version}] <= 0 } {
        subport ${name}-${component}${suffix} {
            PortGroup obsolete 1.0

        }
    }
}

proc rglob { dirpath patterns } {
    set rlist {}
    foreach fpath [glob -nocomplain -types f -directory ${dirpath} {*}${patterns}] {
        lappend rlist ${fpath}
    }
    foreach dir [glob -nocomplain -types d -directory ${dirpath} *] {
        lappend rlist {*}[rglob ${dir} ${patterns}]
    }
    return ${rlist}
}
