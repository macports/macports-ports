Allow building with macOS 10.14 SDK (will still warn about
"instance method '-charactersByApplyingModifiers:' not found"
and "instance method '-location' not found")

Upstream-Status: Inappropriate [violates DRY]

--- src/gui/platform/darwin/qapplekeymapper.mm.orig
+++ src/gui/platform/darwin/qapplekeymapper.mm
@@ -528,7 +528,7 @@
                 // we first run the event through the Carbon APIs and then
                 // compare the results to Cocoa.
                 auto cocoaModifiers = toCocoaModifiers(qtModifiers);
-                auto *charactersWithModifiers = [NSApp.currentEvent charactersByApplyingModifiers:cocoaModifiers];
+                NSString *charactersWithModifiers = [NSApp.currentEvent charactersByApplyingModifiers:cocoaModifiers];
 
                 QChar cocoaUnicodeKey;
                 if (charactersWithModifiers.length > 0)
--- src/gui/rhi/qrhimetal.mm.orig
+++ src/gui/rhi/qrhimetal.mm
@@ -369,15 +369,15 @@
     driverInfoStruct.deviceType = QRhiDriverInfo::IntegratedDevice;
 #else
     if (@available(macOS 10.15, *)) {
-        const MTLDeviceLocation deviceLocation = [d->dev location];
+        const NSUInteger deviceLocation = (NSUInteger)[d->dev location];
         switch (deviceLocation) {
-        case MTLDeviceLocationBuiltIn:
+        case 0:
             driverInfoStruct.deviceType = QRhiDriverInfo::IntegratedDevice;
             break;
-        case MTLDeviceLocationSlot:
+        case 1:
             driverInfoStruct.deviceType = QRhiDriverInfo::DiscreteDevice;
             break;
-        case MTLDeviceLocationExternal:
+        case 2:
             driverInfoStruct.deviceType = QRhiDriverInfo::ExternalDevice;
             break;
         default:
@@ -403,7 +403,7 @@
     caps.maxTextureSize = 16384;
     caps.baseVertexAndInstance = true;
     if (@available(macOS 10.15, *))
-        caps.isAppleGPU = [d->dev supportsFamily:MTLGPUFamilyApple7];
+        caps.isAppleGPU = [d->dev supportsFamily:MTLGPUFamily(1007)]; // MTLGPUFamilyApple7
     caps.maxThreadGroupSize = 1024;
 #elif defined(Q_OS_TVOS)
     if ([d->dev supportsFeatureSet: MTLFeatureSet(30003)]) // MTLFeatureSet_tvOS_GPUFamily2_v1
@@ -2545,122 +2545,156 @@
         return srgb ? MTLPixelFormatASTC_12x12_sRGB : MTLPixelFormatASTC_12x12_LDR;
 #else
     case QRhiTexture::ETC2_RGB8:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatETC2_RGB8_sRGB : MTLPixelFormatETC2_RGB8;
         }
+#endif
         qWarning("QRhiMetal: ETC2 compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ETC2_RGB8A1:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatETC2_RGB8A1_sRGB : MTLPixelFormatETC2_RGB8A1;
         }
+#endif
         qWarning("QRhiMetal: ETC2 compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ETC2_RGBA8:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatEAC_RGBA8_sRGB : MTLPixelFormatEAC_RGBA8;
         }
+#endif
         qWarning("QRhiMetal: ETC2 compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_4x4:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_4x4_sRGB : MTLPixelFormatASTC_4x4_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_5x4:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_5x4_sRGB : MTLPixelFormatASTC_5x4_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_5x5:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_5x5_sRGB : MTLPixelFormatASTC_5x5_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_6x5:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_6x5_sRGB : MTLPixelFormatASTC_6x5_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_6x6:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_6x6_sRGB : MTLPixelFormatASTC_6x6_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_8x5:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_8x5_sRGB : MTLPixelFormatASTC_8x5_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_8x6:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_8x6_sRGB : MTLPixelFormatASTC_8x6_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_8x8:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_8x8_sRGB : MTLPixelFormatASTC_8x8_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_10x5:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_10x5_sRGB : MTLPixelFormatASTC_10x5_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_10x6:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_10x6_sRGB : MTLPixelFormatASTC_10x6_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_10x8:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_10x8_sRGB : MTLPixelFormatASTC_10x8_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_10x10:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_10x10_sRGB : MTLPixelFormatASTC_10x10_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_12x10:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_12x10_sRGB : MTLPixelFormatASTC_12x10_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
     case QRhiTexture::ASTC_12x12:
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (d->caps.isAppleGPU) {
             if (@available(macOS 11.0, *))
                 return srgb ? MTLPixelFormatASTC_12x12_sRGB : MTLPixelFormatASTC_12x12_LDR;
         }
+#endif
         qWarning("QRhiMetal: ASTC compression not supported on this platform");
         return MTLPixelFormatInvalid;
 #endif
@@ -2761,6 +2761,7 @@
     switch (m_type) {
     case DepthStencil:
 #ifdef Q_OS_MACOS
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         if (rhiD->caps.isAppleGPU) {
             if (@available(macOS 11.0, *)) {
                 desc.storageMode = MTLStorageModeMemoryless;
@@ -2769,10 +2770,13 @@
                 Q_UNREACHABLE();
             }
         } else {
+#endif
             desc.storageMode = MTLStorageModePrivate;
             d->format = rhiD->d->dev.depth24Stencil8PixelFormatSupported
                     ? MTLPixelFormatDepth24Unorm_Stencil8 : MTLPixelFormatDepth32Float_Stencil8;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 110000
         }
+#endif
 #else
         desc.storageMode = MTLStorageModeMemoryless;
         d->format = MTLPixelFormatDepth32Float_Stencil8;
