--- src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm.orig2	2023-07-10 23:01:40.000000000 +0200
+++ src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/BackendMTL.mm	2023-07-10 23:59:25.000000000 +0200
@@ -350,7 +350,7 @@
                 }
             }
 
-#if !TARGET_OS_OSX || MAC_OS_X_VERSION_MAX_ALLOWED >= 101500
+#if 0
             if (@available(macOS 10.15, iOS 14.0, *)) {
                 if (IsGPUCounterSupported(
                         *mDevice, MTLCommonCounterSetStatistic,
--- src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/QuerySetMTL.mm.orig	2023-03-12 04:16:34.000000000 +0100
+++ src/3rdparty/chromium/third_party/dawn/src/dawn/native/metal/QuerySetMTL.mm	2023-07-11 00:16:40.000000000 +0200
@@ -87,6 +87,7 @@
                 break;
             }
             case wgpu::QueryType::PipelineStatistics:
+#if 0
                 if (@available(macOS 10.15, iOS 14.0, *)) {
                     DAWN_TRY_ASSIGN(mCounterSampleBuffer,
                                     CreateCounterSampleBuffer(device, MTLCommonCounterSetStatistic,
@@ -95,7 +96,11 @@
                     UNREACHABLE();
                 }
                 break;
+#else
+                return DAWN_INTERNAL_ERROR(std::string("MTLCommonCounterSetStatistic API not supported on macOS 10.14"));
+#endif
             case wgpu::QueryType::Timestamp:
+#if 0
                 if (@available(macOS 10.15, iOS 14.0, *)) {
                     DAWN_TRY_ASSIGN(mCounterSampleBuffer,
                                     CreateCounterSampleBuffer(device, MTLCommonCounterSetTimestamp,
@@ -104,6 +109,9 @@
                     UNREACHABLE();
                 }
                 break;
+#else
+                return DAWN_INTERNAL_ERROR(std::string("MTLCommonCounterSetTimestamp API not supported on macOS 10.14"));
+#endif
             default:
                 UNREACHABLE();
                 break;
--- src/3rdparty/chromium/sandbox/mac/system_services.cc.orig	2023-03-12 04:16:34.000000000 +0100
+++ src/3rdparty/chromium/sandbox/mac/system_services.cc	2023-07-11 13:40:38.000000000 +0200
@@ -39,9 +39,11 @@
 }
 
 void DisableCoreServicesCheckFix() {
+#if 0
   if (__builtin_available(macOS 10.15, *)) {
     _CSCheckFixDisable();
   }
+#endif
 }
 
 }  // namespace sandbox
--- src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm.orig	2023-03-12 04:16:34.000000000 +0100
+++ src/3rdparty/chromium/media/base/mac/color_space_util_mac.mm	2023-07-11 13:52:53.000000000 +0200
@@ -127,12 +127,14 @@
                kCMFormatDescriptionTransferFunction_Linear,
                gfx::ColorSpace::TransferID::LINEAR});
         }
+#if 0
         if (@available(macos 10.15, *)) {
           supported_transfer_funcs.push_back(
               {kCVImageBufferTransferFunction_sRGB,
                kCMFormatDescriptionTransferFunction_sRGB,
                gfx::ColorSpace::TransferID::SRGB});
         }
+#endif
 
         return supported_transfer_funcs;
       }());
--- src/3rdparty/chromium/base/process/launch_mac.cc.orig2	2023-07-09 19:48:36.000000000 +0200
+++ src/3rdparty/chromium/base/process/launch_mac.cc	2023-07-11 14:05:53.000000000 +0200
@@ -87,7 +87,9 @@
   }
 
   void Chdir(const char* path) API_AVAILABLE(macos(10.15)) {
+#if 0
     DPSXCHECK(posix_spawn_file_actions_addchdir_np(&file_actions_, path));
+#endif
   }
 
   const posix_spawn_file_actions_t* get() const { return &file_actions_; }
