--- XLD/XLDPluginManager.m.orig
+++ XLD/XLDPluginManager.m
@@ -34,79 +34,58 @@
 {
 	[super init];
 	plugins = [[NSMutableArray alloc] init];
-	NSMutableDictionary *internalPlugins = [[NSMutableDictionary alloc] init];
-	NSMutableDictionary *externalPlugins = [[NSMutableDictionary alloc] init];
-	
+	NSMutableDictionary *foundPlugins = [[NSMutableDictionary alloc] init];
+
+	NSArray *bundleDirs = [NSArray arrayWithObjects:
+		[@"~/Library/Application Support/XLD/PlugIns" stringByExpandingTildeInPath],
+		@"/Library/Application Support/XLD/PlugIns",
+		[[NSBundle mainBundle] builtInPlugInsPath],
+		nil];
+
 	NSFileManager *fm = [NSFileManager defaultManager];
-	NSArray *bundleArr = [fm directoryContentsAt:[@"~/Library/Application Support/XLD/PlugIns" stringByExpandingTildeInPath]];
-	int i;
-	NSBundle *bundle = nil;
-	
-	for(i=0;i<[bundleArr count];i++) {
-		BOOL isDir = NO;
-		NSString *bundlePath = [[@"~/Library/Application Support/XLD/PlugIns" stringByExpandingTildeInPath] stringByAppendingPathComponent:[bundleArr objectAtIndex:i]];
-		if([fm fileExistsAtPath:bundlePath isDirectory:&isDir] && isDir && [[bundlePath pathExtension] isEqualToString:@"bundle"]) {
-			if(getxattr([bundlePath UTF8String], "com.apple.quarantine", NULL, 0, 0, 0) > 0)
-				removeQuarantine(bundlePath, YES);
-			bundle = [NSBundle bundleWithPath:bundlePath];
-			if(bundle) {
+	unsigned long di, i;
+
+	for (di=0;di<[bundleDirs count];di++) {
+		NSString *bundleDir = [bundleDirs objectAtIndex:di];
+		NSArray *bundleArr = [fm directoryContentsAt:bundleDir];
+
+		NSBundle *bundle = nil;
+
+		for(i=0;i<[bundleArr count];i++) {
+			BOOL isDir = NO;
+			NSString *bundlePath = [bundleDir stringByAppendingPathComponent:[bundleArr objectAtIndex:i]];
+			if([fm fileExistsAtPath:bundlePath isDirectory:&isDir] && isDir && [[bundlePath pathExtension] isEqualToString:@"bundle"]) {
+				if(getxattr([bundlePath UTF8String], "com.apple.quarantine", NULL, 0, 0, 0) > 0)
+					removeQuarantine(bundlePath, YES);
+				bundle = [NSBundle bundleWithPath:bundlePath];
+				if(bundle) {
 #if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
-				NSArray *archArray = [bundle executableArchitectures];
+					NSArray *archArray = [bundle executableArchitectures];
 #if defined(__x86_64__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureX86_64)] == NSNotFound) continue;
+					if([archArray indexOfObject:[NSNumber numberWithInt:((int)NSBundleExecutableArchitectureX86_64)]] == NSNotFound) continue;
 #elif defined(__i386__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureI386)] == NSNotFound) continue;
+					if([archArray indexOfObject:[NSNumber numberWithInt:((int)NSBundleExecutableArchitectureI386)]] == NSNotFound) continue;
 #elif defined(__ppc__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitecturePPC)] == NSNotFound) continue;
+					if([archArray indexOfObject:[NSNumber numberWithInt:((int)NSBundleExecutableArchitecturePPC)]] == NSNotFound) continue;
 #elif defined(__aarch64__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureARM64)] == NSNotFound) continue;
+					if([archArray indexOfObject:[NSNumber numberWithInt:((int)NSBundleExecutableArchitectureARM64)]] == NSNotFound) continue;
 #endif
 #endif
-				if(![[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]) continue;
-				[externalPlugins setObject:bundlePath forKey:[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]];
-				//NSLog(@"%@",[[bundle infoDictionary] description]);
-				//NSLog(@"loaded:%d",[bundle isLoaded]);
+					if(![[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]) continue;
+					if([foundPlugins objectForKey:[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]]) continue;
+					[foundPlugins setObject:bundlePath forKey:[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]];
+					NSLog(@"%@", [[bundle infoDictionary] description]);
+					NSLog(@"loaded:%d", [bundle isLoaded]);
+				}
 			}
 		}
 	}
-	
-	bundleArr = [fm directoryContentsAt:[[NSBundle mainBundle] builtInPlugInsPath]];
-	for(i=0;i<[bundleArr count];i++) {
-		BOOL isDir = NO;
-		NSString *bundlePath = [[[NSBundle mainBundle] builtInPlugInsPath] stringByAppendingPathComponent:[bundleArr objectAtIndex:i]];
-		if([fm fileExistsAtPath:bundlePath isDirectory:&isDir] && isDir && [[bundlePath pathExtension] isEqualToString:@"bundle"]) {
-			bundle = [NSBundle bundleWithPath:bundlePath];
-			if(bundle) {
-#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
-				NSArray *archArray = [bundle executableArchitectures];
-#if defined(__x86_64__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureX86_64)] == NSNotFound) continue;
-#elif defined(__i386__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureI386)] == NSNotFound) continue;
-#elif defined(__ppc__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitecturePPC)] == NSNotFound) continue;
-#elif defined(__aarch64__)
-				if([archArray indexOfObject:@(NSBundleExecutableArchitectureARM64)] == NSNotFound) continue;
-#endif
-#endif
-				if(![[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]) continue;
-				if([externalPlugins objectForKey:[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]]) continue;
-				[internalPlugins setObject:bundlePath forKey:[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]];
-				//NSLog(@"%@",[[bundle infoDictionary] objectForKey:@"NSPrincipalClass"]);
-				//NSLog(@"loaded:%d",[bundle isLoaded]);
-			}
-		}
-	}
-	
-	/* Prefer external plugins over internal ones */
-	[plugins addObjectsFromArray:[[externalPlugins allValues] sortedArrayUsingSelector:@selector(compare:)]];
-	[plugins addObjectsFromArray:[[internalPlugins allValues] sortedArrayUsingSelector:@selector(compare:)]];
-	
-	[internalPlugins release];
-	[externalPlugins release];
-	
-	//NSLog(@"%@",[plugins description]);
-	
+
+	[plugins addObjectsFromArray:[[foundPlugins allValues] sortedArrayUsingSelector:@selector(compare:)]];
+	[foundPlugins release];
+
+	NSLog(@"%@", [plugins description]);
+
 	return self;
 }
 
