Set DYLD_LIBRARY_PATH so the test runner can find and use the library
that was just built.
--- CMakeLists.txt.orig	2019-05-22 19:50:39.000000000 -0500
+++ CMakeLists.txt	2019-06-14 10:49:36.000000000 -0500
@@ -703,30 +704,44 @@
                      COMMAND minizip_cmd ${COMPRESS_METHOD_ARG} -o ${EXTRA_ARGS}
                         result.zip test.c test.h empty.txt random.bin uniform.bin fuzz
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(${COMPRESS_METHOD_NAME}-zip-${EXTRA_NAME}
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             add_test(NAME ${COMPRESS_METHOD_NAME}-list-${EXTRA_NAME}
                      COMMAND minizip_cmd -l ${EXTRA_ARGS} result.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(${COMPRESS_METHOD_NAME}-list-${EXTRA_NAME}
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             if(NOT MZ_COMPRESS_ONLY)
                 add_test(NAME ${COMPRESS_METHOD_NAME}-unzip-${EXTRA_NAME}
                          COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out result.zip
                          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+                set_tests_properties(${COMPRESS_METHOD_NAME}-unzip-${EXTRA_NAME}
+                                     PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             endif()
             add_test(NAME ${COMPRESS_METHOD_NAME}-append-${EXTRA_NAME}
                     COMMAND minizip_cmd ${COMPRESS_METHOD_ARG} -a ${EXTRA_ARGS}
                         result.zip single.txt
                     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(${COMPRESS_METHOD_NAME}-append-${EXTRA_NAME}
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             if(NOT MZ_COMPRESS_ONLY)
                 add_test(NAME ${COMPRESS_METHOD_NAME}-append-unzip-${EXTRA_NAME}
                             COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out result.zip
                             WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+                set_tests_properties(${COMPRESS_METHOD_NAME}-append-unzip-${EXTRA_NAME}
+                                     PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             endif()
             add_test(NAME ${COMPRESS_METHOD_NAME}-erase-${EXTRA_NAME}
                     COMMAND minizip_cmd -o -e result.zip test.c test.h
                     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(${COMPRESS_METHOD_NAME}-erase-${EXTRA_NAME}
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             if(NOT MZ_COMPRESS_ONLY)
                 add_test(NAME ${COMPRESS_METHOD_NAME}-erase-unzip-${EXTRA_NAME}
                          COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out result.zip
                          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+                set_tests_properties(${COMPRESS_METHOD_NAME}-erase-unzip-${EXTRA_NAME}
+                                     PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
             endif()
         endforeach()
     endfunction()
@@ -753,30 +768,40 @@
                      COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out
                         fuzz/unzip_fuzzer_seed_corpus/tiny.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(unzip-tiny
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
         endif()
         if(MZ_BZIP2)
             add_test(NAME unzip-bzip2
                      COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out
                         fuzz/unzip_fuzzer_seed_corpus/bzip2.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(unzip-bzip2
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
         endif()
         if(MZ_LZMA)
             add_test(NAME unzip-lzma
                      COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out
                         fuzz/unzip_fuzzer_seed_corpus/lzma.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(unzip-lzma
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
         endif()
         if(MZ_PKCRYPT)
             add_test(NAME unzip-pkcrypt
                      COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out -p test123
                         fuzz/unzip_fuzzer_seed_corpus/encrypted_pkcrypt.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(unzip-pkcrypt
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
         endif()
         if(MZ_WZAES)
             add_test(NAME unzip-wzaes
                      COMMAND minizip_cmd -x -o ${EXTRA_ARGS} -d out -p test123
                         fuzz/unzip_fuzzer_seed_corpus/encrypted_wzaes.zip
                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test)
+            set_tests_properties(unzip-wzaes
+                                 PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}:$ENV{DYLD_LIBRARY_PATH})
         endif()
     endif()
     if(NOT MZ_COMPRESS_ONLY AND NOT MZ_DECOMPRESS_ONLY)
