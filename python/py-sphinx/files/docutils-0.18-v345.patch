From 5c39bece6da259752396f3881a5bb17694c0f7f4 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sun, 3 Oct 2021 18:32:39 +0900
Subject: [PATCH 1/6] Support docutils-0.18; Meta directive and meta node has
 moved

---
 sphinx/addnodes.py           |  8 ++++++--
 sphinx/directives/patches.py | 19 ++++++++++++++-----
 tests/test_versioning.py     |  9 +++++++--
 3 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/sphinx/addnodes.py b/sphinx/addnodes.py
index 5f371e46b..048001990 100644
--- a/sphinx/addnodes.py
+++ b/sphinx/addnodes.py
@@ -16,9 +16,11 @@ from docutils.nodes import Element, Node
 
 from sphinx.deprecation import RemovedInSphinx40Warning
 
+from sphinx.util import docutils
+
 if False:
-    # For type annotation
     from sphinx.application import Sphinx
+    # For type annotation
 
 
 class document(nodes.document):
@@ -412,7 +414,6 @@ def setup(app: "Sphinx") -> Dict[str, Any]:
     app.add_node(start_of_file)
     app.add_node(highlightlang)
     app.add_node(tabular_col_spec)
-    app.add_node(meta)
     app.add_node(pending_xref)
     app.add_node(number_reference)
     app.add_node(download_reference)
@@ -420,6 +421,9 @@ def setup(app: "Sphinx") -> Dict[str, Any]:
     app.add_node(literal_strong)
     app.add_node(manpage)
 
+    if docutils.__version_info__ < (0, 18):
+        app.add_node(meta)
+
     return {
         'version': 'builtin',
         'parallel_read_safe': True,
diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py
index 1eae6d0c8..4ad5ce8fd 100644
--- a/sphinx/directives/patches.py
+++ b/sphinx/directives/patches.py
@@ -11,7 +11,7 @@ from typing import Any, Dict, List, Tuple, cast
 from docutils import nodes
 from docutils.nodes import Node, make_id, system_message
 from docutils.parsers.rst import directives
-from docutils.parsers.rst.directives import html, images, tables
+from docutils.parsers.rst.directives import images, tables
 
 from sphinx import addnodes
 from sphinx.directives import optional_int
@@ -19,6 +19,15 @@ from sphinx.domains.math import MathDomain
 from sphinx.util.docutils import SphinxDirective
 from sphinx.util.nodes import set_source_info
 
+try:
+    from docutils.nodes import meta as meta_node  # type: ignore
+    from docutils.parsers.rst.directives.misc import Meta as MetaBase  # type: ignore
+except ImportError:
+    # docutils-0.17 or older
+    from docutils.parsers.rst.directives.html import Meta as MetaBase
+    from docutils.parsers.rst.directives.html import MetaBody
+    meta_node = MetaBody.meta
+
 if False:
     # For type annotation
     from sphinx.application import Sphinx
@@ -50,19 +59,19 @@ class Figure(images.Figure):
         return [figure_node]
 
 
-class Meta(html.Meta, SphinxDirective):
+class Meta(MetaBase, SphinxDirective):
     def run(self) -> List[Node]:
         result = super().run()
         for node in result:
             if (isinstance(node, nodes.pending) and
-               isinstance(node.details['nodes'][0], html.MetaBody.meta)):
+               isinstance(node.details['nodes'][0], meta_node)):
                 meta = node.details['nodes'][0]
                 meta.source = self.env.doc2path(self.env.docname)
                 meta.line = self.lineno
-                meta.rawcontent = meta['content']  # type: ignore
+                meta.rawcontent = meta['content']
 
                 # docutils' meta nodes aren't picklable because the class is nested
-                meta.__class__ = addnodes.meta  # type: ignore
+                meta.__class__ = addnodes.meta
 
         return result
 
diff --git a/tests/test_versioning.py b/tests/test_versioning.py
index 33fb045ce..8ec1405ad 100644
--- a/tests/test_versioning.py
+++ b/tests/test_versioning.py
@@ -11,12 +11,17 @@
 import pickle
 
 import pytest
-from docutils.parsers.rst.directives.html import MetaBody
 
 from sphinx import addnodes
 from sphinx.testing.util import SphinxTestApp
 from sphinx.versioning import add_uids, get_ratio, merge_doctrees
 
+try:
+    from docutils.parsers.rst.directives.html import MetaBody
+    meta = MetaBody.meta
+except ImportError:
+    from docutils.nodes import meta
+
 app = original = original_uids = None
 
 
@@ -64,7 +69,7 @@ def test_picklablility():
     copy.settings.warning_stream = None
     copy.settings.env = None
     copy.settings.record_dependencies = None
-    for metanode in copy.traverse(MetaBody.meta):
+    for metanode in copy.traverse(meta):
         metanode.__class__ = addnodes.meta
     loaded = pickle.loads(pickle.dumps(copy, pickle.HIGHEST_PROTOCOL))
     assert all(getattr(n, 'uid', False) for n in loaded.traverse(is_paragraph))
-- 
2.33.1


From b43f35286a374890cabc52ce95f7d4f496a337af Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sun, 3 Oct 2021 18:44:37 +0900
Subject: [PATCH 2/6] Support docutils-0.18; Disable embed_images and
 section_self_link

embed_images:
    HTML Builder always use non-embeded (linked) images.

section_self_link:
    HTML Builder controls hyperlink generation for each section via
    `html_permalinks` option.
---
 sphinx/environment/__init__.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py
index 6b2acab9f..b7b0a2433 100644
--- a/sphinx/environment/__init__.py
+++ b/sphinx/environment/__init__.py
@@ -44,6 +44,7 @@ if False:
 logger = logging.getLogger(__name__)
 
 default_settings = {
+    'embed_images': False,
     'embed_stylesheet': False,
     'cloak_email_addresses': True,
     'pep_base_url': 'https://www.python.org/dev/peps/',
@@ -53,6 +54,7 @@ default_settings = {
     'input_encoding': 'utf-8-sig',
     'doctitle_xform': False,
     'sectsubtitle_xform': False,
+    'section_self_link': False,
     'halt_level': 5,
     'file_insertion_enabled': True,
     'smartquotes_locales': [],
-- 
2.33.1


From b7416673fe78c2b55a9bfd11f70cc5043f979eb0 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sun, 10 Oct 2021 15:24:12 +0900
Subject: [PATCH 3/6] refactor: Node.traverse() will returns generator since
 0.18

---
 sphinx/transforms/i18n.py | 10 +++++-----
 sphinx/writers/latex.py   |  2 +-
 sphinx/writers/text.py    |  2 +-
 tests/test_util_nodes.py  | 14 +++++++-------
 4 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/sphinx/transforms/i18n.py b/sphinx/transforms/i18n.py
index 6bea6c6ee..a345b819d 100644
--- a/sphinx/transforms/i18n.py
+++ b/sphinx/transforms/i18n.py
@@ -297,7 +297,7 @@ class Locale(SphinxTransform):
             is_autofootnote_ref = NodeMatcher(nodes.footnote_reference, auto=Any)
             old_foot_refs = node.traverse(is_autofootnote_ref)  # type: List[nodes.footnote_reference]  # NOQA
             new_foot_refs = patch.traverse(is_autofootnote_ref)  # type: List[nodes.footnote_reference]  # NOQA
-            if len(old_foot_refs) != len(new_foot_refs):
+            if len(list(old_foot_refs)) != len(list(new_foot_refs)):
                 old_foot_ref_rawsources = [ref.rawsource for ref in old_foot_refs]
                 new_foot_ref_rawsources = [ref.rawsource for ref in new_foot_refs]
                 logger.warning(__('inconsistent footnote references in translated message.' +
@@ -340,7 +340,7 @@ class Locale(SphinxTransform):
             is_refnamed_ref = NodeMatcher(nodes.reference, refname=Any)
             old_refs = node.traverse(is_refnamed_ref)  # type: List[nodes.reference]
             new_refs = patch.traverse(is_refnamed_ref)  # type: List[nodes.reference]
-            if len(old_refs) != len(new_refs):
+            if len(list(old_refs)) != len(list(new_refs)):
                 old_ref_rawsources = [ref.rawsource for ref in old_refs]
                 new_ref_rawsources = [ref.rawsource for ref in new_refs]
                 logger.warning(__('inconsistent references in translated message.' +
@@ -368,7 +368,7 @@ class Locale(SphinxTransform):
             old_foot_refs = node.traverse(is_refnamed_footnote_ref)
             new_foot_refs = patch.traverse(is_refnamed_footnote_ref)
             refname_ids_map = {}  # type: Dict[str, List[str]]
-            if len(old_foot_refs) != len(new_foot_refs):
+            if len(list(old_foot_refs)) != len(list(new_foot_refs)):
                 old_foot_ref_rawsources = [ref.rawsource for ref in old_foot_refs]
                 new_foot_ref_rawsources = [ref.rawsource for ref in new_foot_refs]
                 logger.warning(__('inconsistent footnote references in translated message.' +
@@ -387,7 +387,7 @@ class Locale(SphinxTransform):
             old_cite_refs = node.traverse(is_citation_ref)  # type: List[nodes.citation_reference]  # NOQA
             new_cite_refs = patch.traverse(is_citation_ref)  # type: List[nodes.citation_reference]  # NOQA
             refname_ids_map = {}
-            if len(old_cite_refs) != len(new_cite_refs):
+            if len(list(old_cite_refs)) != len(list(new_cite_refs)):
                 old_cite_ref_rawsources = [ref.rawsource for ref in old_cite_refs]
                 new_cite_ref_rawsources = [ref.rawsource for ref in new_cite_refs]
                 logger.warning(__('inconsistent citation references in translated message.' +
@@ -407,7 +407,7 @@ class Locale(SphinxTransform):
             old_xrefs = node.traverse(addnodes.pending_xref)
             new_xrefs = patch.traverse(addnodes.pending_xref)
             xref_reftarget_map = {}
-            if len(old_xrefs) != len(new_xrefs):
+            if len(list(old_xrefs)) != len(list(new_xrefs)):
                 old_xref_rawsources = [xref.rawsource for xref in old_xrefs]
                 new_xref_rawsources = [xref.rawsource for xref in new_xrefs]
                 logger.warning(__('inconsistent term references in translated message.' +
diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py
index 247a7dfb5..4dd8eedd3 100644
--- a/sphinx/writers/latex.py
+++ b/sphinx/writers/latex.py
@@ -1001,7 +1001,7 @@ class LaTeXTranslator(SphinxTranslator):
             context = ('\\par' + CR + '\\vskip-\\baselineskip'
                        '\\vbox{\\hbox{\\strut}}\\end{varwidth}%' + CR + context)
             self.needs_linetrimming = 1
-        if len(node.traverse(nodes.paragraph)) >= 2:
+        if len(list(node.traverse(nodes.paragraph))) >= 2:
             self.table.has_oldproblematic = True
         if isinstance(node.parent.parent, nodes.thead) or (cell.col in self.table.stubs):
             if len(node) == 1 and isinstance(node[0], nodes.paragraph) and node.astext() == '':
diff --git a/sphinx/writers/text.py b/sphinx/writers/text.py
index c0ebe32a2..ec5debd84 100644
--- a/sphinx/writers/text.py
+++ b/sphinx/writers/text.py
@@ -834,7 +834,7 @@ class TextTranslator(SphinxTranslator):
             self.end_state(first='%s. ' % self.list_counter[-1])
 
     def visit_definition_list_item(self, node: Element) -> None:
-        self._classifier_count_in_li = len(node.traverse(nodes.classifier))
+        self._classifier_count_in_li = len(list(node.traverse(nodes.classifier)))
 
     def depart_definition_list_item(self, node: Element) -> None:
         pass
diff --git a/tests/test_util_nodes.py b/tests/test_util_nodes.py
index cb2ae70a8..421930cf5 100644
--- a/tests/test_util_nodes.py
+++ b/tests/test_util_nodes.py
@@ -60,31 +60,31 @@ def test_NodeMatcher():
 
     # search by node class
     matcher = NodeMatcher(nodes.paragraph)
-    assert len(doctree.traverse(matcher)) == 3
+    assert len(list(doctree.traverse(matcher))) == 3
 
     # search by multiple node classes
     matcher = NodeMatcher(nodes.paragraph, nodes.literal_block)
-    assert len(doctree.traverse(matcher)) == 4
+    assert len(list(doctree.traverse(matcher))) == 4
 
     # search by node attribute
     matcher = NodeMatcher(block=1)
-    assert len(doctree.traverse(matcher)) == 1
+    assert len(list(doctree.traverse(matcher))) == 1
 
     # search by node attribute (Any)
     matcher = NodeMatcher(block=Any)
-    assert len(doctree.traverse(matcher)) == 3
+    assert len(list(doctree.traverse(matcher))) == 3
 
     # search by both class and attribute
     matcher = NodeMatcher(nodes.paragraph, block=Any)
-    assert len(doctree.traverse(matcher)) == 2
+    assert len(list(doctree.traverse(matcher))) == 2
 
     # mismatched
     matcher = NodeMatcher(nodes.title)
-    assert len(doctree.traverse(matcher)) == 0
+    assert len(list(doctree.traverse(matcher))) == 0
 
     # search with Any does not match to Text node
     matcher = NodeMatcher(blah=Any)
-    assert len(doctree.traverse(matcher)) == 0
+    assert len(list(doctree.traverse(matcher))) == 0
 
 
 @pytest.mark.parametrize(
-- 
2.33.1


From 893776f280fed8a7b8d1f8c89dd4830f006060f1 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Mon, 11 Oct 2021 01:23:29 +0900
Subject: [PATCH 4/6] Support docutils-0.18: allow PreBibliographic nodes
 before docinfo

Since 0.18, `meta` directive inserts meta node into the top of the
document.  It confuses MetadataCollector.

This allows doctree contains PreBibliographic nodes just before docinfo
node.
---
 sphinx/environment/collectors/metadata.py | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/sphinx/environment/collectors/metadata.py b/sphinx/environment/collectors/metadata.py
index 7b3628c9a..d04d80595 100644
--- a/sphinx/environment/collectors/metadata.py
+++ b/sphinx/environment/collectors/metadata.py
@@ -33,9 +33,12 @@ class MetadataCollector(EnvironmentCollector):
 
         Keep processing minimal -- just return what docutils says.
         """
-        if len(doctree) > 0 and isinstance(doctree[0], nodes.docinfo):
+        index = doctree.first_child_not_matching_class(nodes.PreBibliographic)
+        if index is None:
+            return
+        elif isinstance(doctree[index], nodes.docinfo):
             md = app.env.metadata[app.env.docname]
-            for node in doctree[0]:
+            for node in doctree[index]:  # type: ignore
                 # nodes are multiply inherited...
                 if isinstance(node, nodes.authors):
                     authors = cast(List[nodes.author], node)
@@ -58,7 +61,7 @@ class MetadataCollector(EnvironmentCollector):
                         value = 0
                     md[name] = value
 
-            doctree.pop(0)
+            doctree.pop(index)
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
-- 
2.33.1


From f63b487b899ccefccd69a0ec0c6ad52c64361b04 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Wed, 27 Oct 2021 01:49:57 +0900
Subject: [PATCH 5/6] Support docutils-0.18: Consume iterator of
 Element.traverse()

Since 0.18, Element.traverse() returns an iterator instead of
intermediate object.  As a result, the return value is always considered
as truthy value.  And it becomes fragile when the caller modifies the
doctree on the loop.
---
 sphinx/builders/_epub_base.py             |  8 ++++----
 sphinx/builders/latex/transforms.py       | 10 +++++-----
 sphinx/domains/index.py                   |  2 +-
 sphinx/domains/python.py                  |  2 +-
 sphinx/environment/adapters/toctree.py    |  4 ++--
 sphinx/ext/autosummary/__init__.py        |  2 +-
 sphinx/ext/linkcode.py                    |  2 +-
 sphinx/ext/todo.py                        |  2 +-
 sphinx/ext/viewcode.py                    |  4 ++--
 sphinx/transforms/__init__.py             |  4 ++--
 sphinx/transforms/i18n.py                 |  2 +-
 sphinx/transforms/post_transforms/code.py |  2 +-
 sphinx/util/nodes.py                      |  4 ++--
 sphinx/writers/latex.py                   |  2 +-
 sphinx/writers/manpage.py                 |  4 ++--
 15 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/sphinx/builders/_epub_base.py b/sphinx/builders/_epub_base.py
index 7df3f8df5..5de83c672 100644
--- a/sphinx/builders/_epub_base.py
+++ b/sphinx/builders/_epub_base.py
@@ -318,14 +318,14 @@ class EpubBuilder(StandaloneHTMLBuilder):
             # a) place them after the last existing footnote
             # b) place them after an (empty) Footnotes rubric
             # c) create an empty Footnotes rubric at the end of the document
-            fns = tree.traverse(nodes.footnote)
+            fns = list(tree.traverse(nodes.footnote))
             if fns:
                 fn = fns[-1]
                 return fn.parent, fn.parent.index(fn) + 1
             for node in tree.traverse(nodes.rubric):
                 if len(node) == 1 and node.astext() == FOOTNOTES_RUBRIC_NAME:
                     return node.parent, node.parent.index(node) + 1
-            doc = tree.traverse(nodes.document)[0]
+            doc = list(tree.traverse(nodes.document))[0]
             rub = nodes.rubric()
             rub.append(nodes.Text(FOOTNOTES_RUBRIC_NAME))
             doc.append(rub)
@@ -334,10 +334,10 @@ class EpubBuilder(StandaloneHTMLBuilder):
         if show_urls == 'no':
             return
         if show_urls == 'footnote':
-            doc = tree.traverse(nodes.document)[0]
+            doc = list(tree.traverse(nodes.document))[0]
             fn_spot, fn_idx = footnote_spot(tree)
             nr = 1
-        for node in tree.traverse(nodes.reference):
+        for node in list(tree.traverse(nodes.reference)):
             uri = node.get('refuri', '')
             if (uri.startswith('http:') or uri.startswith('https:') or
                     uri.startswith('ftp:')) and uri not in node.astext():
diff --git a/sphinx/builders/latex/transforms.py b/sphinx/builders/latex/transforms.py
index 0a74eded4..97baf467a 100644
--- a/sphinx/builders/latex/transforms.py
+++ b/sphinx/builders/latex/transforms.py
@@ -45,7 +45,7 @@ class SubstitutionDefinitionsRemover(SphinxPostTransform):
     formats = ('latex',)
 
     def run(self, **kwargs: Any) -> None:
-        for node in self.document.traverse(nodes.substitution_definition):
+        for node in list(self.document.traverse(nodes.substitution_definition)):
             node.parent.remove(node)
 
 
@@ -81,7 +81,7 @@ class ShowUrlsTransform(SphinxPostTransform):
         if show_urls is False or show_urls == 'no':
             return
 
-        for node in self.document.traverse(nodes.reference):
+        for node in list(self.document.traverse(nodes.reference)):
             uri = node.get('refuri', '')
             if uri.startswith(URI_SCHEMES):
                 if uri.startswith('mailto:'):
@@ -501,7 +501,7 @@ class BibliographyTransform(SphinxPostTransform):
 
     def run(self, **kwargs: Any) -> None:
         citations = thebibliography()
-        for node in self.document.traverse(nodes.citation):
+        for node in list(self.document.traverse(nodes.citation)):
             node.parent.remove(node)
             citations += node
 
@@ -602,9 +602,9 @@ class IndexInSectionTitleTransform(SphinxPostTransform):
     formats = ('latex',)
 
     def run(self, **kwargs: Any) -> None:
-        for node in self.document.traverse(nodes.title):
+        for node in list(self.document.traverse(nodes.title)):
             if isinstance(node.parent, nodes.section):
-                for i, index in enumerate(node.traverse(addnodes.index)):
+                for i, index in enumerate(list(node.traverse(addnodes.index))):
                     # move the index node next to the section title
                     node.remove(index)
                     node.parent.insert(i + 1, index)
diff --git a/sphinx/domains/index.py b/sphinx/domains/index.py
index 4a91d6ad1..ba4ba4515 100644
--- a/sphinx/domains/index.py
+++ b/sphinx/domains/index.py
@@ -48,7 +48,7 @@ class IndexDomain(Domain):
     def process_doc(self, env: BuildEnvironment, docname: str, document: Node) -> None:
         """Process a document after it is read by the environment."""
         entries = self.entries.setdefault(env.docname, [])
-        for node in document.traverse(addnodes.index):
+        for node in list(document.traverse(addnodes.index)):
             try:
                 for entry in node['entries']:
                     split_index_msg(entry[0], entry[1])
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 552742bb8..baae1b819 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -287,7 +287,7 @@ class PyXrefMixin:
                 text = target[1:]
             elif prefix == '~':
                 text = target.split('.')[-1]
-            for node in result.traverse(nodes.Text):
+            for node in list(result.traverse(nodes.Text)):
                 node.parent[node.parent.index(node)] = nodes.Text(text)
                 break
         return result
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index f0a37ab7f..49454be0f 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -194,13 +194,13 @@ class TocTree:
                         for toplevel in children:
                             # nodes with length 1 don't have any children anyway
                             if len(toplevel) > 1:
-                                subtrees = toplevel.traverse(addnodes.toctree)
+                                subtrees = list(toplevel.traverse(addnodes.toctree))
                                 if subtrees:
                                     toplevel[1][:] = subtrees  # type: ignore
                                 else:
                                     toplevel.pop(1)
                     # resolve all sub-toctrees
-                    for subtocnode in toc.traverse(addnodes.toctree):
+                    for subtocnode in list(toc.traverse(addnodes.toctree)):
                         if not (subtocnode.get('hidden', False) and
                                 not includehidden):
                             i = subtocnode.parent.index(subtocnode) + 1
diff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py
index b268127d0..a71f1b6ac 100644
--- a/sphinx/ext/autosummary/__init__.py
+++ b/sphinx/ext/autosummary/__init__.py
@@ -564,7 +564,7 @@ def extract_summary(doc: List[str], document: Any) -> str:
                 node = parse(doc, document.settings)
                 if summary.endswith(WELL_KNOWN_ABBREVIATIONS):
                     pass
-                elif not node.traverse(nodes.system_message):
+                elif not list(node.traverse(nodes.system_message)):
                     # considered as that splitting by period does not break inline markups
                     break
 
diff --git a/sphinx/ext/linkcode.py b/sphinx/ext/linkcode.py
index 5c118a9fb..495bb5073 100644
--- a/sphinx/ext/linkcode.py
+++ b/sphinx/ext/linkcode.py
@@ -39,7 +39,7 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:
         'js': ['object', 'fullname'],
     }
 
-    for objnode in doctree.traverse(addnodes.desc):
+    for objnode in list(doctree.traverse(addnodes.desc)):
         domain = objnode.get('domain')
         uris = set()  # type: Set[str]
         for signode in objnode:
diff --git a/sphinx/ext/todo.py b/sphinx/ext/todo.py
index a73dea84d..16d157164 100644
--- a/sphinx/ext/todo.py
+++ b/sphinx/ext/todo.py
@@ -160,7 +160,7 @@ class TodoListProcessor:
 
     def process(self, doctree: nodes.document, docname: str) -> None:
         todos = sum(self.domain.todos.values(), [])  # type: List[todo_node]
-        for node in doctree.traverse(todolist):
+        for node in list(doctree.traverse(todolist)):
             if not self.config.todo_include_todos:
                 node.parent.remove(node)
                 continue
diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index 6bedf2e1c..d2341810c 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -108,7 +108,7 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:
 
         return False
 
-    for objnode in doctree.traverse(addnodes.desc):
+    for objnode in list(doctree.traverse(addnodes.desc)):
         if objnode.get('domain') != 'py':
             continue
         names = set()  # type: Set[str]
@@ -183,7 +183,7 @@ class ViewcodeAnchorTransform(SphinxPostTransform):
             node.replace_self(refnode)
 
     def remove_viewcode_anchors(self) -> None:
-        for node in self.document.traverse(viewcode_anchor):
+        for node in list(self.document.traverse(viewcode_anchor)):
             node.parent.remove(node)
 
 
diff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py
index 45640308f..4512053c7 100644
--- a/sphinx/transforms/__init__.py
+++ b/sphinx/transforms/__init__.py
@@ -128,7 +128,7 @@ class MoveModuleTargets(SphinxTransform):
     default_priority = 210
 
     def apply(self, **kwargs: Any) -> None:
-        for node in self.document.traverse(nodes.target):
+        for node in list(self.document.traverse(nodes.target)):
             if not node['ids']:
                 continue
             if ('ismod' in node and
@@ -298,7 +298,7 @@ class FilterSystemMessages(SphinxTransform):
 
     def apply(self, **kwargs: Any) -> None:
         filterlevel = 2 if self.config.keep_warnings else 5
-        for node in self.document.traverse(nodes.system_message):
+        for node in list(self.document.traverse(nodes.system_message)):
             if node['level'] < filterlevel:
                 logger.debug('%s [filtered system message]', node.astext())
                 node.parent.remove(node)
diff --git a/sphinx/transforms/i18n.py b/sphinx/transforms/i18n.py
index a345b819d..ccc14c23f 100644
--- a/sphinx/transforms/i18n.py
+++ b/sphinx/transforms/i18n.py
@@ -486,7 +486,7 @@ class RemoveTranslatableInline(SphinxTransform):
             return
 
         matcher = NodeMatcher(nodes.inline, translatable=Any)
-        for inline in self.document.traverse(matcher):  # type: nodes.inline
+        for inline in list(self.document.traverse(matcher)):  # type: nodes.inline
             inline.parent.remove(inline)
             inline.parent += inline.children
 
diff --git a/sphinx/transforms/post_transforms/code.py b/sphinx/transforms/post_transforms/code.py
index 20df1db3c..59fa115e5 100644
--- a/sphinx/transforms/post_transforms/code.py
+++ b/sphinx/transforms/post_transforms/code.py
@@ -40,7 +40,7 @@ class HighlightLanguageTransform(SphinxTransform):
                                            self.config.highlight_language)
         self.document.walkabout(visitor)
 
-        for node in self.document.traverse(addnodes.highlightlang):
+        for node in list(self.document.traverse(addnodes.highlightlang)):
             node.parent.remove(node)
 
 
diff --git a/sphinx/util/nodes.py b/sphinx/util/nodes.py
index d5e43e716..06af8bedd 100644
--- a/sphinx/util/nodes.py
+++ b/sphinx/util/nodes.py
@@ -349,7 +349,7 @@ def clean_astext(node: Element) -> str:
     node = node.deepcopy()
     for img in node.traverse(nodes.image):
         img['alt'] = ''
-    for raw in node.traverse(nodes.raw):
+    for raw in list(node.traverse(nodes.raw)):
         raw.parent.remove(raw)
     return node.astext()
 
@@ -413,7 +413,7 @@ def inline_all_toctrees(builder: "Builder", docnameset: Set[str], docname: str,
     Record all docnames in *docnameset*, and output docnames with *colorfunc*.
     """
     tree = cast(nodes.document, tree.deepcopy())
-    for toctreenode in tree.traverse(addnodes.toctree):
+    for toctreenode in list(tree.traverse(addnodes.toctree)):
         newnodes = []
         includefiles = map(str, toctreenode['includefiles'])
         for includefile in includefiles:
diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py
index 4dd8eedd3..b0878efe5 100644
--- a/sphinx/writers/latex.py
+++ b/sphinx/writers/latex.py
@@ -658,7 +658,7 @@ class LaTeXTranslator(SphinxTranslator):
                 raise nodes.SkipNode
             else:
                 short = ''
-                if node.traverse(nodes.image):
+                if list(node.traverse(nodes.image)):
                     short = ('[%s]' % self.escape(' '.join(clean_astext(node).split())))
 
                 try:
diff --git a/sphinx/writers/manpage.py b/sphinx/writers/manpage.py
index 9ef429ba3..e2d3f3b38 100644
--- a/sphinx/writers/manpage.py
+++ b/sphinx/writers/manpage.py
@@ -58,7 +58,7 @@ class NestedInlineTransform:
 
     def apply(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, nodes.emphasis, nodes.strong)
-        for node in self.document.traverse(matcher):  # type: TextElement
+        for node in list(self.document.traverse(matcher)):  # type: TextElement
             if any(matcher(subnode) for subnode in node):
                 pos = node.parent.index(node)
                 for subnode in reversed(node[1:]):
@@ -214,7 +214,7 @@ class ManualPageTranslator(SphinxTranslator, BaseTranslator):
 
     # overwritten -- don't make whole of term bold if it includes strong node
     def visit_term(self, node: Element) -> None:
-        if node.traverse(nodes.strong):
+        if list(node.traverse(nodes.strong)):
             self.body.append('\n')
         else:
             super().visit_term(node)
-- 
2.33.1


From ae4a354aadb5782733cd87bd4cddd430e44b34a7 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sun, 31 Oct 2021 01:33:16 +0900
Subject: [PATCH 6/6] Support docutils-0.18: Consume generator of
 Element.traverse()

The last fix in i18n module was incorrect because it compares the
"already consumed" generators.  It should compares the lists of nodes.
---
 sphinx/transforms/i18n.py | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/sphinx/transforms/i18n.py b/sphinx/transforms/i18n.py
index ccc14c23f..ffb316126 100644
--- a/sphinx/transforms/i18n.py
+++ b/sphinx/transforms/i18n.py
@@ -297,7 +297,7 @@ class Locale(SphinxTransform):
             is_autofootnote_ref = NodeMatcher(nodes.footnote_reference, auto=Any)
             old_foot_refs = node.traverse(is_autofootnote_ref)  # type: List[nodes.footnote_reference]  # NOQA
             new_foot_refs = patch.traverse(is_autofootnote_ref)  # type: List[nodes.footnote_reference]  # NOQA
-            if len(list(old_foot_refs)) != len(list(new_foot_refs)):
+            if len(old_foot_refs) != len(new_foot_refs):
                 old_foot_ref_rawsources = [ref.rawsource for ref in old_foot_refs]
                 new_foot_ref_rawsources = [ref.rawsource for ref in new_foot_refs]
                 logger.warning(__('inconsistent footnote references in translated message.' +
@@ -340,7 +340,7 @@ class Locale(SphinxTransform):
             is_refnamed_ref = NodeMatcher(nodes.reference, refname=Any)
             old_refs = node.traverse(is_refnamed_ref)  # type: List[nodes.reference]
             new_refs = patch.traverse(is_refnamed_ref)  # type: List[nodes.reference]
-            if len(list(old_refs)) != len(list(new_refs)):
+            if len(old_refs) != len(new_refs):
                 old_ref_rawsources = [ref.rawsource for ref in old_refs]
                 new_ref_rawsources = [ref.rawsource for ref in new_refs]
                 logger.warning(__('inconsistent references in translated message.' +
@@ -368,7 +368,7 @@ class Locale(SphinxTransform):
             old_foot_refs = node.traverse(is_refnamed_footnote_ref)
             new_foot_refs = patch.traverse(is_refnamed_footnote_ref)
             refname_ids_map = {}  # type: Dict[str, List[str]]
-            if len(list(old_foot_refs)) != len(list(new_foot_refs)):
+            if len(old_foot_refs) != len(new_foot_refs):
                 old_foot_ref_rawsources = [ref.rawsource for ref in old_foot_refs]
                 new_foot_ref_rawsources = [ref.rawsource for ref in new_foot_refs]
                 logger.warning(__('inconsistent footnote references in translated message.' +
@@ -384,10 +384,10 @@ class Locale(SphinxTransform):
 
             # citation should use original 'ids'.
             is_citation_ref = NodeMatcher(nodes.citation_reference, refname=Any)
-            old_cite_refs = node.traverse(is_citation_ref)  # type: List[nodes.citation_reference]  # NOQA
-            new_cite_refs = patch.traverse(is_citation_ref)  # type: List[nodes.citation_reference]  # NOQA
+            old_cite_refs = list(node.traverse(is_citation_ref))  # type: List[nodes.citation_reference]  # NOQA
+            new_cite_refs = list(patch.traverse(is_citation_ref))  # type: List[nodes.citation_reference]  # NOQA
             refname_ids_map = {}
-            if len(list(old_cite_refs)) != len(list(new_cite_refs)):
+            if len(old_cite_refs) != len(new_cite_refs):
                 old_cite_ref_rawsources = [ref.rawsource for ref in old_cite_refs]
                 new_cite_ref_rawsources = [ref.rawsource for ref in new_cite_refs]
                 logger.warning(__('inconsistent citation references in translated message.' +
@@ -404,10 +404,10 @@ class Locale(SphinxTransform):
             # Original pending_xref['reftarget'] contain not-translated
             # target name, new pending_xref must use original one.
             # This code restricts to change ref-targets in the translation.
-            old_xrefs = node.traverse(addnodes.pending_xref)
-            new_xrefs = patch.traverse(addnodes.pending_xref)
+            old_xrefs = list(node.traverse(addnodes.pending_xref))
+            new_xrefs = list(patch.traverse(addnodes.pending_xref))
             xref_reftarget_map = {}
-            if len(list(old_xrefs)) != len(list(new_xrefs)):
+            if len(old_xrefs) != len(new_xrefs):
                 old_xref_rawsources = [xref.rawsource for xref in old_xrefs]
                 new_xref_rawsources = [xref.rawsource for xref in new_xrefs]
                 logger.warning(__('inconsistent term references in translated message.' +
-- 
2.33.1

