commit 0a59054c30e4f0ba10f10acfc1d7f3814c63e1a7
Author: Ben Webb <ben@salilab.org>
Date:   Thu Jul 12 10:58:10 2018 -0700

    Add Python 3.7 compatibility (#4862)
    
    Compilation of Python wrappers fails with Python 3.7 because
    the Python folks changed their C API such that
    PyUnicode_AsUTF8AndSize() now returns a const char* rather
    than a char*. Add a patch to work around. Relates #4086.

diff --git google/protobuf/pyext/descriptor.cc google/protobuf/pyext/descriptor.cc
index 8af0cb12..19a1c38a 100644
--- google/protobuf/pyext/descriptor.cc
+++ google/protobuf/pyext/descriptor.cc
@@ -56,7 +56,7 @@
   #endif
   #define PyString_AsStringAndSize(ob, charpp, sizep) \
     (PyUnicode_Check(ob)? \
-       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
+       ((*(charpp) = const_cast<char*>(PyUnicode_AsUTF8AndSize(ob, (sizep)))) == NULL? -1: 0): \
        PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
 #endif
 
diff --git google/protobuf/pyext/descriptor_containers.cc google/protobuf/pyext/descriptor_containers.cc
index bc007f7e..0153664f 100644
--- google/protobuf/pyext/descriptor_containers.cc
+++ google/protobuf/pyext/descriptor_containers.cc
@@ -66,7 +66,7 @@
   #endif
   #define PyString_AsStringAndSize(ob, charpp, sizep) \
     (PyUnicode_Check(ob)? \
-       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
+       ((*(charpp) = const_cast<char*>(PyUnicode_AsUTF8AndSize(ob, (sizep)))) == NULL? -1: 0): \
        PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
 #endif
 
diff --git google/protobuf/pyext/descriptor_pool.cc google/protobuf/pyext/descriptor_pool.cc
index 95882aeb..962accc6 100644
--- google/protobuf/pyext/descriptor_pool.cc
+++ google/protobuf/pyext/descriptor_pool.cc
@@ -48,7 +48,7 @@
   #endif
   #define PyString_AsStringAndSize(ob, charpp, sizep) \
     (PyUnicode_Check(ob)? \
-       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
+       ((*(charpp) = const_cast<char*>(PyUnicode_AsUTF8AndSize(ob, (sizep)))) == NULL? -1: 0): \
        PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
 #endif
 
diff --git google/protobuf/pyext/extension_dict.cc google/protobuf/pyext/extension_dict.cc
index 018b5c2c..174c5470 100644
--- google/protobuf/pyext/extension_dict.cc
+++ google/protobuf/pyext/extension_dict.cc
@@ -53,7 +53,7 @@
   #endif
   #define PyString_AsStringAndSize(ob, charpp, sizep) \
     (PyUnicode_Check(ob)? \
-       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
+       ((*(charpp) = const_cast<char*>(PyUnicode_AsUTF8AndSize(ob, (sizep)))) == NULL? -1: 0): \
        PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
 #endif
 
diff --git google/protobuf/pyext/message.cc google/protobuf/pyext/message.cc
index 53736b9c..b2984509 100644
--- google/protobuf/pyext/message.cc
+++ google/protobuf/pyext/message.cc
@@ -79,7 +79,7 @@
     (PyUnicode_Check(ob)? PyUnicode_AsUTF8(ob): PyBytes_AsString(ob))
   #define PyString_AsStringAndSize(ob, charpp, sizep) \
     (PyUnicode_Check(ob)? \
-       ((*(charpp) = PyUnicode_AsUTF8AndSize(ob, (sizep))) == NULL? -1: 0): \
+       ((*(charpp) = const_cast<char*>(PyUnicode_AsUTF8AndSize(ob, (sizep)))) == NULL? -1: 0): \
        PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
   #endif
 #endif
@@ -1529,7 +1529,7 @@ PyObject* HasField(CMessage* self, PyObject* arg) {
     return NULL;
   }
 #else
-  field_name = PyUnicode_AsUTF8AndSize(arg, &size);
+  field_name = const_cast<char*>(PyUnicode_AsUTF8AndSize(arg, &size));
   if (!field_name) {
     return NULL;
   }
