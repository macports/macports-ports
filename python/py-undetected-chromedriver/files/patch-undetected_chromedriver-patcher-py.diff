--- ./undetected_chromedriver/patcher.py	2022-02-22 14:13:01.000000000 -0500
+++ ./undetected_chromedriver/patcher.py	2022-02-22 14:42:04.000000000 -0500
@@ -6,8 +6,10 @@
 import os
 import random
 import re
+import shutil
 import string
 import sys
+import tempfile
 import zipfile
 from distutils.version import LooseVersion
 from urllib.request import urlopen, urlretrieve
@@ -43,12 +45,15 @@
         d = "~/.undetected_chromedriver"
     data_path = os.path.abspath(os.path.expanduser(d))
 
-    def __init__(self, executable_path=None, force=False, version_main: int = 0):
+    def __init__(self, executable_path=None, executable_path_mkdtemp=False, force=False, version_main: int = 0):
         """
 
         Args:
             executable_path: None = automatic
                              a full file path to the chromedriver executable
+            executable_path_mkdtemp: bool or str, optional, default: False
+                Make a temporary directory, copy `chromedriver` there from
+                `executable_path`, and patch the executable.
             force: False
                     terminate processes which are holding lock
             version_main: 0 = auto
@@ -78,16 +83,30 @@
         if executable_path:
             self._custom_exe_path = True
             self.executable_path = executable_path
+            if executable_path_mkdtemp:
+                self.executable_path_mkdtemp = executable_path_mkdtemp \
+                    if isinstance(executable_path_mkdtemp, str) \
+                       else os.path.join(tempfile.mkdtemp(), self.exe_name)
+
         self.version_main = version_main
         self.version_full = None
 
-    def auto(self, executable_path=None, force=False, version_main=None):
+    def auto(self, executable_path=None, executable_path_mkdtemp=False, force=False, version_main=None):
         """"""
         if executable_path:
             self.executable_path = executable_path
             self._custom_exe_path = True
+            if executable_path_mkdtemp:
+                self.executable_path_mkdtemp = executable_path_mkdtemp \
+                    if isinstance(executable_path_mkdtemp, str) \
+                       else os.path.join(tempfile.mkdtemp(), self.exe_name)
 
         if self._custom_exe_path:
+            if hasattr(self, 'executable_path_mkdtemp') \
+               and self.executable_path_mkdtemp \
+               and isinstance(self.executable_path_mkdtemp, str):
+                shutil.copy(self.executable_path, self.executable_path_mkdtemp)
+                self.executable_path = self.executable_path_mkdtemp
             ispatched = self.is_binary_patched(self.executable_path)
             if not ispatched:
                 return self.patch_exe()
@@ -194,10 +213,14 @@
 
     @staticmethod
     def gen_random_cdc():
-        cdc = random.choices(string.ascii_lowercase, k=26)
-        cdc[-6:-4] = map(str.upper, cdc[-6:-4])
-        cdc[2] = cdc[0]
-        cdc[3] = "_"
+        """Generate a length 26 random bytestring that doesn't start with 'cdc_'."""
+        while True:
+            cdc = random.choices(string.ascii_lowercase, k=26)
+            if cdc[0] == 'c' and cdc[1] == 'd': continue
+            cdc[-6:-4] = map(str.upper, cdc[-6:-4])
+            cdc[2] = cdc[0]
+            cdc[3] = "_"
+            break
         return "".join(cdc).encode()
 
     def is_binary_patched(self, executable_path=None):
