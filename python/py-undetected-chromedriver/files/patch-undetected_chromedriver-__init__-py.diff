--- ./undetected_chromedriver/__init__.py	2022-02-14 13:34:12.000000000 -0500
+++ ./undetected_chromedriver/__init__.py	2022-02-22 14:44:18.000000000 -0500
@@ -110,6 +110,8 @@
         patcher_force_close=False,
         suppress_welcome=True,
         use_subprocess=False,
+        executable_path='@PREFIX@/bin/@NAME@',
+        executable_path_mkdtemp=False,
         debug=False,
         **kw
     ):
@@ -198,15 +200,30 @@
               in that case you can set this to `True`. The browser will start via subprocess, and will keep running most of times.
               ! setting it to True comes with NO support when being detected. !
 
+        executable_path: str, optional, default: '@PREFIX@/bin/@NAME@'
+            a full file path to the patched chromedriver executable.
+
+        executable_path_mkdtemp: bool or str, optional, default: False
+            Make a temporary directory, copy `chromedriver` there from
+            `executable_path`, and patch the executable. The user must
+            delete this `chromedriver` copy and temporary path with the
+            method `delete_executable_path_mkdtemp`.
+
         """
         self.debug = debug
         patcher = Patcher(
-            executable_path=None,
+            executable_path=executable_path,
+            executable_path_mkdtemp=executable_path_mkdtemp,
             force=patcher_force_close,
             version_main=version_main,
         )
         patcher.auto()
 
+        if hasattr(patcher, 'executable_path_mkdtemp') \
+           and patcher.executable_path_mkdtemp \
+           and isinstance(patcher.executable_path_mkdtemp, str):
+            self.executable_path_mkdtemp = patcher.executable_path_mkdtemp
+        
         if not options:
             options = ChromeOptions()
 
@@ -613,6 +630,13 @@
     def __hash__(self):
         return hash(self.options.debugger_address)
 
+    def delete_executable_path_mkdtemp(self):
+        if hasattr(self, 'executable_path_mkdtemp') \
+           and self.executable_path_mkdtemp \
+           and isinstance(self.executable_path_mkdtemp, str):
+            os.unlink(self.executable_path_mkdtemp)
+            os.rmdir(os.path.dirname(self.executable_path_mkdtemp))
+
 
 def find_chrome_executable():
     """
