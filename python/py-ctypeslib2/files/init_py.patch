--- ctypeslib/__init__.py.orig	2023-04-14 19:52:56.000000000 -0500
+++ ctypeslib/__init__.py	2023-04-24 12:29:20.000000000 -0500
@@ -24,32 +24,6 @@
     __version__ = __dist.version
 
 
-def __find_clang_libraries():
-    """ configure python-clang to use the local clang library """
-    _libs = []
-    # try default system name
-    v0 = ["libclang", "clang"]
-    # tries clang version 16 to 7
-    v1 = ["clang-%d" % _ for _ in range(16, 6, -1)]
-    # with the dotted form of clang 6.0 to 4.0
-    v2 = ["clang-%.1f" % _ for _ in range(6, 3, -1)]
-    # clang 3 supported versions
-    v3 = ["clang-3.9", "clang-3.8", "clang-3.7"]
-    v_list = v0 + v1 + v2 + v3
-    for _version in v_list:
-        _filename = find_library(_version)
-        if _filename:
-            _libs.append((_version, _filename))
-    # On darwin, also consider either Xcode or CommandLineTools.
-    if os.name == "posix" and sys.platform == "darwin":
-        for _ in ['/Library/Developer/CommandLineTools/usr/lib/libclang.dylib',
-                  '/Applications/Xcode.app/Contents/Frameworks/libclang.dylib',
-                  ]:
-            if os.path.exists(_):
-                _libs.insert(0, (_, _))
-    return _libs
-
-
 def clang_version():
     """Pull the clang C library version from the API"""
     # avoid loading the cindex API (cindex.conf.lib) to avoid version conflicts
@@ -72,18 +46,9 @@
 def __configure_clang_cindex():
     global __clang_py_version__
     __clang_py_version__ = get_distribution('clang').version
-    # first try for a perfect match.
-    __lib_filename = find_library("clang-" + __clang_py_version__)
-    if __lib_filename is not None:
-        cindex.Config.set_library_file(__lib_filename)
-        return __lib_filename
-    else:
-        __libs = __find_clang_libraries()
-        if len(__libs) > 0:
-            __version, __filename = __libs[0]
-            cindex.Config.set_library_file(__filename)
-            return __filename
-    return None
+    # The (MacPorts) installed clang module already knows (and depends upon)
+    # the appropriate libclang; don't go searching for something else.
+    return cindex.Config().get_filename()
 
 
 # check which clang python module is available
