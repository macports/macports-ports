diff -r a6d2d9673442 -r a59cb21d25c6 NEWS
--- a/NEWS	Wed Apr 13 11:14:02 2022 +0100
+++ b/NEWS	Fri May 13 14:19:10 2022 +0100
@@ -1,3 +1,10 @@
+v6.6.2 13th May 2022
+  - Any config settings passed by a PEP 571 frontend are now used.
+  - The 'array' type is now accessible from the sip module.
+  - The latest version of ABI v13 is v13.4.0.
+  - The latest version of ABI v12 is v12.11.0.
+  - Bug fixes.
+
 v6.6.1 13th April 2022
   - The latest version of ABI v13 is v13.3.1.
   - The latest version of ABI v12 is v12.10.1.
diff -r a6d2d9673442 -r a59cb21d25c6 code_generator/gencode.c
--- a/code_generator/gencode.c	Wed Apr 13 11:14:02 2022 +0100
+++ b/code_generator/gencode.c	Fri May 13 14:19:10 2022 +0100
@@ -7668,10 +7668,7 @@
         prcode(fp,
 "    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, ");
 
-    saved = *vhd->pysig;
-    fakeProtectedArgs(vhd->pysig);
     generateTupleBuilder(mod, vhd->pysig, fp);
-    *vhd->pysig = saved;
 
     if (nrvals == 0)
     {
@@ -10674,8 +10671,12 @@
 {
     scopedNameDef *ename = xd->iff->fqcname;
 
-    prcode(fp,
-"            catch (%S &%s)\n"
+    /*
+     * The global scope is stripped from the exception name to be consistent
+     * with older versions of SIP.
+     */
+    prcode(fp,
+"            catch (%V &%s)\n"
 "            {\n"
         ,ename,(xd->cd != NULL || usedInCode(xd->raisecode, "sipExceptionRef")) ? "sipExceptionRef" : "");
 
diff -r a6d2d9673442 -r a59cb21d25c6 code_generator/py2c.c
--- a/code_generator/py2c.c	Wed Apr 13 11:14:02 2022 +0100
+++ b/code_generator/py2c.c	Fri May 13 14:19:10 2022 +0100
@@ -78,6 +78,7 @@
  */
 static objectCache *cache_cachedname = NULL;
 static objectCache *cache_class = NULL;
+static objectCache *cache_codeblock = NULL;
 static objectCache *cache_constructor = NULL;
 static objectCache *cache_exception = NULL;
 static objectCache *cache_ifacefile = NULL;
@@ -96,6 +97,7 @@
 {
     clear_cache(&cache_cachedname);
     clear_cache(&cache_class);
+    clear_cache(&cache_codeblock);
     clear_cache(&cache_constructor);
     clear_cache(&cache_exception);
     clear_cache(&cache_ifacefile);
@@ -839,7 +841,14 @@
  */
 static codeBlock *codeblock(PyObject *obj, const char *encoding)
 {
-    codeBlock *value = sipMalloc(sizeof (codeBlock));
+    codeBlock *value;
+
+    if ((value = search_cache(cache_codeblock, obj)) != NULL)
+        return value;
+
+    value = sipMalloc(sizeof (codeBlock));
+
+    cache(&cache_codeblock, obj, value);
 
     value->frag = str_attr(obj, "text", encoding);
     value->filename = str_attr(obj, "sip_file", encoding);
diff -r a6d2d9673442 -r a59cb21d25c6 code_generator/type_hints.c
--- a/code_generator/type_hints.c	Wed Apr 13 11:14:02 2022 +0100
+++ b/code_generator/type_hints.c	Fri May 13 14:19:10 2022 +0100
@@ -309,7 +309,14 @@
         }
         else if (cd->supertype != NULL)
         {
-            fprintf(fp, "%s", cd->supertype->text);
+            /*
+             * This is a hack to correct the .pyi file when the supertype
+             * hasn't been given a fully qualified name (ie. with ABI v12).
+             */
+            if (sipName != NULL && strncmp(cd->supertype->text, "sip.", 4) == 0)
+                fprintf(fp, "%s.%s", sipName, &cd->supertype->text[4]);
+            else
+                fprintf(fp, "%s", cd->supertype->text);
         }
         else
         {
@@ -507,7 +514,7 @@
     {
         separate(TRUE, indent, fp);
         prIndent(indent, fp);
-        fprintf(fp, "class %s(sip.wrapper):\n", mtd->pyname->text);
+        fprintf(fp, "class %s(%s.wrapper):\n", mtd->pyname->text, (sipName != NULL ? sipName : "sip"));
 
         ++indent;
 
@@ -789,8 +796,6 @@
         int overloaded, int is_method, ifaceFileList *defined,
         int indent, int pep484, FILE *fp)
 {
-    int need_self;
-
     if (overloaded)
     {
         prIndent(indent, fp);
@@ -806,10 +811,18 @@
     prIndent(indent, fp);
     fprintf(fp, "%s%s", (pep484 ? "def " : ""), od->common->pyname->text);
 
-    need_self = (is_method && !isStatic(od));
+    if (pep484 && (od->common->slot == eq_slot || od->common->slot == ne_slot))
+    {
+        /* mypy recommends using 'object' as the argument type. */
+        fprintf(fp, "(self, other: object)");
+    }
+    else
+    {
+        int need_self = (is_method && !isStatic(od));
 
-    pyiPythonSignature(pt, mod, &od->pysig, need_self, defined, od->kwargs,
-            pep484, fp);
+        pyiPythonSignature(pt, mod, &od->pysig, need_self, defined, od->kwargs,
+                pep484, fp);
+    }
 
     if (pep484)
         fprintf(fp, ": ...\n");
diff -r a6d2d9673442 -r a59cb21d25c6 doc/sipbuild_api.rst
--- a/doc/sipbuild_api.rst	Wed Apr 13 11:14:02 2022 +0100
+++ b/doc/sipbuild_api.rst	Fri May 13 14:19:10 2022 +0100
@@ -128,7 +128,7 @@
 
         :param PyProject pyproject: is the parsed :file:`pyproject.toml` file.
         :param str tool: is the name of the tool, either ``'build'``,
-            ``'install'``, ``'pep517'``, ``'sdist'`` or ``'wheel'``.
+            ``'install'``, ``'sdist'`` or ``'wheel'``.
         :param str tool_description: is a short description of the tool.
 
 
@@ -529,7 +529,7 @@
         line option, the name should be preceded by ``no-``.
     :param list[str] tools: is the list of tools that use the option as a
         command line option.  If it isn't specified then the list of build
-        tools is used, i.e. ``['build', 'install', 'pep517', 'wheel']``.
+        tools is used, i.e. ``['build', 'install', 'wheel']``.
 
 
 :py:class:`~sipbuild.Project`
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/abstract_project.py
--- a/sipbuild/abstract_project.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/abstract_project.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2020, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -34,7 +34,7 @@
     """ This specifies the API of a project. """
 
     @classmethod
-    def bootstrap(cls, tool, tool_description=''):
+    def bootstrap(cls, tool, tool_description='', arguments=None):
         """ Return an AbstractProject instance fully configured for a
         particular command line tool.
         """
@@ -79,6 +79,10 @@
                     "The project factory did not return an AbstractProject "
                     "object")
 
+        # We set this as an attribute rather than change the API of the ctor or
+        # setup().
+        project.arguments = arguments
+
         # Complete the configuration of the project.
         project.setup(pyproject, tool, tool_description)
 
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/api.py
--- a/sipbuild/api.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/api.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2019, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -28,10 +28,8 @@
 def build_sdist(sdist_directory, config_settings=None):
     """ The PEP 517 hook for building an sdist from pyproject.toml. """
 
-    # Note that we ignore config_settings until we have a frontend that we can
-    # fully test with.  (pip seems lacking at the moment.)
-
-    project = AbstractProject.bootstrap('pep517')
+    project = AbstractProject.bootstrap('sdist',
+            arguments=_convert_config_settings(config_settings))
 
     # pip executes this in a separate process and doesn't handle exceptions
     # very well.  However it does capture stdout and (eventually) show it to
@@ -45,10 +43,8 @@
 def build_wheel(wheel_directory, config_settings=None, metadata_directory=None):
     """ The PEP 517 hook for building a wheel from pyproject.toml. """
 
-    # Note that we ignore config_settings until we have a frontend that we can
-    # fully test with.  (pip seems lacking at the moment.)
-
-    project = AbstractProject.bootstrap('pep517')
+    project = AbstractProject.bootstrap('wheel',
+            arguments=_convert_config_settings(config_settings))
 
     # pip executes this in a separate process and doesn't handle exceptions
     # very well.  However it does capture stdout and (eventually) show it to
@@ -57,3 +53,26 @@
         return project.build_wheel(wheel_directory)
     except Exception as e:
         handle_exception(e)
+
+
+def _convert_config_settings(config_settings):
+    """ Return any configuration settings from the frontend to a pseudo-command
+    line.
+    """
+
+    if config_settings is None:
+        config_settings = {}
+
+    args = []
+
+    for name, value in config_settings.items():
+        if value:
+            if not isinstance(value, list):
+                value = [value]
+
+            for m_value in value:
+                args.append(name + '=' + m_value)
+        else:
+            args.append(name)
+
+    return args
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/bindings.py
--- a/sipbuild/bindings.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/bindings.py	Fri May 13 14:19:10 2022 +0100
@@ -198,7 +198,7 @@
 
         # Generate any extracts.
         if self.generate_extracts:
-            generateExtracts(pt, extracts)
+            generateExtracts(pt, self.generate_extracts)
 
         # Generate any type hints file.
         if self.pep484_pyi and not self.internal:
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/buildable.py
--- a/sipbuild/buildable.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/buildable.py	Fri May 13 14:19:10 2022 +0100
@@ -23,7 +23,6 @@
 
 import importlib
 import os
-import sys
 
 from .exceptions import UserException
 from .installable import Installable
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/builder.py
--- a/sipbuild/builder.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/builder.py	Fri May 13 14:19:10 2022 +0100
@@ -315,7 +315,7 @@
 
                     # Create a PEP 561 marker file.
                     py_typed_path = os.path.join(project.build_dir, 'py.typed')
-                    with open(py_typed_path, 'w') as f:
+                    with open(py_typed_path, 'w') as _:
                         pass
 
                     installable = Installable('py_typed',
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/configurable.py
--- a/sipbuild/configurable.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/configurable.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -244,7 +244,7 @@
     """
 
     # The tools that will build a set of bindings.
-    BUILD_TOOLS = ('build', 'install', 'pep517', 'wheel')
+    BUILD_TOOLS = ('build', 'install', 'wheel')
 
     # All the valid tools.
     _ALL_TOOLS = BUILD_TOOLS + ('sdist', )
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/distutils_builder.py
--- a/sipbuild/distutils_builder.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/distutils_builder.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -27,7 +27,6 @@
 from distutils.log import ERROR, INFO, set_threshold
 
 import os
-import sys
 
 from .buildable import BuildableModule
 from .builder import Builder
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/annotations.py
--- a/sipbuild/generator/parser/annotations.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/annotations.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -21,16 +21,13 @@
 # POSSIBILITY OF SUCH DAMAGE.
 
 
-class DottedName(list):
+class DottedName(str):
     """ Encapsulate a dotted name.  A dedicated type is used (rather than a
     str) because we need to be able to distinguish it from a quoted string when
     used as the value of an annotation.
     """
 
-    def __str__(self):
-        """ Return the string version. """
-
-        return '.'.join(self)
+    pass
 
 
 class InvalidAnnotation(Exception):
@@ -138,10 +135,10 @@
     if not isinstance(value, DottedName):
         raise InvalidAnnotation(name, "must be an unquoted name", use='')
 
-    if len(value) > 1 and not allow_dots:
+    if '.' in value and not allow_dots:
         raise InvalidAnnotation(name, "cannot contain '.'", use='')
 
-    return str(value)
+    return value
 
 name = bind(validate_name, allow_dots=False, optional=False)
 
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/instantiations.py
--- a/sipbuild/generator/parser/instantiations.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/instantiations.py	Fri May 13 14:19:10 2022 +0100
@@ -180,10 +180,10 @@
 
     # Descend into any sub-templates.
     if proto_arg.type is ArgumentType.TEMPLATE:
-        proto_template = proto_args.definition
+        proto_template = proto_arg.definition
         i_template = copy(proto_template)
         i_template.types = _instantiate_signature(proto_template.types,
-                proto_class, template, i_class, expansions, pm)
+                proto_class, tmpl_names, template, i_class, expansions, pm)
         i_arg.definition = i_template
 
     # Handle any default value.
@@ -204,11 +204,11 @@
             if name == arg.definition.base_name:
                 tad = template.types.args[a]
 
-                proto_arg.type = tad.type
-                proto_arg.definition = tad.definition
+                i_arg.type = tad.type
+                i_arg.definition = tad.definition
 
                 # We take the constrained flag from the real type.
-                proto_arg.is_constrained = tad.is_constrained
+                i_arg.is_constrained = tad.is_constrained
 
                 break
         else:
@@ -375,11 +375,10 @@
             if kw_args is KwArgs.ALL or (kw_args is KwArgs.OPTIONAL and i_arg.default_value is not None):
                 i_arg.name.used = True
 
-    if proto_signature.result.type is not ArgumentType.NONE:
+    if proto_signature.result is not None:
         i_signature.result = _instantiate_argument(proto_signature.result,
                 proto_class, tmpl_names, template, i_class, expansions, pm)
 
-    assert not isinstance(i_signature.result, list)
     return i_signature
 
 
@@ -416,10 +415,10 @@
         i_typedef.fq_cpp_name = normalised_scoped_name(
                 proto_typedef.fq_cpp_name, i_class)
         i_typedef.scope = i_class
-        i_typedef.module = iclass.iface_file.module
+        i_typedef.module = i_class.iface_file.module
 
-        i_template.type = _instantiate_argument(proto_template.type,
-                proto_class, tmpl_names, template, i_class, expansions, pm)
+        i_typedef.type = _instantiate_argument(proto_typedef.type, proto_class,
+                tmpl_names, template, i_class, expansions, pm)
 
         pm.add_typedef(p, symbol, i_typedef)
 
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/parser_manager.py
--- a/sipbuild/generator/parser/parser_manager.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/parser_manager.py	Fri May 13 14:19:10 2022 +0100
@@ -36,7 +36,7 @@
         IfaceFile, IfaceFileType, KwArgs, MappedType, Member, Module, Overload,
         PyQtMethodSpecifier, PySlot, Qualifier, QualifierType, ScopedName,
         Signature, Specification, Transfer, TypeHints, WrappedClass,
-        WrappedEnum, WrappedEnumMember)
+        WrappedException, WrappedEnum, WrappedEnumMember)
 from ..templates import encoded_template_name, same_template_signature
 from ..utils import argument_as_str, normalised_scoped_name, same_base_type
 
@@ -81,7 +81,7 @@
         self.module_states = []
         self.paren_depth = 0
         self.parsing_virtual = False
-        self.sip_file = None
+        self.raw_sip_file = None
         self.skip_stack = [False]
 
         # Private state.
@@ -96,8 +96,10 @@
         self._scope_stack = []
         self._errors = []
         self._file_stack = []
+        self._pending_module_state = None
         self._input = None
         self._all_sip_files = []
+        self._sip_file = None
         self._sip_files = []
         self._name_cache = {}
 
@@ -267,6 +269,35 @@
         self.push_scope(klass,
                 AccessSpecifier.PRIVATE if class_key is ClassKey.CLASS else AccessSpecifier.PUBLIC)
 
+    def disambiguate_token(self, value, keywords):
+        """ Disambiguate a token by inspecting its value. """
+
+        # This seems to be needed because it's not possible to get lex() to do
+        # it.  The problem seems to be that you can't control the order in
+        # which lex() applies its regular expressions despite what the
+        # documentation says.  It seems that tokens that are specific to a
+        # state are always added after everything else no matter where they
+        # appear in the file.
+
+        if value in keywords:
+            token_type = value
+        elif value == '...':
+            token_type = 'ELLIPSIS'
+        elif value.startswith('.'):
+            token_type = 'FILE_PATH'
+        else:
+            for marker in ('/', '..', '-'):
+                if marker in value:
+                    token_type = 'FILE_PATH'
+                    break
+            else:
+                if '.' in value:
+                    token_type = 'DOTTED_NAME'
+                else:
+                    token_type = 'NAME'
+
+        return token_type
+
     def find_class(self, p, symbol, iface_file_type, fq_cpp_name):
         """ Return a WrappedClass object for a C++ name creating it if
         necessary.
@@ -278,7 +309,7 @@
     def find_exception(self, p, symbol, fq_cpp_name, raise_code=None):
         """ Find an exception, optionally creating a new one. """
 
-        fq_cpp_name = normalised_scoped_name(fq_cpp_name, self.scope)
+        # Note that we don't normalise the name.
         iface_file = self.find_iface_file(p, symbol, fq_cpp_name,
                 IfaceFileType.EXCEPTION)
 
@@ -329,7 +360,7 @@
             if self.scope_access_specifier is AccessSpecifier.PROTECTED and not self._protected_is_public:
                 scope.is_protected = True
 
-                if iface_file_type is IFaceFileType.CLASS:
+                if iface_file_type is IfaceFileType.CLASS:
                     scope.needs_shadow = True
 
             # Header code from outer scopes is also included.
@@ -669,7 +700,7 @@
         overload.virtual_call_code = virtual_call_code
         overload.virtual_catcher_code = virtual_catcher_code
 
-        overload.source_file = self.sip_file
+        overload.source_file = self._sip_file
         overload.source_line = p.lineno(symbol)
 
         # See if the function is a non-lazy method.  These are methods that
@@ -1155,7 +1186,7 @@
         things so that it appears like the former.
         """
 
-        sip_file, input, lineno, lexpos, module_state = self._file_stack.pop()
+        sip_file, raw_sip_file, input, lineno, lexpos, module_state = self._file_stack.pop()
 
         if module_state is None:
             module_state = self.module_state
@@ -1164,10 +1195,10 @@
             # ModuleState as if it had been %Imported.
             module = Module()
             self.spec.modules.append(module)
-            self.module_state = ModuleState(module, self.sip_file, self)
+            self.module_state = ModuleState(module, self._sip_file, self)
 
         self._file_stack.append(
-                (sip_file, input, lineno, lexpos, module_state))
+                (sip_file, raw_sip_file, input, lineno, lexpos, module_state))
 
     def evaluate_feature_or_platform(self, p, symbol, name=None,
             inverted=False):
@@ -1438,7 +1469,7 @@
         """ Record an error caused by a token. """
 
         self._errors.append(
-                self._format_error(self.sip_file, t.lineno, t.lexpos, text))
+                self._format_error(self._sip_file, t.lineno, t.lexpos, text))
 
     def parse(self, sip_file):
         """ Parse a .sip file and return a Specification object and a list of
@@ -1446,13 +1477,18 @@
         UserException is raised if there was an error.
         """
 
+        # Note that the retention of the 'raw' filename, ie. that which was
+        # specified by the user is only done so that generated '#line'
+        # directives match those from older versions of SIP.
+
+        raw_sip_file = sip_file
         sip_file = os.path.abspath(sip_file)
 
         self.module_state = ModuleState(self.spec.modules[0], sip_file, self)
 
         try:
-            self._parser.parse(self._read(sip_file), lexer=self._lexer,
-                    tracking=True)
+            self._parser.parse(self._read(sip_file, raw_sip_file),
+                    lexer=self._lexer, tracking=True)
         except UnexpectedEOF:
             self._unexpected_eof_error()
 
@@ -1480,7 +1516,7 @@
         """ Record an error caused by a symbol in a production. """
 
         self._errors.append(
-                self._format_error(self.sip_file, p.lineno(symbol),
+                self._format_error(self._sip_file, p.lineno(symbol),
                         p.lexpos(symbol), text))
 
     def pop_file(self):
@@ -1488,25 +1524,31 @@
         An IndexError is raised if the stack is empty.
         """
 
-        # Restore the state of the previous .sip file.
-        sip_file, self._input, self._lexer.lineno, lexpos, old_module_state = self._file_stack.pop()
+        # Restore the state of the previous .sip file.  Note that we don't
+        # restore the module state until after the EOF has been seen.
+        self._sip_file, self.raw_sip_file, self._input, self._lexer.lineno, lexpos, self._pending_module_state = self._file_stack.pop()
+
         self._lexer.input(self._input)
         self._lexer.lexpos = lexpos
 
-        if old_module_state is not None:
-            self._handle_eom()
-
-            # Inherit any default encoding.
-            if old_module_state.default_encoding is None:
-                old_module_state.default_encoding = self.module_state.default_encoding
-
-            # Inherit any call_super_init.
-            if old_module_state.call_super_init is None:
-                old_module_state.call_super_init = self.module_state.call_super_init
-
-            self.module_state = old_module_state
-
-        self.sip_file = sip_file
+    def pop_module_state(self):
+        """ Restore the current module state. """
+
+        if self._pending_module_state is None:
+            return
+
+        self._handle_eom()
+
+        # Inherit any default encoding.
+        if self._pending_module_state.default_encoding is None:
+            self._pending_module_state.default_encoding = self.module_state.default_encoding
+
+        # Inherit any call_super_init.
+        if self._pending_module_state.call_super_init is None:
+            self._pending_module_state.call_super_init = self.module_state.call_super_init
+
+        self.module_state = self._pending_module_state
+        self._pending_module_state = None
 
     def pop_scope(self):
         """ Pop the current scope. """
@@ -1523,6 +1565,8 @@
         if sip_file is None:
             sip_file = p[symbol]
 
+        raw_sip_file = sip_file
+
         # Make the name platform-native.
         sip_file = sip_file.replace('/', os.sep)
 
@@ -1535,7 +1579,7 @@
             # If the name is relative then check the directory containing the
             # current file and any include directories.
             if not os.path.isabs(sip_file):
-                inc_dirs = [os.path.dirname(self.sip_file)]
+                inc_dirs = [os.path.dirname(self._sip_file)]
                 inc_dirs.extend(self._include_dirs)
 
                 for inc_dir in inc_dirs:
@@ -1547,11 +1591,12 @@
             if found is None:
                 if not optional:
                     self.parser_error(p, symbol,
-                            "'{0}' could not be found".format(sip_file))
+                            "'{0}' could not be found".format(raw_sip_file))
 
                 return
 
-            sip_file = found
+            # For historic reasons we keep the absolute name for the raw name.
+            raw_sip_file = sip_file = found
 
         sip_file = os.path.abspath(sip_file)
 
@@ -1605,12 +1650,13 @@
 
         # Save the state of the current .sip file.
         self._file_stack.append(
-                (self.sip_file, self._input, self._lexer.lineno,
-                        self._lexer.lexpos, old_module_state))
+                (self._sip_file, self.raw_sip_file, self._input,
+                        self._lexer.lineno, self._lexer.lexpos,
+                        old_module_state))
 
         # Make the new one current and give it's content to the lexer.
         self._lexer.lineno = 1
-        self._lexer.input(self._read(sip_file))
+        self._lexer.input(self._read(sip_file, raw_sip_file))
 
     def push_scope(self, scope, access_specifier=None):
         """ Push a new scope. """
@@ -1767,7 +1813,7 @@
         """ Validate a completed variable. """
 
         if variable.type.type is ArgumentType.CAPSULE:
-            pm.parser_error(p, symbol,
+            self.parser_error(p, symbol,
                     "capsule variables are not yet supported")
 
         access_specifier = self.scope_access_specifier
@@ -2081,12 +2127,12 @@
         if module.fq_py_name is None:
             self._errors.append(
                     "{0}: %Module has not been specified".format(
-                            self.sip_file))
+                            self._sip_file))
 
         # call_super_init defaults to False if it wasn't specified.
         module.call_super_init = bool(module_state.call_super_init)
 
-    def _read(self, sip_file):
+    def _read(self, sip_file, raw_sip_file):
         """ Return the contents of the current .sip file. """
 
         try:
@@ -2100,7 +2146,8 @@
                             sip_file, self._encoding),
                     detail=str(e))
 
-        self.sip_file = sip_file
+        self.raw_sip_file = raw_sip_file
+        self._sip_file = sip_file
         self._all_sip_files.append(sip_file)
 
         if self.in_main_module:
@@ -2118,7 +2165,7 @@
         """ Record an error caused by an unexpected EOF. """
 
         self._errors.append(
-                "{0}: unexpected end of file".format(self.sip_file))
+                "{0}: unexpected end of file".format(self._sip_file))
 
 
 class ModuleState:
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/parsetab.py
--- a/sipbuild/generator/parser/parsetab.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/parsetab.py	Fri May 13 14:19:10 2022 +0100
@@ -6,9 +6,9 @@
 
 _lr_method = 'LALR'
 
-_lr_signature = "specificationleftSCOPEAccessCode AutoPyName BIGetBufferCode BIGetCharBufferCode BIGetReadBufferCode BIGetSegCountCode BIGetWriteBufferCode BIReleaseBufferCode CODE_BLOCK CompositeModule ConvertFromTypeCode ConvertToSubClassCode ConvertToTypeCode Copying DefaultDocstringFormat DefaultDocstringSignature DefaultEncoding DefaultMetatype DefaultSupertype Docstring ELLIPSIS EOF EOL End Exception ExportedHeaderCode ExportedTypeHintCode Extract False Feature FinalisationCode GCClearCode GCTraverseCode GetCode HideNamespace If Import Include InitialisationCode InstanceCode LOGICAL_OR License MappedType MethodCode Module ModuleCode ModuleHeaderCode NAME NULL NUMBER PickleCode Platforms Plugin PostInitialisationCode PreInitialisationCode PreMethodCode Property Py_hash_t Py_ssize_t QUOTED_CHAR Q_SIGNAL Q_SIGNALS Q_SLOT Q_SLOTS REAL RaiseCode ReleaseCode SCOPE SIP_PYBUFFER SIP_PYCALLABLE SIP_PYDICT SIP_PYENUM SIP_PYLIST SIP_PYOBJECT SIP_PYSLICE SIP_PYTUPLE SIP_PYTYPE SIP_SSIZE_T STRING SetCode Timeline True TypeCode TypeHeaderCode TypeHintCode UnitCode UnitPostIncludeCode VirtualCallCode VirtualCatcherCode VirtualErrorHandler all_raise_py_exception bool call_super_init char class const default_VirtualErrorHandler double enum explicit false final float format get id int keyword_arguments language licensee long name namespace noexcept operator optional order private protected public py_ssize_t_clean remove_leading set short signals signature signed size_t slots static struct template throw timestamp true type typedef union unsigned use_argument_names use_limited_api virtual void wchar_tspecification : statement\n        | specification statementstatement : EOF\n        | namespace_statement\n        | composite_module\n        | copying\n        | defdocstringfmt\n        | defdocstringsig\n        | defencoding\n        | defmetatype\n        | defsupertype\n        | exported_header_code\n        | exported_type_hint_code\n        | extract\n        | feature\n        | hidden_ns\n        | import\n        | include\n        | init_code\n        | license\n        | mapped_type\n        | mapped_type_template\n        | module\n        | module_code\n        | module_header_code\n        | platforms\n        | plugin\n        | preinit_code\n        | postinit_code\n        | timeline\n        | type_hint_code\n        | unit_code\n        | unit_postinclude_code\n        | virtual_error_handlernamespace_statement : if_start\n        | if_end\n        | class_decl\n        | class_template\n        | enum_decl\n        | exception\n        | function\n        | namespace_decl\n        | struct_decl\n        | typedef_decl\n        | union_decl\n        | variable\n        | type_header_codebegin_args :end_args :need_eol :autopyname : AutoPyName begin_args '(' remove_leading '=' STRING end_args ')'get_buffer_code : BIGetBufferCode CODE_BLOCKrelease_buffer_code : BIReleaseBufferCode CODE_BLOCKcomposite_module : CompositeModule dotted_name c_module_body\n        | CompositeModule begin_args '(' c_module_args end_args ')' c_module_bodyc_module_args : c_module_arg\n        | c_module_args ',' c_module_argc_module_arg : name '=' dotted_namec_module_body : '{' c_module_body_directives '}' ';'\n        | emptyc_module_body_directives : c_module_body_directive\n        | c_module_body_directives c_module_body_directivec_module_body_directive : if_start\n        | if_end\n        | docstringconvert_from_type_code : ConvertFromTypeCode CODE_BLOCKconvert_to_subclass_code : ConvertToSubClassCode CODE_BLOCKconvert_to_type_code : ConvertToTypeCode CODE_BLOCKcopying : Copying CODE_BLOCKdefdocstringfmt : DefaultDocstringFormat STRING\n        | DefaultDocstringFormat begin_args '(' name '=' STRING end_args ')'defdocstringsig : DefaultDocstringSignature STRING\n        | DefaultDocstringSignature begin_args '(' name '=' STRING end_args ')'defencoding : DefaultEncoding STRING\n        |  DefaultEncoding begin_args '(' name '=' STRING end_args ')'defmetatype : DefaultMetatype dotted_name\n        | DefaultMetatype begin_args '(' name '=' dotted_name end_args ')'defsupertype : DefaultSupertype dotted_name\n        | DefaultSupertype begin_args '(' name '=' dotted_name end_args ')'docstring : Docstring docstring_args CODE_BLOCKdocstring_args : empty\n    | STRING\n    | begin_args '(' docstring_arg_list end_args ')'docstring_arg_list : docstring_arg\n        | docstring_arg_list ',' docstring_argdocstring_arg : format '=' STRING\n    | signature '=' STRINGexported_header_code : ExportedHeaderCode CODE_BLOCKexported_type_hint_code : ExportedTypeHintCode CODE_BLOCKextract : Extract NAME CODE_BLOCK\n        | Extract begin_args '(' extract_args end_args ')' CODE_BLOCKextract_args : extract_arg\n        | extract_args ',' extract_argextract_arg : id '=' NAME\n        | order '=' NUMBERfeature : Feature NAME\n        | Feature begin_args '(' name '=' NAME end_args ')'finalisation_code : FinalisationCode CODE_BLOCKgc_clear_code : GCClearCode CODE_BLOCKgc_traverse_code : GCTraverseCode CODE_BLOCKhidden_ns : HideNamespace scoped_name\n        | HideNamespace begin_args '(' hidden_ns_args end_args ')'hidden_ns_args : hidden_ns_arg\n        | hidden_ns_args ',' hidden_ns_arghidden_ns_arg : name '=' scoped_nameif_start : If '(' qualifiers ')'if_end : Endimport : Import need_eol import_simple EOL\n        | Import begin_args '(' import_compound end_args ')'import_simple : file_pathimport_compound : import_argsimport_args : import_arg\n        | import_args ',' import_argimport_arg : name '=' file_pathinclude : Include need_eol include_simple EOL\n        | Include begin_args '(' include_compound end_args ')'include_simple : file_pathinclude_compound : include_argsinclude_args : include_arg\n        | include_args ',' include_arginclude_arg : name '=' file_path\n        | optional '=' bool_valueinit_code : InitialisationCode CODE_BLOCKinstance_code : InstanceCode CODE_BLOCKlicense : License STRING\n        | License begin_args '(' license_args end_args ')'license_args : license_arg\n        | license_args ',' license_arglicense_arg : licensee '=' STRING\n        | signature '=' STRING\n        | timestamp '=' STRING\n        | type '=' STRINGmapped_type : mapped_type_head '{' mapped_type_body '}' ';'mapped_type_template : mapped_type_template_head '{' mapped_type_body '}' ';'mapped_type_head : MappedType base_type opt_annosmapped_type_template_head : template_decl MappedType base_type opt_annosmapped_type_body : mapped_type_line\n        | mapped_type_body mapped_type_linemapped_type_line : if_start\n        | if_end\n        | convert_from_type_code\n        | convert_to_type_code\n        | enum_decl\n        | instance_code\n        | mapped_type_function\n        | release_code\n        | type_code\n        | type_header_codemapped_type_function : static cpp_type NAME '(' opt_arg_list ')' opt_const opt_exceptions opt_annos opt_signature ';' opt_docstring premethod_code method_codemodule_header_code : ModuleHeaderCode CODE_BLOCKmodule : Module dotted_name module_body\n        | Module begin_args '(' module_args end_args ')' module_bodymodule_args : module_arg\n        | module_args ',' module_argmodule_arg : all_raise_py_exception '=' bool_value\n        | call_super_init '=' bool_value\n        | default_VirtualErrorHandler '=' NAME\n        | keyword_arguments '=' STRING\n        | language '=' STRING\n        | name '=' dotted_name\n        | py_ssize_t_clean '=' bool_value\n        | use_argument_names '=' bool_value\n        | use_limited_api '=' bool_valuemodule_body : '{' module_body_directives '}' ';'\n        | emptymodule_body_directives : module_body_directive\n        | module_body_directives module_body_directivemodule_body_directive : if_start\n        | if_end\n        | autopyname\n        | docstringmodule_code : ModuleCode CODE_BLOCKpickle_code : PickleCode CODE_BLOCKplatforms : Platforms '{' qualifier_list '}'plugin : Plugin NAMEpostinit_code : PostInitialisationCode CODE_BLOCKpreinit_code : PreInitialisationCode CODE_BLOCKproperty : Property '(' property_args ')' '{' property_body '}' ';'property_args : property_arg\n        | property_args ',' property_argproperty_arg : get '=' NAME\n        | name '=' NAME\n        | set '=' NAMEproperty_body : property_line\n        | property_body property_lineproperty_line : if_start\n        | if_end\n        | docstringrelease_code : ReleaseCode CODE_BLOCKtimeline : Timeline '{' qualifier_list '}'type_code : TypeCode CODE_BLOCKtype_header_code : TypeHeaderCode CODE_BLOCKtype_hint_code : TypeHintCode CODE_BLOCKunit_code : UnitCode CODE_BLOCKunit_postinclude_code : UnitPostIncludeCode CODE_BLOCKvirtual_error_handler : VirtualErrorHandler NAME CODE_BLOCK\n        | VirtualErrorHandler begin_args '(' veh_args end_args ')' CODE_BLOCKveh_args : veh_arg\n        | veh_args ',' veh_argveh_arg : name '=' NAMEcpp_type : const base_type derefs opt_ref\n        | base_type derefs opt_refbase_type : pod_type\n        | scoped_name\n        | scoped_name '<' cpp_types '>'\n        | struct scoped_name\n        | union scoped_namepod_type : unsigned long long\n        | signed char\n        | long long\n        | unsigned char\n        | unsigned short\n        | unsigned int\n        | unsigned long\n        | unsigned\n        | short\n        | int\n        | long\n        | float\n        | double\n        | bool\n        | char\n        | wchar_t\n        | void\n        | SIP_PYOBJECT\n        | SIP_PYTUPLE\n        | SIP_PYLIST\n        | SIP_PYDICT\n        | SIP_PYCALLABLE\n        | SIP_PYSLICE\n        | SIP_PYTYPE\n        | SIP_PYBUFFER\n        | SIP_PYENUM\n        | SIP_SSIZE_T\n        | Py_hash_t\n        | Py_ssize_t\n        | size_t\n        | ELLIPSIScpp_types : cpp_type\n        | cpp_types ',' cpp_typederefs : empty\n        | derefs '*'\n        | derefs '*' constopt_ref : '&'\n        | emptyclass_template : template_decl class_declclass_decl : class class_head opt_class_body ';'class_head : scoped_name superclasses opt_annosstruct_decl : struct struct_head opt_class_body ';'struct_head : scoped_name superclasses opt_annossuperclasses : ':' superclass_list\n        | emptysuperclass_list : superclass\n        | superclass_list ',' superclasssuperclass : class_access scoped_nameclass_access : empty\n        | public\n        | protected\n        | privateopt_class_body : '{' opt_docstring class_body '}'\n        | emptyclass_body : class_line\n        | class_body class_lineclass_line : if_start\n        | if_end\n        | class_decl\n        | ctor\n        | dtor\n        | enum_decl\n        | exception\n        | typedef_decl\n        | method_variable\n        | namespace_decl\n        | struct_decl\n        | union_decl\n        | public_specifier\n        | protected_specifier\n        | private_specifier\n        | signals_specifier\n        | convert_from_type_code\n        | convert_to_subclass_code\n        | convert_to_type_code\n        | finalisation_code\n        | gc_clear_code\n        | gc_traverse_code\n        | get_buffer_code\n        | instance_code\n        | pickle_code\n        | property\n        | release_buffer_code\n        | type_code\n        | type_header_code\n        | type_hint_code\n        | BIGetReadBufferCode CODE_BLOCK\n        | BIGetWriteBufferCode CODE_BLOCK\n        | BIGetSegCountCode CODE_BLOCK\n        | BIGetCharBufferCode CODE_BLOCKctor : explicit ctor_decl\n        | ctor_declctor_decl : NAME '(' opt_arg_list ')' opt_exceptions opt_annos opt_ctor_signature ';' opt_docstring premethod_code method_codeopt_ctor_signature : '[' '(' opt_arg_list ')' ']'\n        | emptydtor : opt_virtual '~' NAME '(' ')' opt_exceptions opt_abstract opt_annos ';' premethod_code method_code virtual_catcher_codemethod_variable : Q_SIGNAL simple_method_variable\n        | Q_SLOT simple_method_variable\n        | simple_method_variablesimple_method_variable : virtual function\n        | static plain_method_variable\n        | plain_method_variableplain_method_variable : function\n        | variablepublic_specifier : public opt_slots ':'protected_specifier : protected opt_slots ':'private_specifier : private opt_slots ':'signals_specifier : signals ':'\n        | Q_SIGNALS ':'opt_slots : slots\n        | Q_SLOTS\n        | emptyenum_decl : enum opt_enum_key opt_name opt_annos '{' opt_enum_body '}' ';'opt_enum_key : class\n        | struct\n        | union\n        | emptyopt_enum_body : enum_body\n        | emptyenum_body : enum_line\n        | enum_body enum_lineenum_line : if_start\n        | if_end\n        | NAME opt_enum_assign opt_annos opt_commaopt_enum_assign : '=' value\n        | emptyopt_comma : empty\n        | ','exception : Exception scoped_name opt_base_exception opt_annos '{' exception_body '}' ';'opt_base_exception : '(' scoped_name ')'\n        | emptyexception_body : exception_line\n        | exception_body exception_lineexception_line : if_start\n        | if_end\n        | RaiseCode CODE_BLOCK\n        | TypeHeaderCode CODE_BLOCKfunction : function_decl\n        | assignment_operator_decl\n        | operator_decl\n        | operator_cast_declfunction_decl : cpp_type NAME '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' opt_docstring premethod_code method_code virtual_catcher_code virtual_call_codeassignment_operator_decl : cpp_type operator '=' '(' cpp_type ')' ';'operator_decl : cpp_type operator operator_name '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' premethod_code method_code virtual_catcher_code virtual_call_codeoperator_cast_decl : operator cpp_type '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' premethod_code method_code virtual_catcher_code virtual_call_codeopt_arg_list : arg_list\n        | emptyarg_list : arg_value\n        | arg_list ',' arg_valuearg_value : arg_type opt_assignarg_type : cpp_type opt_name opt_annosopt_assign : '=' expr\n        | emptyexpr : value\n        | expr binop valuevalue : opt_cast opt_unop simple_valuesimple_value : empty_value\n        | function_call_value\n        | null_value\n        | number_value\n        | quoted_char_value\n        | real_value\n        | scoped_name_value\n        | string_valueempty_value : '{' '}'function_call_value : base_type '(' opt_expr_list ')'null_value : NULLnumber_value : NUMBER\n        | bool_valuequoted_char_value : QUOTED_CHARreal_value : REALscoped_name_value : scoped_namestring_value : STRINGopt_expr_list : expr_list\n        | emptyexpr_list : expr\n        | expr_list ',' expropt_cast : '(' scoped_name ')'\n        | emptybinop : '-'\n        | '+'\n        | '*'\n        | '/'\n        | '&'\n        | '|'opt_unop : empty\n        | '!'\n        | '~'\n        | '-'\n        | '+'\n        | '*'\n        | '&'opt_exceptions : empty\n        | noexcept\n        | throw '(' opt_exception_list ')'opt_exception_list : exception_list\n        | emptyexception_list : scoped_name\n        | exception_list ',' scoped_nameopt_abstract : '=' NUMBER\n        | emptyopt_signature : '[' cpp_type '(' opt_arg_list ')' ']'\n        | emptyoperator_name : '+'\n        | '-'\n        | '*'\n        | '/'\n        | '%'\n        | '&'\n        | '|'\n        | '^'\n        | '<' '<'\n        | '>' '>'\n        | '+' '='\n        | '-' '='\n        | '*' '='\n        | '/' '='\n        | '%' '='\n        | '&' '='\n        | '|' '='\n        | '^' '='\n        | '<' '<' '='\n        | '>' '>' '='\n        | '~'\n        | '(' ')'\n        | '[' ']'\n        | '<'\n        | '<' '='\n        | '=' '='\n        | '!' '='\n        | '>'\n        | '>' '='method_code : MethodCode CODE_BLOCK\n        | emptypremethod_code : PreMethodCode CODE_BLOCK\n        | emptyvirtual_call_code : VirtualCallCode CODE_BLOCK\n        | emptyvirtual_catcher_code : VirtualCatcherCode CODE_BLOCK\n        | emptynamespace_decl : namespace namespace_head opt_namespace_body ';'namespace_head : scoped_name opt_annosopt_namespace_body : '{' namespace_body '}'\n        | emptynamespace_body : namespace_statement\n        | namespace_body namespace_statementtypedef_decl : typedef cpp_type NAME opt_annos ';' opt_docstring\n        | typedef cpp_type '(' '*' NAME ')' '(' cpp_types ')' opt_annos ';' opt_docstringunion_decl : union union_head opt_class_body ';'union_head : scoped_name opt_annosvariable : cpp_type NAME opt_annos variable_body ';'variable_body : '{' variable_body_directives '}'\n        | emptyvariable_body_directives : variable_body_directive\n        | variable_body_directives variable_body_directivevariable_body_directive : if_start\n        | if_end\n        | AccessCode CODE_BLOCK\n        | GetCode CODE_BLOCK\n        | SetCode CODE_BLOCKopt_annos : '/' annotations '/'\n        | emptyannotations : annotation\n        | annotations ',' annotationannotation : NAME\n        | NAME '=' annotation_valueannotation_value : dotted_name\n        | STRING\n        | NUMBERscoped_name : SCOPE relative_scoped_name\n        | relative_scoped_namerelative_scoped_name : NAME\n        | relative_scoped_name SCOPE NAMEtemplate_decl : template '<' cpp_types '>'bool_value : true\n        | True\n        | false\n        | Falsedotted_name : NAME\n        | dotted_name '.' NAMEempty :file_name : dotted_name\n        | file_name '-' dotted_namefile_path : file_name\n        | file_path '/' file_nameopt_const : const\n        | emptyopt_docstring : docstring\n        | emptyopt_final : final\n        | emptyopt_name : NAME\n        | emptyopt_virtual : virtual\n        | emptyored_qualifiers : NAME\n        | '!' NAME\n        | ored_qualifiers LOGICAL_OR NAME\n        | ored_qualifiers LOGICAL_OR '!' NAMEqualifier_list : NAME\n        | qualifier_list NAMEqualifiers : ored_qualifiers\n        | opt_name '-' opt_name"
+_lr_signature = "specificationleftSCOPEAccessCode AutoPyName BIGetBufferCode BIGetCharBufferCode BIGetReadBufferCode BIGetSegCountCode BIGetWriteBufferCode BIReleaseBufferCode CODE_BLOCK CompositeModule ConvertFromTypeCode ConvertToSubClassCode ConvertToTypeCode Copying DOTTED_NAME DefaultDocstringFormat DefaultDocstringSignature DefaultEncoding DefaultMetatype DefaultSupertype Docstring ELLIPSIS EOF EOL End Exception ExportedHeaderCode ExportedTypeHintCode Extract FILE_PATH False Feature FinalisationCode GCClearCode GCTraverseCode GetCode HideNamespace If Import Include InitialisationCode InstanceCode LOGICAL_OR License MappedType MethodCode Module ModuleCode ModuleHeaderCode NAME NULL NUMBER PickleCode Platforms Plugin PostInitialisationCode PreInitialisationCode PreMethodCode Property Py_hash_t Py_ssize_t QUOTED_CHAR Q_SIGNAL Q_SIGNALS Q_SLOT Q_SLOTS REAL RaiseCode ReleaseCode SCOPE SIP_PYBUFFER SIP_PYCALLABLE SIP_PYDICT SIP_PYENUM SIP_PYLIST SIP_PYOBJECT SIP_PYSLICE SIP_PYTUPLE SIP_PYTYPE SIP_SSIZE_T STRING SetCode Timeline True TypeCode TypeHeaderCode TypeHintCode UnitCode UnitPostIncludeCode VirtualCallCode VirtualCatcherCode VirtualErrorHandler all_raise_py_exception bool call_super_init char class const default_VirtualErrorHandler double enum explicit false final float format get id int keyword_arguments language licensee long name namespace noexcept operator optional order private protected public py_ssize_t_clean remove_leading set short signals signature signed size_t slots static struct template throw timestamp true type typedef union unsigned use_argument_names use_limited_api virtual void wchar_tspecification : statement\n        | specification statementstatement : eof\n        | namespace_statement\n        | composite_module\n        | copying\n        | defdocstringfmt\n        | defdocstringsig\n        | defencoding\n        | defmetatype\n        | defsupertype\n        | exported_header_code\n        | exported_type_hint_code\n        | extract\n        | feature\n        | hidden_ns\n        | import\n        | include\n        | init_code\n        | license\n        | mapped_type\n        | mapped_type_template\n        | module\n        | module_code\n        | module_header_code\n        | platforms\n        | plugin\n        | preinit_code\n        | postinit_code\n        | timeline\n        | type_hint_code\n        | unit_code\n        | unit_postinclude_code\n        | virtual_error_handlernamespace_statement : if_start\n        | if_end\n        | class_decl\n        | class_template\n        | enum_decl\n        | exception\n        | function\n        | namespace_decl\n        | struct_decl\n        | typedef_decl\n        | union_decl\n        | variable\n        | type_header_codeeof : EOFbegin_args :end_args :need_eol :autopyname : AutoPyName begin_args '(' remove_leading '=' STRING end_args ')'get_buffer_code : BIGetBufferCode CODE_BLOCKrelease_buffer_code : BIReleaseBufferCode CODE_BLOCKcomposite_module : CompositeModule dotted_name c_module_body\n        | CompositeModule begin_args '(' c_module_args end_args ')' c_module_bodyc_module_args : c_module_arg\n        | c_module_args ',' c_module_argc_module_arg : name '=' dotted_namec_module_body : '{' c_module_body_directives '}' ';'\n        | emptyc_module_body_directives : c_module_body_directive\n        | c_module_body_directives c_module_body_directivec_module_body_directive : if_start\n        | if_end\n        | docstringconvert_from_type_code : ConvertFromTypeCode CODE_BLOCKconvert_to_subclass_code : ConvertToSubClassCode CODE_BLOCKconvert_to_type_code : ConvertToTypeCode CODE_BLOCKcopying : Copying CODE_BLOCKdefdocstringfmt : DefaultDocstringFormat STRING\n        | DefaultDocstringFormat begin_args '(' name '=' STRING end_args ')'defdocstringsig : DefaultDocstringSignature STRING\n        | DefaultDocstringSignature begin_args '(' name '=' STRING end_args ')'defencoding : DefaultEncoding STRING\n        |  DefaultEncoding begin_args '(' name '=' STRING end_args ')'defmetatype : DefaultMetatype dotted_name\n        | DefaultMetatype begin_args '(' name '=' dotted_name end_args ')'defsupertype : DefaultSupertype dotted_name\n        | DefaultSupertype begin_args '(' name '=' dotted_name end_args ')'docstring : Docstring docstring_args CODE_BLOCKdocstring_args : empty\n    | STRING\n    | begin_args '(' docstring_arg_list end_args ')'docstring_arg_list : docstring_arg\n        | docstring_arg_list ',' docstring_argdocstring_arg : format '=' STRING\n    | signature '=' STRINGexported_header_code : ExportedHeaderCode CODE_BLOCKexported_type_hint_code : ExportedTypeHintCode CODE_BLOCKextract : Extract NAME CODE_BLOCK\n        | Extract begin_args '(' extract_args end_args ')' CODE_BLOCKextract_args : extract_arg\n        | extract_args ',' extract_argextract_arg : id '=' NAME\n        | order '=' NUMBERfeature : Feature NAME\n        | Feature begin_args '(' name '=' NAME end_args ')'finalisation_code : FinalisationCode CODE_BLOCKgc_clear_code : GCClearCode CODE_BLOCKgc_traverse_code : GCTraverseCode CODE_BLOCKhidden_ns : HideNamespace scoped_name\n        | HideNamespace begin_args '(' hidden_ns_args end_args ')'hidden_ns_args : hidden_ns_arg\n        | hidden_ns_args ',' hidden_ns_arghidden_ns_arg : name '=' scoped_nameif_start : If '(' qualifiers ')'if_end : Endimport : Import need_eol import_simple EOL\n        | Import begin_args '(' import_compound end_args ')'import_simple : file_pathimport_compound : import_argsimport_args : import_arg\n        | import_args ',' import_argimport_arg : name '=' file_pathinclude : Include need_eol include_simple EOL\n        | Include begin_args '(' include_compound end_args ')'include_simple : file_pathinclude_compound : include_argsinclude_args : include_arg\n        | include_args ',' include_arginclude_arg : name '=' file_path\n        | optional '=' bool_valueinit_code : InitialisationCode CODE_BLOCKinstance_code : InstanceCode CODE_BLOCKlicense : License STRING\n        | License begin_args '(' license_args end_args ')'license_args : license_arg\n        | license_args ',' license_arglicense_arg : licensee '=' STRING\n        | signature '=' STRING\n        | timestamp '=' STRING\n        | type '=' STRINGmapped_type : mapped_type_head '{' mapped_type_body '}' ';'mapped_type_template : mapped_type_template_head '{' mapped_type_body '}' ';'mapped_type_head : MappedType base_type opt_annosmapped_type_template_head : template_decl MappedType base_type opt_annosmapped_type_body : mapped_type_line\n        | mapped_type_body mapped_type_linemapped_type_line : if_start\n        | if_end\n        | convert_from_type_code\n        | convert_to_type_code\n        | enum_decl\n        | instance_code\n        | mapped_type_function\n        | release_code\n        | type_code\n        | type_header_codemapped_type_function : static cpp_type NAME '(' opt_arg_list ')' opt_const opt_exceptions opt_annos opt_signature ';' opt_docstring premethod_code method_codemodule_header_code : ModuleHeaderCode CODE_BLOCKmodule : Module dotted_name module_body\n        | Module begin_args '(' module_args end_args ')' module_bodymodule_args : module_arg\n        | module_args ',' module_argmodule_arg : all_raise_py_exception '=' bool_value\n        | call_super_init '=' bool_value\n        | default_VirtualErrorHandler '=' NAME\n        | keyword_arguments '=' STRING\n        | language '=' STRING\n        | name '=' dotted_name\n        | py_ssize_t_clean '=' bool_value\n        | use_argument_names '=' bool_value\n        | use_limited_api '=' bool_valuemodule_body : '{' module_body_directives '}' ';'\n        | emptymodule_body_directives : module_body_directive\n        | module_body_directives module_body_directivemodule_body_directive : if_start\n        | if_end\n        | autopyname\n        | docstringmodule_code : ModuleCode CODE_BLOCKpickle_code : PickleCode CODE_BLOCKplatforms : Platforms '{' qualifier_list '}'plugin : Plugin NAMEpostinit_code : PostInitialisationCode CODE_BLOCKpreinit_code : PreInitialisationCode CODE_BLOCKproperty : Property begin_args '(' property_args end_args ')' opt_property_bodyproperty_args : property_arg\n        | property_args ',' property_argproperty_arg : get '=' NAME\n        | name '=' NAME\n        | set '=' NAMEopt_property_body : empty\n        | '{' property_body '}' ';'property_body : property_line\n        | property_body property_lineproperty_line : if_start\n        | if_end\n        | docstringrelease_code : ReleaseCode CODE_BLOCKtimeline : Timeline '{' qualifier_list '}'type_code : TypeCode CODE_BLOCKtype_header_code : TypeHeaderCode CODE_BLOCKtype_hint_code : TypeHintCode CODE_BLOCKunit_code : UnitCode CODE_BLOCKunit_postinclude_code : UnitPostIncludeCode CODE_BLOCKvirtual_error_handler : VirtualErrorHandler NAME CODE_BLOCK\n        | VirtualErrorHandler begin_args '(' veh_args end_args ')' CODE_BLOCKveh_args : veh_arg\n        | veh_args ',' veh_argveh_arg : name '=' NAMEcpp_type : const base_type derefs opt_ref\n        | base_type derefs opt_refbase_type : pod_type\n        | scoped_name\n        | scoped_name '<' cpp_types '>'\n        | struct scoped_name\n        | union scoped_namepod_type : unsigned long long\n        | signed char\n        | long long\n        | unsigned char\n        | unsigned short\n        | unsigned int\n        | unsigned long\n        | unsigned\n        | short\n        | int\n        | long\n        | float\n        | double\n        | bool\n        | char\n        | wchar_t\n        | void\n        | SIP_PYOBJECT\n        | SIP_PYTUPLE\n        | SIP_PYLIST\n        | SIP_PYDICT\n        | SIP_PYCALLABLE\n        | SIP_PYSLICE\n        | SIP_PYTYPE\n        | SIP_PYBUFFER\n        | SIP_PYENUM\n        | SIP_SSIZE_T\n        | Py_hash_t\n        | Py_ssize_t\n        | size_t\n        | ELLIPSIScpp_types : cpp_type\n        | cpp_types ',' cpp_typederefs : empty\n        | derefs '*'\n        | derefs '*' constopt_ref : '&'\n        | emptyclass_template : template_decl class_declclass_docstring : docstringclass_decl : class class_head opt_class_body ';'class_head : scoped_name superclasses opt_annosstruct_decl : struct struct_head opt_class_body ';'struct_head : scoped_name superclasses opt_annossuperclasses : ':' superclass_list\n        | emptysuperclass_list : superclass\n        | superclass_list ',' superclasssuperclass : class_access scoped_nameclass_access : empty\n        | public\n        | protected\n        | privateopt_class_body : '{' class_body '}'\n        | emptyclass_body : class_line\n        | class_body class_lineclass_line : if_start\n        | if_end\n        | class_decl\n        | class_docstring\n        | class_template\n        | ctor\n        | dtor\n        | enum_decl\n        | exception\n        | typedef_decl\n        | method_variable\n        | namespace_decl\n        | struct_decl\n        | union_decl\n        | public_specifier\n        | protected_specifier\n        | private_specifier\n        | signals_specifier\n        | convert_from_type_code\n        | convert_to_subclass_code\n        | convert_to_type_code\n        | finalisation_code\n        | gc_clear_code\n        | gc_traverse_code\n        | get_buffer_code\n        | instance_code\n        | pickle_code\n        | property\n        | release_buffer_code\n        | type_code\n        | type_header_code\n        | type_hint_code\n        | BIGetReadBufferCode CODE_BLOCK\n        | BIGetWriteBufferCode CODE_BLOCK\n        | BIGetSegCountCode CODE_BLOCK\n        | BIGetCharBufferCode CODE_BLOCKctor : explicit ctor_decl\n        | ctor_declctor_decl : NAME '(' opt_arg_list ')' opt_exceptions opt_annos opt_ctor_signature ';' opt_docstring premethod_code method_codeopt_ctor_signature : '[' '(' opt_arg_list ')' ']'\n        | emptydtor : opt_virtual '~' NAME '(' ')' opt_exceptions opt_abstract opt_annos ';' premethod_code method_code virtual_catcher_codemethod_variable : Q_SIGNAL simple_method_variable\n        | Q_SLOT simple_method_variable\n        | simple_method_variablesimple_method_variable : virtual function\n        | static plain_method_variable\n        | plain_method_variableplain_method_variable : function\n        | variablepublic_specifier : public opt_slots ':'protected_specifier : protected opt_slots ':'private_specifier : private opt_slots ':'signals_specifier : signals ':'\n        | Q_SIGNALS ':'opt_slots : slots\n        | Q_SLOTS\n        | emptyenum_decl : enum opt_enum_key opt_name opt_annos '{' opt_enum_body '}' ';'opt_enum_key : class\n        | struct\n        | union\n        | emptyopt_enum_body : enum_body\n        | emptyenum_body : enum_line\n        | enum_body enum_lineenum_line : if_start\n        | if_end\n        | NAME opt_enum_assign opt_annos opt_commaopt_enum_assign : '=' value\n        | emptyopt_comma : empty\n        | ','exception : Exception scoped_name opt_base_exception opt_annos '{' exception_body '}' ';'opt_base_exception : '(' scoped_name ')'\n        | emptyexception_body : exception_line\n        | exception_body exception_lineexception_line : if_start\n        | if_end\n        | RaiseCode CODE_BLOCK\n        | TypeHeaderCode CODE_BLOCKfunction : function_decl\n        | assignment_operator_decl\n        | operator_decl\n        | operator_cast_declfunction_decl : cpp_type NAME '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' opt_docstring premethod_code method_code virtual_catcher_code virtual_call_codeassignment_operator_decl : cpp_type operator '=' '(' cpp_type ')' ';'operator_decl : cpp_type operator operator_name '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' premethod_code method_code virtual_catcher_code virtual_call_codeoperator_cast_decl : operator cpp_type '(' opt_arg_list ')' opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ';' premethod_code method_code virtual_catcher_code virtual_call_codeopt_arg_list : arg_list\n        | emptyarg_list : arg_value\n        | arg_list ',' arg_valuearg_value : arg_type opt_assignarg_type : cpp_type opt_name opt_annosopt_assign : '=' expr\n        | emptyexpr : value\n        | expr binop valuevalue : opt_cast opt_unop simple_valuesimple_value : empty_value\n        | function_call_value\n        | null_value\n        | number_value\n        | quoted_char_value\n        | real_value\n        | scoped_name_value\n        | string_valueempty_value : '{' '}'function_call_value : base_type '(' opt_expr_list ')'null_value : NULLnumber_value : NUMBER\n        | bool_valuequoted_char_value : QUOTED_CHARreal_value : REALscoped_name_value : scoped_namestring_value : STRINGopt_expr_list : expr_list\n        | emptyexpr_list : expr\n        | expr_list ',' expropt_cast : '(' scoped_name ')'\n        | emptybinop : '-'\n        | '+'\n        | '*'\n        | '/'\n        | '&'\n        | '|'opt_unop : empty\n        | '!'\n        | '~'\n        | '-'\n        | '+'\n        | '*'\n        | '&'opt_exceptions : empty\n        | noexcept\n        | throw '(' opt_exception_list ')'opt_exception_list : exception_list\n        | emptyexception_list : scoped_name\n        | exception_list ',' scoped_nameopt_abstract : '=' NUMBER\n        | emptyopt_signature : '[' cpp_type '(' opt_arg_list ')' ']'\n        | emptyoperator_name : '+'\n        | '-'\n        | '*'\n        | '/'\n        | '%'\n        | '&'\n        | '|'\n        | '^'\n        | '<' '<'\n        | '>' '>'\n        | '+' '='\n        | '-' '='\n        | '*' '='\n        | '/' '='\n        | '%' '='\n        | '&' '='\n        | '|' '='\n        | '^' '='\n        | '<' '<' '='\n        | '>' '>' '='\n        | '~'\n        | '(' ')'\n        | '[' ']'\n        | '<'\n        | '<' '='\n        | '=' '='\n        | '!' '='\n        | '>'\n        | '>' '='method_code : MethodCode CODE_BLOCK\n        | emptypremethod_code : PreMethodCode CODE_BLOCK\n        | emptyvirtual_call_code : VirtualCallCode CODE_BLOCK\n        | emptyvirtual_catcher_code : VirtualCatcherCode CODE_BLOCK\n        | emptynamespace_decl : namespace namespace_head opt_namespace_body ';'namespace_head : scoped_name opt_annosopt_namespace_body : '{' namespace_body '}'\n        | emptynamespace_body : namespace_statement\n        | namespace_body namespace_statementtypedef_decl : typedef cpp_type NAME opt_annos ';' opt_docstring\n        | typedef cpp_type '(' '*' NAME ')' '(' cpp_types ')' opt_annos ';' opt_docstringunion_decl : union union_head opt_class_body ';'union_head : scoped_name opt_annosvariable : cpp_type NAME opt_annos variable_body ';'variable_body : '{' variable_body_directives '}'\n        | emptyvariable_body_directives : variable_body_directive\n        | variable_body_directives variable_body_directivevariable_body_directive : if_start\n        | if_end\n        | AccessCode CODE_BLOCK\n        | GetCode CODE_BLOCK\n        | SetCode CODE_BLOCKopt_annos : '/' annotations '/'\n        | emptyannotations : annotation\n        | annotations ',' annotationannotation : NAME\n        | NAME '=' annotation_valueannotation_value : dotted_name\n        | STRING\n        | NUMBERscoped_name : SCOPE relative_scoped_name\n        | relative_scoped_namerelative_scoped_name : NAME\n        | relative_scoped_name SCOPE NAMEtemplate_decl : template '<' cpp_types '>'bool_value : true\n        | True\n        | false\n        | Falsedotted_name : NAME\n        | DOTTED_NAMEfile_path : NAME\n        | DOTTED_NAME\n        | FILE_PATHempty :opt_const : const\n        | emptyopt_docstring : docstring\n        | emptyopt_final : final\n        | emptyopt_name : NAME\n        | emptyopt_virtual : virtual\n        | emptyored_qualifiers : NAME\n        | '!' NAME\n        | ored_qualifiers LOGICAL_OR NAME\n        | ored_qualifiers LOGICAL_OR '!' NAMEqualifier_list : NAME\n        | qualifier_list NAMEqualifiers : ored_qualifiers\n        | opt_name '-' opt_name"
     
-_lr_action_items = {'EOF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[3,3,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'CompositeModule':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[48,48,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Copying':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[49,49,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'DefaultDocstringFormat':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[50,50,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'DefaultDocstringSignature':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[51,51,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'DefaultEncoding':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[52,52,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'DefaultMetatype':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[53,53,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'DefaultSupertype':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[54,54,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'ExportedHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[55,55,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'ExportedTypeHintCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[56,56,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Extract':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[57,57,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Feature':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[59,59,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'HideNamespace':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[60,60,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Import':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[62,62,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Include':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[63,63,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'InitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[64,64,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'License':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[65,65,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Module':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[68,68,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'ModuleCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[69,69,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'ModuleHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[70,70,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Platforms':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[71,71,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Plugin':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[72,72,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'PreInitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[73,73,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'PostInitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[74,74,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'Timeline':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[75,75,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'TypeHintCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,273,325,326,351,358,372,373,374,377,397,399,403,407,408,409,410,423,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[76,76,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-488,-480,-487,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,76,-495,-496,-448,-249,-456,-133,-134,76,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'UnitCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[77,77,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'UnitPostIncludeCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[78,78,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'VirtualErrorHandler':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[79,79,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'If':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,160,161,162,164,165,167,168,169,171,172,173,179,198,211,213,215,216,223,238,239,240,241,242,243,244,245,246,247,248,249,256,257,258,259,264,273,285,289,325,326,327,328,329,330,331,351,358,371,372,373,374,376,377,379,380,381,382,383,384,397,399,403,407,408,409,410,423,424,425,430,435,461,467,504,506,508,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,591,592,595,596,599,601,602,603,604,605,620,621,623,636,639,642,646,647,648,649,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,708,710,711,712,713,714,715,716,717,725,728,729,730,731,749,755,759,760,763,764,765,773,774,776,778,779,780,801,808,809,810,811,812,813,823,824,825,826,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,862,867,868,869,875,883,884,885,886,887,902,908,909,915,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[80,80,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,80,80,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,80,-60,-90,80,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,80,-151,80,-165,-196,-488,80,-469,-480,-487,80,-61,-63,-64,-65,-108,-115,-138,-66,-68,-124,-189,-191,80,-166,-168,-169,-170,-171,-174,-190,-106,-247,80,-495,-496,-448,80,-452,-249,80,-456,-62,-133,-134,-167,80,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,80,80,-453,-468,-488,-458,80,-461,-463,-464,-59,-80,-488,-102,-109,-116,-482,-483,-484,-485,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,80,-327,-329,-330,-488,80,-339,-341,-342,-454,-462,-465,-466,-467,-55,-91,-152,-197,-312,-313,-314,-328,-488,-333,-340,-343,-344,-350,-71,-73,-75,-77,-79,-97,-320,-488,-332,-336,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,80,-331,-334,-335,-372,80,-184,-186,-187,-188,-51,-185,-488,-373,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'End':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,160,161,162,164,165,167,168,169,171,172,173,179,198,211,213,215,216,223,238,239,240,241,242,243,244,245,246,247,248,249,256,257,258,259,264,273,285,289,325,326,327,328,329,330,331,351,358,371,372,373,374,376,377,379,380,381,382,383,384,397,399,403,407,408,409,410,423,424,425,430,435,461,467,504,506,508,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,591,592,595,596,599,601,602,603,604,605,620,621,623,636,639,642,646,647,648,649,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,708,710,711,712,713,714,715,716,717,725,728,729,730,731,749,755,759,760,763,764,765,773,774,776,778,779,780,801,808,809,810,811,812,813,823,824,825,826,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,862,867,868,869,875,883,884,885,886,887,902,908,909,915,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[81,81,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,81,81,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,81,-60,-90,81,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,81,-151,81,-165,-196,-488,81,-469,-480,-487,81,-61,-63,-64,-65,-108,-115,-138,-66,-68,-124,-189,-191,81,-166,-168,-169,-170,-171,-174,-190,-106,-247,81,-495,-496,-448,81,-452,-249,81,-456,-62,-133,-134,-167,81,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,81,81,-453,-468,-488,-458,81,-461,-463,-464,-59,-80,-488,-102,-109,-116,-482,-483,-484,-485,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,81,-327,-329,-330,-488,81,-339,-341,-342,-454,-462,-465,-466,-467,-55,-91,-152,-197,-312,-313,-314,-328,-488,-333,-340,-343,-344,-350,-71,-73,-75,-77,-79,-97,-320,-488,-332,-336,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,81,-331,-334,-335,-372,81,-184,-186,-187,-188,-51,-185,-488,-373,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'class':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,83,84,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,273,285,325,326,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,426,430,461,463,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[82,82,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,82,182,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-488,82,-480,-487,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,82,-495,-496,-448,82,-452,82,-249,-456,-481,-133,-134,82,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'enum':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,160,161,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,238,239,240,241,242,243,244,245,246,247,248,249,256,257,259,264,273,285,325,326,351,358,371,372,373,374,376,377,397,399,403,407,408,409,410,423,424,425,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[84,84,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,84,84,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,84,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,84,-151,-165,-196,-488,84,-480,-487,-108,-115,-138,-66,-68,-124,-189,-191,-174,-190,-106,-247,84,-495,-496,-448,84,-452,-249,-456,-133,-134,84,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Exception':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,273,285,325,326,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[85,85,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-488,85,-480,-487,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,85,-495,-496,-448,85,-452,-249,-456,-133,-134,85,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'namespace':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,273,285,325,326,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[90,90,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-488,90,-480,-487,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,90,-495,-496,-448,90,-452,-249,-456,-133,-134,90,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'struct':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,84,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[91,91,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,183,-345,-346,-347,-348,192,192,192,192,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,192,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,192,-192,192,-477,-54,-60,-90,192,-151,-165,-196,-488,91,192,192,-480,-487,192,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,91,-495,-496,-448,91,-452,-249,192,192,-456,-133,-134,91,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,192,-306,192,192,-310,192,-309,-311,-453,-488,-458,192,-488,-59,-80,-488,-102,-109,-116,-126,192,-164,-488,-263,-294,-295,-296,-297,-298,192,-304,192,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,192,-488,-387,-388,-389,-390,-391,-392,192,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,192,-488,-488,192,-178,-455,-488,-488,-488,-488,-488,192,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'typedef':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,273,285,325,326,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[92,92,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-488,92,-480,-487,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,92,-495,-496,-448,92,-452,-249,-456,-133,-134,92,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'union':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,84,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[94,94,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,184,-345,-346,-347,-348,193,193,193,193,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,193,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,193,-192,193,-477,-54,-60,-90,193,-151,-165,-196,-488,94,193,193,-480,-487,193,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,94,-495,-496,-448,94,-452,-249,193,193,-456,-133,-134,94,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,193,-306,193,193,-310,193,-309,-311,-453,-488,-458,193,-488,-59,-80,-488,-102,-109,-116,-126,193,-164,-488,-263,-294,-295,-296,-297,-298,193,-304,193,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,193,-488,-387,-388,-389,-390,-391,-392,193,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,193,-488,-488,193,-178,-455,-488,-488,-488,-488,-488,193,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'TypeHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,160,161,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,238,239,240,241,242,243,244,245,246,247,248,249,256,257,259,264,273,285,325,326,351,358,371,372,373,374,376,377,397,399,403,407,408,409,410,423,424,425,430,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,592,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,714,715,716,717,725,749,755,759,760,763,764,765,778,779,780,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[95,95,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,95,95,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,95,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,95,-151,-165,-196,-488,95,-480,-487,-108,-115,-138,-66,-68,-124,-189,-191,-174,-190,-106,-247,95,-495,-496,-448,95,-452,-249,-456,-133,-134,95,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,719,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,719,-339,-341,-342,-454,-55,-91,-152,-197,-312,-313,-314,-340,-343,-344,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'MappedType':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,83,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,463,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[96,96,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,180,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-481,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'template':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,285,325,326,351,358,397,399,403,407,409,410,423,424,425,430,461,504,506,595,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[98,98,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,98,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,98,-452,-249,-456,-133,-134,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'operator':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,61,81,86,87,88,89,93,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,190,197,198,200,201,204,205,206,207,208,209,210,211,213,216,223,257,259,264,273,285,294,295,317,318,319,320,323,324,325,326,349,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,461,462,465,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,566,567,568,569,583,585,586,587,588,595,599,601,620,621,623,636,639,642,650,657,659,675,676,677,678,679,680,684,685,686,693,694,695,696,697,698,699,700,702,703,704,705,725,749,755,759,760,763,764,765,801,808,809,810,811,812,813,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[99,99,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-204,-107,-345,-346,-347,-348,195,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-206,-207,-192,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,-54,-60,-90,-151,-165,-196,-488,99,-206,-207,-202,-242,-244,-245,-488,-208,-480,-487,-205,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,99,-495,-496,-448,99,-452,-249,-456,-243,-201,-133,-134,99,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-479,99,-306,99,99,-310,99,-309,-311,-453,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-263,-294,-295,-296,-297,-298,-304,99,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,195,-308,-454,-55,-91,-152,-197,-312,-313,-314,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'const':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,99,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,198,202,211,213,216,223,253,257,259,264,273,285,297,318,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,610,611,619,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,743,749,755,759,760,763,764,765,781,801,808,809,810,811,812,813,814,823,826,909,911,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[100,100,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,100,100,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,100,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,100,-477,-54,-60,-90,100,-151,-165,-196,-488,100,100,462,100,-480,-487,100,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,100,-495,-496,-448,100,-452,-249,100,100,-456,-133,-134,100,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,100,-306,100,100,-310,100,-309,-311,-453,-488,-458,734,100,734,-59,-80,-488,-102,-109,-116,-126,100,-164,-488,-263,-294,-295,-296,-297,-298,100,-304,100,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,734,-55,-91,-152,-197,-312,-313,-314,100,-350,-71,-73,-75,-77,-79,-97,734,-320,-336,-488,100,-488,100,-178,-455,-488,-488,-488,-488,-488,100,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'unsigned':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[102,102,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,102,102,102,102,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,102,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,102,-192,102,-477,-54,-60,-90,102,-151,-165,-196,-488,102,102,102,-480,-487,102,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,102,-495,-496,-448,102,-452,-249,102,102,-456,-133,-134,102,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,102,-306,102,102,-310,102,-309,-311,-453,-488,-458,102,-488,-59,-80,-488,-102,-109,-116,-126,102,-164,-488,-263,-294,-295,-296,-297,-298,102,-304,102,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,102,-488,-387,-388,-389,-390,-391,-392,102,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,102,-488,-488,102,-178,-455,-488,-488,-488,-488,-488,102,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'signed':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[104,104,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,104,104,104,104,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,104,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,104,-192,104,-477,-54,-60,-90,104,-151,-165,-196,-488,104,104,104,-480,-487,104,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,104,-495,-496,-448,104,-452,-249,104,104,-456,-133,-134,104,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,104,-306,104,104,-310,104,-309,-311,-453,-488,-458,104,-488,-59,-80,-488,-102,-109,-116,-126,104,-164,-488,-263,-294,-295,-296,-297,-298,104,-304,104,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,104,-488,-387,-388,-389,-390,-391,-392,104,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,104,-488,-488,104,-178,-455,-488,-488,-488,-488,-488,104,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'long':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,102,103,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,205,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[103,103,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,103,103,103,103,205,209,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,103,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,103,-192,103,324,-477,-54,-60,-90,103,-151,-165,-196,-488,103,103,103,-480,-487,103,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,103,-495,-496,-448,103,-452,-249,103,103,-456,-133,-134,103,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,103,-306,103,103,-310,103,-309,-311,-453,-488,-458,103,-488,-59,-80,-488,-102,-109,-116,-126,103,-164,-488,-263,-294,-295,-296,-297,-298,103,-304,103,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,103,-488,-387,-388,-389,-390,-391,-392,103,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,103,-488,-488,103,-178,-455,-488,-488,-488,-488,-488,103,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'short':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,102,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[106,106,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,106,106,106,106,207,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,106,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,106,-192,106,-477,-54,-60,-90,106,-151,-165,-196,-488,106,106,106,-480,-487,106,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,106,-495,-496,-448,106,-452,-249,106,106,-456,-133,-134,106,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,106,-306,106,106,-310,106,-309,-311,-453,-488,-458,106,-488,-59,-80,-488,-102,-109,-116,-126,106,-164,-488,-263,-294,-295,-296,-297,-298,106,-304,106,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,106,-488,-387,-388,-389,-390,-391,-392,106,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,106,-488,-488,106,-178,-455,-488,-488,-488,-488,-488,106,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'int':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,102,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[107,107,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,107,107,107,107,208,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,107,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,107,-192,107,-477,-54,-60,-90,107,-151,-165,-196,-488,107,107,107,-480,-487,107,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,107,-495,-496,-448,107,-452,-249,107,107,-456,-133,-134,107,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,107,-306,107,107,-310,107,-309,-311,-453,-488,-458,107,-488,-59,-80,-488,-102,-109,-116,-126,107,-164,-488,-263,-294,-295,-296,-297,-298,107,-304,107,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,107,-488,-387,-388,-389,-390,-391,-392,107,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,107,-488,-488,107,-178,-455,-488,-488,-488,-488,-488,107,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'float':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[108,108,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,108,108,108,108,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,108,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,108,-192,108,-477,-54,-60,-90,108,-151,-165,-196,-488,108,108,108,-480,-487,108,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,108,-495,-496,-448,108,-452,-249,108,108,-456,-133,-134,108,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,108,-306,108,108,-310,108,-309,-311,-453,-488,-458,108,-488,-59,-80,-488,-102,-109,-116,-126,108,-164,-488,-263,-294,-295,-296,-297,-298,108,-304,108,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,108,-488,-387,-388,-389,-390,-391,-392,108,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,108,-488,-488,108,-178,-455,-488,-488,-488,-488,-488,108,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'double':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[109,109,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,109,109,109,109,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,109,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,109,-192,109,-477,-54,-60,-90,109,-151,-165,-196,-488,109,109,109,-480,-487,109,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,109,-495,-496,-448,109,-452,-249,109,109,-456,-133,-134,109,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,109,-306,109,109,-310,109,-309,-311,-453,-488,-458,109,-488,-59,-80,-488,-102,-109,-116,-126,109,-164,-488,-263,-294,-295,-296,-297,-298,109,-304,109,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,109,-488,-387,-388,-389,-390,-391,-392,109,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,109,-488,-488,109,-178,-455,-488,-488,-488,-488,-488,109,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'bool':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[110,110,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,110,110,110,110,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,110,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,110,-192,110,-477,-54,-60,-90,110,-151,-165,-196,-488,110,110,110,-480,-487,110,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,110,-495,-496,-448,110,-452,-249,110,110,-456,-133,-134,110,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,110,-306,110,110,-310,110,-309,-311,-453,-488,-458,110,-488,-59,-80,-488,-102,-109,-116,-126,110,-164,-488,-263,-294,-295,-296,-297,-298,110,-304,110,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,110,-488,-387,-388,-389,-390,-391,-392,110,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,110,-488,-488,110,-178,-455,-488,-488,-488,-488,-488,110,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'char':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,102,104,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[105,105,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,105,105,105,105,206,210,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,105,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,105,-192,105,-477,-54,-60,-90,105,-151,-165,-196,-488,105,105,105,-480,-487,105,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,105,-495,-496,-448,105,-452,-249,105,105,-456,-133,-134,105,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,105,-306,105,105,-310,105,-309,-311,-453,-488,-458,105,-488,-59,-80,-488,-102,-109,-116,-126,105,-164,-488,-263,-294,-295,-296,-297,-298,105,-304,105,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,105,-488,-387,-388,-389,-390,-391,-392,105,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,105,-488,-488,105,-178,-455,-488,-488,-488,-488,-488,105,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'wchar_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[111,111,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,111,111,111,111,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,111,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,111,-192,111,-477,-54,-60,-90,111,-151,-165,-196,-488,111,111,111,-480,-487,111,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,111,-495,-496,-448,111,-452,-249,111,111,-456,-133,-134,111,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,111,-306,111,111,-310,111,-309,-311,-453,-488,-458,111,-488,-59,-80,-488,-102,-109,-116,-126,111,-164,-488,-263,-294,-295,-296,-297,-298,111,-304,111,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,111,-488,-387,-388,-389,-390,-391,-392,111,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,111,-488,-488,111,-178,-455,-488,-488,-488,-488,-488,111,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'void':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[112,112,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,112,112,112,112,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,112,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,112,-192,112,-477,-54,-60,-90,112,-151,-165,-196,-488,112,112,112,-480,-487,112,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,112,-495,-496,-448,112,-452,-249,112,112,-456,-133,-134,112,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,112,-306,112,112,-310,112,-309,-311,-453,-488,-458,112,-488,-59,-80,-488,-102,-109,-116,-126,112,-164,-488,-263,-294,-295,-296,-297,-298,112,-304,112,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,112,-488,-387,-388,-389,-390,-391,-392,112,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,112,-488,-488,112,-178,-455,-488,-488,-488,-488,-488,112,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYOBJECT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[113,113,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,113,113,113,113,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,113,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,113,-192,113,-477,-54,-60,-90,113,-151,-165,-196,-488,113,113,113,-480,-487,113,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,113,-495,-496,-448,113,-452,-249,113,113,-456,-133,-134,113,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,113,-306,113,113,-310,113,-309,-311,-453,-488,-458,113,-488,-59,-80,-488,-102,-109,-116,-126,113,-164,-488,-263,-294,-295,-296,-297,-298,113,-304,113,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,113,-488,-387,-388,-389,-390,-391,-392,113,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,113,-488,-488,113,-178,-455,-488,-488,-488,-488,-488,113,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYTUPLE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[114,114,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,114,114,114,114,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,114,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,114,-192,114,-477,-54,-60,-90,114,-151,-165,-196,-488,114,114,114,-480,-487,114,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,114,-495,-496,-448,114,-452,-249,114,114,-456,-133,-134,114,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,114,-306,114,114,-310,114,-309,-311,-453,-488,-458,114,-488,-59,-80,-488,-102,-109,-116,-126,114,-164,-488,-263,-294,-295,-296,-297,-298,114,-304,114,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,114,-488,-387,-388,-389,-390,-391,-392,114,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,114,-488,-488,114,-178,-455,-488,-488,-488,-488,-488,114,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYLIST':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[115,115,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,115,115,115,115,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,115,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,115,-192,115,-477,-54,-60,-90,115,-151,-165,-196,-488,115,115,115,-480,-487,115,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,115,-495,-496,-448,115,-452,-249,115,115,-456,-133,-134,115,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,115,-306,115,115,-310,115,-309,-311,-453,-488,-458,115,-488,-59,-80,-488,-102,-109,-116,-126,115,-164,-488,-263,-294,-295,-296,-297,-298,115,-304,115,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,115,-488,-387,-388,-389,-390,-391,-392,115,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,115,-488,-488,115,-178,-455,-488,-488,-488,-488,-488,115,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYDICT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[116,116,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,116,116,116,116,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,116,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,116,-192,116,-477,-54,-60,-90,116,-151,-165,-196,-488,116,116,116,-480,-487,116,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,116,-495,-496,-448,116,-452,-249,116,116,-456,-133,-134,116,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,116,-306,116,116,-310,116,-309,-311,-453,-488,-458,116,-488,-59,-80,-488,-102,-109,-116,-126,116,-164,-488,-263,-294,-295,-296,-297,-298,116,-304,116,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,116,-488,-387,-388,-389,-390,-391,-392,116,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,116,-488,-488,116,-178,-455,-488,-488,-488,-488,-488,116,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYCALLABLE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[117,117,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,117,117,117,117,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,117,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,117,-192,117,-477,-54,-60,-90,117,-151,-165,-196,-488,117,117,117,-480,-487,117,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,117,-495,-496,-448,117,-452,-249,117,117,-456,-133,-134,117,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,117,-306,117,117,-310,117,-309,-311,-453,-488,-458,117,-488,-59,-80,-488,-102,-109,-116,-126,117,-164,-488,-263,-294,-295,-296,-297,-298,117,-304,117,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,117,-488,-387,-388,-389,-390,-391,-392,117,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,117,-488,-488,117,-178,-455,-488,-488,-488,-488,-488,117,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYSLICE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[118,118,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,118,118,118,118,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,118,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,118,-192,118,-477,-54,-60,-90,118,-151,-165,-196,-488,118,118,118,-480,-487,118,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,118,-495,-496,-448,118,-452,-249,118,118,-456,-133,-134,118,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,118,-306,118,118,-310,118,-309,-311,-453,-488,-458,118,-488,-59,-80,-488,-102,-109,-116,-126,118,-164,-488,-263,-294,-295,-296,-297,-298,118,-304,118,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,118,-488,-387,-388,-389,-390,-391,-392,118,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,118,-488,-488,118,-178,-455,-488,-488,-488,-488,-488,118,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYTYPE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[119,119,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,119,119,119,119,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,119,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,119,-192,119,-477,-54,-60,-90,119,-151,-165,-196,-488,119,119,119,-480,-487,119,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,119,-495,-496,-448,119,-452,-249,119,119,-456,-133,-134,119,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,119,-306,119,119,-310,119,-309,-311,-453,-488,-458,119,-488,-59,-80,-488,-102,-109,-116,-126,119,-164,-488,-263,-294,-295,-296,-297,-298,119,-304,119,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,119,-488,-387,-388,-389,-390,-391,-392,119,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,119,-488,-488,119,-178,-455,-488,-488,-488,-488,-488,119,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYBUFFER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[120,120,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,120,120,120,120,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,120,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,120,-192,120,-477,-54,-60,-90,120,-151,-165,-196,-488,120,120,120,-480,-487,120,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,120,-495,-496,-448,120,-452,-249,120,120,-456,-133,-134,120,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,120,-306,120,120,-310,120,-309,-311,-453,-488,-458,120,-488,-59,-80,-488,-102,-109,-116,-126,120,-164,-488,-263,-294,-295,-296,-297,-298,120,-304,120,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,120,-488,-387,-388,-389,-390,-391,-392,120,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,120,-488,-488,120,-178,-455,-488,-488,-488,-488,-488,120,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_PYENUM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[121,121,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,121,121,121,121,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,121,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,121,-192,121,-477,-54,-60,-90,121,-151,-165,-196,-488,121,121,121,-480,-487,121,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,121,-495,-496,-448,121,-452,-249,121,121,-456,-133,-134,121,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,121,-306,121,121,-310,121,-309,-311,-453,-488,-458,121,-488,-59,-80,-488,-102,-109,-116,-126,121,-164,-488,-263,-294,-295,-296,-297,-298,121,-304,121,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,121,-488,-387,-388,-389,-390,-391,-392,121,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,121,-488,-488,121,-178,-455,-488,-488,-488,-488,-488,121,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SIP_SSIZE_T':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[122,122,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,122,122,122,122,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,122,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,122,-192,122,-477,-54,-60,-90,122,-151,-165,-196,-488,122,122,122,-480,-487,122,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,122,-495,-496,-448,122,-452,-249,122,122,-456,-133,-134,122,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,122,-306,122,122,-310,122,-309,-311,-453,-488,-458,122,-488,-59,-80,-488,-102,-109,-116,-126,122,-164,-488,-263,-294,-295,-296,-297,-298,122,-304,122,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,122,-488,-387,-388,-389,-390,-391,-392,122,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,122,-488,-488,122,-178,-455,-488,-488,-488,-488,-488,122,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Py_hash_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[123,123,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,123,123,123,123,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,123,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,123,-192,123,-477,-54,-60,-90,123,-151,-165,-196,-488,123,123,123,-480,-487,123,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,123,-495,-496,-448,123,-452,-249,123,123,-456,-133,-134,123,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,123,-306,123,123,-310,123,-309,-311,-453,-488,-458,123,-488,-59,-80,-488,-102,-109,-116,-126,123,-164,-488,-263,-294,-295,-296,-297,-298,123,-304,123,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,123,-488,-387,-388,-389,-390,-391,-392,123,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,123,-488,-488,123,-178,-455,-488,-488,-488,-488,-488,123,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Py_ssize_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[124,124,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,124,124,124,124,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,124,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,124,-192,124,-477,-54,-60,-90,124,-151,-165,-196,-488,124,124,124,-480,-487,124,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,124,-495,-496,-448,124,-452,-249,124,124,-456,-133,-134,124,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,124,-306,124,124,-310,124,-309,-311,-453,-488,-458,124,-488,-59,-80,-488,-102,-109,-116,-126,124,-164,-488,-263,-294,-295,-296,-297,-298,124,-304,124,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,124,-488,-387,-388,-389,-390,-391,-392,124,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,124,-488,-488,124,-178,-455,-488,-488,-488,-488,-488,124,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'size_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[125,125,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,125,125,125,125,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,125,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,125,-192,125,-477,-54,-60,-90,125,-151,-165,-196,-488,125,125,125,-480,-487,125,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,125,-495,-496,-448,125,-452,-249,125,125,-456,-133,-134,125,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,125,-306,125,125,-310,125,-309,-311,-453,-488,-458,125,-488,-59,-80,-488,-102,-109,-116,-126,125,-164,-488,-263,-294,-295,-296,-297,-298,125,-304,125,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,125,-488,-387,-388,-389,-390,-391,-392,125,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,125,-488,-488,125,-178,-455,-488,-488,-488,-488,-488,125,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'ELLIPSIS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,92,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,198,202,211,213,216,223,253,257,259,264,273,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,423,424,425,430,444,446,461,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,583,585,586,587,588,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,876,897,909,911,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[126,126,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,126,126,126,126,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,126,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,126,-192,126,-477,-54,-60,-90,126,-151,-165,-196,-488,126,126,126,-480,-487,126,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,126,-495,-496,-448,126,-452,-249,126,126,-456,-133,-134,126,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,126,-306,126,126,-310,126,-309,-311,-453,-488,-458,126,-488,-59,-80,-488,-102,-109,-116,-126,126,-164,-488,-263,-294,-295,-296,-297,-298,126,-304,126,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,-386,-55,-91,-152,-197,-312,-313,-314,-488,126,-488,-387,-388,-389,-390,-391,-392,126,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,-488,-386,-488,126,-488,-488,126,-178,-455,-488,-488,-488,-488,-488,126,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'SCOPE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,60,81,82,85,86,87,88,89,90,91,92,94,96,99,100,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,157,158,162,164,165,167,168,169,171,172,173,179,180,192,193,198,202,211,213,216,223,253,257,259,264,273,276,282,285,297,322,325,326,350,351,358,372,373,374,377,397,399,403,407,408,409,410,414,415,416,417,418,423,424,425,430,444,446,461,487,504,506,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,566,567,568,569,583,585,586,587,588,589,595,599,601,611,613,620,621,623,636,639,642,650,656,657,659,675,676,677,678,679,680,683,684,685,686,693,694,695,696,697,698,699,700,702,703,705,725,739,740,741,749,755,759,760,763,764,765,775,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,823,826,851,874,876,897,909,911,914,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[127,127,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,127,-107,127,127,-345,-346,-347,-348,127,127,127,127,127,127,127,212,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,127,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,127,127,127,-192,127,-477,-54,-60,-90,127,-151,-165,-196,-488,-488,127,127,127,127,-480,-487,127,-108,-115,-66,-68,-124,-191,-174,-190,-106,-247,127,-495,-496,127,-256,-257,-258,-259,-448,127,-452,-249,127,127,-456,127,-133,-134,127,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-479,127,-306,127,127,-310,127,-309,-311,-488,-453,-488,-458,127,-488,-59,-80,-488,-102,-109,-116,-126,127,-164,-488,-263,-294,-295,-296,-297,-298,127,-304,127,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-488,127,-386,-55,-91,-152,-197,-312,-313,-314,-488,127,-488,-387,-388,-389,-390,-391,-392,127,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,-320,-336,-385,127,-488,-386,-488,127,127,-488,-488,127,-178,-455,-488,-488,-488,-488,-488,127,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'NAME':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,57,58,59,60,61,62,63,68,72,79,81,82,84,85,86,87,88,89,90,91,92,93,94,96,97,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,133,134,136,138,140,142,144,145,148,150,152,153,155,157,158,162,164,165,166,167,168,169,170,171,172,173,176,179,180,181,182,183,184,185,190,191,192,193,197,198,200,201,202,204,205,206,207,208,209,210,211,212,213,214,216,223,253,257,259,261,262,263,264,270,273,276,282,285,288,289,294,295,297,317,318,319,320,322,323,324,325,326,349,350,351,352,353,358,372,373,374,375,377,397,398,399,403,404,405,407,408,409,410,414,415,416,417,418,423,424,425,430,433,437,444,446,461,462,465,474,478,479,482,484,487,493,496,504,506,514,517,523,525,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,563,564,566,567,568,569,583,585,586,587,588,589,591,595,596,597,598,599,601,611,613,620,621,623,636,639,642,646,647,648,649,650,656,657,659,675,676,677,678,679,680,682,683,684,685,686,693,694,695,696,697,698,699,700,702,703,704,705,708,710,711,712,713,725,739,740,741,749,755,759,760,763,764,765,773,774,775,776,781,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,801,808,809,810,811,812,813,820,821,822,823,824,825,826,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,851,867,868,869,874,875,876,897,909,911,914,915,916,921,922,923,924,925,930,932,933,935,936,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[58,58,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,132,132,132,146,-479,148,58,-204,-50,-50,132,167,174,-107,58,-488,58,-345,-346,-347,-348,58,58,58,194,58,58,-488,58,58,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,58,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,58,132,132,-123,-125,-488,-172,-150,262,-175,-177,-176,262,-193,-194,-195,269,-246,58,280,-321,-322,-323,-324,-206,292,58,58,-207,-192,-488,-241,58,-488,-214,-211,-212,-213,-210,-209,-477,325,-54,326,-60,-90,58,-151,-165,398,-507,398,-196,406,-488,-488,58,58,429,-469,-206,-207,58,-202,-242,-244,-245,58,-488,-208,-480,-487,-205,58,-108,132,132,-115,-66,-68,-124,505,-191,-174,-508,-190,-106,524,280,-247,566,-495,-496,58,-256,-257,-258,-259,-448,58,-452,-249,600,280,58,58,-456,-243,-201,132,132,132,633,635,58,132,132,-133,-134,663,132,672,673,566,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,681,-299,-479,58,-306,58,58,-310,58,-309,-311,-488,713,-453,-468,429,132,-488,-458,58,-488,-59,-80,-488,-102,-109,-116,-482,-483,-484,-485,-126,58,-164,-488,-263,-294,-295,-296,-297,-298,761,58,-304,58,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,771,-308,713,-327,-329,-330,-488,-454,-488,58,-386,-55,-91,-152,-197,-312,-313,-314,-328,-488,-488,-333,58,-488,-387,-388,-389,-390,-391,-392,58,-393,-394,-395,-396,-397,-398,-399,-350,-71,-73,-75,-77,-79,-97,864,865,866,-320,-488,-332,-336,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-385,-331,-334,-335,58,-372,-488,-386,-488,58,58,-373,-488,-488,58,-178,-455,-488,-488,-488,-488,-488,58,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,129,130,132,133,134,136,138,140,142,144,145,148,150,157,158,162,164,165,167,168,169,171,172,173,179,198,211,213,216,223,257,259,264,325,326,351,358,397,399,403,407,409,410,423,430,461,504,506,599,601,620,621,623,636,639,642,650,657,659,725,749,755,759,760,801,808,809,810,811,812,813,823,826,909,924,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,968,970,971,972,973,974,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-2,-488,-486,-69,-70,-72,-74,-76,-78,-88,-89,-96,-101,-123,-125,-488,-172,-150,-175,-177,-176,-193,-194,-195,-246,-192,-477,-54,-60,-90,-151,-165,-196,-480,-487,-108,-115,-174,-190,-106,-247,-495,-496,-448,-249,-456,-133,-134,-488,-458,-59,-80,-488,-102,-109,-116,-126,-164,-488,-454,-55,-91,-152,-197,-350,-71,-73,-75,-77,-79,-97,-320,-336,-488,-455,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,-488,-447,-440,-488,-488,-352,-445,-446,-349,-351,-444,]),'}':([35,36,37,38,39,40,41,42,43,44,45,46,47,58,81,86,87,88,89,128,171,179,198,211,238,239,240,241,242,243,244,245,246,247,248,249,256,261,262,263,289,325,327,328,329,330,331,371,372,373,374,376,377,379,380,381,382,383,384,398,403,407,409,410,423,424,425,430,461,467,508,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,591,595,596,599,601,602,603,604,605,621,646,647,648,649,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,707,708,709,710,711,712,713,714,715,716,717,725,728,729,730,731,763,764,765,773,774,776,778,779,780,801,823,824,825,826,833,834,835,836,837,838,839,840,841,842,844,845,846,847,848,849,850,867,868,869,875,883,884,885,886,887,902,908,909,915,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-479,-107,-345,-346,-347,-348,-478,-193,-246,-192,-477,370,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,378,397,-507,399,-469,-480,466,-61,-63,-64,-65,-138,-66,-68,-124,-189,-191,507,-166,-168,-169,-170,-171,-508,-106,-247,-495,-496,-448,594,-452,-249,-456,-62,-167,674,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-453,-468,-488,-458,727,-461,-463,-464,-80,-482,-483,-484,-485,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,772,-325,-326,-327,-329,-330,-488,777,-339,-341,-342,-454,-462,-465,-466,-467,-312,-313,-314,-328,-488,-333,-340,-343,-344,-350,-320,-488,-332,-336,-363,-364,-365,-366,-367,-368,-369,-370,-371,875,-374,-375,-376,-377,-378,-379,-380,-331,-334,-335,-372,907,-184,-186,-187,-188,-51,-185,-488,-373,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'(':([48,50,51,52,53,54,57,58,59,60,61,62,63,65,68,79,80,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,135,137,139,141,143,147,149,151,154,156,159,163,175,186,191,194,195,200,201,203,204,205,206,207,208,209,210,211,294,295,298,300,301,302,303,304,305,306,307,308,309,310,311,317,318,319,320,323,324,325,332,349,385,443,445,447,448,449,450,451,452,453,454,455,456,457,458,459,460,462,465,471,505,509,566,581,613,617,618,681,726,761,771,775,785,786,787,788,789,790,791,831,843,849,876,905,916,926,],[-48,-48,-48,-48,-48,-48,-48,-479,-48,-48,-204,-48,-48,-48,-48,-48,176,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,217,218,219,220,221,222,224,225,226,233,236,237,260,265,282,293,297,299,-488,-241,322,-488,-214,-211,-212,-213,-210,-209,-477,-206,-207,444,446,-411,-412,-413,-414,-415,-416,-417,-418,-434,-438,-431,-202,-242,-244,-245,-488,-208,-480,-48,-205,-48,-436,-432,-421,-422,-423,-424,-425,-426,-427,-428,-419,-435,-420,-439,-433,-437,-243,-201,622,656,658,683,701,740,-429,-430,683,781,816,297,740,740,-387,-388,-389,-390,-391,-392,874,876,-204,740,922,740,936,]),'CODE_BLOCK':([49,55,56,64,69,70,73,74,76,77,78,95,146,174,250,251,252,254,255,332,468,469,470,559,560,561,562,575,576,577,578,579,580,582,606,607,608,631,670,718,719,854,939,949,960,969,],[133,144,145,157,164,165,168,169,171,172,173,198,223,264,372,373,374,376,377,-488,621,-81,-82,676,677,678,679,695,696,697,698,699,700,702,729,730,731,755,760,779,780,-83,951,962,971,974,]),'STRING':([50,51,52,65,332,475,476,477,500,501,502,503,515,516,598,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,806,807,815,851,876,897,916,],[134,136,138,158,470,626,627,628,652,653,654,655,664,665,723,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,850,-393,-394,-395,-396,-397,-398,-399,856,857,859,-385,-488,-386,-488,]),'<':([58,61,98,128,195,211,309,325,566,849,],[-479,152,202,-478,309,-477,455,-480,-479,152,]),'*':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,190,195,197,200,201,204,205,206,207,208,209,210,211,293,294,295,318,323,324,325,349,462,566,613,646,647,648,649,737,738,739,741,775,785,786,787,788,789,790,791,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,851,875,876,897,898,915,916,928,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-206,303,-207,318,-241,-488,-214,-211,-212,-213,-210,-209,-477,433,-206,-207,-242,318,-208,-480,-205,-243,-479,-488,-482,-483,-484,-485,788,-361,798,-386,-488,-488,-387,-388,-389,-390,-391,-392,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-385,-372,-488,-386,788,-373,-488,788,]),'&':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,190,195,197,200,201,204,205,206,207,208,209,210,211,294,295,318,323,324,325,349,462,566,613,646,647,648,649,737,738,739,741,775,785,786,787,788,789,790,791,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,851,875,876,897,898,915,916,928,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-206,306,-207,319,-241,-488,-214,-211,-212,-213,-210,-209,-477,-206,-207,-242,319,-208,-480,-205,-243,-479,-488,-482,-483,-484,-485,790,-361,799,-386,-488,-488,-387,-388,-389,-390,-391,-392,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-385,-372,-488,-386,790,-373,-488,790,]),':':([58,128,178,190,211,325,570,571,572,573,574,687,688,689,690,691,692,],[-479,-478,276,276,-477,-480,-488,-488,-488,693,694,763,-317,-318,-319,764,765,]),'/':([58,61,84,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,132,178,181,182,183,184,185,186,188,190,194,195,197,199,200,201,204,205,206,207,208,209,210,211,230,231,232,235,271,275,277,278,279,280,281,283,291,292,294,295,317,318,319,320,323,324,325,326,349,412,413,427,428,429,437,462,465,489,490,590,593,609,610,619,641,644,646,647,648,649,706,713,720,721,722,723,724,733,734,735,737,738,743,744,774,776,782,783,784,802,803,814,817,825,828,829,830,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,852,853,858,860,861,870,871,873,875,877,878,879,881,890,898,899,903,913,915,928,],[-479,-204,-488,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-486,-488,-488,-321,-322,-323,-324,-488,288,-488,288,304,288,288,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,352,-491,-489,352,-500,288,-252,288,288,-499,288,-338,288,288,-206,-207,-202,-242,-244,-245,-488,-208,-480,-487,-205,-251,-253,596,-470,-472,-488,-243,-201,-492,-490,-255,-337,288,-488,-488,352,352,-482,-483,-484,-485,-254,-488,-471,-473,-474,-475,-476,-488,-493,-494,789,-361,-488,-488,288,-333,-488,-497,-498,-488,-488,-488,-488,-332,-488,-400,-401,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-488,-488,-488,-488,288,288,288,-408,-372,-488,288,288,-488,-407,789,288,288,-402,-373,789,]),'{':([58,61,66,67,71,75,84,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,130,132,162,177,178,181,182,183,184,185,186,187,188,189,190,194,196,197,199,205,206,207,208,209,210,211,271,275,277,278,279,280,281,283,287,289,291,294,295,296,315,316,324,325,326,349,411,412,413,419,420,421,431,590,593,596,613,623,659,706,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,818,851,876,897,916,],[-479,-204,160,161,166,170,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,215,-486,258,273,-488,-488,-321,-322,-323,-324,-488,285,-488,273,-488,-488,273,-488,-488,-214,-211,-212,-213,-210,-209,-477,-500,-488,-252,-488,-488,-499,-488,-338,-449,-469,-488,-206,-207,435,-457,-135,-208,-480,-487,-205,-248,-251,-253,-136,591,592,-250,-255,-337,-468,-488,215,258,-254,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,842,-393,-394,-395,-396,-397,-398,-399,862,-385,-488,-386,-488,]),';':([58,128,177,178,187,188,189,190,194,196,197,211,272,274,275,277,284,286,287,289,290,291,292,296,314,315,325,370,378,411,412,413,431,432,434,436,466,507,590,594,596,610,619,674,706,727,733,734,735,742,743,744,772,777,782,783,784,802,803,814,817,828,829,830,852,853,858,860,861,870,871,873,877,878,879,881,882,888,889,890,899,900,901,903,904,906,907,910,912,913,917,918,919,920,929,955,966,],[-479,-478,-488,-488,-488,-488,-488,-488,-488,-488,-488,-477,407,-261,-488,-252,423,-451,-449,-469,430,-488,-488,-488,461,-457,-480,504,506,-248,-251,-253,-250,599,601,-460,620,657,-255,-450,-468,-488,-488,-260,-254,-459,-488,-493,-494,801,-488,-488,823,826,-488,-497,-498,-488,-488,-488,-488,-488,-400,-401,-488,-488,-488,-488,-488,-488,-488,-408,-488,-488,-488,-488,-488,909,-488,-407,-488,-488,-488,-488,921,-302,923,925,-410,-402,-488,930,931,932,937,-301,-409,]),'>':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,195,200,201,204,205,206,207,208,209,210,211,227,228,294,295,310,317,318,319,320,321,323,324,325,349,462,465,488,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,310,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,349,-239,-206,-207,457,-202,-242,-244,-245,463,-488,-208,-480,-205,-243,-201,-240,]),',':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,132,200,201,204,205,206,207,208,209,210,211,227,228,231,232,271,280,289,294,295,317,318,319,320,321,323,324,325,326,333,334,341,342,346,347,349,355,356,360,361,364,365,386,387,400,401,412,413,427,428,429,437,439,441,442,462,465,488,489,490,590,596,609,612,614,624,625,632,633,634,637,638,640,641,643,644,645,646,647,648,649,651,652,653,654,655,660,661,662,663,664,665,666,667,668,669,671,672,706,713,720,721,722,723,724,732,736,737,738,745,746,766,767,774,776,824,825,827,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,855,856,857,863,864,865,866,875,892,894,896,898,915,927,928,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-486,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,350,-239,-491,-489,-500,-499,-469,-206,-207,-202,-242,-244,-245,350,-488,-208,-480,-487,473,-56,481,-92,486,-103,-205,492,-112,495,-119,499,-127,511,-153,522,-198,589,-253,597,-470,-472,-488,611,-355,-488,-243,-201,-240,-492,-490,-255,-468,-488,-357,-360,-57,-58,-93,-94,-95,-104,-105,-113,-114,-120,-121,-122,-482,-483,-484,-485,-128,-129,-130,-131,-132,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-199,-200,-254,-488,-471,-473,-474,-475,-476,-358,-356,-359,-361,805,-84,819,-179,-488,-333,869,-332,350,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-85,-86,-87,-180,-181,-182,-183,-372,914,-405,916,-383,-373,-406,-384,]),'=':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,195,200,201,204,205,206,207,208,209,210,211,271,280,289,294,295,298,301,302,303,304,305,306,307,308,309,310,313,317,318,319,320,323,324,325,335,336,337,338,339,340,343,344,345,348,349,357,362,363,366,367,368,369,388,389,390,391,392,393,394,395,396,402,429,437,442,455,457,462,465,596,609,610,619,713,732,733,734,735,743,744,747,748,758,768,769,770,782,783,784,802,803,828,829,830,852,853,860,877,881,913,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,298,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,-500,-499,-469,-206,-207,443,447,448,449,450,451,452,453,454,456,458,460,-202,-242,-244,-245,-488,-208,-480,474,475,476,477,478,479,482,483,484,487,-205,493,496,497,500,501,502,503,512,513,514,515,516,517,518,519,520,523,598,-488,613,617,618,-243,-201,-468,-488,-488,-488,775,-358,-488,-493,-494,-488,-488,806,807,815,820,821,822,-488,-497,-498,-488,-488,872,-400,-401,-488,872,-488,872,872,-402,]),')':([58,61,97,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,132,200,201,204,205,206,207,208,209,210,211,228,231,232,266,267,269,271,280,289,294,295,297,299,317,318,319,320,322,323,324,325,326,333,334,341,342,346,347,349,354,355,356,359,360,361,364,365,386,387,400,401,405,406,422,437,438,439,440,441,442,446,462,464,465,472,480,485,488,489,490,491,494,498,510,521,524,526,596,600,609,612,614,615,616,624,625,626,627,628,629,630,632,633,634,635,637,638,640,641,643,644,645,646,647,648,649,651,652,653,654,655,656,660,661,662,663,664,665,666,667,668,669,671,672,673,683,732,736,737,738,745,746,750,751,752,753,754,756,757,762,766,767,800,804,816,827,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,855,856,857,859,863,864,865,866,874,875,876,880,891,892,893,894,895,896,897,898,915,922,927,928,934,936,946,],[-479,-204,-488,-203,-215,-218,-222,-216,-217,-219,-220,-221,-223,-224,-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-478,-486,-488,-241,-488,-214,-211,-212,-213,-210,-209,-477,-239,-491,-489,403,-509,-503,-500,-499,-469,-206,-207,-488,445,-202,-242,-244,-245,-488,-488,-208,-480,-487,-49,-56,-49,-92,-49,-103,-205,-49,-111,-112,-49,-118,-119,-49,-127,-49,-153,-49,-198,-488,-504,593,-488,610,-353,-354,-355,-488,-488,-243,619,-201,623,631,636,-240,-492,-490,639,642,650,659,670,-505,-510,-468,726,-488,-357,-360,742,743,-57,-58,-49,-49,-49,-49,-49,-93,-94,-95,-49,-104,-105,-113,-114,-120,-121,-122,-482,-483,-484,-485,-128,-129,-130,-131,-132,-488,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-199,-200,-506,-488,-358,-356,-359,-361,-49,-84,808,809,810,811,812,813,814,817,818,-179,851,854,860,870,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-85,-86,-87,-49,-180,-181,-182,-183,-488,-372,-488,902,913,-403,-404,-405,915,-381,-382,-383,-373,-488,-406,-384,944,-488,957,]),'-':([58,128,132,176,195,211,231,232,268,269,271,325,326,489,490,613,646,647,648,649,737,738,739,741,775,785,786,787,788,789,790,791,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,851,875,876,897,898,915,916,928,],[-479,-478,-486,-488,302,-477,353,-489,405,-499,-500,-480,-487,353,-490,-488,-482,-483,-484,-485,786,-361,796,-386,-488,-488,-387,-388,-389,-390,-391,-392,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-385,-372,-488,-386,786,-373,-488,786,]),'+':([58,128,195,211,325,613,646,647,648,649,737,738,739,741,775,785,786,787,788,789,790,791,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,851,875,876,897,898,915,916,928,],[-479,-478,301,-477,-480,-488,-482,-483,-484,-485,787,-361,797,-386,-488,-488,-387,-388,-389,-390,-391,-392,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-385,-372,-488,-386,787,-373,-488,787,]),'|':([58,128,195,211,325,646,647,648,649,737,738,832,833,834,835,836,837,838,839,840,841,844,845,846,847,848,849,850,875,898,915,928,],[-479,-478,307,-477,-480,-482,-483,-484,-485,791,-361,-362,-363,-364,-365,-366,-367,-368,-369,-370,-371,-374,-375,-376,-377,-378,-379,-380,-372,791,-373,791,]),'ConvertFromTypeCode':([81,86,87,88,89,160,161,171,198,238,239,240,241,242,243,244,245,246,247,248,249,256,273,371,372,373,374,376,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,250,250,-193,-192,250,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,250,-488,-138,-66,-68,-124,-189,-191,-106,-247,250,-495,-496,-448,-249,-456,250,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'ConvertToTypeCode':([81,86,87,88,89,160,161,171,198,238,239,240,241,242,243,244,245,246,247,248,249,256,273,371,372,373,374,376,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,251,251,-193,-192,251,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,251,-488,-138,-66,-68,-124,-189,-191,-106,-247,251,-495,-496,-448,-249,-456,251,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'InstanceCode':([81,86,87,88,89,160,161,171,198,238,239,240,241,242,243,244,245,246,247,248,249,256,273,371,372,373,374,376,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,252,252,-193,-192,252,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,252,-488,-138,-66,-68,-124,-189,-191,-106,-247,252,-495,-496,-448,-249,-456,252,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'static':([81,86,87,88,89,160,161,171,198,238,239,240,241,242,243,244,245,246,247,248,249,256,273,371,372,373,374,376,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,253,253,-193,-192,253,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,253,-488,-138,-66,-68,-124,-189,-191,-106,-247,586,-495,-496,-448,-249,-456,586,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,586,-306,586,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'ReleaseCode':([81,160,161,198,238,239,240,241,242,243,244,245,246,247,248,249,256,371,372,373,374,376,377,403,409,410,621,823,931,940,941,950,951,952,962,963,],[-107,254,254,-192,254,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,254,-138,-66,-68,-124,-189,-191,-106,-495,-496,-80,-320,-488,-443,-488,-441,-442,-488,-440,-149,]),'TypeCode':([81,86,87,88,89,160,161,171,198,238,239,240,241,242,243,244,245,246,247,248,249,256,273,371,372,373,374,376,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,931,932,933,935,937,938,940,941,942,943,945,947,948,950,951,952,953,954,956,958,959,961,962,963,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,255,255,-193,-192,255,-137,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,255,-488,-138,-66,-68,-124,-189,-191,-106,-247,255,-495,-496,-448,-249,-456,255,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-488,-441,-442,-488,-488,-300,-488,-488,-488,-447,-440,-149,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Docstring':([81,215,258,273,327,328,329,330,331,379,380,381,382,383,384,403,467,508,599,621,862,883,884,885,886,887,902,908,909,921,925,931,],[-107,332,332,332,332,-61,-63,-64,-65,332,-166,-168,-169,-170,-171,-106,-62,-167,332,-80,332,332,-184,-186,-187,-188,-51,-185,332,332,332,332,]),'AutoPyName':([81,258,379,380,381,382,383,384,403,508,621,902,],[-107,385,385,-166,-168,-169,-170,-171,-106,-167,-80,-51,]),'BIGetReadBufferCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,559,-495,-496,-448,-249,-456,559,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'BIGetWriteBufferCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,560,-495,-496,-448,-249,-456,560,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'BIGetSegCountCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,561,-495,-496,-448,-249,-456,561,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'BIGetCharBufferCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,562,-495,-496,-448,-249,-456,562,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'explicit':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,563,-495,-496,-448,-249,-456,563,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Q_SIGNAL':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,567,-495,-496,-448,-249,-456,567,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Q_SLOT':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,569,-495,-496,-448,-249,-456,569,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'public':([81,86,87,88,89,171,198,273,276,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,589,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,416,-66,-68,-124,-191,-106,-247,570,-495,-496,-448,-249,-456,570,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,416,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'protected':([81,86,87,88,89,171,198,273,276,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,589,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,417,-66,-68,-124,-191,-106,-247,571,-495,-496,-448,-249,-456,571,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,417,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'private':([81,86,87,88,89,171,198,273,276,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,589,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,418,-66,-68,-124,-191,-106,-247,572,-495,-496,-448,-249,-456,572,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,418,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'signals':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,573,-495,-496,-448,-249,-456,573,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Q_SIGNALS':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,574,-495,-496,-448,-249,-456,574,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'ConvertToSubClassCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,575,-495,-496,-448,-249,-456,575,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'FinalisationCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,576,-495,-496,-448,-249,-456,576,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'GCClearCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,577,-495,-496,-448,-249,-456,577,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'GCTraverseCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,578,-495,-496,-448,-249,-456,578,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'BIGetBufferCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,579,-495,-496,-448,-249,-456,579,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'PickleCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,580,-495,-496,-448,-249,-456,580,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'Property':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,581,-495,-496,-448,-249,-456,581,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'BIReleaseBufferCode':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,568,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,582,-495,-496,-448,-249,-456,582,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,-306,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'virtual':([81,86,87,88,89,171,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,567,568,569,585,587,588,599,601,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,763,764,765,801,823,826,909,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,-192,-488,-66,-68,-124,-191,-106,-247,583,-495,-496,-448,-249,-456,583,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,685,-306,685,-310,-309,-311,-488,-458,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,-312,-313,-314,-350,-320,-336,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'~':([81,86,87,88,89,171,195,198,273,372,373,374,377,403,407,408,409,410,423,430,461,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,564,565,568,583,584,585,587,588,599,601,613,621,675,676,677,678,679,680,684,686,693,694,695,696,697,698,699,700,702,703,705,725,739,741,763,764,765,775,785,786,787,788,789,790,791,801,823,826,851,876,897,909,916,921,923,924,925,930,932,933,935,937,938,940,942,943,945,947,948,950,951,953,954,956,958,959,961,962,964,965,967,968,970,971,972,973,974,],[-107,-345,-346,-347,-348,-193,311,-192,-488,-66,-68,-124,-191,-106,-247,-488,-495,-496,-448,-249,-456,-488,-262,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-299,682,-306,-501,-502,-310,-309,-311,-488,-458,-488,-80,-263,-294,-295,-296,-297,-298,-304,-305,-315,-316,-67,-98,-99,-100,-52,-173,-53,-307,-308,-454,795,-386,-312,-313,-314,-488,-488,-387,-388,-389,-390,-391,-392,-350,-320,-336,-385,-488,-386,-488,-488,-488,-178,-455,-488,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,-488,-488,-441,-442,-488,-300,-488,-488,-488,-447,-440,-303,-488,-488,-352,-445,-446,-349,-351,-444,]),'AccessCode':([81,403,435,602,603,604,605,728,729,730,731,],[-107,-106,606,606,-461,-463,-464,-462,-465,-466,-467,]),'GetCode':([81,403,435,602,603,604,605,728,729,730,731,],[-107,-106,607,607,-461,-463,-464,-462,-465,-466,-467,]),'SetCode':([81,403,435,602,603,604,605,728,729,730,731,],[-107,-106,608,608,-461,-463,-464,-462,-465,-466,-467,]),'RaiseCode':([81,403,592,714,715,716,717,778,779,780,],[-107,-106,718,718,-339,-341,-342,-340,-343,-344,]),'.':([130,132,140,142,162,232,326,490,625,629,630,666,722,],[214,-486,214,214,214,214,-487,214,214,214,214,214,214,]),'EOL':([132,229,230,231,232,234,235,326,489,490,],[-486,351,-110,-491,-489,358,-117,-487,-492,-490,]),'!':([176,195,404,613,739,741,775,785,786,787,788,789,790,791,851,876,897,916,],[270,313,525,-488,794,-386,-488,-488,-387,-388,-389,-390,-391,-392,-385,-488,-386,-488,]),'%':([195,],[305,]),'^':([195,],[308,]),'[':([195,289,596,610,619,733,734,735,743,744,782,783,784,802,803,814,817,828,829,830,852,853,858,861,871,873,877,878,879,882,889,890,899,900,901,913,917,],[312,-469,-468,-488,-488,-488,-493,-494,-488,-488,-488,-497,-498,-488,-488,-488,-488,-488,-400,-401,-488,-488,-488,-488,-488,-408,-488,-488,-488,905,911,-407,-488,911,911,-402,911,]),'name':([217,218,219,220,221,222,225,226,233,236,260,265,473,486,492,495,511,522,701,819,],[335,336,337,338,339,340,345,348,357,362,393,402,335,348,357,362,393,402,769,769,]),'id':([224,481,],[343,343,]),'order':([224,481,],[344,344,]),'optional':([236,495,],[363,363,]),'licensee':([237,499,],[366,366,]),'signature':([237,499,622,805,],[367,367,748,748,]),'timestamp':([237,499,],[368,368,]),'type':([237,499,],[369,369,]),'all_raise_py_exception':([260,511,],[388,388,]),'call_super_init':([260,511,],[389,389,]),'default_VirtualErrorHandler':([260,511,],[390,390,]),'keyword_arguments':([260,511,],[391,391,]),'language':([260,511,],[392,392,]),'py_ssize_t_clean':([260,511,],[394,394,]),'use_argument_names':([260,511,],[395,395,]),'use_limited_api':([260,511,],[396,396,]),'LOGICAL_OR':([267,269,406,524,673,],[404,-503,-504,-505,-506,]),']':([312,944,957,],[459,955,966,]),'PreMethodCode':([409,410,621,921,925,930,931,932,933,935,937,941,],[-495,-496,-80,-488,-488,939,-488,939,939,939,939,939,]),'MethodCode':([409,410,621,921,925,930,931,932,933,935,937,938,940,941,942,943,945,947,951,952,],[-495,-496,-80,-488,-488,-488,-488,-488,-488,-488,-488,949,-443,-488,949,949,949,949,-442,949,]),'VirtualCatcherCode':([409,410,621,925,930,932,935,937,938,940,942,945,947,948,950,951,953,956,958,962,],[-495,-496,-80,-488,-488,-488,-488,-488,-488,-443,-488,-488,-488,960,-441,-442,960,960,960,-440,]),'VirtualCallCode':([409,410,621,925,930,935,937,938,940,945,947,948,950,951,956,958,959,961,962,965,967,971,],[-495,-496,-80,-488,-488,-488,-488,-488,-443,-488,-488,-488,-441,-442,-488,-488,969,-447,-440,969,969,-446,]),'NUMBER':([483,598,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,872,876,897,916,],[634,724,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,845,-393,-394,-395,-396,-397,-398,-399,-385,890,-488,-386,-488,]),'true':([497,512,513,518,519,520,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[646,646,646,646,646,646,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,646,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'True':([497,512,513,518,519,520,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[647,647,647,647,647,647,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,647,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'false':([497,512,513,518,519,520,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[648,648,648,648,648,648,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,648,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'False':([497,512,513,518,519,520,613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[649,649,649,649,649,649,-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,649,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'slots':([570,571,572,],[688,688,688,]),'Q_SLOTS':([570,571,572,],[689,689,689,]),'final':([610,619,733,734,735,743,744,802,],[-488,-488,783,-493,-494,-488,783,783,]),'noexcept':([610,619,733,734,735,743,744,782,783,784,802,803,814,817,852,858,860,],[-488,-488,-488,-493,-494,-488,-488,830,-497,-498,-488,830,-488,830,830,830,830,]),'throw':([610,619,733,734,735,743,744,782,783,784,802,803,814,817,852,858,860,],[-488,-488,-488,-493,-494,-488,-488,831,-497,-498,-488,831,-488,831,831,831,831,]),'NULL':([613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,844,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'QUOTED_CHAR':([613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,847,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'REAL':([613,739,741,775,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,851,876,897,916,],[-488,-488,-386,-488,-488,-387,-388,-389,-390,-391,-392,848,-393,-394,-395,-396,-397,-398,-399,-385,-488,-386,-488,]),'format':([622,805,],[747,747,]),'remove_leading':([658,],[758,]),'get':([701,819,],[768,768,]),'set':([701,819,],[770,770,]),}
+_lr_action_items = {'EOF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[35,35,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'CompositeModule':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[49,49,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Copying':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[50,50,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'DefaultDocstringFormat':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[51,51,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'DefaultDocstringSignature':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[52,52,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'DefaultEncoding':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[53,53,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'DefaultMetatype':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[54,54,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'DefaultSupertype':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[55,55,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ExportedHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[56,56,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ExportedTypeHintCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[57,57,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Extract':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[58,58,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Feature':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[60,60,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'HideNamespace':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[61,61,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Import':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[63,63,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Include':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[64,64,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'InitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[65,65,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'License':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[66,66,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Module':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[69,69,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ModuleCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[70,70,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ModuleHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[71,71,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Platforms':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[72,72,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Plugin':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[73,73,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'PreInitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[74,74,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'PostInitialisationCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[75,75,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Timeline':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[76,76,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'TypeHintCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[77,77,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,77,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,77,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'UnitCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[78,78,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'UnitPostIncludeCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[79,79,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'VirtualErrorHandler':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[80,80,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'If':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,162,163,164,166,167,169,170,171,173,174,175,181,200,213,215,216,217,224,240,241,242,243,244,245,246,247,248,249,250,251,258,259,260,261,266,275,287,291,327,328,329,330,331,332,352,357,370,371,372,373,375,376,378,379,380,381,382,383,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,496,522,528,563,565,567,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,620,621,624,625,628,630,631,632,633,634,649,650,652,665,668,671,675,676,677,678,679,686,688,705,706,707,712,714,715,716,717,718,719,720,721,729,730,731,734,735,736,737,755,761,765,766,775,776,778,780,781,782,803,810,811,812,813,814,815,828,829,830,831,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,865,870,871,872,877,891,892,893,904,906,910,911,912,913,914,915,919,924,925,929,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[81,81,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,81,81,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,81,-61,-91,81,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,81,-152,81,-166,-199,81,81,-475,-486,81,-62,-64,-65,-66,-109,-116,-139,-67,-69,-125,-192,-194,81,-167,-169,-170,-171,-172,-175,-193,-107,-251,81,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,81,-458,-253,81,-462,-63,-134,-135,-168,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,81,81,-459,-474,-497,-464,81,-467,-469,-470,-60,-81,-497,-103,-110,-117,-488,-489,-490,-491,-127,-165,-497,-318,-319,-320,81,-333,-335,-336,-497,81,-345,-347,-348,-460,-500,-501,-468,-471,-472,-473,-56,-92,-153,-200,-334,-497,-339,-346,-349,-350,-356,-72,-74,-76,-78,-80,-98,-326,-497,-338,-342,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-497,-337,-340,-341,-378,-179,-185,81,-52,-497,81,-187,-189,-190,-191,-497,-379,-497,-497,-188,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'End':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,162,163,164,166,167,169,170,171,173,174,175,181,200,213,215,216,217,224,240,241,242,243,244,245,246,247,248,249,250,251,258,259,260,261,266,275,287,291,327,328,329,330,331,332,352,357,370,371,372,373,375,376,378,379,380,381,382,383,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,496,522,528,563,565,567,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,620,621,624,625,628,630,631,632,633,634,649,650,652,665,668,671,675,676,677,678,679,686,688,705,706,707,712,714,715,716,717,718,719,720,721,729,730,731,734,735,736,737,755,761,765,766,775,776,778,780,781,782,803,810,811,812,813,814,815,828,829,830,831,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,865,870,871,872,877,891,892,893,904,906,910,911,912,913,914,915,919,924,925,929,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[82,82,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,82,82,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,82,-61,-91,82,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,82,-152,82,-166,-199,82,82,-475,-486,82,-62,-64,-65,-66,-109,-116,-139,-67,-69,-125,-192,-194,82,-167,-169,-170,-171,-172,-175,-193,-107,-251,82,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,82,-458,-253,82,-462,-63,-134,-135,-168,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,82,82,-459,-474,-497,-464,82,-467,-469,-470,-60,-81,-497,-103,-110,-117,-488,-489,-490,-491,-127,-165,-497,-318,-319,-320,82,-333,-335,-336,-497,82,-345,-347,-348,-460,-500,-501,-468,-471,-472,-473,-56,-92,-153,-200,-334,-497,-339,-346,-349,-350,-356,-72,-74,-76,-78,-80,-98,-326,-497,-338,-342,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-497,-337,-340,-341,-378,-179,-185,82,-52,-497,82,-187,-189,-190,-191,-497,-379,-497,-497,-188,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'class':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,84,85,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,287,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,446,448,452,469,471,472,485,486,487,491,522,524,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[83,83,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,83,184,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,83,83,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,83,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,83,-305,-312,-316,-315,-317,-454,83,-458,-253,-462,-487,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'enum':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,162,163,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,240,241,242,243,244,245,246,247,248,249,250,251,258,259,261,266,275,287,327,352,357,370,371,372,373,375,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[85,85,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,85,85,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,85,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,85,-152,-166,-199,85,85,-486,-109,-116,-139,-67,-69,-125,-192,-194,-175,-193,-107,-251,85,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,85,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'Exception':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,287,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[86,86,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,86,86,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,86,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,86,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'namespace':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,287,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[91,91,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,91,91,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,91,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,91,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'struct':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,85,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[92,92,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,185,-351,-352,-353,-354,194,194,194,194,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,194,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,194,-195,194,-483,-55,-61,-91,194,-152,-166,-199,92,92,194,194,-486,194,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,92,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,194,-312,194,194,-316,194,-315,-317,-454,92,-458,-253,194,194,-462,-134,-135,-267,-300,-301,-302,-303,-304,194,-310,194,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,194,-497,-60,-81,-497,-103,-110,-117,-127,194,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,194,-497,-393,-394,-395,-396,-397,-398,194,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,194,-497,194,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,194,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'typedef':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,287,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[93,93,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,93,93,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,93,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,93,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'union':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,85,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[95,95,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,186,-351,-352,-353,-354,195,195,195,195,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,195,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,195,-195,195,-483,-55,-61,-91,195,-152,-166,-199,95,95,195,195,-486,195,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,95,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,195,-312,195,195,-316,195,-315,-317,-454,95,-458,-253,195,195,-462,-134,-135,-267,-300,-301,-302,-303,-304,195,-310,195,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,195,-497,-60,-81,-497,-103,-110,-117,-127,195,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,195,-497,-393,-394,-395,-396,-397,-398,195,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,195,-497,195,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,195,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'TypeHeaderCode':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,162,163,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,240,241,242,243,244,245,246,247,248,249,250,251,258,259,261,266,275,287,327,352,357,370,371,372,373,375,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,621,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,718,719,720,721,729,730,731,755,761,765,766,780,781,782,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[96,96,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,96,96,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,96,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,96,-152,-166,-199,96,96,-486,-109,-116,-139,-67,-69,-125,-192,-194,-175,-193,-107,-251,96,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,96,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,723,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,723,-345,-347,-348,-460,-500,-501,-56,-92,-153,-200,-346,-349,-350,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'MappedType':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,84,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,524,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[97,97,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,182,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-487,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'template':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,275,287,327,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,563,565,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[99,99,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,99,99,-486,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,99,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,99,-458,-253,-462,-134,-135,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'operator':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,62,82,87,88,89,90,94,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,192,199,200,202,203,206,207,208,209,210,211,212,213,215,217,224,259,261,266,275,287,296,297,319,320,321,322,325,326,327,350,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,450,451,452,453,467,469,470,471,472,485,486,487,491,522,523,526,563,565,587,588,589,590,591,592,596,597,598,605,606,607,608,609,610,611,612,614,615,616,617,624,628,630,649,650,652,665,668,671,679,686,688,705,706,707,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[100,100,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-207,-108,-351,-352,-353,-354,197,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-209,-210,-195,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,-55,-61,-91,-152,-166,-199,100,100,-209,-210,-205,-245,-247,-248,-497,-211,-486,-208,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,100,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-485,100,-312,100,100,-316,100,-315,-317,-454,100,-458,-253,-462,-246,-204,-134,-135,-267,-300,-301,-302,-303,-304,-310,100,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,197,-314,-459,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-318,-319,-320,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'const':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,100,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,200,204,213,215,217,224,255,259,261,266,275,287,299,320,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,639,640,648,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,749,755,761,765,766,783,803,810,811,812,813,814,815,816,828,831,865,891,892,906,907,915,917,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[101,101,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,101,101,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,101,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,101,-483,-55,-61,-91,101,-152,-166,-199,101,101,101,523,101,-486,101,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,101,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,101,-312,101,101,-316,101,-315,-317,-454,101,-458,-253,101,101,-462,-134,-135,-267,-300,-301,-302,-303,-304,101,-310,101,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,740,101,740,-60,-81,-497,-103,-110,-117,-127,101,-165,-497,-318,-319,-320,-460,-500,-501,740,-56,-92,-153,-200,101,-356,-72,-74,-76,-78,-80,-98,740,-326,-342,-497,-179,-185,-497,101,-497,101,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,101,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'unsigned':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[103,103,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,103,103,103,103,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,103,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,103,-195,103,-483,-55,-61,-91,103,-152,-166,-199,103,103,103,103,-486,103,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,103,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,103,-312,103,103,-316,103,-315,-317,-454,103,-458,-253,103,103,-462,-134,-135,-267,-300,-301,-302,-303,-304,103,-310,103,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,103,-497,-60,-81,-497,-103,-110,-117,-127,103,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,103,-497,-393,-394,-395,-396,-397,-398,103,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,103,-497,103,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,103,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'signed':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[105,105,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,105,105,105,105,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,105,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,105,-195,105,-483,-55,-61,-91,105,-152,-166,-199,105,105,105,105,-486,105,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,105,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,105,-312,105,105,-316,105,-315,-317,-454,105,-458,-253,105,105,-462,-134,-135,-267,-300,-301,-302,-303,-304,105,-310,105,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,105,-497,-60,-81,-497,-103,-110,-117,-127,105,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,105,-497,-393,-394,-395,-396,-397,-398,105,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,105,-497,105,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,105,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'long':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,103,104,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,207,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[104,104,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,104,104,104,104,207,211,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,104,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,104,-195,104,326,-483,-55,-61,-91,104,-152,-166,-199,104,104,104,104,-486,104,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,104,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,104,-312,104,104,-316,104,-315,-317,-454,104,-458,-253,104,104,-462,-134,-135,-267,-300,-301,-302,-303,-304,104,-310,104,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,104,-497,-60,-81,-497,-103,-110,-117,-127,104,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,104,-497,-393,-394,-395,-396,-397,-398,104,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,104,-497,104,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,104,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'short':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,103,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[107,107,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,107,107,107,107,209,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,107,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,107,-195,107,-483,-55,-61,-91,107,-152,-166,-199,107,107,107,107,-486,107,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,107,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,107,-312,107,107,-316,107,-315,-317,-454,107,-458,-253,107,107,-462,-134,-135,-267,-300,-301,-302,-303,-304,107,-310,107,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,107,-497,-60,-81,-497,-103,-110,-117,-127,107,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,107,-497,-393,-394,-395,-396,-397,-398,107,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,107,-497,107,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,107,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'int':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,103,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[108,108,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,108,108,108,108,210,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,108,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,108,-195,108,-483,-55,-61,-91,108,-152,-166,-199,108,108,108,108,-486,108,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,108,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,108,-312,108,108,-316,108,-315,-317,-454,108,-458,-253,108,108,-462,-134,-135,-267,-300,-301,-302,-303,-304,108,-310,108,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,108,-497,-60,-81,-497,-103,-110,-117,-127,108,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,108,-497,-393,-394,-395,-396,-397,-398,108,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,108,-497,108,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,108,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'float':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[109,109,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,109,109,109,109,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,109,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,109,-195,109,-483,-55,-61,-91,109,-152,-166,-199,109,109,109,109,-486,109,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,109,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,109,-312,109,109,-316,109,-315,-317,-454,109,-458,-253,109,109,-462,-134,-135,-267,-300,-301,-302,-303,-304,109,-310,109,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,109,-497,-60,-81,-497,-103,-110,-117,-127,109,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,109,-497,-393,-394,-395,-396,-397,-398,109,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,109,-497,109,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,109,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'double':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[110,110,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,110,110,110,110,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,110,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,110,-195,110,-483,-55,-61,-91,110,-152,-166,-199,110,110,110,110,-486,110,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,110,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,110,-312,110,110,-316,110,-315,-317,-454,110,-458,-253,110,110,-462,-134,-135,-267,-300,-301,-302,-303,-304,110,-310,110,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,110,-497,-60,-81,-497,-103,-110,-117,-127,110,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,110,-497,-393,-394,-395,-396,-397,-398,110,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,110,-497,110,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,110,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'bool':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[111,111,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,111,111,111,111,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,111,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,111,-195,111,-483,-55,-61,-91,111,-152,-166,-199,111,111,111,111,-486,111,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,111,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,111,-312,111,111,-316,111,-315,-317,-454,111,-458,-253,111,111,-462,-134,-135,-267,-300,-301,-302,-303,-304,111,-310,111,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,111,-497,-60,-81,-497,-103,-110,-117,-127,111,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,111,-497,-393,-394,-395,-396,-397,-398,111,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,111,-497,111,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,111,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'char':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,103,105,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[106,106,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,106,106,106,106,208,212,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,106,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,106,-195,106,-483,-55,-61,-91,106,-152,-166,-199,106,106,106,106,-486,106,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,106,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,106,-312,106,106,-316,106,-315,-317,-454,106,-458,-253,106,106,-462,-134,-135,-267,-300,-301,-302,-303,-304,106,-310,106,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,106,-497,-60,-81,-497,-103,-110,-117,-127,106,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,106,-497,-393,-394,-395,-396,-397,-398,106,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,106,-497,106,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,106,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'wchar_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[112,112,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,112,112,112,112,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,112,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,112,-195,112,-483,-55,-61,-91,112,-152,-166,-199,112,112,112,112,-486,112,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,112,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,112,-312,112,112,-316,112,-315,-317,-454,112,-458,-253,112,112,-462,-134,-135,-267,-300,-301,-302,-303,-304,112,-310,112,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,112,-497,-60,-81,-497,-103,-110,-117,-127,112,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,112,-497,-393,-394,-395,-396,-397,-398,112,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,112,-497,112,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,112,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'void':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[113,113,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,113,113,113,113,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,113,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,113,-195,113,-483,-55,-61,-91,113,-152,-166,-199,113,113,113,113,-486,113,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,113,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,113,-312,113,113,-316,113,-315,-317,-454,113,-458,-253,113,113,-462,-134,-135,-267,-300,-301,-302,-303,-304,113,-310,113,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,113,-497,-60,-81,-497,-103,-110,-117,-127,113,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,113,-497,-393,-394,-395,-396,-397,-398,113,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,113,-497,113,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,113,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYOBJECT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[114,114,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,114,114,114,114,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,114,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,114,-195,114,-483,-55,-61,-91,114,-152,-166,-199,114,114,114,114,-486,114,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,114,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,114,-312,114,114,-316,114,-315,-317,-454,114,-458,-253,114,114,-462,-134,-135,-267,-300,-301,-302,-303,-304,114,-310,114,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,114,-497,-60,-81,-497,-103,-110,-117,-127,114,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,114,-497,-393,-394,-395,-396,-397,-398,114,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,114,-497,114,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,114,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYTUPLE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[115,115,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,115,115,115,115,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,115,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,115,-195,115,-483,-55,-61,-91,115,-152,-166,-199,115,115,115,115,-486,115,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,115,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,115,-312,115,115,-316,115,-315,-317,-454,115,-458,-253,115,115,-462,-134,-135,-267,-300,-301,-302,-303,-304,115,-310,115,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,115,-497,-60,-81,-497,-103,-110,-117,-127,115,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,115,-497,-393,-394,-395,-396,-397,-398,115,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,115,-497,115,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,115,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYLIST':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[116,116,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,116,116,116,116,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,116,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,116,-195,116,-483,-55,-61,-91,116,-152,-166,-199,116,116,116,116,-486,116,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,116,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,116,-312,116,116,-316,116,-315,-317,-454,116,-458,-253,116,116,-462,-134,-135,-267,-300,-301,-302,-303,-304,116,-310,116,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,116,-497,-60,-81,-497,-103,-110,-117,-127,116,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,116,-497,-393,-394,-395,-396,-397,-398,116,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,116,-497,116,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,116,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYDICT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[117,117,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,117,117,117,117,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,117,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,117,-195,117,-483,-55,-61,-91,117,-152,-166,-199,117,117,117,117,-486,117,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,117,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,117,-312,117,117,-316,117,-315,-317,-454,117,-458,-253,117,117,-462,-134,-135,-267,-300,-301,-302,-303,-304,117,-310,117,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,117,-497,-60,-81,-497,-103,-110,-117,-127,117,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,117,-497,-393,-394,-395,-396,-397,-398,117,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,117,-497,117,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,117,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYCALLABLE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[118,118,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,118,118,118,118,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,118,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,118,-195,118,-483,-55,-61,-91,118,-152,-166,-199,118,118,118,118,-486,118,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,118,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,118,-312,118,118,-316,118,-315,-317,-454,118,-458,-253,118,118,-462,-134,-135,-267,-300,-301,-302,-303,-304,118,-310,118,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,118,-497,-60,-81,-497,-103,-110,-117,-127,118,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,118,-497,-393,-394,-395,-396,-397,-398,118,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,118,-497,118,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,118,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYSLICE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[119,119,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,119,119,119,119,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,119,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,119,-195,119,-483,-55,-61,-91,119,-152,-166,-199,119,119,119,119,-486,119,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,119,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,119,-312,119,119,-316,119,-315,-317,-454,119,-458,-253,119,119,-462,-134,-135,-267,-300,-301,-302,-303,-304,119,-310,119,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,119,-497,-60,-81,-497,-103,-110,-117,-127,119,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,119,-497,-393,-394,-395,-396,-397,-398,119,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,119,-497,119,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,119,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYTYPE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[120,120,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,120,120,120,120,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,120,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,120,-195,120,-483,-55,-61,-91,120,-152,-166,-199,120,120,120,120,-486,120,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,120,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,120,-312,120,120,-316,120,-315,-317,-454,120,-458,-253,120,120,-462,-134,-135,-267,-300,-301,-302,-303,-304,120,-310,120,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,120,-497,-60,-81,-497,-103,-110,-117,-127,120,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,120,-497,-393,-394,-395,-396,-397,-398,120,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,120,-497,120,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,120,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYBUFFER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[121,121,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,121,121,121,121,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,121,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,121,-195,121,-483,-55,-61,-91,121,-152,-166,-199,121,121,121,121,-486,121,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,121,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,121,-312,121,121,-316,121,-315,-317,-454,121,-458,-253,121,121,-462,-134,-135,-267,-300,-301,-302,-303,-304,121,-310,121,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,121,-497,-60,-81,-497,-103,-110,-117,-127,121,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,121,-497,-393,-394,-395,-396,-397,-398,121,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,121,-497,121,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,121,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_PYENUM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[122,122,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,122,122,122,122,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,122,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,122,-195,122,-483,-55,-61,-91,122,-152,-166,-199,122,122,122,122,-486,122,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,122,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,122,-312,122,122,-316,122,-315,-317,-454,122,-458,-253,122,122,-462,-134,-135,-267,-300,-301,-302,-303,-304,122,-310,122,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,122,-497,-60,-81,-497,-103,-110,-117,-127,122,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,122,-497,-393,-394,-395,-396,-397,-398,122,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,122,-497,122,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,122,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SIP_SSIZE_T':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[123,123,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,123,123,123,123,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,123,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,123,-195,123,-483,-55,-61,-91,123,-152,-166,-199,123,123,123,123,-486,123,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,123,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,123,-312,123,123,-316,123,-315,-317,-454,123,-458,-253,123,123,-462,-134,-135,-267,-300,-301,-302,-303,-304,123,-310,123,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,123,-497,-60,-81,-497,-103,-110,-117,-127,123,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,123,-497,-393,-394,-395,-396,-397,-398,123,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,123,-497,123,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,123,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Py_hash_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[124,124,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,124,124,124,124,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,124,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,124,-195,124,-483,-55,-61,-91,124,-152,-166,-199,124,124,124,124,-486,124,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,124,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,124,-312,124,124,-316,124,-315,-317,-454,124,-458,-253,124,124,-462,-134,-135,-267,-300,-301,-302,-303,-304,124,-310,124,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,124,-497,-60,-81,-497,-103,-110,-117,-127,124,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,124,-497,-393,-394,-395,-396,-397,-398,124,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,124,-497,124,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,124,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Py_ssize_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[125,125,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,125,125,125,125,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,125,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,125,-195,125,-483,-55,-61,-91,125,-152,-166,-199,125,125,125,125,-486,125,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,125,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,125,-312,125,125,-316,125,-315,-317,-454,125,-458,-253,125,125,-462,-134,-135,-267,-300,-301,-302,-303,-304,125,-310,125,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,125,-497,-60,-81,-497,-103,-110,-117,-127,125,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,125,-497,-393,-394,-395,-396,-397,-398,125,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,125,-497,125,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,125,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'size_t':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[126,126,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,126,126,126,126,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,126,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,126,-195,126,-483,-55,-61,-91,126,-152,-166,-199,126,126,126,126,-486,126,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,126,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,126,-312,126,126,-316,126,-315,-317,-454,126,-458,-253,126,126,-462,-134,-135,-267,-300,-301,-302,-303,-304,126,-310,126,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,126,-497,-60,-81,-497,-103,-110,-117,-127,126,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,126,-497,-393,-394,-395,-396,-397,-398,126,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,126,-497,126,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,126,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ELLIPSIS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,93,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,200,204,213,215,217,224,255,259,261,266,275,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,467,469,470,471,472,485,486,487,491,505,507,522,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,865,878,891,892,899,906,907,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[127,127,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,127,127,127,127,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,127,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,127,-195,127,-483,-55,-61,-91,127,-152,-166,-199,127,127,127,127,-486,127,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,127,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,127,-312,127,127,-316,127,-315,-317,-454,127,-458,-253,127,127,-462,-134,-135,-267,-300,-301,-302,-303,-304,127,-310,127,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-459,-497,-464,127,-497,-60,-81,-497,-103,-110,-117,-127,127,-165,-497,-318,-319,-320,-460,-500,-501,-497,-392,-56,-92,-153,-200,-497,127,-497,-393,-394,-395,-396,-397,-398,127,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,-497,-497,-179,-185,-392,-497,127,-497,127,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,127,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'SCOPE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,61,82,83,86,87,88,89,90,91,92,93,95,97,100,101,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,159,160,164,166,167,169,170,171,173,174,175,181,182,194,195,200,204,213,215,217,224,255,259,261,266,275,278,284,287,299,324,327,351,352,357,371,372,373,376,396,398,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,450,451,452,453,467,469,470,471,472,476,477,478,479,480,485,486,487,491,505,507,522,548,563,565,587,588,589,590,591,592,595,596,597,598,605,606,607,608,609,610,611,612,614,615,617,618,624,628,630,640,642,649,650,652,665,668,671,679,685,686,688,705,706,707,729,730,731,745,746,747,755,761,765,766,777,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,828,831,853,864,865,878,891,892,899,906,907,909,915,917,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[128,128,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,128,-108,128,128,-351,-352,-353,-354,128,128,128,128,128,128,128,214,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,128,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,128,128,128,-195,128,-483,-55,-61,-91,128,-152,-166,-199,128,-497,128,128,128,128,-486,128,-109,-116,-67,-69,-125,-194,-175,-193,-107,-251,128,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-485,128,-312,128,128,-316,128,-315,-317,128,-260,-261,-262,-263,-454,128,-458,-253,128,128,-462,128,-134,-135,-267,-300,-301,-302,-303,-304,128,-310,128,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-459,-497,-464,128,-497,-60,-81,-497,-103,-110,-117,-127,128,-165,-497,-318,-319,-320,-460,-500,-501,-497,128,-392,-56,-92,-153,-200,-497,128,-497,-393,-394,-395,-396,-397,-398,128,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,-326,-342,-391,128,-497,-497,-179,-185,-392,-497,128,128,-497,128,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,128,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'NAME':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,55,58,59,60,61,62,63,64,69,73,80,82,83,85,86,87,88,89,90,91,92,93,94,95,97,98,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,154,155,157,159,160,164,166,167,168,169,170,171,172,173,174,175,178,181,182,183,184,185,186,187,192,193,194,195,199,200,202,203,204,206,207,208,209,210,211,212,213,214,215,217,224,255,259,261,263,264,265,266,272,275,278,284,287,290,291,296,297,299,319,320,321,322,324,325,326,327,350,351,352,357,371,372,373,374,376,396,397,398,402,403,404,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,447,448,450,451,452,453,467,469,470,471,472,476,477,478,479,480,485,486,487,491,494,498,505,507,522,523,526,535,539,540,543,545,548,552,555,563,565,573,576,582,584,587,588,589,590,591,592,594,595,596,597,598,605,606,607,608,609,610,611,612,614,615,616,617,618,620,624,625,626,627,628,630,640,642,649,650,652,665,668,671,675,676,677,678,679,685,686,688,705,706,707,712,714,715,716,717,729,730,731,745,746,747,755,761,765,766,775,776,777,778,783,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,803,810,811,812,813,814,815,825,826,827,828,829,830,831,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,853,864,865,870,871,872,877,878,891,892,899,906,907,909,915,917,919,920,924,925,930,931,935,937,939,940,942,943,944,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[59,59,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,133,133,133,148,-485,150,59,-207,-51,-51,133,169,176,-108,59,-497,59,-351,-352,-353,-354,59,59,59,196,59,59,-497,59,59,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,59,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,59,232,232,-124,-126,-497,-173,-151,264,-176,-178,-177,264,-196,-197,-198,271,-249,59,282,-327,-328,-329,-330,-209,294,59,59,-210,-195,-497,-244,59,-497,-217,-214,-215,-216,-213,-212,-483,327,-55,-61,-91,59,-152,-166,397,-512,397,-199,405,450,-497,59,59,490,-475,-209,-210,59,-205,-245,-247,-248,59,-497,-211,-486,-208,59,-109,-116,-67,-69,-125,564,-194,-175,-513,-193,-107,583,282,-251,450,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,593,-305,-485,59,-312,59,59,-316,59,-315,-317,59,-260,-261,-262,-263,-454,59,-458,-253,629,282,59,59,-462,-246,-204,133,133,133,662,664,59,232,232,-134,-135,692,133,701,702,-267,-300,-301,-302,-303,-304,703,59,-310,59,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,709,-314,-497,717,-459,-474,490,133,-497,-464,59,-497,-60,-81,-497,-103,-110,-117,-488,-489,-490,-491,-127,59,-165,-497,-318,-319,-320,717,-333,-335,-336,-497,-460,-500,-501,-497,59,-392,-56,-92,-153,-200,-334,-497,-497,-339,59,-497,-393,-394,-395,-396,-397,-398,59,-399,-400,-401,-402,-403,-404,-405,-356,-72,-74,-76,-78,-80,-98,867,868,869,-326,-497,-338,-342,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-391,59,-497,-337,-340,-341,-378,-497,-179,-185,-392,-497,59,59,-497,59,-379,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,59,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,130,131,133,134,135,136,138,140,142,144,146,147,150,152,159,160,164,166,167,169,170,171,173,174,175,181,200,213,215,217,224,259,261,266,327,352,357,396,398,402,406,485,491,522,563,565,628,630,649,650,652,665,668,671,679,686,688,729,730,731,755,761,765,766,803,810,811,812,813,814,815,828,831,915,930,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,972,974,975,976,977,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-2,-497,-492,-493,-70,-71,-73,-75,-77,-79,-89,-90,-97,-102,-124,-126,-497,-173,-151,-176,-178,-177,-196,-197,-198,-249,-195,-483,-55,-61,-91,-152,-166,-199,-486,-109,-116,-175,-193,-107,-251,-454,-253,-462,-134,-135,-497,-464,-60,-81,-497,-103,-110,-117,-127,-165,-497,-460,-500,-501,-56,-92,-153,-200,-356,-72,-74,-76,-78,-80,-98,-326,-342,-497,-461,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'}':([36,37,38,39,40,41,42,43,44,45,46,47,48,59,82,87,88,89,90,129,173,181,200,213,240,241,242,243,244,245,246,247,248,249,250,251,258,263,264,265,291,327,328,329,330,331,332,370,371,372,373,375,376,378,379,380,381,382,383,397,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,486,487,491,522,528,567,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,620,624,625,628,630,631,632,633,634,650,675,676,677,678,705,706,707,711,712,713,714,715,716,717,718,719,720,721,729,730,731,734,735,736,737,775,776,778,780,781,782,803,828,829,830,831,835,836,837,838,839,840,841,842,843,844,846,847,848,849,850,851,852,865,870,871,872,877,891,892,904,906,910,911,912,913,914,915,919,924,925,929,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-485,-108,-351,-352,-353,-354,-484,-196,-249,-195,-483,369,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,377,396,-512,398,-475,-486,527,-62,-64,-65,-66,-139,-67,-69,-125,-192,-194,566,-167,-169,-170,-171,-172,-513,-107,-251,586,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,623,-458,-253,-462,-63,-168,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-459,-474,-497,-464,733,-467,-469,-470,-81,-488,-489,-490,-491,-318,-319,-320,774,-331,-332,-333,-335,-336,-497,779,-345,-347,-348,-460,-500,-501,-468,-471,-472,-473,-334,-497,-339,-346,-349,-350,-356,-326,-497,-338,-342,-369,-370,-371,-372,-373,-374,-375,-376,-377,877,-380,-381,-382,-383,-384,-385,-386,-497,-337,-340,-341,-378,-179,-185,-52,-497,928,-187,-189,-190,-191,-497,-379,-497,-497,-188,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'DOTTED_NAME':([49,54,55,63,64,69,155,157,535,539,540,552,555,576,627,],[134,134,134,-51,-51,134,233,233,134,134,134,233,233,134,134,]),'(':([49,51,52,53,54,55,58,59,60,61,62,63,64,66,69,80,81,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,132,137,139,141,143,145,149,151,153,156,158,161,165,177,188,193,196,197,202,203,205,206,207,208,209,210,211,212,213,296,297,300,302,303,304,305,306,307,308,309,310,311,312,313,319,320,321,322,325,326,327,333,350,384,450,465,504,506,508,509,510,511,512,513,514,515,516,517,518,519,520,521,523,526,532,564,568,593,613,642,646,647,703,709,732,777,787,788,789,790,791,792,793,822,845,851,878,885,920,932,],[-49,-49,-49,-49,-49,-49,-49,-485,-49,-49,-207,-49,-49,-49,-49,-49,178,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,218,219,220,221,222,223,225,226,227,235,238,239,262,267,284,295,299,301,-497,-244,324,-497,-217,-214,-215,-216,-213,-212,-483,-209,-210,505,507,-417,-418,-419,-420,-421,-422,-423,-424,-440,-444,-437,-205,-245,-247,-248,-497,-211,-486,-49,-208,-49,595,-49,-442,-438,-427,-428,-429,-430,-431,-432,-433,-434,-425,-441,-426,-445,-439,-443,-246,-204,651,685,687,595,708,746,-435,-436,767,299,783,746,746,-393,-394,-395,-396,-397,-398,864,878,-207,746,907,746,944,]),'CODE_BLOCK':([50,56,57,65,70,71,74,75,77,78,79,96,148,176,252,253,254,256,257,333,441,442,443,444,459,460,461,462,463,464,466,529,530,531,635,636,637,660,699,722,723,856,938,949,960,973,],[135,146,147,159,166,167,170,171,173,174,175,200,224,266,371,372,373,375,376,-497,588,589,590,591,607,608,609,610,611,612,614,650,-82,-83,735,736,737,761,766,781,782,-84,951,962,968,977,]),'STRING':([51,52,53,66,333,536,537,538,559,560,561,562,574,575,627,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,808,809,817,853,878,899,920,],[136,138,140,160,531,655,656,657,681,682,683,684,693,694,727,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,852,-399,-400,-401,-402,-403,-404,-405,858,859,861,-391,-497,-392,-497,]),'<':([59,62,99,129,197,213,311,327,450,851,],[-485,154,204,-484,311,-483,516,-486,-485,154,]),'*':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,192,197,199,202,203,206,207,208,209,210,211,212,213,295,296,297,320,325,326,327,350,450,523,642,675,676,677,678,743,744,745,747,777,787,788,789,790,791,792,793,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,853,877,878,899,900,919,920,933,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-209,305,-210,320,-244,-497,-217,-214,-215,-216,-213,-212,-483,494,-209,-210,-245,320,-211,-486,-208,-485,-246,-497,-488,-489,-490,-491,790,-367,800,-392,-497,-497,-393,-394,-395,-396,-397,-398,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-391,-378,-497,-392,790,-379,-497,790,]),'&':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,192,197,199,202,203,206,207,208,209,210,211,212,213,296,297,320,325,326,327,350,450,523,642,675,676,677,678,743,744,745,747,777,787,788,789,790,791,792,793,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,853,877,878,899,900,919,920,933,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-209,308,-210,321,-244,-497,-217,-214,-215,-216,-213,-212,-483,-209,-210,-245,321,-211,-486,-208,-485,-246,-497,-488,-489,-490,-491,792,-367,801,-392,-497,-497,-393,-394,-395,-396,-397,-398,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-391,-378,-497,-392,792,-379,-497,792,]),':':([59,129,180,192,213,327,454,455,456,457,458,599,600,601,602,603,604,],[-485,-484,278,278,-483,-486,-497,-497,-497,605,606,705,-323,-324,-325,706,707,]),'/':([59,62,85,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,133,134,180,183,184,185,186,187,188,190,192,196,197,199,201,202,203,206,207,208,209,210,211,212,213,273,277,279,280,281,282,283,285,293,294,296,297,319,320,321,322,325,326,327,350,474,475,488,489,490,498,523,526,619,622,638,639,648,675,676,677,678,710,717,724,725,726,727,728,739,740,741,743,744,749,750,768,776,778,784,785,786,804,805,816,818,819,820,821,830,833,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,854,855,860,862,873,874,876,877,879,880,881,883,896,900,901,908,919,933,],[-485,-207,-497,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-492,-493,-497,-497,-327,-328,-329,-330,-497,290,-497,290,306,290,290,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,-505,290,-256,290,290,-504,290,-344,290,290,-209,-210,-205,-245,-247,-248,-497,-211,-486,-208,-255,-257,625,-476,-478,-497,-246,-204,-259,-343,290,-497,-497,-488,-489,-490,-491,-258,-497,-477,-479,-480,-481,-482,-497,-498,-499,791,-367,-497,-497,-497,290,-339,-497,-502,-503,-497,-497,-497,-497,290,-406,-407,-338,-497,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-497,-497,-497,-497,290,290,-414,-378,-497,290,290,290,-413,791,290,-408,-379,791,]),'{':([59,62,67,68,72,76,85,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,131,133,134,164,179,180,183,184,185,186,187,188,189,190,191,192,196,198,199,201,207,208,209,210,211,212,213,273,277,279,280,281,282,283,285,289,291,293,296,297,298,317,318,326,327,350,473,474,475,481,482,483,492,619,622,625,642,652,688,710,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,865,878,899,920,],[-485,-207,162,163,168,172,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,216,-492,-493,260,275,-497,-497,-327,-328,-329,-330,-497,287,-497,275,-497,-497,275,-497,-497,-217,-214,-215,-216,-213,-212,-483,-505,-497,-256,-497,-497,-504,-497,-344,-455,-475,-497,-209,-210,496,-463,-136,-211,-486,-208,-252,-255,-257,-137,620,621,-254,-259,-343,-474,-497,216,260,-258,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,844,-399,-400,-401,-402,-403,-404,-405,-391,893,-497,-392,-497,]),';':([59,129,179,180,189,190,191,192,196,198,199,213,274,276,277,279,286,288,289,291,292,293,294,298,316,317,327,369,377,473,474,475,492,493,495,497,527,566,586,619,623,625,639,648,710,733,739,740,741,748,749,750,768,774,779,784,785,786,804,805,816,818,819,820,821,833,854,855,860,862,863,873,874,876,879,880,881,883,884,886,894,895,896,901,902,903,905,908,916,918,921,922,923,928,934,953,970,],[-485,-484,-497,-497,-497,-497,-497,-497,-497,-497,-497,-483,406,-265,-497,-256,485,-457,-455,-475,491,-497,-497,-497,522,-463,-486,563,565,-252,-255,-257,-254,628,630,-466,649,686,-264,-259,-456,-474,-497,-497,-258,-465,-497,-498,-499,803,-497,-497,-497,828,831,-497,-502,-503,-497,-497,-497,-497,-497,-406,-407,-497,-497,-497,-497,-497,-497,-497,-497,-414,-497,-497,-497,-497,906,-308,915,-497,-413,-497,-497,-497,924,-408,931,-416,-497,935,936,942,945,-307,-415,]),'>':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,197,202,203,206,207,208,209,210,211,212,213,228,229,296,297,312,319,320,321,322,323,325,326,327,350,523,526,549,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,312,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,350,-242,-209,-210,518,-205,-245,-247,-248,524,-497,-211,-486,-208,-246,-204,-243,]),',':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,133,134,202,203,206,207,208,209,210,211,212,213,228,229,232,233,234,273,282,291,296,297,319,320,321,322,323,325,326,327,334,335,342,343,347,348,350,354,355,359,360,363,364,385,386,399,400,474,475,488,489,490,498,500,502,503,523,526,549,619,625,638,641,643,653,654,661,662,663,666,667,669,670,672,673,674,675,676,677,678,680,681,682,683,684,689,690,691,692,693,694,695,696,697,698,700,701,710,717,724,725,726,727,728,738,742,743,744,751,752,769,770,776,778,829,830,832,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,857,858,859,866,867,868,869,877,888,890,898,900,919,927,933,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-492,-493,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,351,-242,-494,-495,-496,-505,-504,-475,-209,-210,-205,-245,-247,-248,351,-497,-211,-486,534,-57,542,-93,547,-104,-208,551,-113,554,-120,558,-128,570,-154,581,-201,618,-257,626,-476,-478,-497,640,-361,-497,-246,-204,-243,-259,-474,-497,-363,-366,-58,-59,-94,-95,-96,-105,-106,-114,-115,-121,-122,-123,-488,-489,-490,-491,-129,-130,-131,-132,-133,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-202,-203,-258,-497,-477,-479,-480,-481,-482,-364,-362,-365,-367,807,-85,824,-180,-497,-339,872,-338,351,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-86,-87,-88,-181,-182,-183,-184,-378,909,-411,920,-389,-379,-412,-390,]),'=':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,197,202,203,206,207,208,209,210,211,212,213,273,282,291,296,297,300,303,304,305,306,307,308,309,310,311,312,315,319,320,321,322,325,326,327,336,337,338,339,340,341,344,345,346,349,350,356,361,362,365,366,367,368,387,388,389,390,391,392,393,394,395,401,490,498,503,516,518,523,526,625,638,639,648,717,738,739,740,741,749,750,753,754,764,771,772,773,784,785,786,804,805,818,820,821,833,854,855,862,879,908,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,300,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,-505,-504,-475,-209,-210,504,508,509,510,511,512,513,514,515,517,519,521,-205,-245,-247,-248,-497,-211,-486,535,536,537,538,539,540,543,544,545,548,-208,552,555,556,559,560,561,562,571,572,573,574,575,576,577,578,579,582,627,-497,642,646,647,-246,-204,-474,-497,-497,-497,777,-364,-497,-498,-499,-497,-497,808,809,817,825,826,827,-497,-502,-503,-497,-497,-497,-406,-407,875,-497,875,875,875,-408,]),')':([59,62,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,133,134,202,203,206,207,208,209,210,211,212,213,229,232,233,234,268,269,271,273,282,291,296,297,299,301,319,320,321,322,324,325,326,327,334,335,342,343,347,348,350,353,354,355,358,359,360,363,364,385,386,399,400,404,405,484,498,499,500,501,502,503,507,523,525,526,533,541,546,549,550,553,557,569,580,583,585,595,625,629,638,641,643,644,645,653,654,655,656,657,658,659,661,662,663,664,666,667,669,670,672,673,674,675,676,677,678,680,681,682,683,684,685,689,690,691,692,693,694,695,696,697,698,700,701,702,704,738,742,743,744,751,752,756,757,758,759,760,762,763,767,769,770,802,806,823,832,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,857,858,859,861,864,866,867,868,869,877,878,882,887,888,889,890,897,898,899,900,907,919,926,927,933,944,955,],[-485,-207,-497,-206,-218,-221,-225,-219,-220,-222,-223,-224,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-484,-492,-493,-497,-244,-497,-217,-214,-215,-216,-213,-212,-483,-242,-494,-495,-496,402,-514,-508,-505,-504,-475,-209,-210,-497,506,-205,-245,-247,-248,-497,-497,-211,-486,-50,-57,-50,-93,-50,-104,-208,-50,-112,-113,-50,-119,-120,-50,-128,-50,-154,-50,-201,-497,-509,622,-497,639,-359,-360,-361,-497,-497,-246,648,-204,652,660,665,-243,668,671,679,688,699,-510,-515,-497,-474,732,-497,-363,-366,748,749,-58,-59,-50,-50,-50,-50,-50,-94,-95,-96,-50,-105,-106,-114,-115,-121,-122,-123,-488,-489,-490,-491,-129,-130,-131,-132,-133,-497,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-202,-203,-511,768,-364,-362,-365,-367,-50,-85,810,811,812,813,814,815,816,818,-50,-180,853,856,865,873,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-86,-87,-88,-50,-497,-181,-182,-183,-184,-378,-497,904,908,-409,-410,-411,919,-387,-388,-389,-497,-379,941,-412,-390,-497,964,]),'-':([59,129,178,197,213,270,271,273,327,642,675,676,677,678,743,744,745,747,777,787,788,789,790,791,792,793,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,853,877,878,899,900,919,920,933,],[-485,-484,-497,304,-483,404,-504,-505,-486,-497,-488,-489,-490,-491,788,-367,798,-392,-497,-497,-393,-394,-395,-396,-397,-398,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-391,-378,-497,-392,788,-379,-497,788,]),'+':([59,129,197,213,327,642,675,676,677,678,743,744,745,747,777,787,788,789,790,791,792,793,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,853,877,878,899,900,919,920,933,],[-485,-484,303,-483,-486,-497,-488,-489,-490,-491,789,-367,799,-392,-497,-497,-393,-394,-395,-396,-397,-398,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-391,-378,-497,-392,789,-379,-497,789,]),'|':([59,129,197,213,327,675,676,677,678,743,744,834,835,836,837,838,839,840,841,842,843,846,847,848,849,850,851,852,877,900,919,933,],[-485,-484,309,-483,-486,-488,-489,-490,-491,793,-367,-368,-369,-370,-371,-372,-373,-374,-375,-376,-377,-380,-381,-382,-383,-384,-385,-386,-378,793,-379,793,]),'FILE_PATH':([63,64,155,157,552,555,],[-51,-51,234,234,234,234,]),'ConvertFromTypeCode':([82,87,88,89,90,162,163,173,181,200,240,241,242,243,244,245,246,247,248,249,250,251,258,275,370,371,372,373,375,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,252,252,-196,-249,-195,252,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,252,252,-139,-67,-69,-125,-192,-194,-107,-251,252,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'ConvertToTypeCode':([82,87,88,89,90,162,163,173,181,200,240,241,242,243,244,245,246,247,248,249,250,251,258,275,370,371,372,373,375,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,253,253,-196,-249,-195,253,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,253,253,-139,-67,-69,-125,-192,-194,-107,-251,253,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'InstanceCode':([82,87,88,89,90,162,163,173,181,200,240,241,242,243,244,245,246,247,248,249,250,251,258,275,370,371,372,373,375,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,254,254,-196,-249,-195,254,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,254,254,-139,-67,-69,-125,-192,-194,-107,-251,254,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'static':([82,87,88,89,90,162,163,173,181,200,240,241,242,243,244,245,246,247,248,249,250,251,258,275,370,371,372,373,375,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,255,255,-196,-249,-195,255,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,255,470,-139,-67,-69,-125,-192,-194,-107,-251,470,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,470,-312,470,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'ReleaseCode':([82,162,163,200,240,241,242,243,244,245,246,247,248,249,250,251,258,370,371,372,373,375,376,402,650,730,731,828,936,939,947,950,951,958,962,967,],[-108,256,256,-195,256,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,256,-139,-67,-69,-125,-192,-194,-107,-81,-500,-501,-326,-497,-449,-497,-447,-448,-497,-446,-150,]),'TypeCode':([82,87,88,89,90,162,163,173,181,200,240,241,242,243,244,245,246,247,248,249,250,251,258,275,370,371,372,373,375,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,936,937,939,940,942,943,945,946,947,948,950,951,952,954,956,957,958,959,961,962,963,965,966,967,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,257,257,-196,-249,-195,257,-138,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,257,257,-139,-67,-69,-125,-192,-194,-107,-251,257,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-497,-309,-453,-446,-497,-497,-497,-150,-452,-497,-497,-358,-451,-355,-357,-450,]),'Docstring':([82,87,88,89,90,173,181,200,216,260,275,328,329,330,331,332,371,372,373,376,378,379,380,381,382,383,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,528,567,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,893,904,906,910,911,912,913,914,915,924,925,929,930,931,935,936,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,333,333,333,333,-62,-64,-65,-66,-67,-69,-125,-194,333,-167,-169,-170,-171,-172,-107,-251,333,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-63,-168,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,333,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,333,-52,333,333,-187,-189,-190,-191,333,-497,-497,-188,-461,333,-497,333,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'AutoPyName':([82,260,378,379,380,381,382,383,402,567,650,904,],[-108,384,384,-167,-169,-170,-171,-172,-107,-168,-81,-52,]),'BIGetReadBufferCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,441,-67,-69,-125,-194,-107,-251,441,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'BIGetWriteBufferCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,442,-67,-69,-125,-194,-107,-251,442,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'BIGetSegCountCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,443,-67,-69,-125,-194,-107,-251,443,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'BIGetCharBufferCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,444,-67,-69,-125,-194,-107,-251,444,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'explicit':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,447,-67,-69,-125,-194,-107,-251,447,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Q_SIGNAL':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,451,-67,-69,-125,-194,-107,-251,451,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Q_SLOT':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,453,-67,-69,-125,-194,-107,-251,453,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'public':([82,87,88,89,90,173,181,200,275,278,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,618,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,454,478,-67,-69,-125,-194,-107,-251,454,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,478,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'protected':([82,87,88,89,90,173,181,200,275,278,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,618,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,455,479,-67,-69,-125,-194,-107,-251,455,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,479,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'private':([82,87,88,89,90,173,181,200,275,278,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,618,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,456,480,-67,-69,-125,-194,-107,-251,456,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,480,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'signals':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,457,-67,-69,-125,-194,-107,-251,457,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Q_SIGNALS':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,458,-67,-69,-125,-194,-107,-251,458,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'ConvertToSubClassCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,459,-67,-69,-125,-194,-107,-251,459,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'FinalisationCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,460,-67,-69,-125,-194,-107,-251,460,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'GCClearCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,461,-67,-69,-125,-194,-107,-251,461,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'GCTraverseCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,462,-67,-69,-125,-194,-107,-251,462,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'BIGetBufferCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,463,-67,-69,-125,-194,-107,-251,463,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'PickleCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,464,-67,-69,-125,-194,-107,-251,464,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'Property':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,465,-67,-69,-125,-194,-107,-251,465,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'BIReleaseBufferCode':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,452,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,466,-67,-69,-125,-194,-107,-251,466,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,-312,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'virtual':([82,87,88,89,90,173,181,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,451,452,453,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,650,705,706,707,729,730,731,803,828,831,865,891,892,906,915,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,-195,467,-67,-69,-125,-194,-107,-251,467,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,597,-312,597,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-81,-318,-319,-320,-460,-500,-501,-356,-326,-342,-497,-179,-185,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'~':([82,87,88,89,90,173,181,197,200,275,371,372,373,376,402,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,445,448,449,452,467,468,469,471,472,485,491,522,587,588,589,590,591,592,596,598,605,606,607,608,609,610,611,612,614,615,617,628,630,642,650,705,706,707,729,730,731,745,747,777,787,788,789,790,791,792,793,803,828,831,853,865,878,891,892,899,906,915,920,924,925,930,931,935,937,939,940,942,943,945,946,948,950,951,952,954,956,957,959,961,962,963,965,966,968,969,971,972,974,975,976,977,],[-108,-351,-352,-353,-354,-196,-249,313,-195,-497,-67,-69,-125,-194,-107,-251,-497,-266,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280,-281,-282,-283,-284,-285,-286,-287,-288,-289,-290,-291,-292,-293,-294,-295,-296,-297,-298,-299,-250,-305,594,-312,-506,-507,-316,-315,-317,-454,-253,-462,-267,-300,-301,-302,-303,-304,-310,-311,-321,-322,-68,-99,-100,-101,-53,-174,-54,-313,-314,-497,-464,-497,-81,-318,-319,-320,-460,-500,-501,797,-392,-497,-497,-393,-394,-395,-396,-397,-398,-356,-326,-342,-391,-497,-497,-179,-185,-392,-497,-497,-497,-497,-497,-461,-497,-497,-497,-449,-497,-186,-497,-497,-497,-497,-447,-448,-306,-497,-497,-497,-309,-453,-446,-497,-497,-497,-452,-497,-497,-358,-451,-355,-357,-450,]),'AccessCode':([82,402,496,631,632,633,634,734,735,736,737,],[-108,-107,635,635,-467,-469,-470,-468,-471,-472,-473,]),'GetCode':([82,402,496,631,632,633,634,734,735,736,737,],[-108,-107,636,636,-467,-469,-470,-468,-471,-472,-473,]),'SetCode':([82,402,496,631,632,633,634,734,735,736,737,],[-108,-107,637,637,-467,-469,-470,-468,-471,-472,-473,]),'RaiseCode':([82,402,621,718,719,720,721,780,781,782,],[-108,-107,722,722,-345,-347,-348,-346,-349,-350,]),'!':([178,197,403,642,745,747,777,787,788,789,790,791,792,793,853,878,899,920,],[272,315,584,-497,796,-392,-497,-497,-393,-394,-395,-396,-397,-398,-391,-497,-392,-497,]),'%':([197,],[307,]),'^':([197,],[310,]),'[':([197,291,625,639,648,739,740,741,749,750,768,784,785,786,804,805,816,819,820,821,833,854,855,860,863,874,876,879,880,881,895,896,901,902,903,908,921,],[314,-475,-474,-497,-497,-497,-498,-499,-497,-497,-497,-497,-502,-503,-497,-497,-497,-497,-406,-407,-497,-497,-497,-497,885,-497,-414,-497,-497,-497,917,-413,-497,917,917,-408,917,]),'name':([218,219,220,221,222,223,226,227,235,238,262,267,534,547,551,554,570,581,708,824,],[336,337,338,339,340,341,346,349,356,361,392,401,336,349,356,361,392,401,772,772,]),'id':([225,542,],[344,344,]),'order':([225,542,],[345,345,]),'EOL':([230,231,232,233,234,236,237,],[352,-111,-494,-495,-496,357,-118,]),'optional':([238,554,],[362,362,]),'licensee':([239,558,],[365,365,]),'signature':([239,558,651,807,],[366,366,754,754,]),'timestamp':([239,558,],[367,367,]),'type':([239,558,],[368,368,]),'all_raise_py_exception':([262,570,],[387,387,]),'call_super_init':([262,570,],[388,388,]),'default_VirtualErrorHandler':([262,570,],[389,389,]),'keyword_arguments':([262,570,],[390,390,]),'language':([262,570,],[391,391,]),'py_ssize_t_clean':([262,570,],[393,393,]),'use_argument_names':([262,570,],[394,394,]),'use_limited_api':([262,570,],[395,395,]),'LOGICAL_OR':([269,271,405,583,702,],[403,-508,-509,-510,-511,]),']':([314,941,964,],[520,953,970,]),'slots':([454,455,456,],[600,600,600,]),'Q_SLOTS':([454,455,456,],[601,601,601,]),'NUMBER':([544,627,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,875,878,899,920,],[663,728,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,847,-399,-400,-401,-402,-403,-404,-405,-391,896,-497,-392,-497,]),'true':([556,571,572,577,578,579,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[675,675,675,675,675,675,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,675,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'True':([556,571,572,577,578,579,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[676,676,676,676,676,676,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,676,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'false':([556,571,572,577,578,579,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[677,677,677,677,677,677,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,677,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'False':([556,571,572,577,578,579,642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[678,678,678,678,678,678,-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,678,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'final':([639,648,739,740,741,749,750,804,],[-497,-497,785,-498,-499,-497,785,785,]),'noexcept':([639,648,739,740,741,749,750,768,784,785,786,804,805,816,818,854,860,],[-497,-497,-497,-498,-499,-497,-497,821,821,-502,-503,-497,821,-497,821,821,821,]),'throw':([639,648,739,740,741,749,750,768,784,785,786,804,805,816,818,854,860,],[-497,-497,-497,-498,-499,-497,-497,822,822,-502,-503,-497,822,-497,822,822,822,]),'NULL':([642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,846,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'QUOTED_CHAR':([642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,849,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'REAL':([642,745,747,777,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,853,878,899,920,],[-497,-497,-392,-497,-497,-393,-394,-395,-396,-397,-398,850,-399,-400,-401,-402,-403,-404,-405,-391,-497,-392,-497,]),'PreMethodCode':([650,730,731,906,924,925,931,935,936,943,945,947,],[-81,-500,-501,-497,938,938,-497,938,-497,938,938,938,]),'MethodCode':([650,730,731,906,924,925,931,935,936,937,939,940,943,945,946,947,951,954,956,958,],[-81,-500,-501,-497,-497,-497,-497,-497,-497,949,-449,949,-497,-497,949,-497,-448,949,949,949,]),'VirtualCatcherCode':([650,730,731,924,931,935,937,939,943,945,946,948,950,951,954,956,957,962,963,965,],[-81,-500,-501,-497,-497,-497,-497,-449,-497,-497,-497,960,-447,-448,-497,-497,960,-446,960,960,]),'VirtualCallCode':([650,730,731,931,935,939,943,945,946,950,951,954,956,957,961,962,963,965,966,968,969,971,],[-81,-500,-501,-497,-497,-449,-497,-497,-497,-447,-448,-497,-497,-497,-453,-446,-497,-497,973,-452,973,973,]),'format':([651,807,],[753,753,]),'remove_leading':([687,],[764,]),'get':([708,824,],[771,771,]),'set':([708,824,],[773,773,]),}
 
 _lr_action = {}
 for _k, _v in _lr_action_items.items():
@@ -17,7 +17,7 @@
       _lr_action[_x][_k] = _y
 del _lr_action_items
 
-_lr_goto_items = {'specification':([0,],[1,]),'statement':([0,1,],[2,129,]),'namespace_statement':([0,1,285,424,],[4,4,425,595,]),'composite_module':([0,1,],[5,5,]),'copying':([0,1,],[6,6,]),'defdocstringfmt':([0,1,],[7,7,]),'defdocstringsig':([0,1,],[8,8,]),'defencoding':([0,1,],[9,9,]),'defmetatype':([0,1,],[10,10,]),'defsupertype':([0,1,],[11,11,]),'exported_header_code':([0,1,],[12,12,]),'exported_type_hint_code':([0,1,],[13,13,]),'extract':([0,1,],[14,14,]),'feature':([0,1,],[15,15,]),'hidden_ns':([0,1,],[16,16,]),'import':([0,1,],[17,17,]),'include':([0,1,],[18,18,]),'init_code':([0,1,],[19,19,]),'license':([0,1,],[20,20,]),'mapped_type':([0,1,],[21,21,]),'mapped_type_template':([0,1,],[22,22,]),'module':([0,1,],[23,23,]),'module_code':([0,1,],[24,24,]),'module_header_code':([0,1,],[25,25,]),'platforms':([0,1,],[26,26,]),'plugin':([0,1,],[27,27,]),'preinit_code':([0,1,],[28,28,]),'postinit_code':([0,1,],[29,29,]),'timeline':([0,1,],[30,30,]),'type_hint_code':([0,1,408,527,],[31,31,558,558,]),'unit_code':([0,1,],[32,32,]),'unit_postinclude_code':([0,1,],[33,33,]),'virtual_error_handler':([0,1,],[34,34,]),'if_start':([0,1,160,161,215,238,256,258,285,327,379,408,424,435,527,591,592,602,708,714,862,883,],[35,35,240,240,329,240,240,381,35,329,381,529,35,604,529,711,716,604,711,716,885,885,]),'if_end':([0,1,160,161,215,238,256,258,285,327,379,408,424,435,527,591,592,602,708,714,862,883,],[36,36,241,241,330,241,241,382,36,330,382,530,36,605,530,712,717,605,712,717,886,886,]),'class_decl':([0,1,83,285,408,424,426,527,],[37,37,179,37,531,37,179,531,]),'class_template':([0,1,285,424,],[38,38,38,38,]),'enum_decl':([0,1,160,161,238,256,285,408,424,527,],[39,39,244,244,244,244,39,534,39,534,]),'exception':([0,1,285,408,424,527,],[40,40,40,535,40,535,]),'function':([0,1,285,408,424,527,567,569,583,586,685,],[41,41,41,585,41,585,585,585,703,585,703,]),'namespace_decl':([0,1,285,408,424,527,],[42,42,42,538,42,538,]),'struct_decl':([0,1,285,408,424,527,],[43,43,43,539,43,539,]),'typedef_decl':([0,1,285,408,424,527,],[44,44,44,536,44,536,]),'union_decl':([0,1,285,408,424,527,],[45,45,45,540,45,540,]),'variable':([0,1,285,408,424,527,567,569,586,],[46,46,46,588,46,588,588,588,588,]),'type_header_code':([0,1,160,161,238,256,285,408,424,527,],[47,47,249,249,249,249,47,557,47,557,]),'scoped_name':([0,1,60,82,85,90,91,92,94,96,99,100,152,180,192,193,202,253,282,285,297,322,350,408,414,424,444,446,487,527,567,569,583,586,611,656,683,685,740,781,792,874,911,914,922,936,],[61,61,150,178,186,188,190,61,197,61,61,61,61,61,294,295,61,61,422,61,61,61,61,61,590,61,61,61,638,61,61,61,61,61,61,61,61,61,800,61,849,894,61,927,61,61,]),'mapped_type_head':([0,1,],[66,66,]),'mapped_type_template_head':([0,1,],[67,67,]),'template_decl':([0,1,285,424,],[83,83,426,426,]),'function_decl':([0,1,285,408,424,527,567,569,583,586,685,],[86,86,86,86,86,86,86,86,86,86,86,]),'assignment_operator_decl':([0,1,285,408,424,527,567,569,583,586,685,],[87,87,87,87,87,87,87,87,87,87,87,]),'operator_decl':([0,1,285,408,424,527,567,569,583,586,685,],[88,88,88,88,88,88,88,88,88,88,88,]),'operator_cast_decl':([0,1,285,408,424,527,567,569,583,586,685,],[89,89,89,89,89,89,89,89,89,89,89,]),'cpp_type':([0,1,92,99,152,202,253,285,297,322,350,408,424,444,446,527,567,569,583,586,611,656,683,685,781,911,922,936,],[93,93,191,203,228,228,375,93,437,437,488,93,93,615,437,93,93,93,704,93,437,437,437,704,228,926,437,437,]),'base_type':([0,1,92,96,99,100,152,180,202,253,285,297,322,350,408,424,444,446,527,567,569,583,586,611,656,683,685,781,792,911,922,936,],[97,97,97,199,97,204,97,278,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,843,97,97,97,]),'pod_type':([0,1,92,96,99,100,152,180,202,253,285,297,322,350,408,424,444,446,527,567,569,583,586,611,656,683,685,781,792,911,922,936,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'relative_scoped_name':([0,1,60,82,85,90,91,92,94,96,99,100,127,152,180,192,193,202,253,282,285,297,322,350,408,414,424,444,446,487,527,567,569,583,586,611,656,683,685,740,781,792,874,911,914,922,936,],[128,128,128,128,128,128,128,128,128,128,128,128,211,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'dotted_name':([48,53,54,68,153,155,352,353,474,478,479,493,496,517,598,],[130,140,142,162,232,232,232,490,625,629,630,232,232,666,722,]),'begin_args':([48,50,51,52,53,54,57,59,60,62,63,65,68,79,332,385,],[131,135,137,139,141,143,147,149,151,154,156,159,163,175,471,509,]),'need_eol':([62,63,],[153,155,]),'class_head':([82,],[177,]),'opt_enum_key':([84,],[181,]),'empty':([84,97,130,162,176,177,178,181,186,187,188,189,190,194,196,197,199,200,204,273,275,276,278,279,281,291,292,296,297,322,323,332,405,408,437,442,446,527,570,571,572,589,591,599,609,610,613,619,623,656,659,683,713,733,739,743,744,774,775,782,785,802,803,814,817,824,828,852,853,858,860,861,870,871,874,876,877,878,879,881,882,889,899,900,901,903,909,916,917,921,922,925,930,931,932,933,935,936,937,938,941,942,943,945,947,948,952,953,956,958,959,965,967,],[185,201,216,259,271,274,277,271,283,286,289,274,277,289,274,289,289,320,201,410,289,415,289,289,289,289,289,436,440,440,320,469,271,584,271,614,440,584,690,690,690,415,709,410,289,735,741,735,216,440,259,440,776,784,793,735,784,289,741,829,741,784,829,735,829,868,873,829,873,829,829,289,289,289,893,897,873,289,289,873,906,912,289,912,912,289,410,741,912,410,440,410,940,410,940,940,940,440,940,950,940,950,950,950,950,961,950,961,961,961,970,970,970,]),'namespace_head':([90,],[187,]),'struct_head':([91,],[189,]),'union_head':([94,],[196,]),'derefs':([97,204,],[200,323,]),'c_module_body':([130,623,],[213,749,]),'cpp_types':([152,202,781,],[227,321,827,]),'import_simple':([153,],[229,]),'file_path':([153,155,493,496,],[230,235,641,644,]),'file_name':([153,155,352,493,496,],[231,231,489,231,231,]),'include_simple':([155,],[234,]),'mapped_type_body':([160,161,],[238,256,]),'mapped_type_line':([160,161,238,256,],[239,239,371,371,]),'convert_from_type_code':([160,161,238,256,408,527,],[242,242,242,242,545,545,]),'convert_to_type_code':([160,161,238,256,408,527,],[243,243,243,243,547,547,]),'instance_code':([160,161,238,256,408,527,],[245,245,245,245,552,552,]),'mapped_type_function':([160,161,238,256,],[246,246,246,246,]),'release_code':([160,161,238,256,],[247,247,247,247,]),'type_code':([160,161,238,256,408,527,],[248,248,248,248,556,556,]),'module_body':([162,659,],[257,759,]),'qualifier_list':([166,170,],[261,263,]),'qualifiers':([176,],[266,]),'ored_qualifiers':([176,],[267,]),'opt_name':([176,181,405,437,],[268,279,526,609,]),'opt_class_body':([177,189,196,],[272,290,314,]),'superclasses':([178,190,],[275,291,]),'opt_base_exception':([186,],[281,]),'opt_namespace_body':([187,],[284,]),'opt_annos':([188,194,197,199,275,278,279,281,291,292,609,774,861,870,871,878,879,899,903,],[287,296,315,316,411,419,420,421,431,432,732,824,882,888,889,900,901,917,920,]),'operator_name':([195,],[300,]),'opt_ref':([200,323,],[317,465,]),'c_module_body_directives':([215,],[327,]),'c_module_body_directive':([215,327,],[328,467,]),'docstring':([215,258,273,327,379,599,862,883,909,921,925,931,],[331,384,409,331,384,409,887,887,409,409,409,409,]),'c_module_args':([217,],[333,]),'c_module_arg':([217,473,],[334,624,]),'extract_args':([224,],[341,]),'extract_arg':([224,481,],[342,632,]),'hidden_ns_args':([226,],[346,]),'hidden_ns_arg':([226,486,],[347,637,]),'import_compound':([233,],[354,]),'import_args':([233,],[355,]),'import_arg':([233,492,],[356,640,]),'include_compound':([236,],[359,]),'include_args':([236,],[360,]),'include_arg':([236,495,],[361,643,]),'license_args':([237,],[364,]),'license_arg':([237,499,],[365,651,]),'module_body_directives':([258,],[379,]),'module_body_directive':([258,379,],[380,508,]),'autopyname':([258,379,],[383,383,]),'module_args':([260,],[386,]),'module_arg':([260,511,],[387,660,]),'veh_args':([265,],[400,]),'veh_arg':([265,522,],[401,671,]),'opt_docstring':([273,599,909,921,925,931,],[408,725,924,933,935,941,]),'superclass_list':([276,],[412,]),'superclass':([276,589,],[413,706,]),'class_access':([276,589,],[414,414,]),'namespace_body':([285,],[424,]),'annotations':([288,],[427,]),'annotation':([288,597,],[428,720,]),'variable_body':([296,],[434,]),'opt_arg_list':([297,322,446,656,683,922,936,],[438,464,616,757,762,934,946,]),'arg_list':([297,322,446,656,683,922,936,],[439,439,439,439,439,439,439,]),'arg_value':([297,322,446,611,656,683,922,936,],[441,441,441,736,441,441,441,441,]),'arg_type':([297,322,446,611,656,683,922,936,],[442,442,442,442,442,442,442,442,]),'docstring_args':([332,],[468,]),'end_args':([333,341,346,354,359,364,386,400,626,627,628,629,630,635,745,859,],[472,480,485,491,494,498,510,521,750,751,752,753,754,756,804,880,]),'class_body':([408,],[527,]),'class_line':([408,527,],[528,675,]),'ctor':([408,527,],[532,532,]),'dtor':([408,527,],[533,533,]),'method_variable':([408,527,],[537,537,]),'public_specifier':([408,527,],[541,541,]),'protected_specifier':([408,527,],[542,542,]),'private_specifier':([408,527,],[543,543,]),'signals_specifier':([408,527,],[544,544,]),'convert_to_subclass_code':([408,527,],[546,546,]),'finalisation_code':([408,527,],[548,548,]),'gc_clear_code':([408,527,],[549,549,]),'gc_traverse_code':([408,527,],[550,550,]),'get_buffer_code':([408,527,],[551,551,]),'pickle_code':([408,527,],[553,553,]),'property':([408,527,],[554,554,]),'release_buffer_code':([408,527,],[555,555,]),'ctor_decl':([408,527,563,],[564,564,680,]),'opt_virtual':([408,527,],[565,565,]),'simple_method_variable':([408,527,567,569,],[568,568,684,686,]),'plain_method_variable':([408,527,567,569,586,],[587,587,587,587,705,]),'variable_body_directives':([435,],[602,]),'variable_body_directive':([435,602,],[603,728,]),'opt_assign':([442,],[612,]),'bool_value':([497,512,513,518,519,520,792,],[645,661,662,667,668,669,846,]),'opt_slots':([570,571,572,],[687,691,692,]),'opt_enum_body':([591,],[707,]),'enum_body':([591,],[708,]),'enum_line':([591,708,],[710,773,]),'exception_body':([592,],[714,]),'exception_line':([592,714,],[715,778,]),'annotation_value':([598,],[721,]),'opt_const':([610,619,743,814,],[733,744,802,858,]),'expr':([613,876,916,],[737,898,928,]),'value':([613,775,785,876,916,],[738,825,832,738,738,]),'opt_cast':([613,775,785,876,916,],[739,739,739,739,739,]),'docstring_arg_list':([622,],[745,]),'docstring_arg':([622,805,],[746,855,]),'property_args':([701,],[766,]),'property_arg':([701,819,],[767,863,]),'opt_enum_assign':([713,],[774,]),'opt_final':([733,744,802,],[782,803,852,]),'binop':([737,898,928,],[785,785,785,]),'opt_unop':([739,],[792,]),'opt_exceptions':([782,803,817,852,858,860,],[828,853,861,877,879,881,]),'simple_value':([792,],[833,]),'empty_value':([792,],[834,]),'function_call_value':([792,],[835,]),'null_value':([792,],[836,]),'number_value':([792,],[837,]),'quoted_char_value':([792,],[838,]),'real_value':([792,],[839,]),'scoped_name_value':([792,],[840,]),'string_value':([792,],[841,]),'opt_comma':([824,],[867,]),'opt_abstract':([828,853,877,881,],[871,878,899,903,]),'property_body':([862,],[883,]),'property_line':([862,883,],[884,908,]),'opt_exception_list':([874,],[891,]),'exception_list':([874,],[892,]),'opt_expr_list':([876,],[895,]),'expr_list':([876,],[896,]),'opt_ctor_signature':([882,],[904,]),'opt_signature':([889,900,901,917,],[910,918,919,929,]),'premethod_code':([930,932,933,935,937,941,],[938,942,943,945,947,952,]),'method_code':([938,942,943,945,947,952,],[948,953,954,956,958,963,]),'virtual_catcher_code':([948,953,956,958,],[959,964,965,967,]),'virtual_call_code':([959,965,967,],[968,972,973,]),}
+_lr_goto_items = {'specification':([0,],[1,]),'statement':([0,1,],[2,130,]),'eof':([0,1,],[3,3,]),'namespace_statement':([0,1,287,486,],[4,4,487,624,]),'composite_module':([0,1,],[5,5,]),'copying':([0,1,],[6,6,]),'defdocstringfmt':([0,1,],[7,7,]),'defdocstringsig':([0,1,],[8,8,]),'defencoding':([0,1,],[9,9,]),'defmetatype':([0,1,],[10,10,]),'defsupertype':([0,1,],[11,11,]),'exported_header_code':([0,1,],[12,12,]),'exported_type_hint_code':([0,1,],[13,13,]),'extract':([0,1,],[14,14,]),'feature':([0,1,],[15,15,]),'hidden_ns':([0,1,],[16,16,]),'import':([0,1,],[17,17,]),'include':([0,1,],[18,18,]),'init_code':([0,1,],[19,19,]),'license':([0,1,],[20,20,]),'mapped_type':([0,1,],[21,21,]),'mapped_type_template':([0,1,],[22,22,]),'module':([0,1,],[23,23,]),'module_code':([0,1,],[24,24,]),'module_header_code':([0,1,],[25,25,]),'platforms':([0,1,],[26,26,]),'plugin':([0,1,],[27,27,]),'preinit_code':([0,1,],[28,28,]),'postinit_code':([0,1,],[29,29,]),'timeline':([0,1,],[30,30,]),'type_hint_code':([0,1,275,407,],[31,31,440,440,]),'unit_code':([0,1,],[32,32,]),'unit_postinclude_code':([0,1,],[33,33,]),'virtual_error_handler':([0,1,],[34,34,]),'if_start':([0,1,162,163,216,240,258,260,275,287,328,378,407,486,496,620,621,631,712,718,893,910,],[36,36,242,242,330,242,242,380,409,36,330,380,409,36,633,715,720,633,715,720,912,912,]),'if_end':([0,1,162,163,216,240,258,260,275,287,328,378,407,486,496,620,621,631,712,718,893,910,],[37,37,243,243,331,243,243,381,410,37,331,381,410,37,634,716,721,634,716,721,913,913,]),'class_decl':([0,1,84,275,287,407,446,486,],[38,38,181,411,38,411,181,38,]),'class_template':([0,1,275,287,407,486,],[39,39,413,39,413,39,]),'enum_decl':([0,1,162,163,240,258,275,287,407,486,],[40,40,246,246,246,246,416,40,416,40,]),'exception':([0,1,275,287,407,486,],[41,41,417,41,417,41,]),'function':([0,1,275,287,407,451,453,467,470,486,597,],[42,42,469,42,469,469,469,615,469,42,615,]),'namespace_decl':([0,1,275,287,407,486,],[43,43,420,43,420,43,]),'struct_decl':([0,1,275,287,407,486,],[44,44,421,44,421,44,]),'typedef_decl':([0,1,275,287,407,486,],[45,45,418,45,418,45,]),'union_decl':([0,1,275,287,407,486,],[46,46,422,46,422,46,]),'variable':([0,1,275,287,407,451,453,470,486,],[47,47,472,47,472,472,472,472,47,]),'type_header_code':([0,1,162,163,240,258,275,287,407,486,],[48,48,251,251,251,251,439,48,439,48,]),'scoped_name':([0,1,61,83,86,91,92,93,95,97,100,101,154,182,194,195,204,255,275,284,287,299,324,351,407,451,453,467,470,476,486,505,507,548,595,597,640,685,746,783,794,864,907,909,917,944,],[62,62,152,180,188,190,192,62,199,62,62,62,62,62,296,297,62,62,62,484,62,62,62,62,62,62,62,62,62,619,62,62,62,667,62,62,62,62,802,62,851,890,62,927,62,62,]),'mapped_type_head':([0,1,],[67,67,]),'mapped_type_template_head':([0,1,],[68,68,]),'template_decl':([0,1,275,287,407,486,],[84,84,446,446,446,446,]),'function_decl':([0,1,275,287,407,451,453,467,470,486,597,],[87,87,87,87,87,87,87,87,87,87,87,]),'assignment_operator_decl':([0,1,275,287,407,451,453,467,470,486,597,],[88,88,88,88,88,88,88,88,88,88,88,]),'operator_decl':([0,1,275,287,407,451,453,467,470,486,597,],[89,89,89,89,89,89,89,89,89,89,89,]),'operator_cast_decl':([0,1,275,287,407,451,453,467,470,486,597,],[90,90,90,90,90,90,90,90,90,90,90,]),'cpp_type':([0,1,93,100,154,204,255,275,287,299,324,351,407,451,453,467,470,486,505,507,595,597,640,685,783,907,917,944,],[94,94,193,205,229,229,374,94,94,498,498,549,94,94,94,616,94,94,644,498,498,616,498,498,229,498,932,498,]),'base_type':([0,1,93,97,100,101,154,182,204,255,275,287,299,324,351,407,451,453,467,470,486,505,507,595,597,640,685,783,794,907,917,944,],[98,98,98,201,98,206,98,280,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,845,98,98,98,]),'pod_type':([0,1,93,97,100,101,154,182,204,255,275,287,299,324,351,407,451,453,467,470,486,505,507,595,597,640,685,783,794,907,917,944,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'relative_scoped_name':([0,1,61,83,86,91,92,93,95,97,100,101,128,154,182,194,195,204,255,275,284,287,299,324,351,407,451,453,467,470,476,486,505,507,548,595,597,640,685,746,783,794,864,907,909,917,944,],[129,129,129,129,129,129,129,129,129,129,129,129,213,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'dotted_name':([49,54,55,69,535,539,540,576,627,],[131,142,144,164,654,658,659,695,726,]),'begin_args':([49,51,52,53,54,55,58,60,61,63,64,66,69,80,333,384,465,],[132,137,139,141,143,145,149,151,153,156,158,161,165,177,532,568,613,]),'need_eol':([63,64,],[155,157,]),'class_head':([83,],[179,]),'opt_enum_key':([85,],[183,]),'empty':([85,98,131,164,178,179,180,183,188,189,190,191,192,196,198,199,201,202,206,275,277,278,280,281,283,293,294,298,299,324,325,333,404,407,454,455,456,498,503,507,595,618,620,628,638,639,642,648,652,685,688,717,739,745,749,750,768,776,777,784,787,804,805,816,818,819,829,833,854,855,860,862,863,864,865,873,874,878,879,880,881,883,895,901,902,903,906,907,915,920,921,924,925,931,935,936,937,940,943,944,945,946,947,948,954,956,957,958,963,965,966,969,971,],[187,203,217,261,273,276,279,273,285,288,291,276,279,291,276,291,291,322,203,468,291,477,291,291,291,291,291,497,501,501,322,530,273,468,602,602,602,273,643,501,501,477,713,731,291,741,747,741,217,501,261,778,786,795,741,786,820,291,747,820,747,786,820,741,820,291,871,876,820,876,820,876,886,889,892,291,291,899,876,291,291,291,918,291,918,918,731,501,731,747,918,939,939,731,939,731,950,950,939,501,939,950,939,961,950,950,961,950,961,961,974,974,974,]),'namespace_head':([91,],[189,]),'struct_head':([92,],[191,]),'union_head':([95,],[198,]),'derefs':([98,206,],[202,325,]),'c_module_body':([131,652,],[215,755,]),'cpp_types':([154,204,783,],[228,323,832,]),'import_simple':([155,],[230,]),'file_path':([155,157,552,555,],[231,237,670,673,]),'include_simple':([157,],[236,]),'mapped_type_body':([162,163,],[240,258,]),'mapped_type_line':([162,163,240,258,],[241,241,370,370,]),'convert_from_type_code':([162,163,240,258,275,407,],[244,244,244,244,427,427,]),'convert_to_type_code':([162,163,240,258,275,407,],[245,245,245,245,429,429,]),'instance_code':([162,163,240,258,275,407,],[247,247,247,247,434,434,]),'mapped_type_function':([162,163,240,258,],[248,248,248,248,]),'release_code':([162,163,240,258,],[249,249,249,249,]),'type_code':([162,163,240,258,275,407,],[250,250,250,250,438,438,]),'module_body':([164,688,],[259,765,]),'qualifier_list':([168,172,],[263,265,]),'qualifiers':([178,],[268,]),'ored_qualifiers':([178,],[269,]),'opt_name':([178,183,404,498,],[270,281,585,638,]),'opt_class_body':([179,191,198,],[274,292,316,]),'superclasses':([180,192,],[277,293,]),'opt_base_exception':([188,],[283,]),'opt_namespace_body':([189,],[286,]),'opt_annos':([190,196,199,201,277,280,281,283,293,294,638,776,819,873,874,880,881,883,901,],[289,298,317,318,473,481,482,483,492,493,738,829,863,894,895,902,903,905,921,]),'operator_name':([197,],[302,]),'opt_ref':([202,325,],[319,526,]),'c_module_body_directives':([216,],[328,]),'c_module_body_directive':([216,328,],[329,528,]),'docstring':([216,260,275,328,378,407,628,893,906,910,915,931,936,],[332,383,445,332,383,445,730,914,730,914,730,730,730,]),'c_module_args':([218,],[334,]),'c_module_arg':([218,534,],[335,653,]),'extract_args':([225,],[342,]),'extract_arg':([225,542,],[343,661,]),'hidden_ns_args':([227,],[347,]),'hidden_ns_arg':([227,547,],[348,666,]),'import_compound':([235,],[353,]),'import_args':([235,],[354,]),'import_arg':([235,551,],[355,669,]),'include_compound':([238,],[358,]),'include_args':([238,],[359,]),'include_arg':([238,554,],[360,672,]),'license_args':([239,],[363,]),'license_arg':([239,558,],[364,680,]),'module_body_directives':([260,],[378,]),'module_body_directive':([260,378,],[379,567,]),'autopyname':([260,378,],[382,382,]),'module_args':([262,],[385,]),'module_arg':([262,570,],[386,689,]),'veh_args':([267,],[399,]),'veh_arg':([267,581,],[400,700,]),'class_body':([275,],[407,]),'class_line':([275,407,],[408,587,]),'class_docstring':([275,407,],[412,412,]),'ctor':([275,407,],[414,414,]),'dtor':([275,407,],[415,415,]),'method_variable':([275,407,],[419,419,]),'public_specifier':([275,407,],[423,423,]),'protected_specifier':([275,407,],[424,424,]),'private_specifier':([275,407,],[425,425,]),'signals_specifier':([275,407,],[426,426,]),'convert_to_subclass_code':([275,407,],[428,428,]),'finalisation_code':([275,407,],[430,430,]),'gc_clear_code':([275,407,],[431,431,]),'gc_traverse_code':([275,407,],[432,432,]),'get_buffer_code':([275,407,],[433,433,]),'pickle_code':([275,407,],[435,435,]),'property':([275,407,],[436,436,]),'release_buffer_code':([275,407,],[437,437,]),'ctor_decl':([275,407,447,],[448,448,592,]),'opt_virtual':([275,407,],[449,449,]),'simple_method_variable':([275,407,451,453,],[452,452,596,598,]),'plain_method_variable':([275,407,451,453,470,],[471,471,471,471,617,]),'superclass_list':([278,],[474,]),'superclass':([278,618,],[475,710,]),'class_access':([278,618,],[476,476,]),'namespace_body':([287,],[486,]),'annotations':([290,],[488,]),'annotation':([290,626,],[489,724,]),'variable_body':([298,],[495,]),'opt_arg_list':([299,324,507,595,685,907,944,],[499,525,645,704,763,926,955,]),'arg_list':([299,324,507,595,685,907,944,],[500,500,500,500,500,500,500,]),'arg_value':([299,324,507,595,640,685,907,944,],[502,502,502,502,742,502,502,502,]),'arg_type':([299,324,507,595,640,685,907,944,],[503,503,503,503,503,503,503,503,]),'docstring_args':([333,],[529,]),'end_args':([334,342,347,353,358,363,385,399,655,656,657,658,659,664,751,769,861,],[533,541,546,550,553,557,569,580,756,757,758,759,760,762,806,823,882,]),'opt_slots':([454,455,456,],[599,603,604,]),'variable_body_directives':([496,],[631,]),'variable_body_directive':([496,631,],[632,734,]),'opt_assign':([503,],[641,]),'bool_value':([556,571,572,577,578,579,794,],[674,690,691,696,697,698,848,]),'opt_enum_body':([620,],[711,]),'enum_body':([620,],[712,]),'enum_line':([620,712,],[714,775,]),'exception_body':([621,],[718,]),'exception_line':([621,718,],[719,780,]),'annotation_value':([627,],[725,]),'opt_docstring':([628,906,915,931,936,],[729,925,930,943,947,]),'opt_const':([639,648,749,816,],[739,750,804,860,]),'expr':([642,878,920,],[743,900,933,]),'value':([642,777,787,878,920,],[744,830,834,744,744,]),'opt_cast':([642,777,787,878,920,],[745,745,745,745,745,]),'docstring_arg_list':([651,],[751,]),'docstring_arg':([651,807,],[752,857,]),'property_args':([708,],[769,]),'property_arg':([708,824,],[770,866,]),'opt_enum_assign':([717,],[776,]),'opt_final':([739,750,804,],[784,805,854,]),'binop':([743,900,933,],[787,787,787,]),'opt_unop':([745,],[794,]),'opt_exceptions':([768,784,805,818,854,860,],[819,833,855,862,879,881,]),'simple_value':([794,],[835,]),'empty_value':([794,],[836,]),'function_call_value':([794,],[837,]),'null_value':([794,],[838,]),'number_value':([794,],[839,]),'quoted_char_value':([794,],[840,]),'real_value':([794,],[841,]),'scoped_name_value':([794,],[842,]),'string_value':([794,],[843,]),'opt_comma':([829,],[870,]),'opt_abstract':([833,855,862,879,],[874,880,883,901,]),'opt_ctor_signature':([863,],[884,]),'opt_exception_list':([864,],[887,]),'exception_list':([864,],[888,]),'opt_property_body':([865,],[891,]),'opt_expr_list':([878,],[897,]),'expr_list':([878,],[898,]),'property_body':([893,],[910,]),'property_line':([893,910,],[911,929,]),'opt_signature':([895,902,903,921,],[916,922,923,934,]),'premethod_code':([924,925,935,943,945,947,],[937,940,946,954,956,958,]),'method_code':([937,940,946,954,956,958,],[948,952,957,963,965,967,]),'virtual_catcher_code':([948,957,963,965,],[959,966,969,971,]),'virtual_call_code':([966,969,971,],[972,975,976,]),}
 
 _lr_goto = {}
 for _k, _v in _lr_goto_items.items():
@@ -27,514 +27,519 @@
 del _lr_goto_items
 _lr_productions = [
   ("S' -> specification","S'",1,None,None,None),
-  ('specification -> statement','specification',1,'p_specification','rules.py',68),
-  ('specification -> specification statement','specification',2,'p_specification','rules.py',69),
-  ('statement -> EOF','statement',1,'p_statement','rules.py',73),
-  ('statement -> namespace_statement','statement',1,'p_statement','rules.py',74),
-  ('statement -> composite_module','statement',1,'p_statement','rules.py',75),
-  ('statement -> copying','statement',1,'p_statement','rules.py',76),
-  ('statement -> defdocstringfmt','statement',1,'p_statement','rules.py',77),
-  ('statement -> defdocstringsig','statement',1,'p_statement','rules.py',78),
-  ('statement -> defencoding','statement',1,'p_statement','rules.py',79),
-  ('statement -> defmetatype','statement',1,'p_statement','rules.py',80),
-  ('statement -> defsupertype','statement',1,'p_statement','rules.py',81),
-  ('statement -> exported_header_code','statement',1,'p_statement','rules.py',82),
-  ('statement -> exported_type_hint_code','statement',1,'p_statement','rules.py',83),
-  ('statement -> extract','statement',1,'p_statement','rules.py',84),
-  ('statement -> feature','statement',1,'p_statement','rules.py',85),
-  ('statement -> hidden_ns','statement',1,'p_statement','rules.py',86),
-  ('statement -> import','statement',1,'p_statement','rules.py',87),
-  ('statement -> include','statement',1,'p_statement','rules.py',88),
-  ('statement -> init_code','statement',1,'p_statement','rules.py',89),
-  ('statement -> license','statement',1,'p_statement','rules.py',90),
-  ('statement -> mapped_type','statement',1,'p_statement','rules.py',91),
-  ('statement -> mapped_type_template','statement',1,'p_statement','rules.py',92),
-  ('statement -> module','statement',1,'p_statement','rules.py',93),
-  ('statement -> module_code','statement',1,'p_statement','rules.py',94),
-  ('statement -> module_header_code','statement',1,'p_statement','rules.py',95),
-  ('statement -> platforms','statement',1,'p_statement','rules.py',96),
-  ('statement -> plugin','statement',1,'p_statement','rules.py',97),
-  ('statement -> preinit_code','statement',1,'p_statement','rules.py',98),
-  ('statement -> postinit_code','statement',1,'p_statement','rules.py',99),
-  ('statement -> timeline','statement',1,'p_statement','rules.py',100),
-  ('statement -> type_hint_code','statement',1,'p_statement','rules.py',101),
-  ('statement -> unit_code','statement',1,'p_statement','rules.py',102),
-  ('statement -> unit_postinclude_code','statement',1,'p_statement','rules.py',103),
-  ('statement -> virtual_error_handler','statement',1,'p_statement','rules.py',104),
-  ('namespace_statement -> if_start','namespace_statement',1,'p_namespace_statement','rules.py',108),
-  ('namespace_statement -> if_end','namespace_statement',1,'p_namespace_statement','rules.py',109),
-  ('namespace_statement -> class_decl','namespace_statement',1,'p_namespace_statement','rules.py',110),
-  ('namespace_statement -> class_template','namespace_statement',1,'p_namespace_statement','rules.py',111),
-  ('namespace_statement -> enum_decl','namespace_statement',1,'p_namespace_statement','rules.py',112),
-  ('namespace_statement -> exception','namespace_statement',1,'p_namespace_statement','rules.py',113),
-  ('namespace_statement -> function','namespace_statement',1,'p_namespace_statement','rules.py',114),
-  ('namespace_statement -> namespace_decl','namespace_statement',1,'p_namespace_statement','rules.py',115),
-  ('namespace_statement -> struct_decl','namespace_statement',1,'p_namespace_statement','rules.py',116),
-  ('namespace_statement -> typedef_decl','namespace_statement',1,'p_namespace_statement','rules.py',117),
-  ('namespace_statement -> union_decl','namespace_statement',1,'p_namespace_statement','rules.py',118),
-  ('namespace_statement -> variable','namespace_statement',1,'p_namespace_statement','rules.py',119),
-  ('namespace_statement -> type_header_code','namespace_statement',1,'p_namespace_statement','rules.py',120),
-  ('begin_args -> <empty>','begin_args',0,'p_begin_args','rules.py',126),
-  ('end_args -> <empty>','end_args',0,'p_end_args','rules.py',132),
-  ('need_eol -> <empty>','need_eol',0,'p_need_eol','rules.py',138),
-  ('autopyname -> AutoPyName begin_args ( remove_leading = STRING end_args )','autopyname',8,'p_autopyname','rules.py',146),
-  ('get_buffer_code -> BIGetBufferCode CODE_BLOCK','get_buffer_code',2,'p_get_buffer_code','rules.py',157),
-  ('release_buffer_code -> BIReleaseBufferCode CODE_BLOCK','release_buffer_code',2,'p_release_buffer_code','rules.py',173),
-  ('composite_module -> CompositeModule dotted_name c_module_body','composite_module',3,'p_composite_module','rules.py',190),
-  ('composite_module -> CompositeModule begin_args ( c_module_args end_args ) c_module_body','composite_module',7,'p_composite_module','rules.py',191),
-  ('c_module_args -> c_module_arg','c_module_args',1,'p_c_module_args','rules.py',223),
-  ('c_module_args -> c_module_args , c_module_arg','c_module_args',3,'p_c_module_args','rules.py',224),
-  ('c_module_arg -> name = dotted_name','c_module_arg',3,'p_c_module_arg','rules.py',233),
-  ('c_module_body -> { c_module_body_directives } ;','c_module_body',4,'p_c_module_body','rules.py',239),
-  ('c_module_body -> empty','c_module_body',1,'p_c_module_body','rules.py',240),
-  ('c_module_body_directives -> c_module_body_directive','c_module_body_directives',1,'p_c_module_body_directives','rules.py',246),
-  ('c_module_body_directives -> c_module_body_directives c_module_body_directive','c_module_body_directives',2,'p_c_module_body_directives','rules.py',247),
-  ('c_module_body_directive -> if_start','c_module_body_directive',1,'p_c_module_body_directive','rules.py',263),
-  ('c_module_body_directive -> if_end','c_module_body_directive',1,'p_c_module_body_directive','rules.py',264),
-  ('c_module_body_directive -> docstring','c_module_body_directive',1,'p_c_module_body_directive','rules.py',265),
-  ('convert_from_type_code -> ConvertFromTypeCode CODE_BLOCK','convert_from_type_code',2,'p_convert_from_type_code','rules.py',273),
-  ('convert_to_subclass_code -> ConvertToSubClassCode CODE_BLOCK','convert_to_subclass_code',2,'p_convert_to_subclass_code','rules.py',290),
-  ('convert_to_type_code -> ConvertToTypeCode CODE_BLOCK','convert_to_type_code',2,'p_convert_to_type_code','rules.py',307),
-  ('copying -> Copying CODE_BLOCK','copying',2,'p_copying','rules.py',323),
-  ('defdocstringfmt -> DefaultDocstringFormat STRING','defdocstringfmt',2,'p_defdocstringfmt','rules.py',336),
-  ('defdocstringfmt -> DefaultDocstringFormat begin_args ( name = STRING end_args )','defdocstringfmt',8,'p_defdocstringfmt','rules.py',337),
-  ('defdocstringsig -> DefaultDocstringSignature STRING','defdocstringsig',2,'p_defdocstringsig','rules.py',352),
-  ('defdocstringsig -> DefaultDocstringSignature begin_args ( name = STRING end_args )','defdocstringsig',8,'p_defdocstringsig','rules.py',353),
-  ('defencoding -> DefaultEncoding STRING','defencoding',2,'p_defencoding','rules.py',368),
-  ('defencoding -> DefaultEncoding begin_args ( name = STRING end_args )','defencoding',8,'p_defencoding','rules.py',369),
-  ('defmetatype -> DefaultMetatype dotted_name','defmetatype',2,'p_defmetatype','rules.py',384),
-  ('defmetatype -> DefaultMetatype begin_args ( name = dotted_name end_args )','defmetatype',8,'p_defmetatype','rules.py',385),
-  ('defsupertype -> DefaultSupertype dotted_name','defsupertype',2,'p_defsupertype','rules.py',406),
-  ('defsupertype -> DefaultSupertype begin_args ( name = dotted_name end_args )','defsupertype',8,'p_defsupertype','rules.py',407),
-  ('docstring -> Docstring docstring_args CODE_BLOCK','docstring',3,'p_docstring','rules.py',428),
-  ('docstring_args -> empty','docstring_args',1,'p_docstring_args','rules.py',451),
-  ('docstring_args -> STRING','docstring_args',1,'p_docstring_args','rules.py',452),
-  ('docstring_args -> begin_args ( docstring_arg_list end_args )','docstring_args',5,'p_docstring_args','rules.py',453),
-  ('docstring_arg_list -> docstring_arg','docstring_arg_list',1,'p_docstring_arg_list','rules.py',469),
-  ('docstring_arg_list -> docstring_arg_list , docstring_arg','docstring_arg_list',3,'p_docstring_arg_list','rules.py',470),
-  ('docstring_arg -> format = STRING','docstring_arg',3,'p_docstring_arg','rules.py',479),
-  ('docstring_arg -> signature = STRING','docstring_arg',3,'p_docstring_arg','rules.py',480),
-  ('exported_header_code -> ExportedHeaderCode CODE_BLOCK','exported_header_code',2,'p_exported_header_code','rules.py',495),
-  ('exported_type_hint_code -> ExportedTypeHintCode CODE_BLOCK','exported_type_hint_code',2,'p_exported_type_hint_code','rules.py',508),
-  ('extract -> Extract NAME CODE_BLOCK','extract',3,'p_extract','rules.py',522),
-  ('extract -> Extract begin_args ( extract_args end_args ) CODE_BLOCK','extract',7,'p_extract','rules.py',523),
-  ('extract_args -> extract_arg','extract_args',1,'p_extract_args','rules.py',550),
-  ('extract_args -> extract_args , extract_arg','extract_args',3,'p_extract_args','rules.py',551),
-  ('extract_arg -> id = NAME','extract_arg',3,'p_extract_arg','rules.py',560),
-  ('extract_arg -> order = NUMBER','extract_arg',3,'p_extract_arg','rules.py',561),
-  ('feature -> Feature NAME','feature',2,'p_feature','rules.py',569),
-  ('feature -> Feature begin_args ( name = NAME end_args )','feature',8,'p_feature','rules.py',570),
-  ('finalisation_code -> FinalisationCode CODE_BLOCK','finalisation_code',2,'p_finalisation_code','rules.py',581),
-  ('gc_clear_code -> GCClearCode CODE_BLOCK','gc_clear_code',2,'p_gc_clear_code','rules.py',597),
-  ('gc_traverse_code -> GCTraverseCode CODE_BLOCK','gc_traverse_code',2,'p_gc_traverse_code','rules.py',613),
-  ('hidden_ns -> HideNamespace scoped_name','hidden_ns',2,'p_hidden_ns','rules.py',629),
-  ('hidden_ns -> HideNamespace begin_args ( hidden_ns_args end_args )','hidden_ns',6,'p_hidden_ns','rules.py',630),
-  ('hidden_ns_args -> hidden_ns_arg','hidden_ns_args',1,'p_hidden_ns_args','rules.py',653),
-  ('hidden_ns_args -> hidden_ns_args , hidden_ns_arg','hidden_ns_args',3,'p_hidden_ns_args','rules.py',654),
-  ('hidden_ns_arg -> name = scoped_name','hidden_ns_arg',3,'p_hidden_ns_arg','rules.py',663),
-  ('if_start -> If ( qualifiers )','if_start',4,'p_if_start','rules.py',671),
-  ('if_end -> End','if_end',1,'p_if_end','rules.py',684),
-  ('import -> Import need_eol import_simple EOL','import',4,'p_import','rules.py',697),
-  ('import -> Import begin_args ( import_compound end_args )','import',6,'p_import','rules.py',698),
-  ('import_simple -> file_path','import_simple',1,'p_import_simple','rules.py',702),
-  ('import_compound -> import_args','import_compound',1,'p_import_compound','rules.py',713),
-  ('import_args -> import_arg','import_args',1,'p_import_args','rules.py',729),
-  ('import_args -> import_args , import_arg','import_args',3,'p_import_args','rules.py',730),
-  ('import_arg -> name = file_path','import_arg',3,'p_import_arg','rules.py',739),
-  ('include -> Include need_eol include_simple EOL','include',4,'p_include','rules.py',747),
-  ('include -> Include begin_args ( include_compound end_args )','include',6,'p_include','rules.py',748),
-  ('include_simple -> file_path','include_simple',1,'p_include_simple','rules.py',752),
-  ('include_compound -> include_args','include_compound',1,'p_include_compund','rules.py',763),
-  ('include_args -> include_arg','include_args',1,'p_include_args','rules.py',779),
-  ('include_args -> include_args , include_arg','include_args',3,'p_include_args','rules.py',780),
-  ('include_arg -> name = file_path','include_arg',3,'p_include_arg','rules.py',789),
-  ('include_arg -> optional = bool_value','include_arg',3,'p_include_arg','rules.py',790),
-  ('init_code -> InitialisationCode CODE_BLOCK','init_code',2,'p_init_code','rules.py',798),
-  ('instance_code -> InstanceCode CODE_BLOCK','instance_code',2,'p_instance_code','rules.py',811),
-  ('license -> License STRING','license',2,'p_license','rules.py',827),
-  ('license -> License begin_args ( license_args end_args )','license',6,'p_license','rules.py',828),
-  ('license_args -> license_arg','license_args',1,'p_license_args','rules.py',859),
-  ('license_args -> license_args , license_arg','license_args',3,'p_license_args','rules.py',860),
-  ('license_arg -> licensee = STRING','license_arg',3,'p_license_arg','rules.py',869),
-  ('license_arg -> signature = STRING','license_arg',3,'p_license_arg','rules.py',870),
-  ('license_arg -> timestamp = STRING','license_arg',3,'p_license_arg','rules.py',871),
-  ('license_arg -> type = STRING','license_arg',3,'p_license_arg','rules.py',872),
-  ('mapped_type -> mapped_type_head { mapped_type_body } ;','mapped_type',5,'p_mapped_type','rules.py',893),
-  ('mapped_type_template -> mapped_type_template_head { mapped_type_body } ;','mapped_type_template',5,'p_mapped_type_template','rules.py',906),
-  ('mapped_type_head -> MappedType base_type opt_annos','mapped_type_head',3,'p_mapped_type_head','rules.py',919),
-  ('mapped_type_template_head -> template_decl MappedType base_type opt_annos','mapped_type_template_head',4,'p_mapped_type_template_head','rules.py',932),
-  ('mapped_type_body -> mapped_type_line','mapped_type_body',1,'p_mapped_type_body','rules.py',966),
-  ('mapped_type_body -> mapped_type_body mapped_type_line','mapped_type_body',2,'p_mapped_type_body','rules.py',967),
-  ('mapped_type_line -> if_start','mapped_type_line',1,'p_mapped_type_line','rules.py',971),
-  ('mapped_type_line -> if_end','mapped_type_line',1,'p_mapped_type_line','rules.py',972),
-  ('mapped_type_line -> convert_from_type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',973),
-  ('mapped_type_line -> convert_to_type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',974),
-  ('mapped_type_line -> enum_decl','mapped_type_line',1,'p_mapped_type_line','rules.py',975),
-  ('mapped_type_line -> instance_code','mapped_type_line',1,'p_mapped_type_line','rules.py',976),
-  ('mapped_type_line -> mapped_type_function','mapped_type_line',1,'p_mapped_type_line','rules.py',977),
-  ('mapped_type_line -> release_code','mapped_type_line',1,'p_mapped_type_line','rules.py',978),
-  ('mapped_type_line -> type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',979),
-  ('mapped_type_line -> type_header_code','mapped_type_line',1,'p_mapped_type_line','rules.py',980),
-  ('mapped_type_function -> static cpp_type NAME ( opt_arg_list ) opt_const opt_exceptions opt_annos opt_signature ; opt_docstring premethod_code method_code','mapped_type_function',14,'p_mapped_type_function','rules.py',984),
-  ('module_header_code -> ModuleHeaderCode CODE_BLOCK','module_header_code',2,'p_module_header_code','rules.py',1006),
-  ('module -> Module dotted_name module_body','module',3,'p_module','rules.py',1019),
-  ('module -> Module begin_args ( module_args end_args ) module_body','module',7,'p_module','rules.py',1020),
-  ('module_args -> module_arg','module_args',1,'p_module_args','rules.py',1095),
-  ('module_args -> module_args , module_arg','module_args',3,'p_module_args','rules.py',1096),
-  ('module_arg -> all_raise_py_exception = bool_value','module_arg',3,'p_module_arg','rules.py',1105),
-  ('module_arg -> call_super_init = bool_value','module_arg',3,'p_module_arg','rules.py',1106),
-  ('module_arg -> default_VirtualErrorHandler = NAME','module_arg',3,'p_module_arg','rules.py',1107),
-  ('module_arg -> keyword_arguments = STRING','module_arg',3,'p_module_arg','rules.py',1108),
-  ('module_arg -> language = STRING','module_arg',3,'p_module_arg','rules.py',1109),
-  ('module_arg -> name = dotted_name','module_arg',3,'p_module_arg','rules.py',1110),
-  ('module_arg -> py_ssize_t_clean = bool_value','module_arg',3,'p_module_arg','rules.py',1111),
-  ('module_arg -> use_argument_names = bool_value','module_arg',3,'p_module_arg','rules.py',1112),
-  ('module_arg -> use_limited_api = bool_value','module_arg',3,'p_module_arg','rules.py',1113),
-  ('module_body -> { module_body_directives } ;','module_body',4,'p_module_body','rules.py',1134),
-  ('module_body -> empty','module_body',1,'p_module_body','rules.py',1135),
-  ('module_body_directives -> module_body_directive','module_body_directives',1,'p_module_body_directives','rules.py',1141),
-  ('module_body_directives -> module_body_directives module_body_directive','module_body_directives',2,'p_module_body_directives','rules.py',1142),
-  ('module_body_directive -> if_start','module_body_directive',1,'p_module_body_directive','rules.py',1154),
-  ('module_body_directive -> if_end','module_body_directive',1,'p_module_body_directive','rules.py',1155),
-  ('module_body_directive -> autopyname','module_body_directive',1,'p_module_body_directive','rules.py',1156),
-  ('module_body_directive -> docstring','module_body_directive',1,'p_module_body_directive','rules.py',1157),
-  ('module_code -> ModuleCode CODE_BLOCK','module_code',2,'p_module_code','rules.py',1165),
-  ('pickle_code -> PickleCode CODE_BLOCK','pickle_code',2,'p_pickle_code','rules.py',1178),
-  ('platforms -> Platforms { qualifier_list }','platforms',4,'p_platforms','rules.py',1194),
-  ('plugin -> Plugin NAME','plugin',2,'p_plugin','rules.py',1218),
-  ('postinit_code -> PostInitialisationCode CODE_BLOCK','postinit_code',2,'p_postinit_code','rules.py',1231),
-  ('preinit_code -> PreInitialisationCode CODE_BLOCK','preinit_code',2,'p_preinit_code','rules.py',1244),
-  ('property -> Property ( property_args ) { property_body } ;','property',8,'p_property','rules.py',1257),
-  ('property_args -> property_arg','property_args',1,'p_property_args','rules.py',1292),
-  ('property_args -> property_args , property_arg','property_args',3,'p_property_args','rules.py',1293),
-  ('property_arg -> get = NAME','property_arg',3,'p_property_arg','rules.py',1302),
-  ('property_arg -> name = NAME','property_arg',3,'p_property_arg','rules.py',1303),
-  ('property_arg -> set = NAME','property_arg',3,'p_property_arg','rules.py',1304),
-  ('property_body -> property_line','property_body',1,'p_property_body','rules.py',1310),
-  ('property_body -> property_body property_line','property_body',2,'p_property_body','rules.py',1311),
-  ('property_line -> if_start','property_line',1,'p_property_line','rules.py',1327),
-  ('property_line -> if_end','property_line',1,'p_property_line','rules.py',1328),
-  ('property_line -> docstring','property_line',1,'p_property_line','rules.py',1329),
-  ('release_code -> ReleaseCode CODE_BLOCK','release_code',2,'p_release_code','rules.py',1337),
-  ('timeline -> Timeline { qualifier_list }','timeline',4,'p_timeline','rules.py',1353),
-  ('type_code -> TypeCode CODE_BLOCK','type_code',2,'p_type_code','rules.py',1383),
-  ('type_header_code -> TypeHeaderCode CODE_BLOCK','type_header_code',2,'p_type_header_code','rules.py',1396),
-  ('type_hint_code -> TypeHintCode CODE_BLOCK','type_hint_code',2,'p_type_hint_code','rules.py',1409),
-  ('unit_code -> UnitCode CODE_BLOCK','unit_code',2,'p_unit_code','rules.py',1432),
-  ('unit_postinclude_code -> UnitPostIncludeCode CODE_BLOCK','unit_postinclude_code',2,'p_unit_postinclude_code','rules.py',1445),
-  ('virtual_error_handler -> VirtualErrorHandler NAME CODE_BLOCK','virtual_error_handler',3,'p_virtual_error_handler','rules.py',1458),
-  ('virtual_error_handler -> VirtualErrorHandler begin_args ( veh_args end_args ) CODE_BLOCK','virtual_error_handler',7,'p_virtual_error_handler','rules.py',1459),
-  ('veh_args -> veh_arg','veh_args',1,'p_veh_args','rules.py',1489),
-  ('veh_args -> veh_args , veh_arg','veh_args',3,'p_veh_args','rules.py',1490),
-  ('veh_arg -> name = NAME','veh_arg',3,'p_veh_arg','rules.py',1499),
-  ('cpp_type -> const base_type derefs opt_ref','cpp_type',4,'p_cpp_type','rules.py',1507),
-  ('cpp_type -> base_type derefs opt_ref','cpp_type',3,'p_cpp_type','rules.py',1508),
-  ('base_type -> pod_type','base_type',1,'p_base_type','rules.py',1524),
-  ('base_type -> scoped_name','base_type',1,'p_base_type','rules.py',1525),
-  ('base_type -> scoped_name < cpp_types >','base_type',4,'p_base_type','rules.py',1526),
-  ('base_type -> struct scoped_name','base_type',2,'p_base_type','rules.py',1527),
-  ('base_type -> union scoped_name','base_type',2,'p_base_type','rules.py',1528),
-  ('pod_type -> unsigned long long','pod_type',3,'p_pod_type','rules.py',1603),
-  ('pod_type -> signed char','pod_type',2,'p_pod_type','rules.py',1604),
-  ('pod_type -> long long','pod_type',2,'p_pod_type','rules.py',1605),
-  ('pod_type -> unsigned char','pod_type',2,'p_pod_type','rules.py',1606),
-  ('pod_type -> unsigned short','pod_type',2,'p_pod_type','rules.py',1607),
-  ('pod_type -> unsigned int','pod_type',2,'p_pod_type','rules.py',1608),
-  ('pod_type -> unsigned long','pod_type',2,'p_pod_type','rules.py',1609),
-  ('pod_type -> unsigned','pod_type',1,'p_pod_type','rules.py',1610),
-  ('pod_type -> short','pod_type',1,'p_pod_type','rules.py',1611),
-  ('pod_type -> int','pod_type',1,'p_pod_type','rules.py',1612),
-  ('pod_type -> long','pod_type',1,'p_pod_type','rules.py',1613),
-  ('pod_type -> float','pod_type',1,'p_pod_type','rules.py',1614),
-  ('pod_type -> double','pod_type',1,'p_pod_type','rules.py',1615),
-  ('pod_type -> bool','pod_type',1,'p_pod_type','rules.py',1616),
-  ('pod_type -> char','pod_type',1,'p_pod_type','rules.py',1617),
-  ('pod_type -> wchar_t','pod_type',1,'p_pod_type','rules.py',1618),
-  ('pod_type -> void','pod_type',1,'p_pod_type','rules.py',1619),
-  ('pod_type -> SIP_PYOBJECT','pod_type',1,'p_pod_type','rules.py',1620),
-  ('pod_type -> SIP_PYTUPLE','pod_type',1,'p_pod_type','rules.py',1621),
-  ('pod_type -> SIP_PYLIST','pod_type',1,'p_pod_type','rules.py',1622),
-  ('pod_type -> SIP_PYDICT','pod_type',1,'p_pod_type','rules.py',1623),
-  ('pod_type -> SIP_PYCALLABLE','pod_type',1,'p_pod_type','rules.py',1624),
-  ('pod_type -> SIP_PYSLICE','pod_type',1,'p_pod_type','rules.py',1625),
-  ('pod_type -> SIP_PYTYPE','pod_type',1,'p_pod_type','rules.py',1626),
-  ('pod_type -> SIP_PYBUFFER','pod_type',1,'p_pod_type','rules.py',1627),
-  ('pod_type -> SIP_PYENUM','pod_type',1,'p_pod_type','rules.py',1628),
-  ('pod_type -> SIP_SSIZE_T','pod_type',1,'p_pod_type','rules.py',1629),
-  ('pod_type -> Py_hash_t','pod_type',1,'p_pod_type','rules.py',1630),
-  ('pod_type -> Py_ssize_t','pod_type',1,'p_pod_type','rules.py',1631),
-  ('pod_type -> size_t','pod_type',1,'p_pod_type','rules.py',1632),
-  ('pod_type -> ELLIPSIS','pod_type',1,'p_pod_type','rules.py',1633),
-  ('cpp_types -> cpp_type','cpp_types',1,'p_cpp_types','rules.py',1649),
-  ('cpp_types -> cpp_types , cpp_type','cpp_types',3,'p_cpp_types','rules.py',1650),
-  ('derefs -> empty','derefs',1,'p_derefs','rules.py',1664),
-  ('derefs -> derefs *','derefs',2,'p_derefs','rules.py',1665),
-  ('derefs -> derefs * const','derefs',3,'p_derefs','rules.py',1666),
-  ('opt_ref -> &','opt_ref',1,'p_opt_ref','rules.py',1676),
-  ('opt_ref -> empty','opt_ref',1,'p_opt_ref','rules.py',1677),
-  ('class_template -> template_decl class_decl','class_template',2,'p_class_template','rules.py',1717),
-  ('class_decl -> class class_head opt_class_body ;','class_decl',4,'p_class_decl','rules.py',1730),
-  ('class_head -> scoped_name superclasses opt_annos','class_head',3,'p_class_head','rules.py',1742),
-  ('struct_decl -> struct struct_head opt_class_body ;','struct_decl',4,'p_struct_decl','rules.py',1761),
-  ('struct_head -> scoped_name superclasses opt_annos','struct_head',3,'p_struct_head','rules.py',1772),
-  ('superclasses -> : superclass_list','superclasses',2,'p_superclasses','rules.py',1788),
-  ('superclasses -> empty','superclasses',1,'p_superclasses','rules.py',1789),
-  ('superclass_list -> superclass','superclass_list',1,'p_superclass_list','rules.py',1795),
-  ('superclass_list -> superclass_list , superclass','superclass_list',3,'p_superclass_list','rules.py',1796),
-  ('superclass -> class_access scoped_name','superclass',2,'p_superclass','rules.py',1812),
-  ('class_access -> empty','class_access',1,'p_class_access','rules.py',1840),
-  ('class_access -> public','class_access',1,'p_class_access','rules.py',1841),
-  ('class_access -> protected','class_access',1,'p_class_access','rules.py',1842),
-  ('class_access -> private','class_access',1,'p_class_access','rules.py',1843),
-  ('opt_class_body -> { opt_docstring class_body }','opt_class_body',4,'p_opt_class_body','rules.py',1852),
-  ('opt_class_body -> empty','opt_class_body',1,'p_opt_class_body','rules.py',1853),
-  ('class_body -> class_line','class_body',1,'p_class_body','rules.py',1868),
-  ('class_body -> class_body class_line','class_body',2,'p_class_body','rules.py',1869),
-  ('class_line -> if_start','class_line',1,'p_class_line','rules.py',1873),
-  ('class_line -> if_end','class_line',1,'p_class_line','rules.py',1874),
-  ('class_line -> class_decl','class_line',1,'p_class_line','rules.py',1875),
-  ('class_line -> ctor','class_line',1,'p_class_line','rules.py',1876),
-  ('class_line -> dtor','class_line',1,'p_class_line','rules.py',1877),
-  ('class_line -> enum_decl','class_line',1,'p_class_line','rules.py',1878),
-  ('class_line -> exception','class_line',1,'p_class_line','rules.py',1879),
-  ('class_line -> typedef_decl','class_line',1,'p_class_line','rules.py',1880),
-  ('class_line -> method_variable','class_line',1,'p_class_line','rules.py',1881),
-  ('class_line -> namespace_decl','class_line',1,'p_class_line','rules.py',1882),
-  ('class_line -> struct_decl','class_line',1,'p_class_line','rules.py',1883),
-  ('class_line -> union_decl','class_line',1,'p_class_line','rules.py',1884),
-  ('class_line -> public_specifier','class_line',1,'p_class_line','rules.py',1885),
-  ('class_line -> protected_specifier','class_line',1,'p_class_line','rules.py',1886),
-  ('class_line -> private_specifier','class_line',1,'p_class_line','rules.py',1887),
-  ('class_line -> signals_specifier','class_line',1,'p_class_line','rules.py',1888),
-  ('class_line -> convert_from_type_code','class_line',1,'p_class_line','rules.py',1889),
-  ('class_line -> convert_to_subclass_code','class_line',1,'p_class_line','rules.py',1890),
-  ('class_line -> convert_to_type_code','class_line',1,'p_class_line','rules.py',1891),
-  ('class_line -> finalisation_code','class_line',1,'p_class_line','rules.py',1892),
-  ('class_line -> gc_clear_code','class_line',1,'p_class_line','rules.py',1893),
-  ('class_line -> gc_traverse_code','class_line',1,'p_class_line','rules.py',1894),
-  ('class_line -> get_buffer_code','class_line',1,'p_class_line','rules.py',1895),
-  ('class_line -> instance_code','class_line',1,'p_class_line','rules.py',1896),
-  ('class_line -> pickle_code','class_line',1,'p_class_line','rules.py',1897),
-  ('class_line -> property','class_line',1,'p_class_line','rules.py',1898),
-  ('class_line -> release_buffer_code','class_line',1,'p_class_line','rules.py',1899),
-  ('class_line -> type_code','class_line',1,'p_class_line','rules.py',1900),
-  ('class_line -> type_header_code','class_line',1,'p_class_line','rules.py',1901),
-  ('class_line -> type_hint_code','class_line',1,'p_class_line','rules.py',1902),
-  ('class_line -> BIGetReadBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1903),
-  ('class_line -> BIGetWriteBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1904),
-  ('class_line -> BIGetSegCountCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1905),
-  ('class_line -> BIGetCharBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1906),
-  ('ctor -> explicit ctor_decl','ctor',2,'p_ctor','rules.py',1927),
-  ('ctor -> ctor_decl','ctor',1,'p_ctor','rules.py',1928),
-  ('ctor_decl -> NAME ( opt_arg_list ) opt_exceptions opt_annos opt_ctor_signature ; opt_docstring premethod_code method_code','ctor_decl',11,'p_ctor_decl','rules.py',1940),
-  ('opt_ctor_signature -> [ ( opt_arg_list ) ]','opt_ctor_signature',5,'p_opt_ctor_signature','rules.py',1954),
-  ('opt_ctor_signature -> empty','opt_ctor_signature',1,'p_opt_ctor_signature','rules.py',1955),
-  ('dtor -> opt_virtual ~ NAME ( ) opt_exceptions opt_abstract opt_annos ; premethod_code method_code virtual_catcher_code','dtor',12,'p_dtor','rules.py',1971),
-  ('method_variable -> Q_SIGNAL simple_method_variable','method_variable',2,'p_method_variable','rules.py',1988),
-  ('method_variable -> Q_SLOT simple_method_variable','method_variable',2,'p_method_variable','rules.py',1989),
-  ('method_variable -> simple_method_variable','method_variable',1,'p_method_variable','rules.py',1990),
-  ('simple_method_variable -> virtual function','simple_method_variable',2,'p_simple_method_variable','rules.py',2010),
-  ('simple_method_variable -> static plain_method_variable','simple_method_variable',2,'p_simple_method_variable','rules.py',2011),
-  ('simple_method_variable -> plain_method_variable','simple_method_variable',1,'p_simple_method_variable','rules.py',2012),
-  ('plain_method_variable -> function','plain_method_variable',1,'p_plain_method_variable','rules.py',2030),
-  ('plain_method_variable -> variable','plain_method_variable',1,'p_plain_method_variable','rules.py',2031),
-  ('public_specifier -> public opt_slots :','public_specifier',3,'p_public_specifier','rules.py',2037),
-  ('protected_specifier -> protected opt_slots :','protected_specifier',3,'p_protected_specifier','rules.py',2049),
-  ('private_specifier -> private opt_slots :','private_specifier',3,'p_private_specifier','rules.py',2061),
-  ('signals_specifier -> signals :','signals_specifier',2,'p_signals_specifier','rules.py',2073),
-  ('signals_specifier -> Q_SIGNALS :','signals_specifier',2,'p_signals_specifier','rules.py',2074),
-  ('opt_slots -> slots','opt_slots',1,'p_opt_slots','rules.py',2086),
-  ('opt_slots -> Q_SLOTS','opt_slots',1,'p_opt_slots','rules.py',2087),
-  ('opt_slots -> empty','opt_slots',1,'p_opt_slots','rules.py',2088),
-  ('enum_decl -> enum opt_enum_key opt_name opt_annos { opt_enum_body } ;','enum_decl',8,'p_enum_decl','rules.py',2111),
-  ('opt_enum_key -> class','opt_enum_key',1,'p_opt_enum_key','rules.py',2124),
-  ('opt_enum_key -> struct','opt_enum_key',1,'p_opt_enum_key','rules.py',2125),
-  ('opt_enum_key -> union','opt_enum_key',1,'p_opt_enum_key','rules.py',2126),
-  ('opt_enum_key -> empty','opt_enum_key',1,'p_opt_enum_key','rules.py',2127),
-  ('opt_enum_body -> enum_body','opt_enum_body',1,'p_opt_enum_body','rules.py',2134),
-  ('opt_enum_body -> empty','opt_enum_body',1,'p_opt_enum_body','rules.py',2135),
-  ('enum_body -> enum_line','enum_body',1,'p_enum_body','rules.py',2141),
-  ('enum_body -> enum_body enum_line','enum_body',2,'p_enum_body','rules.py',2142),
-  ('enum_line -> if_start','enum_line',1,'p_enum_line','rules.py',2156),
-  ('enum_line -> if_end','enum_line',1,'p_enum_line','rules.py',2157),
-  ('enum_line -> NAME opt_enum_assign opt_annos opt_comma','enum_line',4,'p_enum_line','rules.py',2158),
-  ('opt_enum_assign -> = value','opt_enum_assign',2,'p_opt_enum_assign','rules.py',2176),
-  ('opt_enum_assign -> empty','opt_enum_assign',1,'p_opt_enum_assign','rules.py',2177),
-  ('opt_comma -> empty','opt_comma',1,'p_opt_comma','rules.py',2181),
-  ('opt_comma -> ,','opt_comma',1,'p_opt_comma','rules.py',2182),
-  ('exception -> Exception scoped_name opt_base_exception opt_annos { exception_body } ;','exception',8,'p_exception','rules.py',2195),
-  ('opt_base_exception -> ( scoped_name )','opt_base_exception',3,'p_opt_base_exception','rules.py',2243),
-  ('opt_base_exception -> empty','opt_base_exception',1,'p_opt_base_exception','rules.py',2244),
-  ('exception_body -> exception_line','exception_body',1,'p_exception_body','rules.py',2271),
-  ('exception_body -> exception_body exception_line','exception_body',2,'p_exception_body','rules.py',2272),
-  ('exception_line -> if_start','exception_line',1,'p_exception_line','rules.py',2281),
-  ('exception_line -> if_end','exception_line',1,'p_exception_line','rules.py',2282),
-  ('exception_line -> RaiseCode CODE_BLOCK','exception_line',2,'p_exception_line','rules.py',2283),
-  ('exception_line -> TypeHeaderCode CODE_BLOCK','exception_line',2,'p_exception_line','rules.py',2284),
-  ('function -> function_decl','function',1,'p_function','rules.py',2330),
-  ('function -> assignment_operator_decl','function',1,'p_function','rules.py',2331),
-  ('function -> operator_decl','function',1,'p_function','rules.py',2332),
-  ('function -> operator_cast_decl','function',1,'p_function','rules.py',2333),
-  ('function_decl -> cpp_type NAME ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; opt_docstring premethod_code method_code virtual_catcher_code virtual_call_code','function_decl',17,'p_function_decl','rules.py',2339),
-  ('assignment_operator_decl -> cpp_type operator = ( cpp_type ) ;','assignment_operator_decl',7,'p_assignment_operator_decl','rules.py',2356),
-  ('operator_decl -> cpp_type operator operator_name ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; premethod_code method_code virtual_catcher_code virtual_call_code','operator_decl',17,'p_operator_decl','rules.py',2371),
-  ('operator_cast_decl -> operator cpp_type ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; premethod_code method_code virtual_catcher_code virtual_call_code','operator_cast_decl',16,'p_operator_cast_decl','rules.py',2423),
-  ('opt_arg_list -> arg_list','opt_arg_list',1,'p_opt_arg_list','rules.py',2468),
-  ('opt_arg_list -> empty','opt_arg_list',1,'p_opt_arg_list','rules.py',2469),
-  ('arg_list -> arg_value','arg_list',1,'p_arg_list','rules.py',2487),
-  ('arg_list -> arg_list , arg_value','arg_list',3,'p_arg_list','rules.py',2488),
-  ('arg_value -> arg_type opt_assign','arg_value',2,'p_arg_value','rules.py',2500),
-  ('arg_type -> cpp_type opt_name opt_annos','arg_type',3,'p_arg_type','rules.py',2533),
-  ('opt_assign -> = expr','opt_assign',2,'p_opt_assign','rules.py',2592),
-  ('opt_assign -> empty','opt_assign',1,'p_opt_assign','rules.py',2593),
-  ('expr -> value','expr',1,'p_expr','rules.py',2599),
-  ('expr -> expr binop value','expr',3,'p_expr','rules.py',2600),
-  ('value -> opt_cast opt_unop simple_value','value',3,'p_value','rules.py',2613),
-  ('simple_value -> empty_value','simple_value',1,'p_simple_value','rules.py',2623),
-  ('simple_value -> function_call_value','simple_value',1,'p_simple_value','rules.py',2624),
-  ('simple_value -> null_value','simple_value',1,'p_simple_value','rules.py',2625),
-  ('simple_value -> number_value','simple_value',1,'p_simple_value','rules.py',2626),
-  ('simple_value -> quoted_char_value','simple_value',1,'p_simple_value','rules.py',2627),
-  ('simple_value -> real_value','simple_value',1,'p_simple_value','rules.py',2628),
-  ('simple_value -> scoped_name_value','simple_value',1,'p_simple_value','rules.py',2629),
-  ('simple_value -> string_value','simple_value',1,'p_simple_value','rules.py',2630),
-  ('empty_value -> { }','empty_value',2,'p_empty_value','rules.py',2636),
-  ('function_call_value -> base_type ( opt_expr_list )','function_call_value',4,'p_function_call_value','rules.py',2642),
-  ('null_value -> NULL','null_value',1,'p_null_value','rules.py',2648),
-  ('number_value -> NUMBER','number_value',1,'p_number_value','rules.py',2654),
-  ('number_value -> bool_value','number_value',1,'p_number_value','rules.py',2655),
-  ('quoted_char_value -> QUOTED_CHAR','quoted_char_value',1,'p_quoted_char_value','rules.py',2661),
-  ('real_value -> REAL','real_value',1,'p_real_value','rules.py',2667),
-  ('scoped_name_value -> scoped_name','scoped_name_value',1,'p_scoped_name_value','rules.py',2673),
-  ('string_value -> STRING','string_value',1,'p_string_value','rules.py',2679),
-  ('opt_expr_list -> expr_list','opt_expr_list',1,'p_opt_expr_list','rules.py',2685),
-  ('opt_expr_list -> empty','opt_expr_list',1,'p_opt_expr_list','rules.py',2686),
-  ('expr_list -> expr','expr_list',1,'p_expr_list','rules.py',2692),
-  ('expr_list -> expr_list , expr','expr_list',3,'p_expr_list','rules.py',2693),
-  ('opt_cast -> ( scoped_name )','opt_cast',3,'p_opt_cast','rules.py',2705),
-  ('opt_cast -> empty','opt_cast',1,'p_opt_cast','rules.py',2706),
-  ('binop -> -','binop',1,'p_binop','rules.py',2712),
-  ('binop -> +','binop',1,'p_binop','rules.py',2713),
-  ('binop -> *','binop',1,'p_binop','rules.py',2714),
-  ('binop -> /','binop',1,'p_binop','rules.py',2715),
-  ('binop -> &','binop',1,'p_binop','rules.py',2716),
-  ('binop -> |','binop',1,'p_binop','rules.py',2717),
-  ('opt_unop -> empty','opt_unop',1,'p_opt_unop','rules.py',2723),
-  ('opt_unop -> !','opt_unop',1,'p_opt_unop','rules.py',2724),
-  ('opt_unop -> ~','opt_unop',1,'p_opt_unop','rules.py',2725),
-  ('opt_unop -> -','opt_unop',1,'p_opt_unop','rules.py',2726),
-  ('opt_unop -> +','opt_unop',1,'p_opt_unop','rules.py',2727),
-  ('opt_unop -> *','opt_unop',1,'p_opt_unop','rules.py',2728),
-  ('opt_unop -> &','opt_unop',1,'p_opt_unop','rules.py',2729),
-  ('opt_exceptions -> empty','opt_exceptions',1,'p_opt_exceptions','rules.py',2735),
-  ('opt_exceptions -> noexcept','opt_exceptions',1,'p_opt_exceptions','rules.py',2736),
-  ('opt_exceptions -> throw ( opt_exception_list )','opt_exceptions',4,'p_opt_exceptions','rules.py',2737),
-  ('opt_exception_list -> exception_list','opt_exception_list',1,'p_opt_exception_list','rules.py',2748),
-  ('opt_exception_list -> empty','opt_exception_list',1,'p_opt_exception_list','rules.py',2749),
-  ('exception_list -> scoped_name','exception_list',1,'p_exception_list','rules.py',2755),
-  ('exception_list -> exception_list , scoped_name','exception_list',3,'p_exception_list','rules.py',2756),
-  ('opt_abstract -> = NUMBER','opt_abstract',2,'p_opt_abstract','rules.py',2770),
-  ('opt_abstract -> empty','opt_abstract',1,'p_opt_abstract','rules.py',2771),
-  ('opt_signature -> [ cpp_type ( opt_arg_list ) ]','opt_signature',6,'p_opt_signature','rules.py',2783),
-  ('opt_signature -> empty','opt_signature',1,'p_opt_signature','rules.py',2784),
-  ('operator_name -> +','operator_name',1,'p_operator_name','rules.py',2826),
-  ('operator_name -> -','operator_name',1,'p_operator_name','rules.py',2827),
-  ('operator_name -> *','operator_name',1,'p_operator_name','rules.py',2828),
-  ('operator_name -> /','operator_name',1,'p_operator_name','rules.py',2829),
-  ('operator_name -> %','operator_name',1,'p_operator_name','rules.py',2830),
-  ('operator_name -> &','operator_name',1,'p_operator_name','rules.py',2831),
-  ('operator_name -> |','operator_name',1,'p_operator_name','rules.py',2832),
-  ('operator_name -> ^','operator_name',1,'p_operator_name','rules.py',2833),
-  ('operator_name -> < <','operator_name',2,'p_operator_name','rules.py',2834),
-  ('operator_name -> > >','operator_name',2,'p_operator_name','rules.py',2835),
-  ('operator_name -> + =','operator_name',2,'p_operator_name','rules.py',2836),
-  ('operator_name -> - =','operator_name',2,'p_operator_name','rules.py',2837),
-  ('operator_name -> * =','operator_name',2,'p_operator_name','rules.py',2838),
-  ('operator_name -> / =','operator_name',2,'p_operator_name','rules.py',2839),
-  ('operator_name -> % =','operator_name',2,'p_operator_name','rules.py',2840),
-  ('operator_name -> & =','operator_name',2,'p_operator_name','rules.py',2841),
-  ('operator_name -> | =','operator_name',2,'p_operator_name','rules.py',2842),
-  ('operator_name -> ^ =','operator_name',2,'p_operator_name','rules.py',2843),
-  ('operator_name -> < < =','operator_name',3,'p_operator_name','rules.py',2844),
-  ('operator_name -> > > =','operator_name',3,'p_operator_name','rules.py',2845),
-  ('operator_name -> ~','operator_name',1,'p_operator_name','rules.py',2846),
-  ('operator_name -> ( )','operator_name',2,'p_operator_name','rules.py',2847),
-  ('operator_name -> [ ]','operator_name',2,'p_operator_name','rules.py',2848),
-  ('operator_name -> <','operator_name',1,'p_operator_name','rules.py',2849),
-  ('operator_name -> < =','operator_name',2,'p_operator_name','rules.py',2850),
-  ('operator_name -> = =','operator_name',2,'p_operator_name','rules.py',2851),
-  ('operator_name -> ! =','operator_name',2,'p_operator_name','rules.py',2852),
-  ('operator_name -> >','operator_name',1,'p_operator_name','rules.py',2853),
-  ('operator_name -> > =','operator_name',2,'p_operator_name','rules.py',2854),
-  ('method_code -> MethodCode CODE_BLOCK','method_code',2,'p_method_code','rules.py',2860),
-  ('method_code -> empty','method_code',1,'p_method_code','rules.py',2861),
-  ('premethod_code -> PreMethodCode CODE_BLOCK','premethod_code',2,'p_premethod_code','rules.py',2867),
-  ('premethod_code -> empty','premethod_code',1,'p_premethod_code','rules.py',2868),
-  ('virtual_call_code -> VirtualCallCode CODE_BLOCK','virtual_call_code',2,'p_virtual_call_code','rules.py',2874),
-  ('virtual_call_code -> empty','virtual_call_code',1,'p_virtual_call_code','rules.py',2875),
-  ('virtual_catcher_code -> VirtualCatcherCode CODE_BLOCK','virtual_catcher_code',2,'p_virtual_catcher_code','rules.py',2881),
-  ('virtual_catcher_code -> empty','virtual_catcher_code',1,'p_virtual_catcher_code','rules.py',2882),
-  ('namespace_decl -> namespace namespace_head opt_namespace_body ;','namespace_decl',4,'p_namespace_decl','rules.py',2896),
-  ('namespace_head -> scoped_name opt_annos','namespace_head',2,'p_namespace_head','rules.py',2911),
-  ('opt_namespace_body -> { namespace_body }','opt_namespace_body',3,'p_opt_namespace_body','rules.py',2929),
-  ('opt_namespace_body -> empty','opt_namespace_body',1,'p_opt_namespace_body','rules.py',2930),
-  ('namespace_body -> namespace_statement','namespace_body',1,'p_namespace_body','rules.py',2934),
-  ('namespace_body -> namespace_body namespace_statement','namespace_body',2,'p_namespace_body','rules.py',2935),
-  ('typedef_decl -> typedef cpp_type NAME opt_annos ; opt_docstring','typedef_decl',6,'p_typedef_decl','rules.py',2954),
-  ('typedef_decl -> typedef cpp_type ( * NAME ) ( cpp_types ) opt_annos ; opt_docstring','typedef_decl',12,'p_typedef_decl','rules.py',2955),
-  ('union_decl -> union union_head opt_class_body ;','union_decl',4,'p_union_decl','rules.py',3034),
-  ('union_head -> scoped_name opt_annos','union_head',2,'p_union_head','rules.py',3045),
-  ('variable -> cpp_type NAME opt_annos variable_body ;','variable',5,'p_variable','rules.py',3075),
-  ('variable_body -> { variable_body_directives }','variable_body',3,'p_variable_body','rules.py',3117),
-  ('variable_body -> empty','variable_body',1,'p_variable_body','rules.py',3118),
-  ('variable_body_directives -> variable_body_directive','variable_body_directives',1,'p_variable_body_directives','rules.py',3124),
-  ('variable_body_directives -> variable_body_directives variable_body_directive','variable_body_directives',2,'p_variable_body_directives','rules.py',3125),
-  ('variable_body_directive -> if_start','variable_body_directive',1,'p_variable_body_directive','rules.py',3134),
-  ('variable_body_directive -> if_end','variable_body_directive',1,'p_variable_body_directive','rules.py',3135),
-  ('variable_body_directive -> AccessCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3136),
-  ('variable_body_directive -> GetCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3137),
-  ('variable_body_directive -> SetCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3138),
-  ('opt_annos -> / annotations /','opt_annos',3,'p_opt_annos','rules.py',3146),
-  ('opt_annos -> empty','opt_annos',1,'p_opt_annos','rules.py',3147),
-  ('annotations -> annotation','annotations',1,'p_annotations','rules.py',3153),
-  ('annotations -> annotations , annotation','annotations',3,'p_annotations','rules.py',3154),
-  ('annotation -> NAME','annotation',1,'p_annotation','rules.py',3163),
-  ('annotation -> NAME = annotation_value','annotation',3,'p_annotation','rules.py',3164),
-  ('annotation_value -> dotted_name','annotation_value',1,'p_annotation_value','rules.py',3173),
-  ('annotation_value -> STRING','annotation_value',1,'p_annotation_value','rules.py',3174),
-  ('annotation_value -> NUMBER','annotation_value',1,'p_annotation_value','rules.py',3175),
-  ('scoped_name -> SCOPE relative_scoped_name','scoped_name',2,'p_scoped_name','rules.py',3191),
-  ('scoped_name -> relative_scoped_name','scoped_name',1,'p_scoped_name','rules.py',3192),
-  ('relative_scoped_name -> NAME','relative_scoped_name',1,'p_relative_scoped_name','rules.py',3203),
-  ('relative_scoped_name -> relative_scoped_name SCOPE NAME','relative_scoped_name',3,'p_relative_scoped_name','rules.py',3204),
-  ('template_decl -> template < cpp_types >','template_decl',4,'p_template_decl','rules.py',3217),
-  ('bool_value -> true','bool_value',1,'p_bool_value','rules.py',3228),
-  ('bool_value -> True','bool_value',1,'p_bool_value','rules.py',3229),
-  ('bool_value -> false','bool_value',1,'p_bool_value','rules.py',3230),
-  ('bool_value -> False','bool_value',1,'p_bool_value','rules.py',3231),
-  ('dotted_name -> NAME','dotted_name',1,'p_dotted_name','rules.py',3237),
-  ('dotted_name -> dotted_name . NAME','dotted_name',3,'p_dotted_name','rules.py',3238),
-  ('empty -> <empty>','empty',0,'p_empty','rules.py',3253),
-  ('file_name -> dotted_name','file_name',1,'p_file_name','rules.py',3259),
-  ('file_name -> file_name - dotted_name','file_name',3,'p_file_name','rules.py',3260),
-  ('file_path -> file_name','file_path',1,'p_file_path','rules.py',3266),
-  ('file_path -> file_path / file_name','file_path',3,'p_file_path','rules.py',3267),
-  ('opt_const -> const','opt_const',1,'p_opt_const','rules.py',3273),
-  ('opt_const -> empty','opt_const',1,'p_opt_const','rules.py',3274),
-  ('opt_docstring -> docstring','opt_docstring',1,'p_opt_docstring','rules.py',3280),
-  ('opt_docstring -> empty','opt_docstring',1,'p_opt_docstring','rules.py',3281),
-  ('opt_final -> final','opt_final',1,'p_opt_final','rules.py',3287),
-  ('opt_final -> empty','opt_final',1,'p_opt_final','rules.py',3288),
-  ('opt_name -> NAME','opt_name',1,'p_opt_name','rules.py',3294),
-  ('opt_name -> empty','opt_name',1,'p_opt_name','rules.py',3295),
-  ('opt_virtual -> virtual','opt_virtual',1,'p_opt_virtual','rules.py',3301),
-  ('opt_virtual -> empty','opt_virtual',1,'p_opt_virtual','rules.py',3302),
-  ('ored_qualifiers -> NAME','ored_qualifiers',1,'p_ored_qualifiers','rules.py',3314),
-  ('ored_qualifiers -> ! NAME','ored_qualifiers',2,'p_ored_qualifiers','rules.py',3315),
-  ('ored_qualifiers -> ored_qualifiers LOGICAL_OR NAME','ored_qualifiers',3,'p_ored_qualifiers','rules.py',3316),
-  ('ored_qualifiers -> ored_qualifiers LOGICAL_OR ! NAME','ored_qualifiers',4,'p_ored_qualifiers','rules.py',3317),
-  ('qualifier_list -> NAME','qualifier_list',1,'p_qualifier_list','rules.py',3334),
-  ('qualifier_list -> qualifier_list NAME','qualifier_list',2,'p_qualifier_list','rules.py',3335),
-  ('qualifiers -> ored_qualifiers','qualifiers',1,'p_qualifiers','rules.py',3347),
-  ('qualifiers -> opt_name - opt_name','qualifiers',3,'p_qualifiers','rules.py',3348),
+  ('specification -> statement','specification',1,'p_specification','rules.py',67),
+  ('specification -> specification statement','specification',2,'p_specification','rules.py',68),
+  ('statement -> eof','statement',1,'p_statement','rules.py',72),
+  ('statement -> namespace_statement','statement',1,'p_statement','rules.py',73),
+  ('statement -> composite_module','statement',1,'p_statement','rules.py',74),
+  ('statement -> copying','statement',1,'p_statement','rules.py',75),
+  ('statement -> defdocstringfmt','statement',1,'p_statement','rules.py',76),
+  ('statement -> defdocstringsig','statement',1,'p_statement','rules.py',77),
+  ('statement -> defencoding','statement',1,'p_statement','rules.py',78),
+  ('statement -> defmetatype','statement',1,'p_statement','rules.py',79),
+  ('statement -> defsupertype','statement',1,'p_statement','rules.py',80),
+  ('statement -> exported_header_code','statement',1,'p_statement','rules.py',81),
+  ('statement -> exported_type_hint_code','statement',1,'p_statement','rules.py',82),
+  ('statement -> extract','statement',1,'p_statement','rules.py',83),
+  ('statement -> feature','statement',1,'p_statement','rules.py',84),
+  ('statement -> hidden_ns','statement',1,'p_statement','rules.py',85),
+  ('statement -> import','statement',1,'p_statement','rules.py',86),
+  ('statement -> include','statement',1,'p_statement','rules.py',87),
+  ('statement -> init_code','statement',1,'p_statement','rules.py',88),
+  ('statement -> license','statement',1,'p_statement','rules.py',89),
+  ('statement -> mapped_type','statement',1,'p_statement','rules.py',90),
+  ('statement -> mapped_type_template','statement',1,'p_statement','rules.py',91),
+  ('statement -> module','statement',1,'p_statement','rules.py',92),
+  ('statement -> module_code','statement',1,'p_statement','rules.py',93),
+  ('statement -> module_header_code','statement',1,'p_statement','rules.py',94),
+  ('statement -> platforms','statement',1,'p_statement','rules.py',95),
+  ('statement -> plugin','statement',1,'p_statement','rules.py',96),
+  ('statement -> preinit_code','statement',1,'p_statement','rules.py',97),
+  ('statement -> postinit_code','statement',1,'p_statement','rules.py',98),
+  ('statement -> timeline','statement',1,'p_statement','rules.py',99),
+  ('statement -> type_hint_code','statement',1,'p_statement','rules.py',100),
+  ('statement -> unit_code','statement',1,'p_statement','rules.py',101),
+  ('statement -> unit_postinclude_code','statement',1,'p_statement','rules.py',102),
+  ('statement -> virtual_error_handler','statement',1,'p_statement','rules.py',103),
+  ('namespace_statement -> if_start','namespace_statement',1,'p_namespace_statement','rules.py',107),
+  ('namespace_statement -> if_end','namespace_statement',1,'p_namespace_statement','rules.py',108),
+  ('namespace_statement -> class_decl','namespace_statement',1,'p_namespace_statement','rules.py',109),
+  ('namespace_statement -> class_template','namespace_statement',1,'p_namespace_statement','rules.py',110),
+  ('namespace_statement -> enum_decl','namespace_statement',1,'p_namespace_statement','rules.py',111),
+  ('namespace_statement -> exception','namespace_statement',1,'p_namespace_statement','rules.py',112),
+  ('namespace_statement -> function','namespace_statement',1,'p_namespace_statement','rules.py',113),
+  ('namespace_statement -> namespace_decl','namespace_statement',1,'p_namespace_statement','rules.py',114),
+  ('namespace_statement -> struct_decl','namespace_statement',1,'p_namespace_statement','rules.py',115),
+  ('namespace_statement -> typedef_decl','namespace_statement',1,'p_namespace_statement','rules.py',116),
+  ('namespace_statement -> union_decl','namespace_statement',1,'p_namespace_statement','rules.py',117),
+  ('namespace_statement -> variable','namespace_statement',1,'p_namespace_statement','rules.py',118),
+  ('namespace_statement -> type_header_code','namespace_statement',1,'p_namespace_statement','rules.py',119),
+  ('eof -> EOF','eof',1,'p_eof','rules.py',123),
+  ('begin_args -> <empty>','begin_args',0,'p_begin_args','rules.py',130),
+  ('end_args -> <empty>','end_args',0,'p_end_args','rules.py',136),
+  ('need_eol -> <empty>','need_eol',0,'p_need_eol','rules.py',142),
+  ('autopyname -> AutoPyName begin_args ( remove_leading = STRING end_args )','autopyname',8,'p_autopyname','rules.py',150),
+  ('get_buffer_code -> BIGetBufferCode CODE_BLOCK','get_buffer_code',2,'p_get_buffer_code','rules.py',161),
+  ('release_buffer_code -> BIReleaseBufferCode CODE_BLOCK','release_buffer_code',2,'p_release_buffer_code','rules.py',177),
+  ('composite_module -> CompositeModule dotted_name c_module_body','composite_module',3,'p_composite_module','rules.py',194),
+  ('composite_module -> CompositeModule begin_args ( c_module_args end_args ) c_module_body','composite_module',7,'p_composite_module','rules.py',195),
+  ('c_module_args -> c_module_arg','c_module_args',1,'p_c_module_args','rules.py',227),
+  ('c_module_args -> c_module_args , c_module_arg','c_module_args',3,'p_c_module_args','rules.py',228),
+  ('c_module_arg -> name = dotted_name','c_module_arg',3,'p_c_module_arg','rules.py',237),
+  ('c_module_body -> { c_module_body_directives } ;','c_module_body',4,'p_c_module_body','rules.py',243),
+  ('c_module_body -> empty','c_module_body',1,'p_c_module_body','rules.py',244),
+  ('c_module_body_directives -> c_module_body_directive','c_module_body_directives',1,'p_c_module_body_directives','rules.py',250),
+  ('c_module_body_directives -> c_module_body_directives c_module_body_directive','c_module_body_directives',2,'p_c_module_body_directives','rules.py',251),
+  ('c_module_body_directive -> if_start','c_module_body_directive',1,'p_c_module_body_directive','rules.py',267),
+  ('c_module_body_directive -> if_end','c_module_body_directive',1,'p_c_module_body_directive','rules.py',268),
+  ('c_module_body_directive -> docstring','c_module_body_directive',1,'p_c_module_body_directive','rules.py',269),
+  ('convert_from_type_code -> ConvertFromTypeCode CODE_BLOCK','convert_from_type_code',2,'p_convert_from_type_code','rules.py',277),
+  ('convert_to_subclass_code -> ConvertToSubClassCode CODE_BLOCK','convert_to_subclass_code',2,'p_convert_to_subclass_code','rules.py',294),
+  ('convert_to_type_code -> ConvertToTypeCode CODE_BLOCK','convert_to_type_code',2,'p_convert_to_type_code','rules.py',311),
+  ('copying -> Copying CODE_BLOCK','copying',2,'p_copying','rules.py',327),
+  ('defdocstringfmt -> DefaultDocstringFormat STRING','defdocstringfmt',2,'p_defdocstringfmt','rules.py',340),
+  ('defdocstringfmt -> DefaultDocstringFormat begin_args ( name = STRING end_args )','defdocstringfmt',8,'p_defdocstringfmt','rules.py',341),
+  ('defdocstringsig -> DefaultDocstringSignature STRING','defdocstringsig',2,'p_defdocstringsig','rules.py',356),
+  ('defdocstringsig -> DefaultDocstringSignature begin_args ( name = STRING end_args )','defdocstringsig',8,'p_defdocstringsig','rules.py',357),
+  ('defencoding -> DefaultEncoding STRING','defencoding',2,'p_defencoding','rules.py',372),
+  ('defencoding -> DefaultEncoding begin_args ( name = STRING end_args )','defencoding',8,'p_defencoding','rules.py',373),
+  ('defmetatype -> DefaultMetatype dotted_name','defmetatype',2,'p_defmetatype','rules.py',388),
+  ('defmetatype -> DefaultMetatype begin_args ( name = dotted_name end_args )','defmetatype',8,'p_defmetatype','rules.py',389),
+  ('defsupertype -> DefaultSupertype dotted_name','defsupertype',2,'p_defsupertype','rules.py',410),
+  ('defsupertype -> DefaultSupertype begin_args ( name = dotted_name end_args )','defsupertype',8,'p_defsupertype','rules.py',411),
+  ('docstring -> Docstring docstring_args CODE_BLOCK','docstring',3,'p_docstring','rules.py',432),
+  ('docstring_args -> empty','docstring_args',1,'p_docstring_args','rules.py',455),
+  ('docstring_args -> STRING','docstring_args',1,'p_docstring_args','rules.py',456),
+  ('docstring_args -> begin_args ( docstring_arg_list end_args )','docstring_args',5,'p_docstring_args','rules.py',457),
+  ('docstring_arg_list -> docstring_arg','docstring_arg_list',1,'p_docstring_arg_list','rules.py',473),
+  ('docstring_arg_list -> docstring_arg_list , docstring_arg','docstring_arg_list',3,'p_docstring_arg_list','rules.py',474),
+  ('docstring_arg -> format = STRING','docstring_arg',3,'p_docstring_arg','rules.py',483),
+  ('docstring_arg -> signature = STRING','docstring_arg',3,'p_docstring_arg','rules.py',484),
+  ('exported_header_code -> ExportedHeaderCode CODE_BLOCK','exported_header_code',2,'p_exported_header_code','rules.py',499),
+  ('exported_type_hint_code -> ExportedTypeHintCode CODE_BLOCK','exported_type_hint_code',2,'p_exported_type_hint_code','rules.py',512),
+  ('extract -> Extract NAME CODE_BLOCK','extract',3,'p_extract','rules.py',526),
+  ('extract -> Extract begin_args ( extract_args end_args ) CODE_BLOCK','extract',7,'p_extract','rules.py',527),
+  ('extract_args -> extract_arg','extract_args',1,'p_extract_args','rules.py',554),
+  ('extract_args -> extract_args , extract_arg','extract_args',3,'p_extract_args','rules.py',555),
+  ('extract_arg -> id = NAME','extract_arg',3,'p_extract_arg','rules.py',564),
+  ('extract_arg -> order = NUMBER','extract_arg',3,'p_extract_arg','rules.py',565),
+  ('feature -> Feature NAME','feature',2,'p_feature','rules.py',573),
+  ('feature -> Feature begin_args ( name = NAME end_args )','feature',8,'p_feature','rules.py',574),
+  ('finalisation_code -> FinalisationCode CODE_BLOCK','finalisation_code',2,'p_finalisation_code','rules.py',585),
+  ('gc_clear_code -> GCClearCode CODE_BLOCK','gc_clear_code',2,'p_gc_clear_code','rules.py',601),
+  ('gc_traverse_code -> GCTraverseCode CODE_BLOCK','gc_traverse_code',2,'p_gc_traverse_code','rules.py',617),
+  ('hidden_ns -> HideNamespace scoped_name','hidden_ns',2,'p_hidden_ns','rules.py',633),
+  ('hidden_ns -> HideNamespace begin_args ( hidden_ns_args end_args )','hidden_ns',6,'p_hidden_ns','rules.py',634),
+  ('hidden_ns_args -> hidden_ns_arg','hidden_ns_args',1,'p_hidden_ns_args','rules.py',657),
+  ('hidden_ns_args -> hidden_ns_args , hidden_ns_arg','hidden_ns_args',3,'p_hidden_ns_args','rules.py',658),
+  ('hidden_ns_arg -> name = scoped_name','hidden_ns_arg',3,'p_hidden_ns_arg','rules.py',667),
+  ('if_start -> If ( qualifiers )','if_start',4,'p_if_start','rules.py',675),
+  ('if_end -> End','if_end',1,'p_if_end','rules.py',688),
+  ('import -> Import need_eol import_simple EOL','import',4,'p_import','rules.py',701),
+  ('import -> Import begin_args ( import_compound end_args )','import',6,'p_import','rules.py',702),
+  ('import_simple -> file_path','import_simple',1,'p_import_simple','rules.py',706),
+  ('import_compound -> import_args','import_compound',1,'p_import_compound','rules.py',717),
+  ('import_args -> import_arg','import_args',1,'p_import_args','rules.py',733),
+  ('import_args -> import_args , import_arg','import_args',3,'p_import_args','rules.py',734),
+  ('import_arg -> name = file_path','import_arg',3,'p_import_arg','rules.py',743),
+  ('include -> Include need_eol include_simple EOL','include',4,'p_include','rules.py',751),
+  ('include -> Include begin_args ( include_compound end_args )','include',6,'p_include','rules.py',752),
+  ('include_simple -> file_path','include_simple',1,'p_include_simple','rules.py',756),
+  ('include_compound -> include_args','include_compound',1,'p_include_compund','rules.py',767),
+  ('include_args -> include_arg','include_args',1,'p_include_args','rules.py',783),
+  ('include_args -> include_args , include_arg','include_args',3,'p_include_args','rules.py',784),
+  ('include_arg -> name = file_path','include_arg',3,'p_include_arg','rules.py',793),
+  ('include_arg -> optional = bool_value','include_arg',3,'p_include_arg','rules.py',794),
+  ('init_code -> InitialisationCode CODE_BLOCK','init_code',2,'p_init_code','rules.py',802),
+  ('instance_code -> InstanceCode CODE_BLOCK','instance_code',2,'p_instance_code','rules.py',815),
+  ('license -> License STRING','license',2,'p_license','rules.py',831),
+  ('license -> License begin_args ( license_args end_args )','license',6,'p_license','rules.py',832),
+  ('license_args -> license_arg','license_args',1,'p_license_args','rules.py',863),
+  ('license_args -> license_args , license_arg','license_args',3,'p_license_args','rules.py',864),
+  ('license_arg -> licensee = STRING','license_arg',3,'p_license_arg','rules.py',873),
+  ('license_arg -> signature = STRING','license_arg',3,'p_license_arg','rules.py',874),
+  ('license_arg -> timestamp = STRING','license_arg',3,'p_license_arg','rules.py',875),
+  ('license_arg -> type = STRING','license_arg',3,'p_license_arg','rules.py',876),
+  ('mapped_type -> mapped_type_head { mapped_type_body } ;','mapped_type',5,'p_mapped_type','rules.py',897),
+  ('mapped_type_template -> mapped_type_template_head { mapped_type_body } ;','mapped_type_template',5,'p_mapped_type_template','rules.py',910),
+  ('mapped_type_head -> MappedType base_type opt_annos','mapped_type_head',3,'p_mapped_type_head','rules.py',923),
+  ('mapped_type_template_head -> template_decl MappedType base_type opt_annos','mapped_type_template_head',4,'p_mapped_type_template_head','rules.py',936),
+  ('mapped_type_body -> mapped_type_line','mapped_type_body',1,'p_mapped_type_body','rules.py',970),
+  ('mapped_type_body -> mapped_type_body mapped_type_line','mapped_type_body',2,'p_mapped_type_body','rules.py',971),
+  ('mapped_type_line -> if_start','mapped_type_line',1,'p_mapped_type_line','rules.py',975),
+  ('mapped_type_line -> if_end','mapped_type_line',1,'p_mapped_type_line','rules.py',976),
+  ('mapped_type_line -> convert_from_type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',977),
+  ('mapped_type_line -> convert_to_type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',978),
+  ('mapped_type_line -> enum_decl','mapped_type_line',1,'p_mapped_type_line','rules.py',979),
+  ('mapped_type_line -> instance_code','mapped_type_line',1,'p_mapped_type_line','rules.py',980),
+  ('mapped_type_line -> mapped_type_function','mapped_type_line',1,'p_mapped_type_line','rules.py',981),
+  ('mapped_type_line -> release_code','mapped_type_line',1,'p_mapped_type_line','rules.py',982),
+  ('mapped_type_line -> type_code','mapped_type_line',1,'p_mapped_type_line','rules.py',983),
+  ('mapped_type_line -> type_header_code','mapped_type_line',1,'p_mapped_type_line','rules.py',984),
+  ('mapped_type_function -> static cpp_type NAME ( opt_arg_list ) opt_const opt_exceptions opt_annos opt_signature ; opt_docstring premethod_code method_code','mapped_type_function',14,'p_mapped_type_function','rules.py',988),
+  ('module_header_code -> ModuleHeaderCode CODE_BLOCK','module_header_code',2,'p_module_header_code','rules.py',1010),
+  ('module -> Module dotted_name module_body','module',3,'p_module','rules.py',1023),
+  ('module -> Module begin_args ( module_args end_args ) module_body','module',7,'p_module','rules.py',1024),
+  ('module_args -> module_arg','module_args',1,'p_module_args','rules.py',1102),
+  ('module_args -> module_args , module_arg','module_args',3,'p_module_args','rules.py',1103),
+  ('module_arg -> all_raise_py_exception = bool_value','module_arg',3,'p_module_arg','rules.py',1112),
+  ('module_arg -> call_super_init = bool_value','module_arg',3,'p_module_arg','rules.py',1113),
+  ('module_arg -> default_VirtualErrorHandler = NAME','module_arg',3,'p_module_arg','rules.py',1114),
+  ('module_arg -> keyword_arguments = STRING','module_arg',3,'p_module_arg','rules.py',1115),
+  ('module_arg -> language = STRING','module_arg',3,'p_module_arg','rules.py',1116),
+  ('module_arg -> name = dotted_name','module_arg',3,'p_module_arg','rules.py',1117),
+  ('module_arg -> py_ssize_t_clean = bool_value','module_arg',3,'p_module_arg','rules.py',1118),
+  ('module_arg -> use_argument_names = bool_value','module_arg',3,'p_module_arg','rules.py',1119),
+  ('module_arg -> use_limited_api = bool_value','module_arg',3,'p_module_arg','rules.py',1120),
+  ('module_body -> { module_body_directives } ;','module_body',4,'p_module_body','rules.py',1141),
+  ('module_body -> empty','module_body',1,'p_module_body','rules.py',1142),
+  ('module_body_directives -> module_body_directive','module_body_directives',1,'p_module_body_directives','rules.py',1148),
+  ('module_body_directives -> module_body_directives module_body_directive','module_body_directives',2,'p_module_body_directives','rules.py',1149),
+  ('module_body_directive -> if_start','module_body_directive',1,'p_module_body_directive','rules.py',1161),
+  ('module_body_directive -> if_end','module_body_directive',1,'p_module_body_directive','rules.py',1162),
+  ('module_body_directive -> autopyname','module_body_directive',1,'p_module_body_directive','rules.py',1163),
+  ('module_body_directive -> docstring','module_body_directive',1,'p_module_body_directive','rules.py',1164),
+  ('module_code -> ModuleCode CODE_BLOCK','module_code',2,'p_module_code','rules.py',1172),
+  ('pickle_code -> PickleCode CODE_BLOCK','pickle_code',2,'p_pickle_code','rules.py',1185),
+  ('platforms -> Platforms { qualifier_list }','platforms',4,'p_platforms','rules.py',1201),
+  ('plugin -> Plugin NAME','plugin',2,'p_plugin','rules.py',1225),
+  ('postinit_code -> PostInitialisationCode CODE_BLOCK','postinit_code',2,'p_postinit_code','rules.py',1238),
+  ('preinit_code -> PreInitialisationCode CODE_BLOCK','preinit_code',2,'p_preinit_code','rules.py',1251),
+  ('property -> Property begin_args ( property_args end_args ) opt_property_body','property',7,'p_property','rules.py',1264),
+  ('property_args -> property_arg','property_args',1,'p_property_args','rules.py',1299),
+  ('property_args -> property_args , property_arg','property_args',3,'p_property_args','rules.py',1300),
+  ('property_arg -> get = NAME','property_arg',3,'p_property_arg','rules.py',1309),
+  ('property_arg -> name = NAME','property_arg',3,'p_property_arg','rules.py',1310),
+  ('property_arg -> set = NAME','property_arg',3,'p_property_arg','rules.py',1311),
+  ('opt_property_body -> empty','opt_property_body',1,'p_opt_property_body','rules.py',1317),
+  ('opt_property_body -> { property_body } ;','opt_property_body',4,'p_opt_property_body','rules.py',1318),
+  ('property_body -> property_line','property_body',1,'p_property_body','rules.py',1324),
+  ('property_body -> property_body property_line','property_body',2,'p_property_body','rules.py',1325),
+  ('property_line -> if_start','property_line',1,'p_property_line','rules.py',1341),
+  ('property_line -> if_end','property_line',1,'p_property_line','rules.py',1342),
+  ('property_line -> docstring','property_line',1,'p_property_line','rules.py',1343),
+  ('release_code -> ReleaseCode CODE_BLOCK','release_code',2,'p_release_code','rules.py',1351),
+  ('timeline -> Timeline { qualifier_list }','timeline',4,'p_timeline','rules.py',1367),
+  ('type_code -> TypeCode CODE_BLOCK','type_code',2,'p_type_code','rules.py',1397),
+  ('type_header_code -> TypeHeaderCode CODE_BLOCK','type_header_code',2,'p_type_header_code','rules.py',1410),
+  ('type_hint_code -> TypeHintCode CODE_BLOCK','type_hint_code',2,'p_type_hint_code','rules.py',1423),
+  ('unit_code -> UnitCode CODE_BLOCK','unit_code',2,'p_unit_code','rules.py',1446),
+  ('unit_postinclude_code -> UnitPostIncludeCode CODE_BLOCK','unit_postinclude_code',2,'p_unit_postinclude_code','rules.py',1459),
+  ('virtual_error_handler -> VirtualErrorHandler NAME CODE_BLOCK','virtual_error_handler',3,'p_virtual_error_handler','rules.py',1472),
+  ('virtual_error_handler -> VirtualErrorHandler begin_args ( veh_args end_args ) CODE_BLOCK','virtual_error_handler',7,'p_virtual_error_handler','rules.py',1473),
+  ('veh_args -> veh_arg','veh_args',1,'p_veh_args','rules.py',1505),
+  ('veh_args -> veh_args , veh_arg','veh_args',3,'p_veh_args','rules.py',1506),
+  ('veh_arg -> name = NAME','veh_arg',3,'p_veh_arg','rules.py',1515),
+  ('cpp_type -> const base_type derefs opt_ref','cpp_type',4,'p_cpp_type','rules.py',1523),
+  ('cpp_type -> base_type derefs opt_ref','cpp_type',3,'p_cpp_type','rules.py',1524),
+  ('base_type -> pod_type','base_type',1,'p_base_type','rules.py',1546),
+  ('base_type -> scoped_name','base_type',1,'p_base_type','rules.py',1547),
+  ('base_type -> scoped_name < cpp_types >','base_type',4,'p_base_type','rules.py',1548),
+  ('base_type -> struct scoped_name','base_type',2,'p_base_type','rules.py',1549),
+  ('base_type -> union scoped_name','base_type',2,'p_base_type','rules.py',1550),
+  ('pod_type -> unsigned long long','pod_type',3,'p_pod_type','rules.py',1625),
+  ('pod_type -> signed char','pod_type',2,'p_pod_type','rules.py',1626),
+  ('pod_type -> long long','pod_type',2,'p_pod_type','rules.py',1627),
+  ('pod_type -> unsigned char','pod_type',2,'p_pod_type','rules.py',1628),
+  ('pod_type -> unsigned short','pod_type',2,'p_pod_type','rules.py',1629),
+  ('pod_type -> unsigned int','pod_type',2,'p_pod_type','rules.py',1630),
+  ('pod_type -> unsigned long','pod_type',2,'p_pod_type','rules.py',1631),
+  ('pod_type -> unsigned','pod_type',1,'p_pod_type','rules.py',1632),
+  ('pod_type -> short','pod_type',1,'p_pod_type','rules.py',1633),
+  ('pod_type -> int','pod_type',1,'p_pod_type','rules.py',1634),
+  ('pod_type -> long','pod_type',1,'p_pod_type','rules.py',1635),
+  ('pod_type -> float','pod_type',1,'p_pod_type','rules.py',1636),
+  ('pod_type -> double','pod_type',1,'p_pod_type','rules.py',1637),
+  ('pod_type -> bool','pod_type',1,'p_pod_type','rules.py',1638),
+  ('pod_type -> char','pod_type',1,'p_pod_type','rules.py',1639),
+  ('pod_type -> wchar_t','pod_type',1,'p_pod_type','rules.py',1640),
+  ('pod_type -> void','pod_type',1,'p_pod_type','rules.py',1641),
+  ('pod_type -> SIP_PYOBJECT','pod_type',1,'p_pod_type','rules.py',1642),
+  ('pod_type -> SIP_PYTUPLE','pod_type',1,'p_pod_type','rules.py',1643),
+  ('pod_type -> SIP_PYLIST','pod_type',1,'p_pod_type','rules.py',1644),
+  ('pod_type -> SIP_PYDICT','pod_type',1,'p_pod_type','rules.py',1645),
+  ('pod_type -> SIP_PYCALLABLE','pod_type',1,'p_pod_type','rules.py',1646),
+  ('pod_type -> SIP_PYSLICE','pod_type',1,'p_pod_type','rules.py',1647),
+  ('pod_type -> SIP_PYTYPE','pod_type',1,'p_pod_type','rules.py',1648),
+  ('pod_type -> SIP_PYBUFFER','pod_type',1,'p_pod_type','rules.py',1649),
+  ('pod_type -> SIP_PYENUM','pod_type',1,'p_pod_type','rules.py',1650),
+  ('pod_type -> SIP_SSIZE_T','pod_type',1,'p_pod_type','rules.py',1651),
+  ('pod_type -> Py_hash_t','pod_type',1,'p_pod_type','rules.py',1652),
+  ('pod_type -> Py_ssize_t','pod_type',1,'p_pod_type','rules.py',1653),
+  ('pod_type -> size_t','pod_type',1,'p_pod_type','rules.py',1654),
+  ('pod_type -> ELLIPSIS','pod_type',1,'p_pod_type','rules.py',1655),
+  ('cpp_types -> cpp_type','cpp_types',1,'p_cpp_types','rules.py',1671),
+  ('cpp_types -> cpp_types , cpp_type','cpp_types',3,'p_cpp_types','rules.py',1672),
+  ('derefs -> empty','derefs',1,'p_derefs','rules.py',1686),
+  ('derefs -> derefs *','derefs',2,'p_derefs','rules.py',1687),
+  ('derefs -> derefs * const','derefs',3,'p_derefs','rules.py',1688),
+  ('opt_ref -> &','opt_ref',1,'p_opt_ref','rules.py',1698),
+  ('opt_ref -> empty','opt_ref',1,'p_opt_ref','rules.py',1699),
+  ('class_template -> template_decl class_decl','class_template',2,'p_class_template','rules.py',1739),
+  ('class_docstring -> docstring','class_docstring',1,'p_class_docstring','rules.py',1752),
+  ('class_decl -> class class_head opt_class_body ;','class_decl',4,'p_class_decl','rules.py',1767),
+  ('class_head -> scoped_name superclasses opt_annos','class_head',3,'p_class_head','rules.py',1779),
+  ('struct_decl -> struct struct_head opt_class_body ;','struct_decl',4,'p_struct_decl','rules.py',1798),
+  ('struct_head -> scoped_name superclasses opt_annos','struct_head',3,'p_struct_head','rules.py',1809),
+  ('superclasses -> : superclass_list','superclasses',2,'p_superclasses','rules.py',1825),
+  ('superclasses -> empty','superclasses',1,'p_superclasses','rules.py',1826),
+  ('superclass_list -> superclass','superclass_list',1,'p_superclass_list','rules.py',1832),
+  ('superclass_list -> superclass_list , superclass','superclass_list',3,'p_superclass_list','rules.py',1833),
+  ('superclass -> class_access scoped_name','superclass',2,'p_superclass','rules.py',1849),
+  ('class_access -> empty','class_access',1,'p_class_access','rules.py',1877),
+  ('class_access -> public','class_access',1,'p_class_access','rules.py',1878),
+  ('class_access -> protected','class_access',1,'p_class_access','rules.py',1879),
+  ('class_access -> private','class_access',1,'p_class_access','rules.py',1880),
+  ('opt_class_body -> { class_body }','opt_class_body',3,'p_opt_class_body','rules.py',1889),
+  ('opt_class_body -> empty','opt_class_body',1,'p_opt_class_body','rules.py',1890),
+  ('class_body -> class_line','class_body',1,'p_class_body','rules.py',1901),
+  ('class_body -> class_body class_line','class_body',2,'p_class_body','rules.py',1902),
+  ('class_line -> if_start','class_line',1,'p_class_line','rules.py',1906),
+  ('class_line -> if_end','class_line',1,'p_class_line','rules.py',1907),
+  ('class_line -> class_decl','class_line',1,'p_class_line','rules.py',1908),
+  ('class_line -> class_docstring','class_line',1,'p_class_line','rules.py',1909),
+  ('class_line -> class_template','class_line',1,'p_class_line','rules.py',1910),
+  ('class_line -> ctor','class_line',1,'p_class_line','rules.py',1911),
+  ('class_line -> dtor','class_line',1,'p_class_line','rules.py',1912),
+  ('class_line -> enum_decl','class_line',1,'p_class_line','rules.py',1913),
+  ('class_line -> exception','class_line',1,'p_class_line','rules.py',1914),
+  ('class_line -> typedef_decl','class_line',1,'p_class_line','rules.py',1915),
+  ('class_line -> method_variable','class_line',1,'p_class_line','rules.py',1916),
+  ('class_line -> namespace_decl','class_line',1,'p_class_line','rules.py',1917),
+  ('class_line -> struct_decl','class_line',1,'p_class_line','rules.py',1918),
+  ('class_line -> union_decl','class_line',1,'p_class_line','rules.py',1919),
+  ('class_line -> public_specifier','class_line',1,'p_class_line','rules.py',1920),
+  ('class_line -> protected_specifier','class_line',1,'p_class_line','rules.py',1921),
+  ('class_line -> private_specifier','class_line',1,'p_class_line','rules.py',1922),
+  ('class_line -> signals_specifier','class_line',1,'p_class_line','rules.py',1923),
+  ('class_line -> convert_from_type_code','class_line',1,'p_class_line','rules.py',1924),
+  ('class_line -> convert_to_subclass_code','class_line',1,'p_class_line','rules.py',1925),
+  ('class_line -> convert_to_type_code','class_line',1,'p_class_line','rules.py',1926),
+  ('class_line -> finalisation_code','class_line',1,'p_class_line','rules.py',1927),
+  ('class_line -> gc_clear_code','class_line',1,'p_class_line','rules.py',1928),
+  ('class_line -> gc_traverse_code','class_line',1,'p_class_line','rules.py',1929),
+  ('class_line -> get_buffer_code','class_line',1,'p_class_line','rules.py',1930),
+  ('class_line -> instance_code','class_line',1,'p_class_line','rules.py',1931),
+  ('class_line -> pickle_code','class_line',1,'p_class_line','rules.py',1932),
+  ('class_line -> property','class_line',1,'p_class_line','rules.py',1933),
+  ('class_line -> release_buffer_code','class_line',1,'p_class_line','rules.py',1934),
+  ('class_line -> type_code','class_line',1,'p_class_line','rules.py',1935),
+  ('class_line -> type_header_code','class_line',1,'p_class_line','rules.py',1936),
+  ('class_line -> type_hint_code','class_line',1,'p_class_line','rules.py',1937),
+  ('class_line -> BIGetReadBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1938),
+  ('class_line -> BIGetWriteBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1939),
+  ('class_line -> BIGetSegCountCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1940),
+  ('class_line -> BIGetCharBufferCode CODE_BLOCK','class_line',2,'p_class_line','rules.py',1941),
+  ('ctor -> explicit ctor_decl','ctor',2,'p_ctor','rules.py',1962),
+  ('ctor -> ctor_decl','ctor',1,'p_ctor','rules.py',1963),
+  ('ctor_decl -> NAME ( opt_arg_list ) opt_exceptions opt_annos opt_ctor_signature ; opt_docstring premethod_code method_code','ctor_decl',11,'p_ctor_decl','rules.py',1975),
+  ('opt_ctor_signature -> [ ( opt_arg_list ) ]','opt_ctor_signature',5,'p_opt_ctor_signature','rules.py',1989),
+  ('opt_ctor_signature -> empty','opt_ctor_signature',1,'p_opt_ctor_signature','rules.py',1990),
+  ('dtor -> opt_virtual ~ NAME ( ) opt_exceptions opt_abstract opt_annos ; premethod_code method_code virtual_catcher_code','dtor',12,'p_dtor','rules.py',2006),
+  ('method_variable -> Q_SIGNAL simple_method_variable','method_variable',2,'p_method_variable','rules.py',2023),
+  ('method_variable -> Q_SLOT simple_method_variable','method_variable',2,'p_method_variable','rules.py',2024),
+  ('method_variable -> simple_method_variable','method_variable',1,'p_method_variable','rules.py',2025),
+  ('simple_method_variable -> virtual function','simple_method_variable',2,'p_simple_method_variable','rules.py',2045),
+  ('simple_method_variable -> static plain_method_variable','simple_method_variable',2,'p_simple_method_variable','rules.py',2046),
+  ('simple_method_variable -> plain_method_variable','simple_method_variable',1,'p_simple_method_variable','rules.py',2047),
+  ('plain_method_variable -> function','plain_method_variable',1,'p_plain_method_variable','rules.py',2065),
+  ('plain_method_variable -> variable','plain_method_variable',1,'p_plain_method_variable','rules.py',2066),
+  ('public_specifier -> public opt_slots :','public_specifier',3,'p_public_specifier','rules.py',2072),
+  ('protected_specifier -> protected opt_slots :','protected_specifier',3,'p_protected_specifier','rules.py',2084),
+  ('private_specifier -> private opt_slots :','private_specifier',3,'p_private_specifier','rules.py',2096),
+  ('signals_specifier -> signals :','signals_specifier',2,'p_signals_specifier','rules.py',2108),
+  ('signals_specifier -> Q_SIGNALS :','signals_specifier',2,'p_signals_specifier','rules.py',2109),
+  ('opt_slots -> slots','opt_slots',1,'p_opt_slots','rules.py',2121),
+  ('opt_slots -> Q_SLOTS','opt_slots',1,'p_opt_slots','rules.py',2122),
+  ('opt_slots -> empty','opt_slots',1,'p_opt_slots','rules.py',2123),
+  ('enum_decl -> enum opt_enum_key opt_name opt_annos { opt_enum_body } ;','enum_decl',8,'p_enum_decl','rules.py',2146),
+  ('opt_enum_key -> class','opt_enum_key',1,'p_opt_enum_key','rules.py',2159),
+  ('opt_enum_key -> struct','opt_enum_key',1,'p_opt_enum_key','rules.py',2160),
+  ('opt_enum_key -> union','opt_enum_key',1,'p_opt_enum_key','rules.py',2161),
+  ('opt_enum_key -> empty','opt_enum_key',1,'p_opt_enum_key','rules.py',2162),
+  ('opt_enum_body -> enum_body','opt_enum_body',1,'p_opt_enum_body','rules.py',2169),
+  ('opt_enum_body -> empty','opt_enum_body',1,'p_opt_enum_body','rules.py',2170),
+  ('enum_body -> enum_line','enum_body',1,'p_enum_body','rules.py',2176),
+  ('enum_body -> enum_body enum_line','enum_body',2,'p_enum_body','rules.py',2177),
+  ('enum_line -> if_start','enum_line',1,'p_enum_line','rules.py',2191),
+  ('enum_line -> if_end','enum_line',1,'p_enum_line','rules.py',2192),
+  ('enum_line -> NAME opt_enum_assign opt_annos opt_comma','enum_line',4,'p_enum_line','rules.py',2193),
+  ('opt_enum_assign -> = value','opt_enum_assign',2,'p_opt_enum_assign','rules.py',2211),
+  ('opt_enum_assign -> empty','opt_enum_assign',1,'p_opt_enum_assign','rules.py',2212),
+  ('opt_comma -> empty','opt_comma',1,'p_opt_comma','rules.py',2216),
+  ('opt_comma -> ,','opt_comma',1,'p_opt_comma','rules.py',2217),
+  ('exception -> Exception scoped_name opt_base_exception opt_annos { exception_body } ;','exception',8,'p_exception','rules.py',2230),
+  ('opt_base_exception -> ( scoped_name )','opt_base_exception',3,'p_opt_base_exception','rules.py',2278),
+  ('opt_base_exception -> empty','opt_base_exception',1,'p_opt_base_exception','rules.py',2279),
+  ('exception_body -> exception_line','exception_body',1,'p_exception_body','rules.py',2306),
+  ('exception_body -> exception_body exception_line','exception_body',2,'p_exception_body','rules.py',2307),
+  ('exception_line -> if_start','exception_line',1,'p_exception_line','rules.py',2316),
+  ('exception_line -> if_end','exception_line',1,'p_exception_line','rules.py',2317),
+  ('exception_line -> RaiseCode CODE_BLOCK','exception_line',2,'p_exception_line','rules.py',2318),
+  ('exception_line -> TypeHeaderCode CODE_BLOCK','exception_line',2,'p_exception_line','rules.py',2319),
+  ('function -> function_decl','function',1,'p_function','rules.py',2365),
+  ('function -> assignment_operator_decl','function',1,'p_function','rules.py',2366),
+  ('function -> operator_decl','function',1,'p_function','rules.py',2367),
+  ('function -> operator_cast_decl','function',1,'p_function','rules.py',2368),
+  ('function_decl -> cpp_type NAME ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; opt_docstring premethod_code method_code virtual_catcher_code virtual_call_code','function_decl',17,'p_function_decl','rules.py',2374),
+  ('assignment_operator_decl -> cpp_type operator = ( cpp_type ) ;','assignment_operator_decl',7,'p_assignment_operator_decl','rules.py',2391),
+  ('operator_decl -> cpp_type operator operator_name ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; premethod_code method_code virtual_catcher_code virtual_call_code','operator_decl',17,'p_operator_decl','rules.py',2406),
+  ('operator_cast_decl -> operator cpp_type ( opt_arg_list ) opt_const opt_final opt_exceptions opt_abstract opt_annos opt_signature ; premethod_code method_code virtual_catcher_code virtual_call_code','operator_cast_decl',16,'p_operator_cast_decl','rules.py',2458),
+  ('opt_arg_list -> arg_list','opt_arg_list',1,'p_opt_arg_list','rules.py',2503),
+  ('opt_arg_list -> empty','opt_arg_list',1,'p_opt_arg_list','rules.py',2504),
+  ('arg_list -> arg_value','arg_list',1,'p_arg_list','rules.py',2522),
+  ('arg_list -> arg_list , arg_value','arg_list',3,'p_arg_list','rules.py',2523),
+  ('arg_value -> arg_type opt_assign','arg_value',2,'p_arg_value','rules.py',2535),
+  ('arg_type -> cpp_type opt_name opt_annos','arg_type',3,'p_arg_type','rules.py',2568),
+  ('opt_assign -> = expr','opt_assign',2,'p_opt_assign','rules.py',2627),
+  ('opt_assign -> empty','opt_assign',1,'p_opt_assign','rules.py',2628),
+  ('expr -> value','expr',1,'p_expr','rules.py',2634),
+  ('expr -> expr binop value','expr',3,'p_expr','rules.py',2635),
+  ('value -> opt_cast opt_unop simple_value','value',3,'p_value','rules.py',2648),
+  ('simple_value -> empty_value','simple_value',1,'p_simple_value','rules.py',2658),
+  ('simple_value -> function_call_value','simple_value',1,'p_simple_value','rules.py',2659),
+  ('simple_value -> null_value','simple_value',1,'p_simple_value','rules.py',2660),
+  ('simple_value -> number_value','simple_value',1,'p_simple_value','rules.py',2661),
+  ('simple_value -> quoted_char_value','simple_value',1,'p_simple_value','rules.py',2662),
+  ('simple_value -> real_value','simple_value',1,'p_simple_value','rules.py',2663),
+  ('simple_value -> scoped_name_value','simple_value',1,'p_simple_value','rules.py',2664),
+  ('simple_value -> string_value','simple_value',1,'p_simple_value','rules.py',2665),
+  ('empty_value -> { }','empty_value',2,'p_empty_value','rules.py',2671),
+  ('function_call_value -> base_type ( opt_expr_list )','function_call_value',4,'p_function_call_value','rules.py',2677),
+  ('null_value -> NULL','null_value',1,'p_null_value','rules.py',2683),
+  ('number_value -> NUMBER','number_value',1,'p_number_value','rules.py',2689),
+  ('number_value -> bool_value','number_value',1,'p_number_value','rules.py',2690),
+  ('quoted_char_value -> QUOTED_CHAR','quoted_char_value',1,'p_quoted_char_value','rules.py',2696),
+  ('real_value -> REAL','real_value',1,'p_real_value','rules.py',2702),
+  ('scoped_name_value -> scoped_name','scoped_name_value',1,'p_scoped_name_value','rules.py',2708),
+  ('string_value -> STRING','string_value',1,'p_string_value','rules.py',2714),
+  ('opt_expr_list -> expr_list','opt_expr_list',1,'p_opt_expr_list','rules.py',2720),
+  ('opt_expr_list -> empty','opt_expr_list',1,'p_opt_expr_list','rules.py',2721),
+  ('expr_list -> expr','expr_list',1,'p_expr_list','rules.py',2727),
+  ('expr_list -> expr_list , expr','expr_list',3,'p_expr_list','rules.py',2728),
+  ('opt_cast -> ( scoped_name )','opt_cast',3,'p_opt_cast','rules.py',2740),
+  ('opt_cast -> empty','opt_cast',1,'p_opt_cast','rules.py',2741),
+  ('binop -> -','binop',1,'p_binop','rules.py',2747),
+  ('binop -> +','binop',1,'p_binop','rules.py',2748),
+  ('binop -> *','binop',1,'p_binop','rules.py',2749),
+  ('binop -> /','binop',1,'p_binop','rules.py',2750),
+  ('binop -> &','binop',1,'p_binop','rules.py',2751),
+  ('binop -> |','binop',1,'p_binop','rules.py',2752),
+  ('opt_unop -> empty','opt_unop',1,'p_opt_unop','rules.py',2758),
+  ('opt_unop -> !','opt_unop',1,'p_opt_unop','rules.py',2759),
+  ('opt_unop -> ~','opt_unop',1,'p_opt_unop','rules.py',2760),
+  ('opt_unop -> -','opt_unop',1,'p_opt_unop','rules.py',2761),
+  ('opt_unop -> +','opt_unop',1,'p_opt_unop','rules.py',2762),
+  ('opt_unop -> *','opt_unop',1,'p_opt_unop','rules.py',2763),
+  ('opt_unop -> &','opt_unop',1,'p_opt_unop','rules.py',2764),
+  ('opt_exceptions -> empty','opt_exceptions',1,'p_opt_exceptions','rules.py',2770),
+  ('opt_exceptions -> noexcept','opt_exceptions',1,'p_opt_exceptions','rules.py',2771),
+  ('opt_exceptions -> throw ( opt_exception_list )','opt_exceptions',4,'p_opt_exceptions','rules.py',2772),
+  ('opt_exception_list -> exception_list','opt_exception_list',1,'p_opt_exception_list','rules.py',2783),
+  ('opt_exception_list -> empty','opt_exception_list',1,'p_opt_exception_list','rules.py',2784),
+  ('exception_list -> scoped_name','exception_list',1,'p_exception_list','rules.py',2790),
+  ('exception_list -> exception_list , scoped_name','exception_list',3,'p_exception_list','rules.py',2791),
+  ('opt_abstract -> = NUMBER','opt_abstract',2,'p_opt_abstract','rules.py',2805),
+  ('opt_abstract -> empty','opt_abstract',1,'p_opt_abstract','rules.py',2806),
+  ('opt_signature -> [ cpp_type ( opt_arg_list ) ]','opt_signature',6,'p_opt_signature','rules.py',2818),
+  ('opt_signature -> empty','opt_signature',1,'p_opt_signature','rules.py',2819),
+  ('operator_name -> +','operator_name',1,'p_operator_name','rules.py',2861),
+  ('operator_name -> -','operator_name',1,'p_operator_name','rules.py',2862),
+  ('operator_name -> *','operator_name',1,'p_operator_name','rules.py',2863),
+  ('operator_name -> /','operator_name',1,'p_operator_name','rules.py',2864),
+  ('operator_name -> %','operator_name',1,'p_operator_name','rules.py',2865),
+  ('operator_name -> &','operator_name',1,'p_operator_name','rules.py',2866),
+  ('operator_name -> |','operator_name',1,'p_operator_name','rules.py',2867),
+  ('operator_name -> ^','operator_name',1,'p_operator_name','rules.py',2868),
+  ('operator_name -> < <','operator_name',2,'p_operator_name','rules.py',2869),
+  ('operator_name -> > >','operator_name',2,'p_operator_name','rules.py',2870),
+  ('operator_name -> + =','operator_name',2,'p_operator_name','rules.py',2871),
+  ('operator_name -> - =','operator_name',2,'p_operator_name','rules.py',2872),
+  ('operator_name -> * =','operator_name',2,'p_operator_name','rules.py',2873),
+  ('operator_name -> / =','operator_name',2,'p_operator_name','rules.py',2874),
+  ('operator_name -> % =','operator_name',2,'p_operator_name','rules.py',2875),
+  ('operator_name -> & =','operator_name',2,'p_operator_name','rules.py',2876),
+  ('operator_name -> | =','operator_name',2,'p_operator_name','rules.py',2877),
+  ('operator_name -> ^ =','operator_name',2,'p_operator_name','rules.py',2878),
+  ('operator_name -> < < =','operator_name',3,'p_operator_name','rules.py',2879),
+  ('operator_name -> > > =','operator_name',3,'p_operator_name','rules.py',2880),
+  ('operator_name -> ~','operator_name',1,'p_operator_name','rules.py',2881),
+  ('operator_name -> ( )','operator_name',2,'p_operator_name','rules.py',2882),
+  ('operator_name -> [ ]','operator_name',2,'p_operator_name','rules.py',2883),
+  ('operator_name -> <','operator_name',1,'p_operator_name','rules.py',2884),
+  ('operator_name -> < =','operator_name',2,'p_operator_name','rules.py',2885),
+  ('operator_name -> = =','operator_name',2,'p_operator_name','rules.py',2886),
+  ('operator_name -> ! =','operator_name',2,'p_operator_name','rules.py',2887),
+  ('operator_name -> >','operator_name',1,'p_operator_name','rules.py',2888),
+  ('operator_name -> > =','operator_name',2,'p_operator_name','rules.py',2889),
+  ('method_code -> MethodCode CODE_BLOCK','method_code',2,'p_method_code','rules.py',2895),
+  ('method_code -> empty','method_code',1,'p_method_code','rules.py',2896),
+  ('premethod_code -> PreMethodCode CODE_BLOCK','premethod_code',2,'p_premethod_code','rules.py',2902),
+  ('premethod_code -> empty','premethod_code',1,'p_premethod_code','rules.py',2903),
+  ('virtual_call_code -> VirtualCallCode CODE_BLOCK','virtual_call_code',2,'p_virtual_call_code','rules.py',2909),
+  ('virtual_call_code -> empty','virtual_call_code',1,'p_virtual_call_code','rules.py',2910),
+  ('virtual_catcher_code -> VirtualCatcherCode CODE_BLOCK','virtual_catcher_code',2,'p_virtual_catcher_code','rules.py',2916),
+  ('virtual_catcher_code -> empty','virtual_catcher_code',1,'p_virtual_catcher_code','rules.py',2917),
+  ('namespace_decl -> namespace namespace_head opt_namespace_body ;','namespace_decl',4,'p_namespace_decl','rules.py',2931),
+  ('namespace_head -> scoped_name opt_annos','namespace_head',2,'p_namespace_head','rules.py',2946),
+  ('opt_namespace_body -> { namespace_body }','opt_namespace_body',3,'p_opt_namespace_body','rules.py',2964),
+  ('opt_namespace_body -> empty','opt_namespace_body',1,'p_opt_namespace_body','rules.py',2965),
+  ('namespace_body -> namespace_statement','namespace_body',1,'p_namespace_body','rules.py',2969),
+  ('namespace_body -> namespace_body namespace_statement','namespace_body',2,'p_namespace_body','rules.py',2970),
+  ('typedef_decl -> typedef cpp_type NAME opt_annos ; opt_docstring','typedef_decl',6,'p_typedef_decl','rules.py',2989),
+  ('typedef_decl -> typedef cpp_type ( * NAME ) ( cpp_types ) opt_annos ; opt_docstring','typedef_decl',12,'p_typedef_decl','rules.py',2990),
+  ('union_decl -> union union_head opt_class_body ;','union_decl',4,'p_union_decl','rules.py',3069),
+  ('union_head -> scoped_name opt_annos','union_head',2,'p_union_head','rules.py',3080),
+  ('variable -> cpp_type NAME opt_annos variable_body ;','variable',5,'p_variable','rules.py',3110),
+  ('variable_body -> { variable_body_directives }','variable_body',3,'p_variable_body','rules.py',3152),
+  ('variable_body -> empty','variable_body',1,'p_variable_body','rules.py',3153),
+  ('variable_body_directives -> variable_body_directive','variable_body_directives',1,'p_variable_body_directives','rules.py',3159),
+  ('variable_body_directives -> variable_body_directives variable_body_directive','variable_body_directives',2,'p_variable_body_directives','rules.py',3160),
+  ('variable_body_directive -> if_start','variable_body_directive',1,'p_variable_body_directive','rules.py',3169),
+  ('variable_body_directive -> if_end','variable_body_directive',1,'p_variable_body_directive','rules.py',3170),
+  ('variable_body_directive -> AccessCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3171),
+  ('variable_body_directive -> GetCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3172),
+  ('variable_body_directive -> SetCode CODE_BLOCK','variable_body_directive',2,'p_variable_body_directive','rules.py',3173),
+  ('opt_annos -> / annotations /','opt_annos',3,'p_opt_annos','rules.py',3181),
+  ('opt_annos -> empty','opt_annos',1,'p_opt_annos','rules.py',3182),
+  ('annotations -> annotation','annotations',1,'p_annotations','rules.py',3188),
+  ('annotations -> annotations , annotation','annotations',3,'p_annotations','rules.py',3189),
+  ('annotation -> NAME','annotation',1,'p_annotation','rules.py',3198),
+  ('annotation -> NAME = annotation_value','annotation',3,'p_annotation','rules.py',3199),
+  ('annotation_value -> dotted_name','annotation_value',1,'p_annotation_value','rules.py',3208),
+  ('annotation_value -> STRING','annotation_value',1,'p_annotation_value','rules.py',3209),
+  ('annotation_value -> NUMBER','annotation_value',1,'p_annotation_value','rules.py',3210),
+  ('scoped_name -> SCOPE relative_scoped_name','scoped_name',2,'p_scoped_name','rules.py',3226),
+  ('scoped_name -> relative_scoped_name','scoped_name',1,'p_scoped_name','rules.py',3227),
+  ('relative_scoped_name -> NAME','relative_scoped_name',1,'p_relative_scoped_name','rules.py',3238),
+  ('relative_scoped_name -> relative_scoped_name SCOPE NAME','relative_scoped_name',3,'p_relative_scoped_name','rules.py',3239),
+  ('template_decl -> template < cpp_types >','template_decl',4,'p_template_decl','rules.py',3252),
+  ('bool_value -> true','bool_value',1,'p_bool_value','rules.py',3263),
+  ('bool_value -> True','bool_value',1,'p_bool_value','rules.py',3264),
+  ('bool_value -> false','bool_value',1,'p_bool_value','rules.py',3265),
+  ('bool_value -> False','bool_value',1,'p_bool_value','rules.py',3266),
+  ('dotted_name -> NAME','dotted_name',1,'p_dotted_name','rules.py',3272),
+  ('dotted_name -> DOTTED_NAME','dotted_name',1,'p_dotted_name','rules.py',3273),
+  ('file_path -> NAME','file_path',1,'p_file_path','rules.py',3279),
+  ('file_path -> DOTTED_NAME','file_path',1,'p_file_path','rules.py',3280),
+  ('file_path -> FILE_PATH','file_path',1,'p_file_path','rules.py',3281),
+  ('empty -> <empty>','empty',0,'p_empty','rules.py',3287),
+  ('opt_const -> const','opt_const',1,'p_opt_const','rules.py',3293),
+  ('opt_const -> empty','opt_const',1,'p_opt_const','rules.py',3294),
+  ('opt_docstring -> docstring','opt_docstring',1,'p_opt_docstring','rules.py',3300),
+  ('opt_docstring -> empty','opt_docstring',1,'p_opt_docstring','rules.py',3301),
+  ('opt_final -> final','opt_final',1,'p_opt_final','rules.py',3307),
+  ('opt_final -> empty','opt_final',1,'p_opt_final','rules.py',3308),
+  ('opt_name -> NAME','opt_name',1,'p_opt_name','rules.py',3314),
+  ('opt_name -> empty','opt_name',1,'p_opt_name','rules.py',3315),
+  ('opt_virtual -> virtual','opt_virtual',1,'p_opt_virtual','rules.py',3321),
+  ('opt_virtual -> empty','opt_virtual',1,'p_opt_virtual','rules.py',3322),
+  ('ored_qualifiers -> NAME','ored_qualifiers',1,'p_ored_qualifiers','rules.py',3334),
+  ('ored_qualifiers -> ! NAME','ored_qualifiers',2,'p_ored_qualifiers','rules.py',3335),
+  ('ored_qualifiers -> ored_qualifiers LOGICAL_OR NAME','ored_qualifiers',3,'p_ored_qualifiers','rules.py',3336),
+  ('ored_qualifiers -> ored_qualifiers LOGICAL_OR ! NAME','ored_qualifiers',4,'p_ored_qualifiers','rules.py',3337),
+  ('qualifier_list -> NAME','qualifier_list',1,'p_qualifier_list','rules.py',3354),
+  ('qualifier_list -> qualifier_list NAME','qualifier_list',2,'p_qualifier_list','rules.py',3355),
+  ('qualifiers -> ored_qualifiers','qualifiers',1,'p_qualifiers','rules.py',3367),
+  ('qualifiers -> opt_name - opt_name','qualifiers',3,'p_qualifiers','rules.py',3368),
 ]
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/rules.py
--- a/sipbuild/generator/parser/rules.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/rules.py	Fri May 13 14:19:10 2022 +0100
@@ -24,10 +24,9 @@
 from ..specification import (AccessSpecifier, Argument, ArgumentType,
         ArrayArgument, ClassKey, Docstring, DocstringFormat, Extract,
         FunctionCall, IfaceFile, IfaceFileType, KwArgs, License, MappedType,
-        MappedTypeTemplate, Module, Overload, Property, PyQtMethodSpecifier,
+        MappedTypeTemplate, Overload, Property, PyQtMethodSpecifier,
         QualifierType, ScopedName, Signature, Template, ThrowArguments, Value,
-        ValueType, VirtualErrorHandler, WrappedClass, WrappedTypedef,
-        WrappedVariable)
+        ValueType, VirtualErrorHandler, WrappedTypedef, WrappedVariable)
 from ..templates import same_template_signature
 from ..utils import normalised_scoped_name, search_typedefs
 
@@ -70,7 +69,7 @@
 
 
 def p_statement(p):
-    """statement : EOF
+    """statement : eof
         | namespace_statement
         | composite_module
         | copying
@@ -120,6 +119,12 @@
         | type_header_code"""
 
 
+def p_eof(p):
+    "eof : EOF"
+
+    p.parser.pm.pop_module_state()
+
+
 # State changing productions. #################################################
 
 def p_begin_args(p):
@@ -1134,7 +1139,7 @@
     """module_body : '{' module_body_directives '}' ';'
         | empty"""
 
-    p[0] = p[2] if len(p) == 4 else []
+    p[0] = p[2] if len(p) == 5 else []
 
 
 def p_module_body_directives(p):
@@ -1142,12 +1147,16 @@
         | module_body_directives module_body_directive"""
 
     if len(p) == 2:
-        value = [p[1]]
-    else:
+        body = []
         value = p[1]
-        value.append(p[2])
-
-    p[0] = value
+    else:
+        body = p[1]
+        value = p[2]
+
+    if value is not None:
+        body.append(value)
+
+    p[0] = body
 
 
 def p_module_body_directive(p):
@@ -1254,34 +1263,34 @@
 # %Property ###################################################################
 
 def p_property(p):
-    "property : Property '(' property_args ')' '{' property_body '}' ';'"
+    "property : Property begin_args '(' property_args end_args ')' opt_property_body"
 
     pm = p.parser.pm
 
     if pm.skipping:
         return
 
-    name = p[3].get('name')
+    name = p[4].get('name')
     if name is None:
         p.parser.pm.parser_error(p, 1,
                 "a name must be specified for %Property")
         return
 
-    pm.check_attributes(p, 3, name)
+    pm.check_attributes(p, 4, name)
 
     name = pm.cached_name(name)
     if pm.in_main_module:
         name.used = True
 
-    getter = p[3].get('get')
+    getter = p[4].get('get')
     if getter is None:
         p.parser.pm.parser_error(p, 1,
                 "a getter must be specified for %Property")
         return
 
-    prop = Property(name=name, getter=getter, setter=p[3].get('set'))
-
-    for directive in body:
+    prop = Property(name=name, getter=getter, setter=p[4].get('set'))
+
+    for directive in p[7]:
         if isinstance(directive, Docstring):
             prop.docstring = directive
 
@@ -1306,6 +1315,13 @@
     p[0] = {p[1]: p[3]}
 
 
+def p_opt_property_body(p):
+    """opt_property_body : empty
+        | '{' property_body '}' ';'"""
+
+    p[0] = [] if len(p) == 2 else p[2]
+
+
 def p_property_body(p):
     """property_body : property_line
         | property_body property_line"""
@@ -1517,6 +1533,12 @@
         value.derefs.extend(p[2])
         value.is_reference = p[3]
 
+        # PyObject * is a synonym for SIP_PYOBJECT.
+        if value.type is ArgumentType.DEFINED and len(value.definition) == 1 and value.definition.base_name == 'PyObject' and len(value.derefs) == 1 and not value.is_reference:
+            value.type = ArgumentType.PYOBJECT
+            value.definition = None
+            value.derefs = []
+
     p[0] = value
 
 
@@ -1726,6 +1748,21 @@
     pm.class_templates.append((p[1], p[2]))
 
 
+def p_class_docstring(p):
+    "class_docstring : docstring"
+
+    pm = p.parser.pm
+
+    if pm.skipping:
+        return
+
+    if pm.scope.docstring is None:
+        pm.scope.docstring = p[1]
+    else:
+        pm.parser_error(p, 1,
+                "%Docstring has already been defined for this class")
+
+
 def p_class_decl(p):
     "class_decl : class class_head opt_class_body ';'"
 
@@ -1849,7 +1886,7 @@
 
 
 def p_opt_class_body(p):
-    """opt_class_body : '{' opt_docstring class_body '}'
+    """opt_class_body : '{' class_body '}'
         | empty"""
 
     pm = p.parser.pm
@@ -1857,11 +1894,7 @@
     if pm.skipping:
         return
 
-    if len(p) == 5:
-        pm.scope.docstring = p[2]
-        p[0] = True
-    else:
-        p[0] = False
+    p[0] = (len(p) == 4)
 
 
 def p_class_body(p):
@@ -1873,6 +1906,8 @@
     """class_line : if_start
         | if_end
         | class_decl
+        | class_docstring
+        | class_template
         | ctor
         | dtor
         | enum_decl
@@ -2250,7 +2285,7 @@
         base = p[2]
 
         # See if it is a project-defined exception.
-        for xd in p.parser_manager.spec.exceptions:
+        for xd in p.parser.pm.spec.exceptions:
             if xd.iface_file.fq_cpp_name == base:
                 defined_base = xd
                 break
@@ -3235,18 +3270,17 @@
 
 def p_dotted_name(p):
     """dotted_name : NAME
-        | dotted_name '.' NAME"""
-
-    if len(p) == 2:
-        value = DottedName()
-        symbol = 1
-    else:
-        value = p[1]
-        symbol = 3
-
-    value.append(p[symbol])
-
-    p[0] = value
+        | DOTTED_NAME"""
+
+    p[0] = DottedName(p[1])
+
+
+def p_file_path(p):
+    """file_path : NAME
+        | DOTTED_NAME
+        | FILE_PATH"""
+
+    p[0] = p[1]
 
 
 def p_empty(p):
@@ -3255,20 +3289,6 @@
     p[0] = None
 
 
-def p_file_name(p):
-    """file_name : dotted_name
-        | file_name '-' dotted_name"""
-
-    p[0] = str(p[1]) if len(p) == 2 else p[1] + '-' + str(p[3])
-
-
-def p_file_path(p):
-    """file_path : file_name
-        | file_path '/' file_name"""
-
-    p[0] = p[1] if len(p) == 2 else p[1] + '/' + p[3]
-
-
 def p_opt_const(p):
     """opt_const : const
         | empty"""
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/parser/tokens.py
--- a/sipbuild/generator/parser/tokens.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/parser/tokens.py	Fri May 13 14:19:10 2022 +0100
@@ -21,6 +21,8 @@
 # POSSIBILITY OF SUCH DAMAGE.
 
 
+from ply.lex import TOKEN
+
 from ..specification import CodeBlock
 
 
@@ -97,8 +99,8 @@
 
 # The lexer tokens.
 tokens = [
-    'CODE_BLOCK', 'ELLIPSIS', 'EOF', 'EOL', 'LOGICAL_OR', 'NAME', 'NUMBER',
-    'QUOTED_CHAR', 'REAL', 'SCOPE', 'STRING',
+    'CODE_BLOCK', 'DOTTED_NAME', 'ELLIPSIS', 'EOF', 'EOL', 'FILE_PATH',
+    'LOGICAL_OR', 'NAME', 'NUMBER', 'QUOTED_CHAR', 'REAL', 'SCOPE', 'STRING',
 ]
 
 tokens.extend(directives)
@@ -172,13 +174,13 @@
 
 # Handle directives.
 def t_DIRECTIVE(t):
-    r'(?m)^\s*%[a-zA-Z][a-zA-Z]*'
+    r'%[a-zA-Z][a-zA-Z]*'
 
     # The name of the directive is used as its type.
     name = t.value[t.value.index('%') + 1:]
 
     if name in code_directives:
-        t.lexer.pm.code_block = CodeBlock(t.lexer.pm.sip_file)
+        t.lexer.pm.code_block = CodeBlock(t.lexer.pm.raw_sip_file)
         t.type = name
     elif name in directives:
         t.type = name
@@ -234,21 +236,23 @@
     return None
 
 
-# Handle keywords and simple identifiers.
-def t_KEYWORD(t):
-    r'[_A-Za-z][_A-Za-z\d]*'
+# Handle keywords, ellipsis, names, dotted name and file paths.
+ambiguous = r'[._A-Za-z][._/A-Za-z\d\-]*[._A-Za-z\d]'
 
-    t.type = t.value if t.value in keywords else 'NAME'
+@TOKEN(ambiguous)
+def t_AMBIGUOUS(t):
+
+    t.type = t.lexer.pm.disambiguate_token(t.value, keywords)
 
     return t
 
 
-# Handle directive keywords, ie. keywords that are only recognised in the
-# context of a directive.
-def t_directive_KEYWORD(t):
-    r'[_A-Za-z][_A-Za-z\d]*'
+# Handle directive keywords (ie. keywords that are only recognised in the
+# context of a directive), ellipsis, names, dotted name and file paths.
+@TOKEN(ambiguous)
+def t_directive_AMBIGUOUS(t):
 
-    t.type = t.value if t.value in directive_keywords else 'NAME'
+    t.type = t.lexer.pm.disambiguate_token(t.value, directive_keywords)
 
     return t
 
@@ -382,6 +386,9 @@
 
 
 # The remaining trivial token definitions.
-t_ELLIPSIS = r'\.\.\.'
 t_LOGICAL_OR = r'\|\|'
 t_SCOPE = r'::'
+
+# We only deal with a single character as everything else is handled by
+# AMBIGUOUS.
+t_NAME = r'[A-Za-z]'
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/specification.py
--- a/sipbuild/generator/specification.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/specification.py	Fri May 13 14:19:10 2022 +0100
@@ -22,7 +22,7 @@
 
 
 from dataclasses import dataclass, field
-from enum import auto, Enum
+from enum import Enum
 from typing import Any, List, Optional, Union
 
 
@@ -1740,17 +1740,17 @@
     raise_code: CodeBlock
 
     # The base exception if it is a builtin.
-    builtin_base_exception: Optional[str]
+    builtin_base_exception: Optional[str] = None
 
     # The class that implements the exception (if the exception is not a Python
     # exception).
-    class_exception: Optional[WrappedClass]
+    class_exception: Optional[WrappedClass] = None
 
     # The base exception if it is defined in the specification.
-    defined_base_exception: Optional['WrappedException']
+    defined_base_exception: Optional['WrappedException'] = None
 
     # The Python name.
-    py_name: Optional[str]
+    py_name: Optional[str] = None
 
 
 @dataclass
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/generator/templates.py
--- a/sipbuild/generator/templates.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/generator/templates.py	Fri May 13 14:19:10 2022 +0100
@@ -23,7 +23,7 @@
 
 from copy import copy
 
-from .specification import ArgumentType, CodeBlock, IfaceFileType, ScopedName
+from .specification import ArgumentType, IfaceFileType, ScopedName
 from .utils import argument_as_str, same_base_type
 
 
@@ -180,7 +180,7 @@
             if value_arg.type is ArgumentType.TEMPLATE and len(name_arg.definiton.types.args) == len(value_arg.definition.types.args):
                 expansions.update(
                         template_expansions(name_arg.definition.types,
-                                value_arg.definition.types, known))
+                                value_arg.definition.types, declared_names))
 
     return expansions
 
@@ -233,7 +233,7 @@
 
 def _template_code_block(spec, used, proto_code, expansions):
     """ Return a copy of a CodeBlock object with sub-strings replaced by
-    corresponding values.
+    corresponding values or the original if there were no substitutions.
     """
 
     i_code = copy(proto_code)
@@ -287,4 +287,8 @@
 
     i_code.text = '\n'.join(i_lines)
 
+    # Return the prototype itself if nothing changed.
+    if proto_code.text == i_code.text:
+        return proto_code
+
     return i_code
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/12/sip.h.in
--- a/sipbuild/module/source/12/sip.h.in	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/12/sip.h.in	Fri May 13 14:19:10 2022 +0100
@@ -45,13 +45,16 @@
 
 /* The version of the ABI. */
 #define SIP_ABI_MAJOR_VERSION       12
-#define SIP_ABI_MINOR_VERSION       10
-#define SIP_MODULE_PATCH_VERSION    1
+#define SIP_ABI_MINOR_VERSION       11
+#define SIP_MODULE_PATCH_VERSION    0
 
 
 /*
  * The change history of the ABI.
  *
+ * v12.11
+ *  - Published the 'array' type.
+ *
  * v12.10
  *  - Python v3.7 or later is required.
  *  - Added support for Python v3.11.
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/12/sip.pyi
--- a/sipbuild/module/source/12/sip.pyi	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/12/sip.pyi	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -21,7 +21,12 @@
 # POSSIBILITY OF SUCH DAMAGE.
 
 
-from typing import Generic, overload, TypeVar, Union
+from typing import Any, Generic, Iterable, overload, Sequence, TypeVar, Union
+
+
+# PEP 484 has no explicit support for the buffer protocol so we just name types
+# we know that implement it.
+Buffer = Union[bytes, bytearray, memoryview, 'array', 'voidptr']
 
 
 # Constants.
@@ -30,21 +35,34 @@
 
 
 # The bases for SIP generated types.
-class wrappertype: ...
-class simplewrapper: ...
+class wrappertype:
+    def __init__(self, *args, **kwargs) -> None: ...
+
+class simplewrapper:
+    def __init__(self, *args, **kwargs) -> None: ...
+
 class wrapper(simplewrapper): ...
 
 
 # The array type.
-T = TypeVar('T')
+_T = TypeVar('_T')
 
-class array(Generic[T]):
+class array(Sequence[_T], Generic[_T]):
 
     @overload
-    def __getitem__(self, i: int) -> T: ...
+    def __getitem__(self, key: int) -> _T: ...
+    @overload
+    def __getitem__(self, key: slice) -> 'array[_T]': ...
 
     @overload
-    def __getitem__(self, s: slice) -> array[T]: ...
+    def __setitem__(self, key: int, value: _T) -> None: ...
+    @overload
+    def __setitem__(self, key: slice, value: Iterable[_T]) -> None: ...
+
+    @overload
+    def __delitem__(self, key: int) -> None: ...
+    @overload
+    def __delitem__(self, key: slice) -> None: ...
 
     def __len__(self) -> int: ...
 
@@ -52,7 +70,7 @@
 # The voidptr type.
 class voidptr:
 
-    def __init__(addr: Union[int, Buffer], size: int = -1, writeable: bool = True) -> None: ...
+    def __init__(self, addr: Union[int, Buffer], size: int = -1, writeable: bool = True) -> None: ...
 
     def __int__(self) -> int: ...
 
@@ -60,9 +78,7 @@
     def __getitem__(self, i: int) -> bytes: ...
 
     @overload
-    def __getitem__(self, s: slice) -> voidptr: ...
-
-    def __hex__(self) -> str: ...
+    def __getitem__(self, s: slice) -> 'voidptr': ...
 
     def __len__(self) -> int: ...
 
@@ -71,7 +87,7 @@
     def asarray(self, size: int = -1) -> array: ...
 
     # Python doesn't expose the capsule type.
-    #def ascapsule(self) -> capsule: ...
+    def ascapsule(self) -> Any: ...
 
     def asstring(self, size: int = -1) -> bytes: ...
 
@@ -81,12 +97,7 @@
 
     def setsize(self, size: int) -> None: ...
 
-    def setwriteable(self, bool) -> None: ...
-
-
-# PEP 484 has no explicit support for the buffer protocol so we just name types
-# we know that implement it.
-Buffer = Union[bytes, bytearray, memoryview, array, voidptr]
+    def setwriteable(self, writeable: bool) -> None: ...
 
 
 # Remaining functions.
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/12/siplib.c
--- a/sipbuild/module/source/12/siplib.c	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/12/siplib.c	Fri May 13 14:19:10 2022 +0100
@@ -1122,6 +1122,9 @@
     if (PyDict_SetItemString(mod_dict, "voidptr", (PyObject *)&sipVoidPtr_Type) < 0)
         return NULL;
 
+    if (PyDict_SetItemString(mod_dict, "array", (PyObject *)&sipArray_Type) < 0)
+        return NULL;
+
     /* These will always be needed. */
     if (objectify("__init__", &init_name) < 0)
         return NULL;
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/13/sip.h.in
--- a/sipbuild/module/source/13/sip.h.in	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/13/sip.h.in	Fri May 13 14:19:10 2022 +0100
@@ -45,13 +45,16 @@
 
 /* The version of the ABI. */
 #define SIP_ABI_MAJOR_VERSION       13
-#define SIP_ABI_MINOR_VERSION       3
-#define SIP_MODULE_PATCH_VERSION    1
+#define SIP_ABI_MINOR_VERSION       4
+#define SIP_MODULE_PATCH_VERSION    0
 
 
 /*
  * The change history of the ABI.
  *
+ * v13.4
+ *  - Published the 'array' type.
+ *
  * v13.3
  *  - Python v3.7 or later is required.
  *
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/13/sip.pyi
--- a/sipbuild/module/source/13/sip.pyi	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/13/sip.pyi	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -21,7 +21,12 @@
 # POSSIBILITY OF SUCH DAMAGE.
 
 
-from typing import Generic, overload, TypeVar, Union
+from typing import Any, Generic, Iterable, overload, Sequence, TypeVar, Union
+
+
+# PEP 484 has no explicit support for the buffer protocol so we just name types
+# we know that implement it.
+Buffer = Union[bytes, bytearray, memoryview, 'array', 'voidptr']
 
 
 # Constants.
@@ -30,21 +35,34 @@
 
 
 # The bases for SIP generated types.
-class wrappertype: ...
-class simplewrapper: ...
+class wrappertype:
+    def __init__(self, *args, **kwargs) -> None: ...
+
+class simplewrapper:
+    def __init__(self, *args, **kwargs) -> None: ...
+
 class wrapper(simplewrapper): ...
 
 
 # The array type.
-T = TypeVar('T')
+_T = TypeVar('_T')
 
-class array(Generic[T]):
+class array(Sequence[_T], Generic[_T]):
 
     @overload
-    def __getitem__(self, i: int) -> T: ...
+    def __getitem__(self, key: int) -> _T: ...
+    @overload
+    def __getitem__(self, key: slice) -> 'array[_T]': ...
 
     @overload
-    def __getitem__(self, s: slice) -> array[T]: ...
+    def __setitem__(self, key: int, value: _T) -> None: ...
+    @overload
+    def __setitem__(self, key: slice, value: Iterable[_T]) -> None: ...
+
+    @overload
+    def __delitem__(self, key: int) -> None: ...
+    @overload
+    def __delitem__(self, key: slice) -> None: ...
 
     def __len__(self) -> int: ...
 
@@ -52,7 +70,7 @@
 # The voidptr type.
 class voidptr:
 
-    def __init__(addr: Union[int, Buffer], size: int = -1, writeable: bool = True) -> None: ...
+    def __init__(self, addr: Union[int, Buffer], size: int = -1, writeable: bool = True) -> None: ...
 
     def __int__(self) -> int: ...
 
@@ -60,9 +78,7 @@
     def __getitem__(self, i: int) -> bytes: ...
 
     @overload
-    def __getitem__(self, s: slice) -> voidptr: ...
-
-    def __hex__(self) -> str: ...
+    def __getitem__(self, s: slice) -> 'voidptr': ...
 
     def __len__(self) -> int: ...
 
@@ -71,7 +87,7 @@
     def asarray(self, size: int = -1) -> array: ...
 
     # Python doesn't expose the capsule type.
-    #def ascapsule(self) -> capsule: ...
+    def ascapsule(self) -> Any: ...
 
     def asstring(self, size: int = -1) -> bytes: ...
 
@@ -81,12 +97,7 @@
 
     def setsize(self, size: int) -> None: ...
 
-    def setwriteable(self, bool) -> None: ...
-
-
-# PEP 484 has no explicit support for the buffer protocol so we just name types
-# we know that implement it.
-Buffer = Union[bytes, bytearray, memoryview, array, voidptr]
+    def setwriteable(self, writeable: bool) -> None: ...
 
 
 # Remaining functions.
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/module/source/13/siplib.c
--- a/sipbuild/module/source/13/siplib.c	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/module/source/13/siplib.c	Fri May 13 14:19:10 2022 +0100
@@ -1,7 +1,7 @@
 /*
  * SIP library code.
  *
- * Copyright (c) 2021 Riverbank Computing Limited <info@riverbankcomputing.com>
+ * Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
  *
  * This file is part of SIP.
  *
@@ -1004,6 +1004,9 @@
     if (PyDict_SetItemString(mod_dict, "voidptr", (PyObject *)&sipVoidPtr_Type) < 0)
         return NULL;
 
+    if (PyDict_SetItemString(mod_dict, "array", (PyObject *)&sipArray_Type) < 0)
+        return NULL;
+
     /* These will always be needed. */
     if (objectify("__init__", &init_name) < 0)
         return NULL;
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/project.py
--- a/sipbuild/project.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/project.py	Fri May 13 14:19:10 2022 +0100
@@ -38,8 +38,7 @@
 from .exceptions import UserException
 from .module import resolve_abi_version
 from .py_versions import OLDEST_SUPPORTED_MINOR
-from .pyproject import (PyProjectException, PyProjectOptionException,
-        PyProjectUndefinedOptionException)
+from .pyproject import PyProjectException, PyProjectOptionException
 
 
 class Project(AbstractProject, Configurable):
@@ -162,6 +161,7 @@
 
         # The current directory should contain the .toml file.
         self.root_dir = os.getcwd()
+        self.arguments = None
         self.bindings = collections.OrderedDict()
         self.bindings_factories = []
         self.builder = None
@@ -211,11 +211,6 @@
     def apply_user_defaults(self, tool):
         """ Set default values for user options that haven't been set yet. """
 
-        # If we are the backend to a 3rd-party frontend (most probably pip)
-        # then let it handle the verbosity of messages.
-        if self.verbose is None and tool == '':
-            self.verbose = True
-
         # This is only used when creating sdist and wheel files.
         if self.name is None:
             self.name = self.metadata['name']
@@ -576,14 +571,9 @@
         # Set the initial configuration from the pyproject.toml file.
         self._set_initial_configuration(pyproject, tool)
 
-        # Add any tool-specific command line options for (so far unspecified)
+        # Add any tool-specific command line arguments for (so far unspecified)
         # parts of the configuration.
-        if tool != 'pep517':
-            self._configure_from_command_line(tool, tool_description)
-        else:
-            # Until pip improves it's error reporting we give the user all the
-            # help we can.
-            self.verbose = True
+        self._configure_from_arguments(tool, tool_description)
 
         # Now that any help has been given we can report a problematic
         # pyproject.toml file.
@@ -719,8 +709,8 @@
         for bindings in self.bindings.values():
             bindings.verify_configuration(tool)
 
-    def _configure_from_command_line(self, tool, tool_description):
-        """ Update the configuration from the user supplied command line. """
+    def _configure_from_arguments(self, tool, tool_description):
+        """ Update the configuration from any user supplied arguments. """
 
         from argparse import SUPPRESS
         from .argument_parser import ArgumentParser
@@ -746,7 +736,7 @@
             bindings.add_command_line_options(parser, tool, all_options)
 
         # Parse the arguments and update the corresponding configurables.
-        args = parser.parse_args()
+        args = parser.parse_args(self.arguments)
 
         for option, configurables in all_options.items():
             for configurable in configurables:
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/pyproject.py
--- a/sipbuild/pyproject.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/pyproject.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -24,7 +24,7 @@
 from collections import OrderedDict
 import toml
 
-from .exceptions import UserFileException, UserParseException
+from .exceptions import UserFileException
 from .py_versions import OLDEST_SUPPORTED_MINOR
 
 
diff -r a6d2d9673442 -r a59cb21d25c6 sipbuild/setuptools_builder.py
--- a/sipbuild/setuptools_builder.py	Wed Apr 13 11:14:02 2022 +0100
+++ b/sipbuild/setuptools_builder.py	Fri May 13 14:19:10 2022 +0100
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -22,9 +22,8 @@
 
 
 import os
-import sys
 
-from setuptools import Distribution, Extension, setup
+from setuptools import Extension, setup
 
 from .buildable import BuildableModule
 from .builder import Builder
