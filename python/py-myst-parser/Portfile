# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0
PortGroup           github 1.0

github.setup        executablebooks MyST-Parser 1.0.0 v
revision            0
name                py-myst-parser

categories-append   textproc devel
supported_archs     noarch
platforms           {darwin any}
license             MIT
maintainers         {judaew @judaew} openmaintainer

description         \
    An extended commonmark compliant parser, with bridges to docutils & sphinx.
long_description    \
    MyST is a flavor of markdown that is designed for simplicity, flexibility, \
    and extensibility. This repository serves as the reference implementation \
    of MyST Markdown, as well as a collection of tools to support working with \
    MyST in Python and Sphinx. It contains an extended CommonMark-compliant \
    parser using markdown-it-py, as well as a Sphinx extension that allows you \
    to write MyST Markdown in Sphinx.
homepage            https://github.com/executablebooks/MyST-Parser

checksums           rmd160  3a47285cb7d3d2616a19cfc770931b333093ef66 \
                    sha256  afad94685464b1ae4542b0d76f25b72cf08acb781f3f80fe355e30cbb33c692f \
                    size    814344

python.versions     37 38 39 310 311
python.pep517       yes
python.pep517_backend flit

if {${name} ne ${subport}} {
    depends_run-append \
                        port:py${python.version}-docutils \
                        port:py${python.version}-jinja2 \
                        port:py${python.version}-markdown-it-py \
                        port:py${python.version}-mdit-py-plugins \
                        port:py${python.version}-sphinx \
                        port:py${python.version}-yaml

    depends_test-append \
                        port:py${python.version}-mdit-py-plugins \
                        port:py${python.version}-beautifulsoup4 \
                        port:py${python.version}-coverage \
                        port:py${python.version}-pytest \
                        port:py${python.version}-pytest-cov \
                        port:py${python.version}-pytest-regressions

    test.run            yes
    test.cmd            ${prefix}/bin/pytest-${python.branch} 
    test.args           -k 'not test_sphinx_builds and not test_fixtures'
    test.target
    test.env            PYTHONPATH=${worksrcpath}/myst_parser

    livecheck.type      none
}
