# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0

name                py-gnupg
python.rootname     python-gnupg
version             0.5.4
revision            0

description         A Python wrapper for GnuPG
long_description    The gnupg module allows Python programs to make use of \
                    the functionality provided by the GNU Privacy Guard \
                    (abbreviated GPG or GnuPG). Using this module, Python \
                    programs can encrypt and decrypt data, digitally sign \
                    documents and verify digital signatures, manage \
                    (generate, list and delete) encryption keys, using \
                    proven Public Key Infrastructure (PKI) encryption \
                    technology based on OpenPGP.
license             BSD
platforms           {darwin any}
supported_archs     noarch
homepage            https://pythonhosted.org/python-gnupg/

categories-append   crypto security
maintainers         {@F30 f30.me:f30} openmaintainer

python.versions     38 39 310 311 312

checksums           rmd160  d18d05a9fc76e2ae32fa2dbb0785c821d110f32c \
                    sha256  f2fdb5fb29615c77c2743e1cb3d9314353a6e87b10c37d238d91ae1c6feae086 \
                    size    65705

if {${subport} ne ${name}} {
    depends_run-append \
                    bin:gpg:gnupg2

    test.run        yes
    python.test_framework
    test.cmd        ${python.bin} test_gnupg.py
    # `TMPDIR` being set to a path within `${workpath}` can easily result in a "socket name '...' is
    # too long" error from gpg-agent
    test.env        TMPDIR=/tmp
}
