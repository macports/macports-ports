--- scipy/_lib/_boost_utils.py.orig
+++ scipy/_lib/_boost_utils.py
@@ -1,10 +1,29 @@
 '''Helper functions to get location of header files.'''
 
+import os
 import pathlib
 from typing import Union
 
 
 def _boost_dir(ret_path: bool = False) -> Union[pathlib.Path, str]:
     '''Directory where root Boost/ directory lives.'''
+    # options
+    # 1: see if the submodule is in use
     p = pathlib.Path(__file__).parent / 'boost'
-    return p if ret_path else str(p)
+    if os.path.exists(p / 'README.md'):
+        return p
+    # 2: from a shell environment variable, in order of checking
+    # these are the top-level PREFIX for where Boost is installed
+    # such that `include/boost` and `lib` are subdirectories
+    p_env = ['BOOST_ROOT', 'BOOST_DIR', 'BOOSTROOT', 'BOOSTDIR']
+    for t_p in p_env:
+        print('checking for shell enviroment variable', t_p)
+        t_p_v = os.getenv(t_p)
+        print('value is', t_p_v)
+        if t_p_v is not None:
+            if os.path.exists(pathlib.Path(t_p_v) / 'include' / 'boost'):
+                print('path exists; returning this Boost path')
+                return t_p_v
+    # Boost not found!!
+    raise RuntimeError("Missing the `boost` submodule! Run `git submodule "
+                           "update --init` to fix this.")
--- scipy/_lib/setup.py.orig
+++ scipy/_lib/setup.py
@@ -5,9 +5,9 @@
 def check_boost_submodule():
     from scipy._lib._boost_utils import _boost_dir
 
-    if not os.path.exists(_boost_dir(ret_path=True) / 'README.md'):
-        raise RuntimeError("Missing the `boost` submodule! Run `git submodule "
-                           "update --init` to fix this.")
+    #if not os.path.exists(_boost_dir(ret_path=True) / 'README.md'):
+    #    raise RuntimeError("Missing the `boost` submodule! Run `git submodule "
+    #                       "update --init` to fix this.")
 
 
 def build_clib_pre_build_hook(cmd, ext):
