# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               python 1.0
PortGroup               active_variants 1.1
PortGroup               github 1.0
PortGroup               compilers 1.0
PortGroup               compiler_blacklist_versions 1.0

github.setup            scipy scipy 1.5.0 v
checksums               rmd160  bae805468c0781ea8fff87f25b7c3384dcd0875e \
                        sha256  b31b616b4571f19a4c1a925b1b19f4eb325d098265692d88ea386537aa3742ab \
                        size    19831004
revision                0

name                    py-scipy
platforms               darwin
license                 BSD
maintainers             {michaelld @michaelld} openmaintainer
description             An opensource library of scientific tools for Python
long_description        ${description}

homepage                https://www.scipy.org/

python.versions         27 35 36 37 38

python.add_archflags    no
universal_variant       no

compilers.setup         require_fortran -clang -gcc44 -gcc45 -gcc46 \
                        -gcc47 -gcc48 -g95 clang37

# overload the github livecheck regex to look for versions that
# are just numbers, '.', and '-', no letters (e.g., "1.0.0b1").
github.livecheck.regex  {([0-9.-]+)}

if {${name} ne ${subport}} {

    # peg at 1.2.x for Py27; SciPy dropped support as of 1.3.0
    if {${python.version} == 27} {

        github.setup scipy scipy 1.2.3 v
        checksums   rmd160 868076b4d88257a6b536f4c3a4e1e8230b587290 \
                    sha256 beb6123e91a0bdfba4557b6560be4899dac174a38c30876e5cfc60382ecb4ff7 \
                    size   18564471
        revision    0
        github.livecheck.regex {(1\.2\.[0-9.-]+)}

    } else {

        # requires PyBind11 as of 1.4.0
        depends_lib-append  port:py${python.version}-pybind11

        # require C++11 as of 1.4.0; use C11 as well to match
        compiler.c_standard 2011
        compiler.cxx_standard 2011

        # require thread_local storage as of 1.4.0
        compiler.thread_local_storage yes
        # Work around thread local compiler selection bug. Remove after
        # https://github.com/macports/macports-base/pull/161 is released.
        compiler.blacklist-append {clang < 800}

        compilers.allow_arguments_mismatch yes
    }

    if {${python.version} == 35} {
        github.setup scipy scipy 1.4.1 v
        checksums   rmd160  e232695a51ed02b362187ea164ce269cb431e2ab \
                    sha256  4cc4e820d0770225bfb83e2a0ae340bb230fafb5402ea8efa87c6576a3f342cf \
                    size    18892400
        revision    0
        github.livecheck.regex {(1\.4\.[0-9.-]+)}
    }

    depends_lib-append      port:py${python.version}-numpy \
                            port:py${python.version}-nose

    depends_build-append    port:swig-python

    depends_test-append     port:py${python.version}-py \
                            port:py${python.version}-pytest

    worksrcdir              ${distname}
    build.env-append        "CCFLAGS=-I${prefix}/include -L${prefix}/lib"
    destroot.env-append     "CCFLAGS=-I${prefix}/include -L${prefix}/lib"
    configure.fflags-append -fno-second-underscore

    pre-configure {
        set fc_options      "config_fc --fcompiler gnu95 --f77exec ${configure.f77} --f77flags='${configure.f77_archflags} ${configure.fflags}' --f90exec ${configure.f90} --f90flags='${configure.f90_archflags} ${configure.fflags}'"
        set config_options  "config --cc ${configure.cc} --include-dirs ${prefix}/include --library-dirs ${prefix}/lib"
        build.cmd-append    ${fc_options} ${config_options}
        destroot.cmd-append ${fc_options} ${config_options}

        build.env-append    CC=${configure.cc} \
                            CXX=${configure.cxx} \
                            CFLAGS=${configure.cc_archflags} \
                            CXXFLAGS=${configure.cxx_archflags} \
                            CPPFLAGS=${configure.cppflags}
        destroot.env-append CC=${configure.cc} \
                            CXX=${configure.cxx} \
                            CFLAGS=${configure.cc_archflags} \
                            CXXFLAGS=${configure.cxx_archflags} \
                            CPPFLAGS=${configure.cppflags}
    }

    post-destroot {
        # for some reason read-world is not set
        system "chmod -R a+r ${destroot}${prefix}"
    }

    variant atlas conflicts openblas description "Use MacPorts ATLAS libraries" {
        depends_lib-append  port:atlas
    }

    variant openblas conflicts atlas description "Use MacPorts OpenBLAS Libraries" {
        depends_lib-append  path:lib/libopenblas.dylib:OpenBLAS
    }

    # Make +openblas a default variant, at least temporarily, to
    # overcome issues with Apple's /usr/lib/libblas.* and
    # /usr/lib/liblapack.* missing a symbol. see also:
    # https://trac.macports.org/ticket/57829
    if {![variant_isset atlas] &&
        ![variant_isset openblas]} {
        default_variants +openblas
    }

    if {[variant_isset atlas]} {
        # use MacPorts atlas
        build.env-append    OPENBLAS=None \
                            ATLAS=${prefix}/lib \
                            LAPACK=${prefix}/lib \
                            BLAS=${prefix}/lib
        destroot.env-append OPENBLAS=None \
                            ATLAS=${prefix}/lib \
                            LAPACK=${prefix}/lib \
                            BLAS=${prefix}/lib

        pre-fetch {
            # scipy needs fortran; so we only need to check if atlas is
            # compiled with +nofortran
            if {![catch {set result [active_variants atlas "" nofortran]}]} {
                if {!$result} {
                    return -code error \
"You have selected the +atlas variant but atlas was built with +nofortran.\
scipy needs a fortran enabled atlas. Please rebuild atlas without the +nofortran\
variant."
                }
            }

            # also check that numpy has the atlas variant active
            if {![catch {set result [active_variants py${python.version}-numpy atlas ""]}]} {
                if {!$result} {

                    return -code error \
"You have selected the +atlas variant but py${python.version}-numpy does not\
have the +atlas variant active. Please ensure that numpy is activated with the\
+atlas variant."
                }
            }
        }

    } elseif {[variant_isset openblas]} {
        # use MacPorts OpenBLAS
        build.env-append    OPENBLAS=${prefix}/lib \
                            ATLAS=None
        destroot.env-append OPENBLAS=${prefix}/lib \
                            ATLAS=None
    } else {
        # use Accelerate BLAS
        build.env-append    OPENBLAS=None \
                            ATLAS=None \
                            LAPACK=/usr/lib \
                            BLAS=/usr/lib
        destroot.env-append OPENBLAS=None \
                            ATLAS=None \
                            LAPACK=/usr/lib \
                            BLAS=/usr/lib
    }
}
