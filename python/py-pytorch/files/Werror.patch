--- third_party/fbgemm/CMakeLists.txt.orig	2023-03-31 09:12:01
+++ third_party/fbgemm/CMakeLists.txt	2023-03-31 09:14:00
@@ -144,7 +144,6 @@
 else(MSVC)
   string(APPEND CMAKE_CXX_FLAGS " -Wall")
   string(APPEND CMAKE_CXX_FLAGS " -Wextra")
-  string(APPEND CMAKE_CXX_FLAGS " -Werror")
   string(APPEND CMAKE_CXX_FLAGS " -Wno-deprecated-declarations")
   target_compile_options(fbgemm_avx2 PRIVATE
     "-m64" "-mavx2" "-mf16c" "-mfma")
--- caffe2/CMakeLists.txt.orig	2023-04-01 02:16:59
+++ caffe2/CMakeLists.txt	2023-04-01 02:34:02
@@ -532,8 +532,6 @@
 # Required workaround for LLVM 9 includes.
 if(NOT MSVC)
   set_source_files_properties(${TORCH_SRC_DIR}/csrc/jit/tensorexpr/llvm_jit.cpp PROPERTIES COMPILE_FLAGS -Wno-noexcept-type)
-  # Force -Werror on several files
-  set_source_files_properties(${CMAKE_CURRENT_LIST_DIR}/../aten/src/ATen/native/mkldnn/Pooling.cpp PROPERTIES COMPILE_FLAGS "-Werror")
 endif()
 # Disable certain warnings for GCC-9.X
 if(CMAKE_COMPILER_IS_GNUCXX AND (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 9.0.0))
--- third_party/ideep/mkl-dnn/cmake/platform.cmake.orig	2023-04-01 02:19:51
+++ third_party/ideep/mkl-dnn/cmake/platform.cmake	2023-04-01 02:36:15
@@ -110,7 +110,7 @@
         append(CMAKE_CCXX_FLAGS "/fp:precise")
     endif()
 elseif(UNIX OR MINGW)
-    append(CMAKE_CCXX_FLAGS "-Wall -Werror -Wno-unknown-pragmas")
+    append(CMAKE_CCXX_FLAGS "-Wall -Wno-unknown-pragmas")
     if(DNNL_GRAPH_WITH_SYCL OR CMAKE_BASE_NAME STREQUAL "icx" OR CMAKE_BASE_NAME STREQUAL "icpx")
         # When using Debug build mode CMake adds "-g" option without "-O0"
         # causing the warning. This probably happens because clang/gcc compilers
--- third_party/ideep/mkl-dnn/src/backend/graph_compiler/core/CMakeLists.txt.orig	2023-04-01 02:19:52
+++ third_party/ideep/mkl-dnn/src/backend/graph_compiler/core/CMakeLists.txt	2023-04-01 02:40:35
@@ -224,8 +224,8 @@
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-field-initializers")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmissing-field-initializers")
     endif()
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden -ffunction-sections -fdata-sections -Wall -Wno-unused-variable -Wno-unused-function -std=c99 -fPIC -Werror -DSC_HOME=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden -ffunction-sections -fdata-sections -Wall -Wno-unused-variable -Wno-unused-function -std=c++${SC_CPP_VER} -fPIC -Werror -DSC_HOME=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fvisibility=hidden -ffunction-sections -fdata-sections -Wall -Wno-unused-variable -Wno-unused-function -std=c99 -fPIC -DSC_HOME=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden -ffunction-sections -fdata-sections -Wall -Wno-unused-variable -Wno-unused-function -std=c++${SC_CPP_VER} -fPIC -DSC_HOME=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
     # Deal with Clang < 6.0's missing-braces issue
     if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
         if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
--- third_party/cub/CMakeLists.txt.orig	2023-04-01 02:19:18
+++ third_party/cub/CMakeLists.txt	2023-04-01 02:41:20
@@ -119,7 +119,6 @@
 
   set(CUB_TREAT_FILE_AS_CXX "/TP")
 else ()
-  append_option_if_available("-Werror" CUB_CXX_WARNINGS)
   append_option_if_available("-Wall" CUB_CXX_WARNINGS)
   append_option_if_available("-Wextra" CUB_CXX_WARNINGS)
   append_option_if_available("-Winit-self" CUB_CXX_WARNINGS)
--- third_party/tensorpipe/third_party/googletest/googletest/cmake/internal_utils.cmake.orig	2023-04-01 02:21:03
+++ third_party/tensorpipe/third_party/googletest/googletest/cmake/internal_utils.cmake	2023-04-01 02:43:48
@@ -82,13 +82,13 @@
     # http://stackoverflow.com/questions/3232669 explains the issue.
     set(cxx_base_flags "${cxx_base_flags} -wd4702")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    set(cxx_base_flags "-Wall -Wshadow -Werror -Wconversion")
+    set(cxx_base_flags "-Wall -Wshadow -Wconversion")
     set(cxx_exception_flags "-fexceptions")
     set(cxx_no_exception_flags "-fno-exceptions")
     set(cxx_strict_flags "-W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls")
     set(cxx_no_rtti_flags "-fno-rtti")
   elseif (CMAKE_COMPILER_IS_GNUCXX)
-    set(cxx_base_flags "-Wall -Wshadow -Werror")
+    set(cxx_base_flags "-Wall -Wshadow")
     if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
       set(cxx_base_flags "${cxx_base_flags} -Wno-error=dangling-else")
     endif()
--- third_party/fbgemm/third_party/googletest/googletest/cmake/internal_utils.cmake.orig	2023-04-01 02:19:34
+++ third_party/fbgemm/third_party/googletest/googletest/cmake/internal_utils.cmake	2023-04-01 02:45:03
@@ -82,13 +82,13 @@
     # http://stackoverflow.com/questions/3232669 explains the issue.
     set(cxx_base_flags "${cxx_base_flags} -wd4702")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    set(cxx_base_flags "-Wall -Wshadow -Werror -Wconversion")
+    set(cxx_base_flags "-Wall -Wshadow -Wconversion")
     set(cxx_exception_flags "-fexceptions")
     set(cxx_no_exception_flags "-fno-exceptions")
     set(cxx_strict_flags "-W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls")
     set(cxx_no_rtti_flags "-fno-rtti")
   elseif (CMAKE_COMPILER_IS_GNUCXX)
-    set(cxx_base_flags "-Wall -Wshadow -Werror")
+    set(cxx_base_flags "-Wall -Wshadow")
     if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
       set(cxx_base_flags "${cxx_base_flags} -Wno-error=dangling-else")
     endif()
--- third_party/kineto/libkineto/third_party/dynolog/third_party/DCGM/CMakeLists.txt.orig	2023-04-01 02:20:30
+++ third_party/kineto/libkineto/third_party/dynolog/third_party/DCGM/CMakeLists.txt	2023-04-01 02:49:10
@@ -30,7 +30,7 @@
 set(CMAKE_C_VISIBILITY_PRESET hidden)
 set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
 
-set(DCGM_CXX_FLAGS "-Werror -Wpedantic -Wno-sign-compare -Wno-unused-parameter -Wall -Wextra")
+set(DCGM_CXX_FLAGS "-Wpedantic -Wno-sign-compare -Wno-unused-parameter -Wall -Wextra")
 
 include(CheckCCompilerFlag)
 check_c_compiler_flag("-Wno-cast-function-type" CC_HAS_WNO_CAST_FUNCTION_TYPE)
@@ -83,10 +83,10 @@
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror -g -O0")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${DCGM_CXX_FLAGS} -g -O0")
 elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Werror -g -fno-omit-frame-pointer")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -fno-omit-frame-pointer")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${DCGM_CXX_FLAGS} -g -fno-omit-frame-pointer")
 elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror -s -O3 -g -fno-omit-frame-pointer")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s -O3 -g -fno-omit-frame-pointer")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${DCGM_CXX_FLAGS} -s -O3 -g -fno-omit-frame-pointer")
 endif()
 
--- third_party/kineto/libkineto/third_party/dynolog/third_party/cpr/CMakeLists.txt.orig	2023-04-01 02:20:30
+++ third_party/kineto/libkineto/third_party/dynolog/third_party/cpr/CMakeLists.txt	2023-04-01 02:50:06
@@ -73,7 +73,7 @@
 
 if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
 endif()
 
 # SSL
--- third_party/kineto/libkineto/third_party/dynolog/third_party/pfs/CMakeLists.txt.orig	2023-04-01 02:20:32
+++ third_party/kineto/libkineto/third_party/dynolog/third_party/pfs/CMakeLists.txt	2023-04-01 02:51:47
@@ -12,7 +12,7 @@
 endif ()
 message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
 
-add_compile_options (-std=c++11 -Wall -Wextra -pedantic -Werror)
+add_compile_options (-std=c++11 -Wall -Wextra -pedantic)
 
 include_directories (include)
 
--- third_party/kineto/libkineto/third_party/googletest/googletest/cmake/internal_utils.cmake.orig	2023-04-01 02:20:32
+++ third_party/kineto/libkineto/third_party/googletest/googletest/cmake/internal_utils.cmake	2023-04-01 02:52:47
@@ -82,13 +82,13 @@
     # http://stackoverflow.com/questions/3232669 explains the issue.
     set(cxx_base_flags "${cxx_base_flags} -wd4702")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    set(cxx_base_flags "-Wall -Wshadow -Werror -Wconversion")
+    set(cxx_base_flags "-Wall -Wshadow -Wconversion")
     set(cxx_exception_flags "-fexceptions")
     set(cxx_no_exception_flags "-fno-exceptions")
     set(cxx_strict_flags "-W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls")
     set(cxx_no_rtti_flags "-fno-rtti")
   elseif (CMAKE_COMPILER_IS_GNUCXX)
-    set(cxx_base_flags "-Wall -Wshadow -Werror")
+    set(cxx_base_flags "-Wall -Wshadow")
     if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
       set(cxx_base_flags "${cxx_base_flags} -Wno-error=dangling-else")
     endif()
--- third_party/googletest/googletest/cmake/internal_utils.cmake.orig	2023-04-01 02:19:35
+++ third_party/googletest/googletest/cmake/internal_utils.cmake	2023-04-01 02:56:06
@@ -84,13 +84,13 @@
     # Ensure MSVC treats source files as UTF-8 encoded.
     set(cxx_base_flags "${cxx_base_flags} -utf-8")
   elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-    set(cxx_base_flags "-Wall -Wshadow -Werror -Wconversion")
+    set(cxx_base_flags "-Wall -Wshadow -Wconversion")
     set(cxx_exception_flags "-fexceptions")
     set(cxx_no_exception_flags "-fno-exceptions")
     set(cxx_strict_flags "-W -Wpointer-arith -Wreturn-type -Wcast-qual -Wwrite-strings -Wswitch -Wunused-parameter -Wcast-align -Wchar-subscripts -Winline -Wredundant-decls")
     set(cxx_no_rtti_flags "-fno-rtti")
   elseif (CMAKE_COMPILER_IS_GNUCXX)
-    set(cxx_base_flags "-Wall -Wshadow -Werror")
+    set(cxx_base_flags "-Wall -Wshadow")
     if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
       set(cxx_base_flags "${cxx_base_flags} -Wno-error=dangling-else")
     endif()
--- third_party/flatbuffers/CMakeLists.txt.orig	2023-04-01 02:19:34
+++ third_party/flatbuffers/CMakeLists.txt	2023-04-01 02:57:11
@@ -264,7 +264,7 @@
       "${CMAKE_CXX_FLAGS} -std=c++0x")
   endif(CYGWIN)
   set(CMAKE_CXX_FLAGS
-    "${CMAKE_CXX_FLAGS} -Wall -pedantic -Werror -Wextra -Werror=shadow")
+    "${CMAKE_CXX_FLAGS} -Wall -pedantic -Wextra -Werror=shadow")
   set(FLATBUFFERS_PRIVATE_CXX_FLAGS "-Wold-style-cast")
   if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.4)
     if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)
@@ -288,7 +288,7 @@
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   endif()
 
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -Werror -Wextra -Wno-unused-parameter")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -Wextra -Wno-unused-parameter")
   set(FLATBUFFERS_PRIVATE_CXX_FLAGS "-Wold-style-cast")
   if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.8)
     list(APPEND FLATBUFFERS_PRIVATE_CXX_FLAGS "-Wimplicit-fallthrough" "-Wextra-semi" "-Werror=unused-private-field") # enable warning
@@ -750,4 +750,4 @@
 # Include for running Google Benchmarks.
 if(FLATBUFFERS_BUILD_BENCHMARKS AND CMAKE_VERSION VERSION_GREATER 3.13)
   add_subdirectory(benchmarks)
-endif()
\ No newline at end of file
+endif()
--- third_party/protobuf/third_party/googletest/googletest/cmake/internal_utils.cmake.orig	2023-04-01 02:20:53
+++ third_party/protobuf/third_party/googletest/googletest/cmake/internal_utils.cmake	2023-04-01 02:59:10
@@ -76,7 +76,7 @@
     # http://stackoverflow.com/questions/3232669 explains the issue.
     set(cxx_base_flags "${cxx_base_flags} -wd4702")
   elseif (CMAKE_COMPILER_IS_GNUCXX)
-    set(cxx_base_flags "-Wall -Wshadow -Werror")
+    set(cxx_base_flags "-Wall -Wshadow")
     if(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0.0)
       set(cxx_base_flags "${cxx_base_flags} -Wno-error=dangling-else")
     endif()
