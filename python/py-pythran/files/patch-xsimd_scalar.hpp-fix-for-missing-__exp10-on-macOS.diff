From b98a22802ed75e42c7692fd2ef9264a3174b8491 Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Wed, 20 Dec 2023 18:10:41 +0800
Subject: [PATCH] xsimd_scalar.hpp: fix for missing __exp10 on macOS < 10.9

Fixes: https://github.com/serge-sans-paille/pythran/issues/2164
See also: https://github.com/xtensor-stack/xsimd/pull/993
---
 pythran/xsimd/arch/xsimd_scalar.hpp | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git pythran/xsimd/arch/xsimd_scalar.hpp pythran/xsimd/arch/xsimd_scalar.hpp
index fc227db84..ed1342815 100644
--- pythran/xsimd/arch/xsimd_scalar.hpp
+++ pythran/xsimd/arch/xsimd_scalar.hpp
@@ -24,6 +24,10 @@
 #include "xtl/xcomplex.hpp"
 #endif
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 namespace xsimd
 {
     template <class T, class A>
@@ -468,7 +472,7 @@ namespace xsimd
         return !(x0 == x1);
     }
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED > 1080)
     inline float exp10(const float& x) noexcept
     {
         return __exp10f(x);
@@ -486,6 +490,15 @@ namespace xsimd
     {
         return ::exp10(x);
     }
+#elif !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
+    inline float exp10(const float& x) noexcept
+    {
+        return __builtin_exp10f(x);
+    }
+    inline double exp10(const double& x) noexcept
+    {
+        return __builtin_exp10(x);
+    }
 #elif defined(_WIN32)
     template <class T, class = typename std::enable_if<std::is_scalar<T>::value>::type>
     inline T exp10(const T& x) noexcept

--- third_party/xsimd/arch/xsimd_scalar.hpp
+++ third_party/xsimd/arch/xsimd_scalar.hpp
@@ -24,6 +24,10 @@
 #include "xtl/xcomplex.hpp"
 #endif
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+
 namespace xsimd
 {
     template <class T, class A>
@@ -468,7 +472,7 @@ namespace xsimd
         return !(x0 == x1);
     }
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED > 1080)
     inline float exp10(const float& x) noexcept
     {
         return __exp10f(x);
@@ -486,6 +490,15 @@ namespace xsimd
     {
         return ::exp10(x);
     }
+#elif !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
+    inline float exp10(const float& x) noexcept
+    {
+        return __builtin_exp10f(x);
+    }
+    inline double exp10(const double& x) noexcept
+    {
+        return __builtin_exp10(x);
+    }
 #elif defined(_WIN32)
     template <class T, class = typename std::enable_if<std::is_scalar<T>::value>::type>
     inline T exp10(const T& x) noexcept
