--- build.py.orig
+++ build.py
@@ -1504,11 +1504,6 @@
             if options.osx_cocoa:
                 build_options.append("--osx_cocoa")
 
-            if options.mac_arch:
-                build_options.append("--mac_universal_binary=%s" % options.mac_arch)
-            else:
-                build_options.append("--mac_universal_binary=default")
-
         if options.no_config:
             build_options.append('--no_config')
         elif not options.force_config:
@@ -1589,9 +1584,6 @@
 
 
 def copyWxDlls(options):
-    if options.no_magic or options.use_syswx:
-        return
-
     if isWindows:
         # Copy the wxWidgets DLLs to the wxPython package folder
         msw = getMSWSettings(options)
@@ -1634,14 +1626,12 @@
         cfg = Config()
         wxlibdir = os.path.join(getBuildDir(options), "lib")
         dlls = glob.glob(wxlibdir + '/*.dylib')
-        for dll in dlls:
-            copyIfNewer(dll, posixjoin(phoenixDir(), cfg.PKGDIR, os.path.basename(dll)), verbose=True)
 
         # Now use install_name_tool to change the extension modules to look
         # in the same folder for the wx libs, instead of the build dir. Also
         # change the wx libs the same way.
-        macSetLoaderNames(glob.glob(opj(phoenixDir(), cfg.PKGDIR, '*.so')) +
-                     glob.glob(opj(phoenixDir(), cfg.PKGDIR, '*.dylib')))
+        #macSetLoaderNames(glob.glob(opj(phoenixDir(), cfg.PKGDIR, '*.so')) +
+        #             glob.glob(opj(phoenixDir(), cfg.PKGDIR, '*.dylib')))
 
     else:
         # Not Windows and not OSX.  For now that means that we'll assume it's wxGTK.
@@ -1656,35 +1656,11 @@ def cmd_build_py(options, args):
     if options.release:
         os.environ['WXPYTHON_RELEASE'] = 'yes'
 
-    if not isWindows:
-        WX_CONFIG = os.environ.get('WX_CONFIG', None)
-        if WX_CONFIG is None:
-            WX_CONFIG = posixjoin(BUILD_DIR, 'wx-config')
-            if options.use_syswx:
-                wxcfg = posixjoin(options.prefix, 'bin', 'wx-config')
-                if options.prefix and os.path.exists(wxcfg):
-                    WX_CONFIG = wxcfg
-                else:
-                    WX_CONFIG = 'wx-config' # hope it is on the PATH
-
-    if isDarwin:
-        # WAF does a test build as part of the configuration phase, but the
-        # default compiler and flags it uses are not even close to how we'll
-        # configure it later in the configuration process. At a minimum we need
-        # to add the -isysroot for builds on Darwin, and wxWidgets configure is
-        # adding this to the compiler command so we can fetch it there.
-        def _getWxCompiler(flag, compName, flagName):
-            cmd = "%s %s" % (WX_CONFIG, flag)
-            value = os.popen(cmd, 'r').read()[:-1]
-            cmd = shlex.split(value)
-            compiler = cmd[0]
-            flags = cmd[1:]
-            #os.environ[compName] = compiler  # don't reset the compiler here, it will be done later
-            os.environ[flagName] = ' '.join(flags)
-
-        _getWxCompiler('--cc', 'CC', 'CFLAGS')
-        _getWxCompiler('--cxx', 'CXX', 'CXXFLAGS')
-
+    WX_CONFIG = os.environ.get('WX_CONFIG', None)
+    os.environ['CC'] = '@@CC@@'
+    os.environ['CXX'] = '@@CXX@@'
+    os.environ['CFLAGS'] = '@@CFLAGS@@'
+    os.environ['CXXFLAGS'] = '@@CXXFLAGS@@'
 
     wafBuildBase = wafBuildDir = getWafBuildBase()
     if isWindows:
