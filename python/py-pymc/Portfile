# -*- coding: utf-8;  mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0
PortGroup           github 1.0
PortGroup           compilers 1.0

github.setup        pymc-devs pymc 2.3.7 v
name                py-pymc
maintainers         nomaintainer
license             {AFL-3 BSD}

description         Bayesian statistical models and fitting algorithms for python
long_description    PyMC is a python module that implements Bayesian statistical models \
                    and fitting algorithms, including Markov chain Monte Carlo. \
                    Its flexibility makes it applicable to a large suite of problems as well \
                    as easily extensible. Along with core sampling functionality, \
                    PyMC includes methods for summarizing output, plotting, goodness-of-fit and \
                    convergence diagnostics.

platforms           darwin

python.versions     27 34 35 36

checksums           rmd160  756e3692f1ae14ab2545f194c4db8a17855c9075 \
                    sha256  511f382a0e4b5c0befdfbf33e75c4730bcc62402ad19c6a845e8c08e326439da \
                    size    13104435

if {${name} ne ${subport}} {
    depends_lib-append  port:py${python.version}-numpy
    compilers.enforce_fortran  port:py${python.version}-numpy
    compilers.enforce_c  port:py${python.version}-numpy

    # keep compilers.setup the same as in the py-numpy port
    compilers.setup    require_fortran -clang -gcc44 -gcc45 \
                       -gcc46 -gcc47 -gcc48 -g95 clang37

    if {[gcc_variant_isset]} {
        build.cmd "${build.cmd} config_fc --fcompiler gfortran"
    } elseif {[variant_isset g95]} {
        build.cmd "${build.cmd} config_fc --fcompiler g95"
    }

    # Insert my own archflags, so I can edit LDFLAGS
    python.add_archflags no

    if {[variant_exists universal] && [variant_isset universal]} {
        build.env-append CFLAGS="${configure.universal_cflags}" \
                        OBJCFLAGS="${configure.universal_cflags}" \
                        CXXFLAGS="${configure.universal_cxxflags}" \
                        LDFLAGS="-undefined dynamic_lookup -bundle ${configure.universal_ldflags}"
    } else {
        build.env-append CFLAGS="${configure.cc_archflags}" \
                        OBJCFLAGS="${configure.objc_archflags}" \
                        CXXFLAGS="${configure.cxx_archflags}" \
                        FFLAGS="${configure.f77_archflags}" \
                        F90FLAGS="${configure.f90_archflags}" \
                        FCFLAGS="${configure.fc_archflags}" \
                        LDFLAGS="-undefined dynamic_lookup -bundle ${configure.ld_archflags}"
    }

    livecheck.type          none
}
