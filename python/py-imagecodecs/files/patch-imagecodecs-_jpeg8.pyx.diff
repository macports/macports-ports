--- imagecodecs/_jpeg8.pyx.orig	2023-03-16 19:37:17.000000000 -0500
+++ imagecodecs/_jpeg8.pyx	2023-04-29 16:11:14.000000000 -0500
@@ -124,8 +124,6 @@
         my_error_mgr err
         jpeg_compress_struct cinfo
         JSAMPROW rowpointer8
-        J12SAMPROW rowpointer12
-        J16SAMPROW rowpointer16
         J_COLOR_SPACE in_color_space = JCS_UNKNOWN
         J_COLOR_SPACE jpeg_color_space = JCS_UNKNOWN
         unsigned long outsize = 0
@@ -139,7 +137,7 @@
         int predictor_selection_value = 0
 
     if not (
-        (src.dtype == numpy.uint8 or src.dtype == numpy.uint16)
+        src.dtype == numpy.uint8
         and src.ndim in (2, 3)
         # src.nbytes < 2 ** 31 and  # limit to 2 GB
         and samples in (1, 3, 4)
@@ -148,21 +146,6 @@
     ):
         raise ValueError('invalid data shape, strides, or dtype')
 
-    if lossless:
-        predictor_selection_value = 1 if predictor is None else predictor
-
-    if bitspersample is not None:
-        if (
-            bitspersample not in (8, 12, 16)
-            or src.itemsize == 1 and bitspersample > 8
-        ):
-            raise ValueError(f'invalid bitspersample {bitspersample}')
-        data_precision = bitspersample
-
-    # if validate and bitspersample == 12 and not _check_range(src):
-    #     # values larger than 12-bit cause segfault
-    #     raise ValueError('all data values must be < 4096')
-
     if colorspace is not None:
         in_color_space = _jcs_colorspace(colorspace)
         if samples not in _jcs_colorspace_samples(in_color_space):
@@ -235,7 +218,6 @@
         cinfo.image_height = <JDIMENSION> src.shape[0]
         cinfo.image_width = <JDIMENSION> src.shape[1]
         cinfo.input_components = samples
-        cinfo.data_precision = data_precision
 
         if in_color_space != JCS_UNKNOWN:
             cinfo.in_color_space = in_color_space
@@ -246,43 +228,27 @@
         jpeg_mem_dest(&cinfo, &outbuffer, &outsize)  # must call after defaults
         jpeg_set_quality(&cinfo, quality, 1)
 
-        if predictor_selection_value > 0:
-            jpeg_enable_lossless(&cinfo, predictor_selection_value, 0)
-        else:
-            if smoothing_factor >= 0:
-                cinfo.smoothing_factor = smoothing_factor
-            if optimize_coding >= 0:
-                cinfo.optimize_coding = <boolean> optimize_coding
-            if h_samp_factor != 0:
-                cinfo.comp_info[0].h_samp_factor = h_samp_factor
-                cinfo.comp_info[0].v_samp_factor = v_samp_factor
-                cinfo.comp_info[1].h_samp_factor = 1
-                cinfo.comp_info[1].v_samp_factor = 1
-                cinfo.comp_info[2].h_samp_factor = 1
-                cinfo.comp_info[2].v_samp_factor = 1
+        if smoothing_factor >= 0:
+            cinfo.smoothing_factor = smoothing_factor
+        if optimize_coding >= 0:
+            cinfo.optimize_coding = <boolean> optimize_coding
+        if h_samp_factor != 0:
+            cinfo.comp_info[0].h_samp_factor = h_samp_factor
+            cinfo.comp_info[0].v_samp_factor = v_samp_factor
+            cinfo.comp_info[1].h_samp_factor = 1
+            cinfo.comp_info[1].v_samp_factor = 1
+            cinfo.comp_info[2].h_samp_factor = 1
+            cinfo.comp_info[2].v_samp_factor = 1
 
         # TODO: add option to use or return JPEG tables
 
         jpeg_start_compress(&cinfo, 1)
 
-        if cinfo.data_precision == 8:
-            while cinfo.next_scanline < cinfo.image_height:
-                rowpointer8 = <JSAMPROW> (
-                    <char*> src.data + cinfo.next_scanline * rowstride
-                )
-                jpeg_write_scanlines(&cinfo, &rowpointer8, 1)
-        elif cinfo.data_precision == 12:
-            while cinfo.next_scanline < cinfo.image_height:
-                rowpointer12 = <J12SAMPROW> (
-                    <char*> src.data + cinfo.next_scanline * rowstride
-                )
-                jpeg12_write_scanlines(&cinfo, &rowpointer12, 1)
-        elif cinfo.data_precision == 16:
-            while cinfo.next_scanline < cinfo.image_height:
-                rowpointer16 = <J16SAMPROW> (
-                    <char*> src.data + cinfo.next_scanline * rowstride
-                )
-                jpeg16_write_scanlines(&cinfo, &rowpointer16, 1)
+        while cinfo.next_scanline < cinfo.image_height:
+            rowpointer8 = <JSAMPROW> (
+                <char*> src.data + cinfo.next_scanline * rowstride
+            )
+            jpeg_write_scanlines(&cinfo, &rowpointer8, 1)
 
         jpeg_finish_compress(&cinfo)
         jpeg_destroy_compress(&cinfo)
@@ -320,8 +286,6 @@
         my_error_mgr err
         jpeg_decompress_struct cinfo
         JSAMPROW rowpointer8
-        J12SAMPROW rowpointer12
-        J16SAMPROW rowpointer16
         J_COLOR_SPACE jpeg_color_space
         J_COLOR_SPACE out_color_space
         JDIMENSION width = 0
@@ -398,31 +362,16 @@
 
             # TODO: allow strides
 
-            if cinfo.data_precision <= 8:
-                out = _create_array(out, shape, numpy.uint8)
-            else:
-                out = _create_array(out, shape, numpy.uint16)
+            out = _create_array(out, shape, numpy.uint8)
             dst = out
             dstsize = dst.nbytes
             rowstride = dst.strides[0] // dst.itemsize
 
         memset(<void*> dst.data, 0, dstsize)
-        if cinfo.data_precision <= 8:
-            rowpointer8 = <JSAMPROW> dst.data
-            while cinfo.output_scanline < cinfo.output_height:
-                jpeg_read_scanlines(&cinfo, &rowpointer8, 1)
-                rowpointer8 += rowstride
-        elif cinfo.data_precision == 12:
-            rowpointer12 = <J12SAMPROW> dst.data
-            while cinfo.output_scanline < cinfo.output_height:
-                jpeg12_read_scanlines(&cinfo, &rowpointer12, 1)
-                rowpointer12 += rowstride
-        else:
-            # elif cinfo.data_precision == 16:
-            rowpointer16 = <J16SAMPROW> dst.data
-            while cinfo.output_scanline < cinfo.output_height:
-                jpeg16_read_scanlines(&cinfo, &rowpointer16, 1)
-                rowpointer16 += rowstride
+        rowpointer8 = <JSAMPROW> dst.data
+        while cinfo.output_scanline < cinfo.output_height:
+            jpeg_read_scanlines(&cinfo, &rowpointer8, 1)
+            rowpointer8 += rowstride
         jpeg_finish_decompress(&cinfo)
         jpeg_destroy_decompress(&cinfo)
 
