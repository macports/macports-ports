# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0

name                py-h2
version             3.0.1

categories-append   net www
platforms           darwin
supported_archs     noarch
license             MIT

maintainers         petr openmaintainer

description         Hyper-h2: A pure-Python HTTP/2 protocol stack
long_description    \
    Hyper-h2 is a HTTP/2 protocol stack, written entirely in Python. \
    The goal of Hyper-h2 is to be a 100% RFC 7540 compatible implementation \
    of a complete HTTP/2 protocol stack for the Python ecosystem, build on a \
    set of finite state machines. It should be usable in all programs \
    regardless of concurrency model or environment. To achieve this, Hyper-h2 \
    is entirely self-contained: it does no I/O of any kind, leaving that up \
    to a wrapper library to control. This ensures that it can seamlessly work \
    in all kinds of environments, from single-threaded code to Twisted. Its \
    secondary goals are to be fast, clear, and efficient.

homepage            http://python-hyper.org/projects/${python.rootname}/

distname            ${python.rootname}-${version}
master_sites        pypi:[string index ${python.rootname} 0]/${python.rootname}/

checksums           md5     586686662928c2851eb0f1fe99bf279d \
                    rmd160  209dbe04edb223e4408f4730cb7e0ef13a21c79e \
                    sha256  b2962f883fa392a23cbfcc4ad03c335bcc661be0cf9627657b589f0df2206e64


python.versions     27 34 35 36

if {${name} ne ${subport}} {
    depends_build-append    port:py${python.version}-setuptools

    depends_lib-append      port:py${python.version}-hpack \
                            port:py${python.version}-hyperframe


 if { ${python.version} <= 33 } {
     depends_lib-append      port:py${python.version}-enum34
    }

    livecheck.type  none
} else {
    livecheck.type  regex
    livecheck.url   https://pypi.python.org/pypi/${python.rootname}/json
    livecheck.regex "\"${python.rootname}-(\[.\\d\]+)\\${extract.suffix}\""
}
