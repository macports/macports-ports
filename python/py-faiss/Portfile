# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compilers 1.0
PortGroup           github 1.0
PortGroup           python 1.0

github.setup        facebookresearch faiss 1.5.3 v
name                py-${github.project}
revision            0

categories-append   math
license             MIT
platforms           darwin
maintainers         nomaintainer

description         A Python wrapper for ${github.project}, a library\
                    for efficient similarity search and clustering\
                    of dense vectors.

long_description    Faiss is a library for efficient similarity search\
                    and clustering of dense vectors. It contains\
                    algorithms that search in sets of vectors of any\
                    size, up to ones that possibly do not fit in\
                    RAM. It also contains supporting code for\
                    evaluation and parameter tuning. Faiss is written\
                    in C++ with complete wrappers for\
                    Python/numpy. Some of the most useful algorithms\
                    are implemented on the GPU. It is developed by\
                    Facebook AI Research.

checksums           rmd160  3b1180dc7ceadc484bb86cfe32fb5cd1c4a694b9 \
                    sha256  6962641a9183e12d394aa2f9c443593734a373d60c61fd0633edda5029d2fa78 \
                    size    2762193

python.versions     35 36 37 38
set swig_version    3

if {${name} ne ${subport}} {
    depends_build-append \
                    port:py${python.version}-setuptools \
                    port:swig${swig_version} \
                    port:swig${swig_version}-python

    depends_lib-append \
                    port:libfaiss \
                    port:py${python.version}-numpy

    post-extract {
        # fix destroot commands like `$(PYTHON) setup.py install`
        reinplace -E \
            "s|^(\[\[:space:]]+\\\$\\(PYTHON\\)\[\[:space:]]+setup\.py\[\[:space:]]+)(install)|\\1 --no-user-cfg \\2 ${destroot.destdir}|" \
            ${worksrcpath}/python/Makefile
    }

    compilers.choose    cxx
    # The Apple native llvm compiler does not support OpenMP
    compiler.blacklist  llvm-gcc-4.2
    compiler.fallback   macports-gcc-9
    compilers.setup

    use_configure   yes
    configure.env-append \
                    "PATH=$env(PATH):${python.prefix}/bin"
    configure.args-append \
                    --without-cuda \
                    --with-python=python${python.branch}
    configure.cppflags-append \
                    -I${prefix}/include/faiss \
                    -I${prefix}/include/libomp \
                    -I${python.include} \
                    -I${python.pkgd}/numpy/core/include
    configure.cflags-append \
                    -fPIC -m64 -Wall -g -O3 -msse4 -mpopcnt -fopenmp \
                    -Wno-sign-compare -std=c++11
    configure.ldflags-append \
                    -g -fPIC -fopenmp -L${prefix}/lib/libomp
    configure.cxx_stdlib \
                    libstdc++

    pre-build {
        system -W ${worksrcpath} ${build.cmd}
    }

    build.cmd       [portbuild::build_getmaketype]
    build.target    all
    build.pre_args  -C python ${build.target}
    build.env-append \
                    "PATH=$env(PATH):${python.prefix}/bin" \
                    SHAREDEXT=dylib \
                    "SHAREDFLAGS=-Wl,-F. -bundle -undefined dynamic_lookup" \
                    FAISSSHAREDFLAGS=-dynamiclib \
                    BLASCFLAGS=-DFINTEGER=int \
                    "BLASLDFLAGS=-framework Accelerate"

    destroot.cmd    ${build.cmd}
    destroot.target install
    destroot.pre_args -C python ${destroot.target}
    destroot.post_args
    destroot.env-append \
                    "PATH=$env(PATH):${python.prefix}/bin"

    post-destroot {
        set docdir ${prefix}/share/doc/${subport}
        set tutorialdir ${prefix}/share/${subport}/tutorial
        xinstall -d \
            ${destroot}${docdir} \
            ${destroot}${tutorialdir}
        xinstall -m 0644 -W ${worksrcpath} README.md LICENSE \
            ${destroot}${docdir}
        copy ${worksrcpath}/tutorial/python \
            ${destroot}${tutorialdir}
    }

    variant openblas description {Use OpenBLAS instead of Apple's Accelerate framework} {
        depends_lib-append  port:openblas
        build.env-delete    "BLASLDFLAGS=-framework Accelerate"
        build.env-append    BLASLDFLAGS=${prefix}/lib/libopenblas.dylib
    }

    default_variants +openblas

    test.run        yes
    test.dir        ${build.dir}/tests
    test.cmd        ${python.bin}
    test.pre_args   "-c 'import subprocess as sp; \
                        printout = lambda scpt: print(scpt+\":\\n\"+sp.run(\[\"${python.bin}\", scpt],stdout=sp.PIPE,stderr=sp.STDOUT).stdout.decode()); \
                        test_scripts = \[ \
                            \"test_binary_factory.py\", \
                            \"test_binary_io.py\", \
                            \"test_extra_distances.py\", \
                            \"test_factory.py\", \
                            \"test_index.py\", \
                            \"test_index_accuracy.py\", \
                            \"test_index_binary.py\", \
                            \"test_index_binary_from_float.py\", \
                            \"test_ivflib.py\", \
                            \"test_meta_index.py\", \
                            \"test_omp_threads_py.py\", \
                            \"test_oom_exception.py\", \
                            \"test_referenced_objects.py\", \
                            \"test_standalone_codec.py\"]; \
                        \[ printout(scpt) for scpt in test_scripts ];'"
    test.target
    test.env-append \
                    "PATH=$env(PATH):${python.prefix}/bin" \
                    PYTHONPATH=${worksrcpath}/build/lib

    livecheck.type  none
}
