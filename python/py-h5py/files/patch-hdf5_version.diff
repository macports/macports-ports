From 8b3cfbbd5565efc27124e5ddccc6b9d5e9b5d443 Mon Sep 17 00:00:00 2001
From: Aleksandar Jelenak <ajelenak@hdfgroup.org>
Date: Sat, 17 Dec 2022 22:19:13 -0500
Subject: [PATCH 1/3] Add new H5FD_class_value_t typedef

---
 h5py/api_types_hdf5.pxd | 126 +++++++++++++++++++++++++++++-----------
 1 file changed, 93 insertions(+), 33 deletions(-)

diff --git a/h5py/api_types_hdf5.pxd b/h5py/api_types_hdf5.pxd
index 6977f1a7b..7861f8489 100644
--- a/h5py/api_types_hdf5.pxd
+++ h5py/api_types_hdf5.pxd
@@ -235,40 +235,100 @@ cdef extern from "hdf5.h":
     H5FD_MPIO_INDEPENDENT = 0,
     H5FD_MPIO_COLLECTIVE
 
+  # File driver identifier type and values
+  IF HDF5_VERSION >= (1, 14, 0):
+    ctypedef int H5FD_class_value_t
+
+    H5FD_class_value_t H5_VFD_INVALID      # -1
+    H5FD_class_value_t H5_VFD_SEC2         # 0
+    H5FD_class_value_t H5_VFD_CORE         # 1
+    H5FD_class_value_t H5_VFD_LOG          # 2
+    H5FD_class_value_t H5_VFD_FAMILY       # 3
+    H5FD_class_value_t H5_VFD_MULTI        # 4
+    H5FD_class_value_t H5_VFD_STDIO        # 5
+    H5FD_class_value_t H5_VFD_SPLITTER     # 6
+    H5FD_class_value_t H5_VFD_MPIO         # 7
+    H5FD_class_value_t H5_VFD_DIRECT       # 8
+    H5FD_class_value_t H5_VFD_MIRROR       # 9
+    H5FD_class_value_t H5_VFD_HDFS         # 10
+    H5FD_class_value_t H5_VFD_ROS3         # 11
+    H5FD_class_value_t H5_VFD_SUBFILING    # 12
+    H5FD_class_value_t H5_VFD_IOC          # 13
+    H5FD_class_value_t H5_VFD_ONION        # 14
+
   # Class information for each file driver
-  ctypedef struct H5FD_class_t:
-    const char *name
-    haddr_t maxaddr
-    H5F_close_degree_t fc_degree
-    herr_t  (*terminate)()
-    hsize_t (*sb_size)(H5FD_t *file)
-    herr_t  (*sb_encode)(H5FD_t *file, char *name, unsigned char *p)
-    herr_t  (*sb_decode)(H5FD_t *f, const char *name, const unsigned char *p)
-    size_t  fapl_size
-    void *  (*fapl_get)(H5FD_t *file)
-    void *  (*fapl_copy)(const void *fapl)
-    herr_t  (*fapl_free)(void *fapl)
-    size_t  dxpl_size
-    void *  (*dxpl_copy)(const void *dxpl)
-    herr_t  (*dxpl_free)(void *dxpl)
-    H5FD_t *(*open)(const char *name, unsigned flags, hid_t fapl, haddr_t maxaddr)
-    herr_t  (*close)(H5FD_t *file)
-    int     (*cmp)(const H5FD_t *f1, const H5FD_t *f2)
-    herr_t  (*query)(const H5FD_t *f1, unsigned long *flags)
-    herr_t  (*get_type_map)(const H5FD_t *file, H5FD_mem_t *type_map)
-    haddr_t (*alloc)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
-    herr_t  (*free)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
-    haddr_t (*get_eoa)(const H5FD_t *file, H5FD_mem_t type)
-    herr_t  (*set_eoa)(H5FD_t *file, H5FD_mem_t type, haddr_t addr)
-    haddr_t (*get_eof)(const H5FD_t *file, H5FD_mem_t type)
-    herr_t  (*get_handle)(H5FD_t *file, hid_t fapl, void**file_handle)
-    herr_t  (*read)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, void *buffer)
-    herr_t  (*write)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, const void *buffer)
-    herr_t  (*flush)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
-    herr_t  (*truncate)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
-    herr_t  (*lock)(H5FD_t *file, hbool_t rw)
-    herr_t  (*unlock)(H5FD_t *file)
-    H5FD_mem_t fl_map[<int>H5FD_MEM_NTYPES]
+  IF HDF5_VERSION < (1, 14, 0):
+    ctypedef struct H5FD_class_t:
+      const char *name
+      haddr_t maxaddr
+      H5F_close_degree_t fc_degree
+      herr_t  (*terminate)()
+      hsize_t (*sb_size)(H5FD_t *file)
+      herr_t  (*sb_encode)(H5FD_t *file, char *name, unsigned char *p)
+      herr_t  (*sb_decode)(H5FD_t *f, const char *name, const unsigned char *p)
+      size_t  fapl_size
+      void *  (*fapl_get)(H5FD_t *file)
+      void *  (*fapl_copy)(const void *fapl)
+      herr_t  (*fapl_free)(void *fapl)
+      size_t  dxpl_size
+      void *  (*dxpl_copy)(const void *dxpl)
+      herr_t  (*dxpl_free)(void *dxpl)
+      H5FD_t *(*open)(const char *name, unsigned flags, hid_t fapl, haddr_t maxaddr)
+      herr_t  (*close)(H5FD_t *file)
+      int     (*cmp)(const H5FD_t *f1, const H5FD_t *f2)
+      herr_t  (*query)(const H5FD_t *f1, unsigned long *flags)
+      herr_t  (*get_type_map)(const H5FD_t *file, H5FD_mem_t *type_map)
+      haddr_t (*alloc)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
+      herr_t  (*free)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
+      haddr_t (*get_eoa)(const H5FD_t *file, H5FD_mem_t type)
+      herr_t  (*set_eoa)(H5FD_t *file, H5FD_mem_t type, haddr_t addr)
+      haddr_t (*get_eof)(const H5FD_t *file, H5FD_mem_t type)
+      herr_t  (*get_handle)(H5FD_t *file, hid_t fapl, void**file_handle)
+      herr_t  (*read)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, void *buffer)
+      herr_t  (*write)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, const void *buffer)
+      herr_t  (*flush)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
+      herr_t  (*truncate)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
+      herr_t  (*lock)(H5FD_t *file, hbool_t rw)
+      herr_t  (*unlock)(H5FD_t *file)
+      H5FD_mem_t fl_map[<int>H5FD_MEM_NTYPES]
+  ELSE:
+    unsigned H5FD_CLASS_VERSION  # File driver struct version
+
+    ctypedef struct H5FD_class_t:
+      unsigned version  # File driver class struct version number
+      H5FD_class_value_t value
+      const char *name
+      haddr_t maxaddr
+      H5F_close_degree_t fc_degree
+      herr_t  (*terminate)()
+      hsize_t (*sb_size)(H5FD_t *file)
+      herr_t  (*sb_encode)(H5FD_t *file, char *name, unsigned char *p)
+      herr_t  (*sb_decode)(H5FD_t *f, const char *name, const unsigned char *p)
+      size_t  fapl_size
+      void *  (*fapl_get)(H5FD_t *file)
+      void *  (*fapl_copy)(const void *fapl)
+      herr_t  (*fapl_free)(void *fapl)
+      size_t  dxpl_size
+      void *  (*dxpl_copy)(const void *dxpl)
+      herr_t  (*dxpl_free)(void *dxpl)
+      H5FD_t *(*open)(const char *name, unsigned flags, hid_t fapl, haddr_t maxaddr)
+      herr_t  (*close)(H5FD_t *file)
+      int     (*cmp)(const H5FD_t *f1, const H5FD_t *f2)
+      herr_t  (*query)(const H5FD_t *f1, unsigned long *flags)
+      herr_t  (*get_type_map)(const H5FD_t *file, H5FD_mem_t *type_map)
+      haddr_t (*alloc)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
+      herr_t  (*free)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
+      haddr_t (*get_eoa)(const H5FD_t *file, H5FD_mem_t type)
+      herr_t  (*set_eoa)(H5FD_t *file, H5FD_mem_t type, haddr_t addr)
+      haddr_t (*get_eof)(const H5FD_t *file, H5FD_mem_t type)
+      herr_t  (*get_handle)(H5FD_t *file, hid_t fapl, void**file_handle)
+      herr_t  (*read)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, void *buffer)
+      herr_t  (*write)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, const void *buffer)
+      herr_t  (*flush)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
+      herr_t  (*truncate)(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
+      herr_t  (*lock)(H5FD_t *file, hbool_t rw)
+      herr_t  (*unlock)(H5FD_t *file)
+      H5FD_mem_t fl_map[<int>H5FD_MEM_NTYPES]
 
   # The main datatype for each driver
   ctypedef struct H5FD_t:

From dbb202c14f91fd3d70735ffd6ef5737c12e88f4e Mon Sep 17 00:00:00 2001
From: Aleksandar Jelenak <ajelenak@hdfgroup.org>
Date: Sat, 17 Dec 2022 22:19:56 -0500
Subject: [PATCH 2/3] Fix wrong file driver version error

---
 h5py/h5fd.pyx | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/h5py/h5fd.pyx b/h5py/h5fd.pyx
index 04aff0773..e97460573 100644
--- a/h5py/h5fd.pyx
+++ h5py/h5fd.pyx
@@ -216,5 +216,7 @@ info.fl_map = [H5FD_MEM_SUPER,  # default
                H5FD_MEM_SUPER,  # lheap
                H5FD_MEM_SUPER   # ohdr
 	       ]
+IF HDF5_VERSION >= (1, 14, 0):
+    info.version = H5FD_CLASS_VERSION
 
 fileobj_driver = H5FDregister(&info)

From 4161053aca63a10b72e96a936a0943d48176f86c Mon Sep 17 00:00:00 2001
From: Thomas Kluyver <thomas@kluyver.me.uk>
Date: Wed, 4 Jan 2023 13:38:37 +0000
Subject: [PATCH 3/3] Add testing with HDF5 1.14.0

---
 azure-pipelines.yml | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/azure-pipelines.yml b/azure-pipelines.yml
index 12ee0de08..d44cf20b3 100644
--- a/azure-pipelines.yml
+++ azure-pipelines.yml
@@ -76,7 +76,7 @@ jobs:
       parameters:
         platform: macos_$(arch)
 
-- job: 'ubuntu1604'
+- job: 'ubuntu'
   pool:
     vmImage: ubuntu-20.04
   strategy:
@@ -103,12 +103,6 @@ jobs:
         HDF5_VERSION: 1.10.3
         HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
         H5PY_ENFORCE_COVERAGE: yes
-      py37-deps-hdf51106:
-        python.version: '3.7'
-        TOXENV: py37-test-deps
-        HDF5_VERSION: 1.10.6
-        HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
-        H5PY_ENFORCE_COVERAGE: yes
       py38-deps-hdf51107:
         python.version: '3.8'
         TOXENV: py38-test-deps
@@ -127,6 +121,12 @@ jobs:
         HDF5_VERSION: 1.12.2
         HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
         H5PY_ENFORCE_COVERAGE: yes
+      py310-deps-hdf51140:
+        python.version: '3.10'
+        TOXENV: py310-test-deps
+        HDF5_VERSION: 1.14.0
+        HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
+        H5PY_ENFORCE_COVERAGE: yes
     # do mpi tests
       py37-deps-hdf51105-mpi:
         python.version: '3.7'
@@ -200,13 +200,6 @@ jobs:
         HDF5_VSVERSION: "16-64"
         H5PY_ENFORCE_COVERAGE: yes
     # 64 bit - HDF5 1.10
-      py38-hdf5110:
-        python.version: '3.8'
-        TOXENV: py38-test-deps,py38-test-mindeps,py38-test-deps-pre
-        HDF5_VERSION: 1.10.6
-        HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
-        HDF5_VSVERSION: "16-64"
-        H5PY_ENFORCE_COVERAGE: yes
       py39-hdf5110:
         python.version: '3.9'
         TOXENV: py39-test-deps,py39-test-mindeps,py39-test-deps-pre
@@ -223,6 +216,13 @@ jobs:
         HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
         HDF5_VSVERSION: "16-64"
         H5PY_ENFORCE_COVERAGE: yes
+      py310-hdf5114:
+        python.version: '3.10'
+        TOXENV: py310-test-deps
+        HDF5_VERSION: 1.14.0
+        HDF5_DIR: $(HDF5_CACHE_DIR)/$(HDF5_VERSION)
+        HDF5_VSVERSION: "16-64"
+        H5PY_ENFORCE_COVERAGE: yes
     maxParallel: 4
 
   steps:
