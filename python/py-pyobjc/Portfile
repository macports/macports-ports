# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0
PortGroup           github 1.0
PortGroup           compiler_blacklist_versions 1.0

name                py-pyobjc
categories-append   devel
license             MIT
maintainers         openmaintainer {danchr @danchr}

# Current version is supported presently on macOS 10.9+.
# Older systems, as well as all 32-bit builds are supported
# via a fallback version. References:
# https://pyobjc.readthedocs.io/en/latest/install.html
# https://github.com/ronaldoussoren/pyobjc/issues/587
platforms           {darwin >= 9}

description         bidirectional bridge between python and Objective C
long_description    The PyObjC project aims to provide a bridge between \
                    the Python and Objective-C programming languages. The \
                    bridge is intended to be fully bidirectional, allowing \
                    the Python programmer to take full advantage of the \
                    power provided by various Objective-C based toolkits \
                    and the Objective-C programmer transparent access to \
                    Python based functionality.
homepage            https://pyobjc.readthedocs.io

if {${os.platform} eq "darwin" && ${os.major} >= 13 \
    && ${configure.build_arch} ni [list i386 ppc]} {

    github.setup    ronaldoussoren pyobjc 10.1 v
    revision        0

    checksums       rmd160  4ed3e4de68817e52920dc72bc9d2a3e667c56b80 \
                    sha256  079c59f41c75c36fbbbc9b72f49b6afdaeedbc503f6263c9c8d7542303d93c89 \
                    size    25557538

    python.versions 38 39 310 311 312

    if {${name} ne ${subport}} {
        depends_lib-append \
                    port:py${python.version}-setuptools
        depends_build-append \
                    port:py${python.version}-sphinx \
                    port:py${python.version}-sphinxcontrib-blockdiag

        patchfiles-append \
                    patch-docs-conf.py.diff \
                    patch-pyobjc-core-setup.py.diff \
                    patch-setup-no-werror.diff \
                    patch-development-support-_install_tool.py-no-setup.diff

        # use system libffi on Catalina and Big Sur until upstream merges
        # and releases Apple's changes
        # https://trac.macports.org/ticket/62475
        if {${os.major} < 19} {
            depends_lib-append \
                    port:libffi
        }

        use_xcode                  yes
        compiler.blacklist-append  {clang < 900}

        post-patch {
            reinplace \
                "s/sphinx-build /sphinx-build-${python.branch} /g" \
                ${worksrcpath}/docs/Makefile

            # see comment above
            if {${os.major} < 19} {
                # force using both our libffi _and_ its headers
                reinplace \
                    "s,/usr/include/ffi,${prefix}/include,g" \
                    ${worksrcpath}/pyobjc-core/setup.py

                reinplace \
                    "s,<ffi/ffi.h>,<ffi.h>,g" \
                    ${worksrcpath}/pyobjc-core/Modules/objc/libffi_support.h
            } else {
                # force linking against system libffi by path, so that we
                # bypass CPython's dependency on it
                reinplace \
                    "s,-lffi,${configure.sdkroot}/usr/lib/libffi.tbd,g" \
                    ${worksrcpath}/pyobjc-core/setup.py
            }
        }

        if {${configure.sdkroot} eq ""} {
            if {${os.platform} eq "darwin" && ${os.major} == 13} {
                # Fix for 10.9: use SIMD headers from 10.10 SDK
                set sdkroot "${developer_dir}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk"
            } else {
                set sdkroot "/"
            }
        } else {
            set sdkroot ${configure.sdkroot}
        }

        build.env-append    SDKROOT=${sdkroot}
        destroot.env-append SDKROOT=${sdkroot}

        python.pep517       yes

        build.cmd-prepend   ${python.bin} ${filespath}/multibuild.py ${build.jobs}
        destroot.cmd-prepend \
                        ${python.bin} ${filespath}/multiinstall.py ${workpath}
        destroot.target

        # build the documentation
        post-build {
            system -W ${worksrcpath}/docs "make -j${build.jobs} html"
        }

        post-destroot {
            xinstall -m 644 -W ${worksrcpath}/pyobjc-core HISTORIC.txt Install.txt \
                License.txt README.txt \
                ${destroot}${prefix}/share/doc/${subport}
            copy ${worksrcpath}/docs/_build/html ${destroot}${prefix}/share/doc/${subport}/html
        }
    }

} else {
    # Fallback version for old systems, advised by upstream. Please keep pegged.
    github.setup    ronaldoussoren pyobjc 6.2.2 v
    revision        0

    checksums       rmd160  7387bc8c6ec744ca2cf6328036dde9826bcb2763 \
                    sha256  0730edcdc5ca0bbc1e10983d3a7ef143ea80dfec9db8b02eb81d64e4fc18635f \
                    size    13008288
    github.tarball_from archive

    python.versions 38 39 310

    if {${name} ne ${subport}} {
        depends_lib-append \
                    port:libffi \
                    port:py${python.version}-setuptools
        depends_build \
                    port:py${python.version}-sphinx

        # The patches below suppresses cleaning on incremental builds,
        # as MacPorts handles that itself, and disables a sphinx extension
        # not in MacPorts.
        patchfiles-append \
                    patch-docs-conf.py-6.2.2.diff \
                    patch-install.py-6.2.2.diff

        post-patch {
            reinplace "s|use-system-libffi = 0|\\
                use-system-libffi = 1\\
                deployment-target = ${macosx_deployment_target}\\
                |" ${worksrcpath}/pyobjc-core/setup.cfg

            reinplace \
                "s/sphinx-build /sphinx-build-${python.branch} /g" \
                ${worksrcpath}/docs/Makefile
        }

        if {${configure.sdkroot} eq ""} {
            set sdkroot "/"
        } else {
            set sdkroot ${configure.sdkroot}
        }

        build.env-append    SDKROOT=${sdkroot}
        destroot.env-append SDKROOT=${sdkroot}

        # The pyobjc build system is vaguely horrible, so do everything
        # in the destroot target.
        build {
            system -W ${worksrcpath}/docs "make html"
        }

        # Don't pass --no-user-cfg, as the build system subclasses
        # the install command from distutils, not setuptools â€“ in fact,
        # doing so breaks the build...
        destroot.cmd "${python.bin} install.py"

        post-destroot {
            xinstall -m 644 -W ${worksrcpath}/pyobjc-core HISTORIC.txt Install.txt \
               License.txt README.txt \
               ${destroot}${prefix}/share/doc/${subport}
            copy ${worksrcpath}/docs/_build/html ${destroot}${prefix}/share/doc/${subport}/html
        }

        livecheck.type  none
    }
}

# suppress release candidates
github.livecheck.regex  (\\d+(?:\\.\\d+)*)
