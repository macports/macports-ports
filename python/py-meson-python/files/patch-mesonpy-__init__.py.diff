--- mesonpy/__init__.py.orig	2023-10-23 22:49:04
+++ mesonpy/__init__.py	2023-10-23 22:51:05
@@ -757,7 +757,7 @@
         if reconfigure:
             setup_args.insert(0, '--reconfigure')
 
-        self._run(['meson', 'setup', *setup_args])
+        self._run(['meson-@@PYVER@@', 'setup', *setup_args])
 
     @cached_property
     def _wheel_builder(self) -> _WheelBuilder:
@@ -777,7 +777,7 @@
             # environment. Using the --ninja-args option allows to
             # provide the exact same semantics for the compile arguments
             # provided by the users.
-            cmd = ['meson', 'compile']
+            cmd = ['meson-@@PYVER@@', 'compile']
             args = list(self._meson_args['compile'])
             if args:
                 cmd.append(f'--ninja-args={args!r}')
@@ -866,7 +866,7 @@
     def sdist(self, directory: Path) -> pathlib.Path:
         """Generates a sdist (source distribution) in the specified directory."""
         # generate meson dist file
-        self._run(['meson', 'dist', '--allow-dirty', '--no-tests', '--formats', 'gztar', *self._meson_args['dist']])
+        self._run(['meson-@@PYVER@@', 'dist', '--allow-dirty', '--no-tests', '--formats', 'gztar', *self._meson_args['dist']])
 
         # move meson dist file to output path
         dist_name = f'{self.name}-{self.version}'
@@ -984,7 +984,7 @@
 
     """
     required_version = _parse_version_string(version)
-    meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout
+    meson_version = subprocess.run(['meson-@@PYVER@@', '--version'], check=False, text=True, capture_output=True).stdout
     if _parse_version_string(meson_version) < required_version:
         raise ConfigError(f'Could not find meson version {version} or newer, found {meson_version}.')
 
