# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0

name                py-backports.entry-points-selectable
python.rootname     backports.entry_points_selectable
version             1.1.1
revision            0

categories-append   devel
supported_archs     noarch
license             MIT
maintainers         {reneeotten @reneeotten} openmaintainer

description         Compatibility shim providing selectable entry points for older implementations
long_description    ${description}

homepage            https://github.com/jaraco/backports.entry_points_selectable

checksums           rmd160  e1c20c6f4e7a3db72278257a2b51608a7c57b9d4 \
                    sha256  914b21a479fde881635f7af5adc7f6e38d6b274be32269070c53b698c60d5386 \
                    size    8806

python.versions     27 35 36 37 38 39 310

if {${name} ne ${subport}} {
    depends_build-append \
                    port:py${python.version}-setuptools \
                    port:py${python.version}-setuptools_scm \

    if {${python.version} < 35} {
        depends_build-append \
                    port:py${python.version}-toml
    }

    if {${python.version} < 38} {
        depends_lib-append \
                    port:py${python.version}-importlib-metadata
    }

    depends_lib-append \
                    port:py${python.version}-backports

    test.run        yes
    test.cmd        py.test-${python.branch}
    test.target
    test.env        PYTHONPATH=${worksrcpath}/build/lib

    depends_test-append \
                    port:py${python.version}-pytest

    post-destroot {
        set docdir ${prefix}/share/doc/${subport}
        xinstall -d ${destroot}${docdir}
        xinstall -m 0644 -W ${worksrcpath} README.rst CHANGES.rst \
            LICENSE ${destroot}${docdir}

        foreach f {__init__.py __init__.pyc __init__.pyo __pycache__} {
            set fp "${destroot}${python.pkgd}/backports/$f"
            if {[file exists ${fp}]} {
                file delete -force ${fp}
            }
        }
    }

    livecheck.type  none
}
