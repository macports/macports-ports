--- src/regex_impl.hh.orig	2022-10-31 06:05:58.000000000 +0800
+++ src/regex_impl.hh	2023-06-26 09:32:37.000000000 +0800
@@ -117,7 +117,9 @@
         mutable uint16_t last_step;
         Param param;
     };
+#ifndef __ppc__
     static_assert(sizeof(Instruction) == 8);
+#endif
 
     explicit operator bool() const { return not instructions.empty(); }
 
--- src/regex_impl.cc.orig	2022-10-31 06:05:58.000000000 +0800
+++ src/regex_impl.cc	2023-06-26 09:32:05.000000000 +0800
@@ -83,7 +83,9 @@
         Quantifier quantifier;
         uint16_t filler = 0;
     };
+#ifndef __ppc__
     static_assert(sizeof(Node) == 16, "");
+#endif
 
     Vector<Node, MemoryDomain::Regex> nodes;
 
