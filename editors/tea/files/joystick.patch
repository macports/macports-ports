https://github.com/psemiletov/tea-qt/issues/19
https://github.com/psemiletov/tea-qt/commit/0eb13ee013d2d0b7e58777202ac8a12985750650
s/Q_OS_MACOS/Q_OS_MAC/g
--- document.cpp.orig
+++ document.cpp
@@ -318,8 +318,10 @@
   qstring_save (recent_list_fname, recent_files.join ("\n"));
   
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
   delete joystick;
 #endif
+#endif
 }
 
 
@@ -1042,7 +1044,7 @@
   timer->setInterval (100);
 
 #if defined(Q_OS_UNIX)
-
+#ifndef Q_OS_MAC
   joystick = new CJoystick (0, this);
 
   if (joystick->initialized)
@@ -1054,7 +1056,7 @@
      }
      
 #endif     
-
+#endif
 }
 
 
@@ -2792,7 +2794,7 @@
 */
 
 #if defined(Q_OS_UNIX)
-
+#ifndef Q_OS_MAC
 bool CDox::event (QEvent *ev)
 {
 
@@ -2840,3 +2842,4 @@
      } 
 }    
 #endif
+#endif
--- document.h.orig
+++ document.h
@@ -49,8 +49,10 @@
 #endif
 
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
 #include "myjoystick.h"
 #endif
+#endif
 
 #include "logmemo.h"
 #include "tio.h"
@@ -326,8 +328,10 @@
   QString recent_list_fname;
  
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
   CJoystick *joystick;
 #endif 
+#endif
 
   QTimer *timer; 
   
@@ -336,10 +340,10 @@
   ~CDox();
 
 #if defined(Q_OS_UNIX)
-
+#ifndef Q_OS_MAC
   bool event (QEvent *ev);
   void handle_joystick_event (CJoystickAxisEvent *ev);
-
+#endif
 #endif 
   
   void reload_recent_list();
--- myjoystick.cpp.orig
+++ myjoystick.cpp
@@ -3,6 +3,7 @@
 #include "myjoystick.h"
 
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
 
 #include <QDebug>
 #include <QApplication>
@@ -91,3 +92,4 @@
 }
 
 #endif    
+#endif    
--- myjoystick.h.orig
+++ myjoystick.h
@@ -6,6 +6,7 @@
 #include <QObject>
 
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
 
 #include <iostream>
 #include <unistd.h>
@@ -70,5 +71,5 @@
 };
 
 #endif
-
+#endif //MAC
 #endif
--- rvln.cpp.orig
+++ rvln.cpp
@@ -2314,7 +2314,7 @@
 }
 
 #if defined(Q_OS_UNIX)
-
+#ifndef Q_OS_MAC
 void rvln::cb_use_joystick_stateChanged (int state)
 {
   bool b;
@@ -2332,7 +2332,7 @@
 }
 
 #endif
-
+#endif
 
 void rvln::createOptions()
 {
@@ -2587,12 +2587,13 @@
   cb_wasd->setCheckState (Qt::CheckState (settings->value ("wasd", "0").toInt()));
    
 #if defined(Q_OS_UNIX)
-   
+#ifndef Q_OS_MAC   
   cb_use_joystick = new QCheckBox (tr ("Use joystick as cursor keys"), tab_options);
   cb_use_joystick->setCheckState (Qt::CheckState (settings->value ("use_joystick", "0").toInt()));
   connect (cb_use_joystick, SIGNAL(stateChanged (int)),
            this, SLOT(cb_use_joystick_stateChanged (int)));
 #endif  
+#endif
   
 #if QT_VERSION >= 0x050000
     
@@ -2694,9 +2695,9 @@
   page_common_layout->addWidget (cb_wasd);
   
 #if defined(Q_OS_UNIX)
-
+#ifndef Q_OS_MAC
   page_common_layout->addWidget (cb_use_joystick);
-
+#endif
 #endif
 
   
@@ -8404,8 +8405,10 @@
   settings->setValue ("wasd", cb_wasd->checkState());
   
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
   settings->setValue ("use_joystick", cb_use_joystick->checkState());
 #endif  
+#endif
 
   settings->setValue ("full_path_at_window_title", cb_full_path_at_window_title->checkState());
   
--- rvln.h.orig
+++ rvln.h
@@ -696,8 +696,10 @@
 prefs window callbacks
 *************************/
 #if defined(Q_OS_UNIX)
+#ifndef Q_OS_MAC
   void cb_use_joystick_stateChanged (int state);
 #endif
+#endif
 
 //  void cmb_ui_langs_currentIndexChanged (const QString &text);
 
