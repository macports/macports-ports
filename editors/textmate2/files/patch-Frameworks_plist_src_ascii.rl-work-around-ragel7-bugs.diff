ascii.rl: Work around ragel 7 bugs

The version of ragel currently in MacPorts fails to parse the second machine
definition if it's in the same block. Additionally, once that problem is
out of the way, the 'write data' statement for the string machine fails
and aborts because there are "no machine instantiations to write".
Moving the same piece of code further down as "machine string; write
data;" seems to work, but the ragel compiler is picky as to where in the
file it can occur.

I've picked a place that seems to work fine.

Upstream-Status: Inappropriate [likely a ragel bug]
diff --git a/Frameworks/plist/src/ascii.rl b/Frameworks/plist/src/ascii.rl
index 3cc453a9..820830ed 100644
--- ./Frameworks/plist/src/ascii.rl
+++ ./Frameworks/plist/src/ascii.rl
@@ -35,9 +35,9 @@ date:     @2010-05-10 20:34:12 +0000
 	DOUBLE    = '"' (D_ESCAPE | D_ANY)* >clear_str '"';
 
 	string   := (BARE | SINGLE | DOUBLE) @matched;
+}%%
 
-	write data;
-
+%%{
 	machine comment;
 	SINGLE   = '//' [^\n]* '\n';
 	DOUBLE   = '/*' ([^*] | '*' [^/])* '*/';
@@ -46,6 +46,7 @@ date:     @2010-05-10 20:34:12 +0000
 	write data;
 
 }%%
+
 #pragma clang diagnostic pop
 
 static bool backtrack (char const*& p, char const* bt, plist::any_t& res)
@@ -60,6 +61,11 @@ static bool parse_ws (char const*& p, char const* pe)
 	return true;
 }
 
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wunused-const-variable"
+%% machine string; write data;
+#pragma clang diagnostic pop
+
 static bool parse_char (char const*& p, char const*& pe, char ch)
 {
 	return parse_ws(p, pe) && p != pe && *p == ch ? (++p, true) : false;
