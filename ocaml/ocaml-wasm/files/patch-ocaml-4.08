--- interpreter/exec/float.ml.orig	2019-08-29 17:19:41.000000000 -0600
+++ interpreter/exec/float.ml	2019-08-29 17:19:58.000000000 -0600
@@ -131,17 +131,17 @@
   let mul x y = binary x ( *.) y
   let div x y = binary x (/.) y
 
-  let sqrt  x = unary Pervasives.sqrt x
+  let sqrt  x = unary Stdlib.sqrt x
 
-  let ceil  x = unary Pervasives.ceil x
-  let floor x = unary Pervasives.floor x
+  let ceil  x = unary Stdlib.ceil x
+  let floor x = unary Stdlib.floor x
 
   let trunc x =
     let xf = to_float x in
     (* preserve the sign of zero *)
     if xf = 0.0 then x else
     (* trunc is either ceil or floor depending on which one is toward zero *)
-    let f = if xf < 0.0 then Pervasives.ceil xf else Pervasives.floor xf in
+    let f = if xf < 0.0 then Stdlib.ceil xf else Stdlib.floor xf in
     let result = of_float f in
     if is_nan result then determine_unary_nan result else result
 
@@ -150,13 +150,13 @@
     (* preserve the sign of zero *)
     if xf = 0.0 then x else
     (* nearest is either ceil or floor depending on which is nearest or even *)
-    let u = Pervasives.ceil xf in
-    let d = Pervasives.floor xf in
+    let u = Stdlib.ceil xf in
+    let d = Stdlib.floor xf in
     let um = abs_float (xf -. u) in
     let dm = abs_float (xf -. d) in
     let u_or_d =
       um < dm ||
-      um = dm && let h = u /. 2. in Pervasives.floor h = h
+      um = dm && let h = u /. 2. in Stdlib.floor h = h
     in
     let f = if u_or_d then u else d in
     let result = of_float f in
