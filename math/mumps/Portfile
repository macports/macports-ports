# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           mpi 1.0
PortGroup           linear_algebra 1.0
PortGroup           muniversal 1.0

name                mumps
version             5.1.2
revision            1
categories          math
license             CeCILL-C
platforms           darwin
maintainers         {sean @seanfarley} openmaintainer
description         MUltifrontal Massively Parallel sparse direct Solver
long_description    MUMPS: a parallel sparse direct solver

depends_lib         port:scotch port:scalapack port:metis port:parmetis

homepage            http://mumps.enseeiht.fr/
master_sites        ${homepage}

distname            MUMPS_${version}

checksums           rmd160  ca1a96752c42d603a2c4b1d28a9965d34623495a \
                    sha256  eb345cda145da9aea01b851d17e54e7eef08e16bfa148100ac1f7f046cd42ae9 \
                    size    3351215

mpi.setup           default require_fortran

if {[mpi_variant_isset]} {
    mpi.enforce_variant scalapack
    mpi.enforce_variant parmetis
} else {
    depends_lib-delete  port:scalapack
    depends_lib-delete  port:parmetis
}

linalg.setup        blas_only

patch.pre_args      -p1
patchfiles-append   patch-shared.diff patch-Makefile.inc.diff

use_parallel_build  no

pre-configure {
    if {[mpi_variant_isset]} {
        set makefile Makefile.inc.generic
    } else {
        set makefile Makefile.inc.generic.SEQ
    }
    file copy ${worksrcpath}/Make.inc/${makefile} ${worksrcpath}/Makefile.inc
}
configure.cmd       printenv
configure.pre_args
configure.universal_args
configure.post_args {>> Makefile.inc}

build.target        alllib
build.args          SHAREDFLAGS="-dynamiclib" PREFIX="${prefix}" SHAREDLIBEXT=".dylib"

configure.optflags  -O3
configure.mtune     native
configure.cflags-append -fPIC
configure.fflags-append -fPIC

configure.env-append MACPORTS_PREFIX=${prefix}
pre-configure {
    configure.env-append MACPORTS_BLAS="${linalglib}"
}

if {![variant_isset universal]} {
    if {${build_arch} eq "x86_64" || ${build_arch} eq "ppc64"} {
        set arch_flag -m64
    } else {
        set arch_flag -m32
    }
    configure.fflags-append ${arch_flag}

    # find correct scotch Fortran header
    if {[file exists ${prefix}/include/${build_arch}]} {
        configure.cppflags-prepend -I${prefix}/include/${build_arch}
    }
} else {
    # find correct scotch Fortran header
    foreach arch ${configure.universal_archs} {
        if {[file exists ${prefix}/include/${arch}]} {
            lappend merger_configure_cppflags(${arch}) -I${prefix}/include/${arch}
        }
    }
}

destroot {
  xinstall -m 644 {*}[glob ${worksrcpath}/include/*.h] ${destroot}${prefix}/include
  xinstall -m 644 {*}[glob ${worksrcpath}/lib/*.a] ${destroot}${prefix}/lib
  xinstall -m 644 {*}[glob ${worksrcpath}/lib/*.dylib] ${destroot}${prefix}/lib
  if {![mpi_variant_isset]} {
    xinstall -m 644 {*}[glob ${worksrcpath}/libseq/*.a] ${destroot}${prefix}/lib
  }
}

livecheck.url       http://mumps.enseeiht.fr/index.php?page=dwnld
livecheck.regex     {>(\d+(?:\.\d+)*)<}

test.run            yes
test.target         all
test.args-append    PREFIX="${prefix}" LPORD=../lib/libpord.a

post-test {
    if {![catch {sysctl hw.ncpu} result]} {
        set njobs $result
    } else {
        set njobs 1
    }
    set runcmd "${mpi.exec} -np ${njobs}"

    system -W ${worksrcpath}/examples "${runcmd} ./ssimpletest < input_simpletest_real"
    system -W ${worksrcpath}/examples "${runcmd} ./dsimpletest < input_simpletest_real"
    system -W ${worksrcpath}/examples "${runcmd} ./csimpletest < input_simpletest_cmplx"
    system -W ${worksrcpath}/examples "${runcmd} ./zsimpletest < input_simpletest_cmplx"
    system -W ${worksrcpath}/examples "${runcmd} ./c_example"
}
