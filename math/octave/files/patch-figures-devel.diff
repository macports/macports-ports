--- libgui/graphics/GLCanvas.cc.orig	2017-11-08 15:10:37.000000000 -0700
+++ libgui/graphics/GLCanvas.cc	2017-11-09 05:34:09.000000000 -0700
@@ -30,6 +30,9 @@
 #include "GLCanvas.h"
 #include "gl-select.h"
 
+#include <qapplication.h>
+#include <QScreen>
+
 namespace QtHandles
 {
 #if defined (HAVE_QOPENGLWIDGET)
@@ -51,6 +54,9 @@
   {
     setFocusPolicy (Qt::ClickFocus);
     setFocus ();
+
+    QScreen *screen = QApplication::screens().at(0);
+    gh_manager::screen_scale = screen->devicePixelRatio();
   }
 
   GLCanvas::~GLCanvas (void)
--- libinterp/corefcn/gl-render.cc.orig	2017-11-08 15:10:37.000000000 -0700
+++ libinterp/corefcn/gl-render.cc	2017-11-09 05:37:41.000000000 -0700
@@ -1155,7 +1155,7 @@
     glMultMatrixd (x_mat1.data ());
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
-    glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
+    glOrtho (0, roundf((1./gh_manager::screen_scale)*(float)vw[2]), roundf((1./gh_manager::screen_scale)*(float)vw[3]), 0, xZ1, xZ2);
     glMultMatrixd (x_mat2.data ());
     glMatrixMode (GL_MODELVIEW);
 
@@ -3785,7 +3785,7 @@
   {
 #if defined (HAVE_OPENGL)
 
-    glViewport (0, 0, w, h);
+    glViewport (0.0, 0.0, gh_manager::screen_scale*w, gh_manager::screen_scale*h);
 
 #else
 
@@ -3890,7 +3890,7 @@
     txt_renderer.set_font (props.get ("fontname").string_value (),
                            props.get ("fontweight").string_value (),
                            props.get ("fontangle").string_value (),
-                           props.get ("__fontsize_points__").double_value ());
+                           gh_manager::screen_scale*props.get ("__fontsize_points__").double_value ());
   }
 
   void
@@ -4078,7 +4078,7 @@
     glMatrixMode (GL_PROJECTION);
     glPushMatrix ();
     glLoadIdentity ();
-    glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
+    glOrtho (0, roundf((1./gh_manager::screen_scale)*(float)vw[2]), roundf((1./gh_manager::screen_scale)*(float)vw[3]), 0, xZ1, xZ2);
     glMatrixMode (GL_MODELVIEW);
     glPushMatrix ();
 
--- libinterp/corefcn/graphics.cc.orig	2017-11-08 15:10:37.000000000 -0700
+++ libinterp/corefcn/graphics.cc	2017-11-09 05:40:24.000000000 -0700
@@ -6500,7 +6500,7 @@
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("__fontsize_points__").double_value ());
+                         gh_manager::screen_scale*get ("__fontsize_points__").double_value ());
 }
 
 // The INTERNAL flag defines whether position or outerposition is used.
@@ -8637,7 +8637,7 @@
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("__fontsize_points__").double_value ());
+                         gh_manager::screen_scale*get ("__fontsize_points__").double_value ());
 
   txt_renderer.set_color (get_color_rgb ());
 }
@@ -9831,6 +9831,8 @@
   return parent_go.get_factory_default (type () + name);
 }
 
+float gh_manager::screen_scale = 1.0;
+
 // We use a random value for the handle to avoid issues with plots and
 // scalar values for the first argument.
 gh_manager::gh_manager (void)
--- libinterp/corefcn/graphics.in.h.orig	2017-11-08 15:10:37.000000000 -0700
+++ libinterp/corefcn/graphics.in.h	2017-11-09 05:41:16.000000000 -0700
@@ -6047,6 +6047,8 @@
 
 public:
 
+  static float screen_scale;
+
   static void create_instance (void);
 
   static bool instance_ok (void)
