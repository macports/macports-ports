From: Richard Kreckel <kreckel@ginac.de>
Date: Thu, 4 Nov 2021 10:25:23 +0000 (+0100)
Subject: Fix linking errors on some compilers.
X-Git-Url: https://www.ginac.de/CLN/cln.git//cln.git?p=cln.git;a=commitdiff_plain;h=6edafa136be9f6394fea46a3e2858fe9194974fd

Fix linking errors on some compilers.

Let's be explicit about variables with C language linkage [dcl.link]:
- 'type x;' declares and defines C++ variable 'x'.
- 'extern "C" type x;' declares 'x' (with C linkage).
- 'extern "C" { type x; }' declares and defines 'x'.
The C++ standard allows mixed declarations as long as they denote the
same entity, but some compilers (e.g. CLang) don't seem to comply.
It doesn't hurt to be explicit and use extern "C" throughout for the
affected variables.

Reported by Philip Huffman <philhuffman56@icloud.com>.
---

diff --git a/src/base/low/cl_low_div.cc b/src/base/low/cl_low_div.cc
index c170087..08a505f 100644
--- src/base/low/cl_low_div.cc
+++ src/base/low/cl_low_div.cc
@@ -10,11 +10,11 @@
 // Implementation.
 
 #ifdef NEED_VAR_divu_16_rest
-uint16 divu_16_rest;
+extern "C" { uint16 divu_16_rest; }
 #endif
 
 #ifdef NEED_FUNCTION_divu_3216_1616_
-uint16 divu_16_rest;
+extern "C" { uint16 divu_16_rest; }
 namespace cln {
 #if 1
 // Most processors have a good 32 by 32 bit division, use that.
@@ -101,11 +101,11 @@ uint32 divu_3232_3232_(uint32 x, uint32 y)
 #endif
 
 #ifdef NEED_VAR_divu_32_rest
-uint32 divu_32_rest;
+extern "C" { uint32 divu_32_rest; }
 #endif
 
 #ifdef NEED_FUNCTION_divu_6432_3232_
-uint32 divu_32_rest;
+extern "C" { uint32 divu_32_rest; }
 namespace cln {
 uint32 divu_6432_3232_(uint32 xhi, uint32 xlo, uint32 y)
 // Methode:
@@ -207,7 +207,7 @@ uint32 divu_6432_3232_(uint32 xhi, uint32 xlo, uint32 y)
 #endif
 
 #ifdef NEED_VAR_divu_64_rest
-uint64 divu_64_rest;
+extern "C" { uint64 divu_64_rest; }
 #endif
 
 #ifdef NEED_FUNCTION_divu_6464_6464_
diff --git a/src/base/low/cl_low_mul.cc b/src/base/low/cl_low_mul.cc
index 75eb3af..ab9205d 100644
--- src/base/low/cl_low_mul.cc
+++ src/base/low/cl_low_mul.cc
@@ -10,11 +10,11 @@
 // Implementation.
 
 #ifdef NEED_VAR_mulu32_high
-uint32 mulu32_high;
+extern "C" { uint32 mulu32_high; }
 #endif
 
 #ifdef NEED_FUNCTION_mulu32_
-uint32 mulu32_high;
+extern "C" { uint32 mulu32_high; }
 namespace cln {
 uint32 mulu32_ (uint32 x, uint32 y)
 {
@@ -50,11 +50,11 @@ uint64 mulu32_w (uint32 arg1, uint32 arg2)
 
 
 #ifdef NEED_VAR_mulu64_high
-uint64 mulu64_high;
+extern "C" { uint64 mulu64_high; }
 #endif
 
 #ifdef NEED_FUNCTION_mulu64_
-uint64 mulu64_high;
+extern "C" { uint64 mulu64_high; }
 namespace cln {
 extern "C" uint64 mulu64_ (uint64 x, uint64 y);
 uint64 mulu64_ (uint64 x, uint64 y)
