# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           mpi 1.0
PortGroup           github 1.0
PortGroup           linear_algebra 1.0
PortGroup           cxx11 1.1

github.setup        opencollab arpack-ng 3.7.0
name                arpack
revision            0
categories          math
license             BSD
platforms           darwin
maintainers         openmaintainer {mmoll @mamoll}
description         Package for solving large-scale eigenvalue problems
long_description    ARPACK is a collection of Fortran77 subroutines designed to \
                    solve large scale eigenvalue problems. Parallel ARPACK (PARPACK) \
                    is included if built with an MPI variant.
worksrcdir          ${name}-ng-${version}

checksums           rmd160  4f001f88614b56f51a936833c54f182d28c0f069 \
                    sha256  ba92b425d0b2859de45b19946d14f442c8ee8b7da6b11fd69c805d849827b1dd \
                    size    990032

depends_build-append \
                    port:pkgconfig

mpi.setup           require_fortran

use_autoreconf      yes
configure.args      home=${worksrcpath} --disable-mpi

# add missing arch flags to one Makefile
patchfiles-append   patch-Makefile.am.diff
if {![variant_isset universal]} {
    post-configure {
        if {${build_arch} eq "x86_64" || ${build_arch} eq "ppc64"} {
            set arch_flag -m64
        } else {
            set arch_flag -m32
        }
        reinplace \
            "s|@MACPORTS_ARCH_FLAGS@|${arch_flag}|g" \
            ${worksrcpath}/PARPACK/SRC/MPI/Makefile
    }
} else {
    post-configure {
        foreach arch ${configure.universal_archs} {
            reinplace \
                "s|@MACPORTS_ARCH_FLAGS@|[muniversal_get_arch_flag ${arch} fortran]|g" \
                ${worksrcpath}-${arch}/PARPACK/SRC/MPI/Makefile
        }
    }
}

if {![variant_isset universal]} {
    if {${build_arch} eq "x86_64" || ${build_arch} eq "ppc64"} {
        configure.fflags-append -m64
    } else {
        configure.fflags-append -m32
    }
}

# LDFLAGS needs to be cleared to avoid it having a "-arch" option, considered illegal by gfortran
# also, if it has ${prefix}/lib it will prevent +accelerate from working if atlas is present.
configure.args-append LDFLAGS=''

pre-configure {
    configure.args-append --with-blas="-L${prefix}/lib ${linalglib}"

    if {[mpi_variant_isset]} {
        configure.args-delete  --disable-mpi
        configure.args-append  --enable-mpi
        configure.args-append  F77=${mpi.f77} \
                               MPIF77=${mpi.f77}
    }
}

# Fortran compilers can not cross-compile
if {${os.arch} eq "i386"} {
    set universal_archs_supported "i386 x86_64"
} else {
    set universal_archs_supported "ppc ppc64"
}

test.run    yes
test.target check
