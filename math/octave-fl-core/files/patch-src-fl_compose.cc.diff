--- src/fl_compose.cc.orig	2020-12-19 10:40:08.000000000 -0600
+++ src/fl_compose.cc	2020-12-19 10:48:55.000000000 -0600
@@ -21,6 +21,7 @@
 #include <octave/oct.h>
 #include <octave/parse.h>
 #include <pthread.h>    
+#include <unistd.h>
 
 #define HELP \
 "-*- texinfo -*-\n\
@@ -180,7 +180,7 @@
 
 	
 	// Check if the matrices are both both sparse and set the output matrix to sparse type
-	if(args(0).is_sparse_type() && args(1).is_sparse_type())		
+	if(args(0).issparse() && args(1).issparse())		
 		sparse_res = 1;
 
 
@@ -465,7 +466,7 @@
 	float tnorm_val;	
 
 	// Initialize the result sparse matrix
-	sparseC = SparseMatrix((int)colsB, (int)rowsA, (int)(colsB*rowsA));
+	sparseC = SparseMatrix((octave_idx_type)colsB, (octave_idx_type)rowsA, (octave_idx_type)(colsB*rowsA));
 
         // Initialize the number of nonzero elements in the sparse matrix c
         int nel = 0;
@@ -621,7 +621,7 @@
 	octave_value_list testArgs;
 	testArgs(0) = 1;
 	testArgs(1) = 2;
-	feval(func,testArgs);
+	octave::feval(func,testArgs);
 	if(error_state)
 		return 0;
 	else
@@ -724,7 +724,7 @@
 	octave_value_list fargs;			
 	fargs(0) = octave_value(first);
 	fargs(1) = octave_value(second);
-	return feval(tnorm,fargs)(0).float_value();
+	return octave::feval(tnorm,fargs)(0).float_value();
 }
 
 
@@ -735,7 +735,7 @@
 	octave_value_list fargs;			
 	fargs(0) = octave_value(first);
 	fargs(1) = octave_value(second);
-	return feval(snorm,fargs)(0).float_value();
+	return octave::feval(snorm,fargs)(0).float_value();
 }
 
 
