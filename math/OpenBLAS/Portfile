# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           muniversal 1.0
PortGroup           compilers 1.0

name                OpenBLAS
categories          math science
license             BSD
maintainers         {nicos @NicosPavlov} {michaelld @michaelld} openmaintainer
description         OpenBLAS is an optimized BLAS library based on GotoBLAS2
long_description    ${description}
platforms           darwin

# Prevent precompiled binaries to let compilation optimise the library
# for the user processor
archive_sites

subport OpenBLAS-devel {}
if {[string first "-devel" $subport] > 0} {

    github.setup    xianyi OpenBLAS 5be61f4b478968ae7bfab7ca75a6e74204bb1a2d
    version         20190128
    checksums       rmd160  a6f366fdbd3887f7c1929dd9c4ea5d3bcf902c02 \
                    sha256  4631f78beca6ef3d9836e58a9ca95c40811984ea67153dfb35f6be114f221307 \
                    size    11862855
    revision        0

    name            ${github.project}-devel
    conflicts       OpenBLAS

    patchfiles      patch-libnoarch.devel.diff \
                    patch-linkLib.devel.diff

    github.livecheck.branch develop

} else {

    github.setup    xianyi OpenBLAS 0.3.5 v
    checksums       rmd160  7089b502d723602c74bac7ff42bb4de7a7157696 \
                    sha256  f4761d863a8738b2ebe4522dabaae1402d08dcba64ddfcca3c9ffbe02d795318 \
                    size    11853101
    revision        1
    conflicts       OpenBLAS-devel

    patchfiles      patch-libnoarch.release.diff \
                    patch-linkLib.release.diff 
}

compilers.choose    fc 
compilers.setup     default_fortran

variant lapack description "Add Lapack/CLapack support to the library" { }
default_variants-append +lapack

use_configure       no

pre-build {
    if {[variant_isset universal]} {
        foreach arch ${universal_archs_to_use} {
            set makeINC [open ${worksrcpath}-${arch}/Makefile.rule "w"]
            puts $makeINC "VERSION = 1"
            puts $makeINC "LIBNAMESUFFIX = "

            puts $makeINC "CC = ${configure.cc}"
            puts $makeINC "FC = ${configure.fc}"

            if {${arch} eq "x86_64" || ${arch} eq "ppc64"} {
                puts $makeINC "BINARY = 64"
            } else {
                puts $makeINC "BINARY = 32"
            }
            puts $makeINC "COMMON_OPT = -O3"
            puts $makeINC "COMMON_PROF = -pg"

            if {![variant_isset lapack]} {
                puts $makeINC "NO_LAPACK = 1"
            }
            if {![avx_compiler_isset]} {
                puts $makeINC "NO_AVX = 1"
            }
            # Disable AVX2 on OSX10.6 and older only.
            # On newer platforms AVX2 is now supported via
            # https://github.com/macports/macports-ports/pull/3486
            if { ${os.major} <= 10 } {
                puts $makeINC "NO_AVX2 = 1"
            }
            #Deactivating AVX512 instructions which do not build at this point. 
            #Keeping them in -devel subport. See https://trac.macports.org/ticket/57912
            if {[string first "-devel" $subport] < 1} {
                puts $makeINC "NO_AVX512 = 1" 
            }
            close $makeINC
        }
    } else {
        set makeINC [open ${worksrcpath}/Makefile.rule "w"]
        puts $makeINC "VERSION = 1"
        puts $makeINC "LIBNAMESUFFIX = "

        puts $makeINC "CC = ${configure.cc}"
        puts $makeINC "FC = ${configure.fc}"

        if {${build_arch} eq "x86_64" || ${build_arch} eq "ppc64"} {
            puts $makeINC "BINARY = 64"
        } else {
            puts $makeINC "BINARY = 32"
        }
        puts $makeINC "COMMON_OPT = -O3"
        puts $makeINC "COMMON_PROF = -pg"

        if {![variant_isset lapack]} {
            puts $makeINC "NO_LAPACK = 1"
        }
        if {![avx_compiler_isset]} {
            ui_msg "Warning: the chosen compiler cannot handle advanced optimisation instructions."
            ui_msg "         AVX instructions are disabled."
            puts $makeINC "NO_AVX = 1"
        }
        # Disable AVX2 on OSX10.6 (Darwin10) and older only.
        # On newer platforms AVX2 is now supported via
        # https://github.com/macports/macports-ports/pull/3486
        if { ${os.major} <= 10 } {
            puts $makeINC "NO_AVX2 = 1"
        }
        #Deactivating AVX512 instructions which do not build at this point. 
        #Keeping them in -devel subport. See https://trac.macports.org/ticket/57912
        if {[string first "-devel" $subport] < 1} {
            puts $makeINC "NO_AVX512 = 1" 
        }
        close $makeINC
    }
}
# Using system ones as default is set to bin/gcc-ar which does not
# exist, and using gcc-mp ones end up in an error about a missing
# plugin. (see ticket #38551 for example)
build.args          "AR=/usr/bin/ar RANLIB=/usr/bin/ranlib"
destroot.args       "PREFIX=${prefix}"

if {[variant_isset universal]} {
    merger-post-destroot {
        foreach arch ${universal_archs_to_use} {
            if {${arch} ne ${build_arch}} {
                # openblas.pc records the processor name, which is different for 32-bit and 64-bit architectures
                # see https://github.com/xianyi/OpenBLAS/commit/eb9b021d3890429a41823dc3d90eb0d11c0a6d6d
                delete ${destroot}-${arch}${prefix}/lib/pkgconfig/openblas.pc
            }
            move ${destroot}-${arch}${prefix}/include/cblas.h \
                ${destroot}-${arch}${prefix}/include/cblas_openblas.h
            #Correct library name
            system "install_name_tool -id \
                ${prefix}/lib/libopenblas-r1.dylib \
                ${destroot}-${arch}${prefix}/lib/libopenblas-r1.dylib"
            delete file ${destroot}-${arch}/${prefix}/lib/cmake
            if {[variant_isset lapack]} {
                #Install lapacke headers too
                set LAPACKE_DIR [exec /bin/ls ${worksrcpath}/lapack-netlib | \
                                     grep -i lapacke]
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_config.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_config.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_mangling.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_mangling.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_utils.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_utils.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke.h \
                    ${destroot}-${arch}${prefix}/include/lapacke.h
            }
        }
    }
} else {
    post-destroot {
        #Avoid conflict with Atlas
        move ${destroot}${prefix}/include/cblas.h \
            ${destroot}${prefix}/include/cblas_openblas.h
        #Correct library name
        system "install_name_tool -id \
            ${prefix}/lib/libopenblas-r1.dylib \
            ${destroot}${prefix}/lib/libopenblas-r1.dylib"
        delete file ${destroot}/${prefix}/lib/cmake
        if {[variant_isset lapack]} {
            #Install lapacke headers too
            set LAPACKE_DIR [exec /bin/ls ${worksrcpath}/lapack-netlib | \
                                 grep -i lapacke]
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_config.h \
                ${destroot}${prefix}/include/lapacke_config.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_mangling.h \
                ${destroot}${prefix}/include/lapacke_mangling.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_utils.h \
                ${destroot}${prefix}/include/lapacke_utils.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke.h \
                ${destroot}${prefix}/include/lapacke.h
        }
    }
}
