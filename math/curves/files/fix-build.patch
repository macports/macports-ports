From 0e068f53b0e120192667c25fadf663253038aae1 Mon Sep 17 00:00:00 2001
From: "Kirill A. Korinsky" <kirill@korins.ky>
Date: Sun, 19 Sep 2021 14:51:51 +0200
Subject: [PATCH] Fixed build on macOS 11

Here a fix for a few typos that prevents to build it.
---
 draw/native/src/main/resources/scala-native/HilbertWindow.c | 2 +-
 draw/native/src/main/scala/curves/draw/SDL2.scala           | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/draw/native/src/main/resources/scala-native/HilbertWindow.c b/draw/native/src/main/resources/scala-native/HilbertWindow.c
index f63bc87..e68ccfa 100644
--- a/draw/native/src/main/resources/scala-native/HilbertWindow.c
+++ b/draw/native/src/main/resources/scala-native/HilbertWindow.c
@@ -85,7 +85,7 @@ void drawGradientAndPointsInternal(int points,int order,int startFrom,int dotCol
 
 }
 
-void drawFileInternal(const char* fileName,int order,int height, int width, int color, long (*hilbertMapping)(int,int))
+void drawFile(const char* fileName,int order,int height, int width, int color, long (*hilbertMapping)(int,int))
 {
 init();
 
diff --git a/draw/native/src/main/scala/curves/draw/SDL2.scala b/draw/native/src/main/scala/curves/draw/SDL2.scala
index 0146b89..d16e5d3 100644
--- a/draw/native/src/main/scala/curves/draw/SDL2.scala
+++ b/draw/native/src/main/scala/curves/draw/SDL2.scala
@@ -26,10 +26,10 @@ def drawFile(fileName: CString, order: Int, height: Int, width: Int, color: Int,
 }
 
 def drawFile(fileName: String,order: Int, height: Int, width: Int, blackDot: Boolean, hilbertMapping: CFuncPtr2[Int,Int,Long]): Unit =  Zone { implicit z =>
-  SDL2.drawTest(toCString(fileName),order,height,width,if(blackDot) 0 else 1,hilbertMapping)
+  SDL2.drawFile(toCString(fileName),order,height,width,if(blackDot) 0 else 1,hilbertMapping)
 }
 def drawFile(fileName: String, order: Int, blackDot: Boolean): Unit =  Zone { implicit z =>
-  SDL2.drawTest(toCString(fileName),order,1 << order,1 << order,if(blackDot) 0 else 1,(points: Int,order: Int) => HilbertCurve(points,order).asLong)
+  SDL2.drawFile(toCString(fileName),order,1 << order,1 << order,if(blackDot) 0 else 1,(points: Int,order: Int) => HilbertCurve(points,order).asLong)
 }
 def draw(points: Int,order: Int,blackDot: Boolean,hashFunction: CFuncPtr1[Int,Int]): Unit = 
         SDL2.drawGradientAndPoints(points,order,0,1 << order,1 << order,if(blackDot) 0 else 1 ,hashFunction,(points: Int,order: Int) => HilbertCurve(points,order).asLong)
