diff -r 919706ae3202 GKlib/GKlibSystem.cmake
--- a/GKlib/GKlibSystem.cmake	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/GKlibSystem.cmake	Sat Dec 28 15:53:05 2013 -0600
@@ -1,8 +1,9 @@
 # Helper modules.
 include(CheckFunctionExists)
 include(CheckIncludeFile)
+include(CheckCSourceRuns)
 
 # Setup options.
 option(GDB "enable use of GDB" OFF)
 option(ASSERT "turn asserts on" OFF)
 option(ASSERT2 "additional assertions" OFF)
@@ -31,14 +32,11 @@ if(CMAKE_COMPILER_IS_GNUCC)
   set(GKlib_COPTIONS "${GKlib_COPTIONS} -std=c99 -fno-strict-aliasing")
   if(NOT MINGW)
       set(GKlib_COPTIONS "${GKlib_COPTIONS} -fPIC")
   endif(NOT MINGW)
 # GCC warnings.
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -Wall -pedantic -Wno-unused-but-set-variable -Wno-unused-variable -Wno-unknown-pragmas")
-elseif(${CMAKE_C_COMPILER_ID} MATCHES "Sun")
-# Sun insists on -xc99.
-  set(GKlib_COPTIONS "${GKlib_COPTIONS} -xc99")
+  set(GKlib_COPTIONS "${GKlib_COPTIONS} -Wall -pedantic -Wno-unused-variable -Wno-unknown-pragmas")
 endif(CMAKE_COMPILER_IS_GNUCC)
 
 # Find OpenMP if it is requested.
 if(OPENMP)
   include(FindOpenMP)
@@ -98,30 +96,25 @@ endif(HAVE_EXECINFO_H)
 check_function_exists(getline HAVE_GETLINE)
 if(HAVE_GETLINE)
   set(GKlib_COPTIONS "${GKlib_COPTIONS} -DHAVE_GETLINE")
 endif(HAVE_GETLINE)
 
+set(GKlib_TLS "")
+# Custom check for TLS.
+foreach(tls_name "__thread" "__declspec(thread)")
+  string(REPLACE ")" "_" ${tls_name} tls_variable_name)
+  check_c_source_runs("${tls_name} int x; int main() {x=0; return x;}" HAVE${tls_variable_name})
+  if(HAVE${tls_variable_name})
+    set(GKlib_TLS "${tls_name}")
+    message(STATUS "checking for ${tls_name} thread-local storage - found")
+    break()
+  else()
+    message(STATUS "checking for ${tls_name} thread-local storage - not found")
+  endif(HAVE${tls_variable_name})
+endforeach()
 
-# Custom check for TLS.
-if(MSVC)
-   set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__thread=__declspec(thread)")
-else()
-  # This if checks if that value is cached or not.
-  if("${HAVE_THREADLOCALSTORAGE}" MATCHES "^${HAVE_THREADLOCALSTORAGE}$")
-    try_compile(HAVE_THREADLOCALSTORAGE
-      ${CMAKE_BINARY_DIR}
-      ${GKLIB_PATH}/conf/check_thread_storage.c)
-    if(HAVE_THREADLOCALSTORAGE)
-      message(STATUS "checking for thread-local storage - found")
-    else()
-      message(STATUS "checking for thread-local storage - not found")
-    endif()
-  endif()
-  if(NOT HAVE_THREADLOCALSTORAGE)
-    set(GKlib_COPTIONS "${GKlib_COPTIONS} -D__thread=")
-  endif()
-endif()
+configure_file(${GKLIB_PATH}/gklib_tls.h.in include/gklib_tls.h)
 
 # Finally set the official C flags.
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GKlib_COPTIONS} ${GKlib_COPTS}")
 
 # Find GKlib sources.
diff -r 919706ae3202 GKlib/conf/check_thread_storage.c
--- a/GKlib/conf/check_thread_storage.c	Sat Dec 28 13:05:35 2013 -0600
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,5 +0,0 @@
-extern __thread int x;
-
-int main(int argc, char **argv) {
-  return 0;
-}
diff -r 919706ae3202 GKlib/error.c
--- a/GKlib/error.c	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/error.c	Sat Dec 28 15:53:05 2013 -0600
@@ -17,21 +17,21 @@ This file contains functions dealing wit
 
 
 /* These are the jmp_buf for the graceful exit in case of severe errors.
    Multiple buffers are defined to allow for recursive invokation. */
 #define MAX_JBUFS 128
-__thread int gk_cur_jbufs=-1;
-__thread jmp_buf gk_jbufs[MAX_JBUFS];
-__thread jmp_buf gk_jbuf;
+metis__thread int gk_cur_jbufs=-1;
+metis__thread jmp_buf gk_jbufs[MAX_JBUFS];
+metis__thread jmp_buf gk_jbuf;
 
 typedef void (*gksighandler_t)(int);
 
 /* These are the holders of the old singal handlers for the trapped signals */
-static __thread gksighandler_t old_SIGMEM_handler;  /* Custom signal */
-static __thread gksighandler_t old_SIGERR_handler;  /* Custom signal */
-static __thread gksighandler_t old_SIGMEM_handlers[MAX_JBUFS];  /* Custom signal */
-static __thread gksighandler_t old_SIGERR_handlers[MAX_JBUFS];  /* Custom signal */
+static metis__thread gksighandler_t old_SIGMEM_handler;  /* Custom signal */
+static metis__thread gksighandler_t old_SIGERR_handler;  /* Custom signal */
+static metis__thread gksighandler_t old_SIGMEM_handlers[MAX_JBUFS];  /* Custom signal */
+static metis__thread gksighandler_t old_SIGERR_handlers[MAX_JBUFS];  /* Custom signal */
 
 /* The following is used to control if the gk_errexit() will actually abort or not.
    There is always a single copy of this variable */
 static int gk_exit_on_error = 1;
 
@@ -176,11 +176,11 @@ char *gk_strerror(int errnum)
 {
 #if defined(WIN32) || defined(__MINGW32__)
   return strerror(errnum);
 #else 
 #ifndef SUNOS
-  static __thread char buf[1024];
+  static metis__thread char buf[1024];
 
   strerror_r(errnum, buf, 1024);
 
   buf[1023] = '\0';
   return buf;
diff -r 919706ae3202 GKlib/gk_arch.h
--- a/GKlib/gk_arch.h	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/gk_arch.h	Sat Dec 28 15:53:05 2013 -0600
@@ -11,22 +11,10 @@
 #define _GK_ARCH_H_
 
 /*************************************************************************
 * Architecture-specific differences in header files
 **************************************************************************/
-#ifdef LINUX
-#if !defined(__USE_XOPEN)
-#define __USE_XOPEN
-#endif
-#if !defined(_XOPEN_SOURCE)
-#define _XOPEN_SOURCE 600
-#endif
-#if !defined(__USE_XOPEN2K)
-#define __USE_XOPEN2K
-#endif
-#endif
-
 
 #ifdef HAVE_EXECINFO_H
 #include <execinfo.h>
 #endif
 
diff -r 919706ae3202 GKlib/gk_externs.h
--- a/GKlib/gk_externs.h	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/gk_externs.h	Sat Dec 28 15:53:05 2013 -0600
@@ -12,14 +12,19 @@
 
 
 /*************************************************************************
 * Extern variable definition. Hopefully, the __thread makes them thread-safe.
 **************************************************************************/
+
+/* include the definition of metis__thread; it is assumed that
+   gklib_tls.h will be installed 'globally' i.e. into $PREFIX */
+#include <gklib_tls.h>
+
 #ifndef _GK_ERROR_C_
 /* declared in error.c */
-extern __thread int gk_cur_jbufs;
-extern __thread jmp_buf gk_jbufs[];
-extern __thread jmp_buf gk_jbuf;
+extern metis__thread int gk_cur_jbufs;
+extern metis__thread jmp_buf gk_jbufs[];
+extern metis__thread jmp_buf gk_jbuf;
 
 #endif
 
 #endif
diff -r 919706ae3202 GKlib/gklib_tls.h.in
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/GKlib/gklib_tls.h.in	Sat Dec 28 15:53:05 2013 -0600
@@ -0,0 +1,3 @@
+#ifndef metis__thread
+#define metis__thread @GKlib_TLS@
+#endif
diff -r 919706ae3202 GKlib/memory.c
--- a/GKlib/memory.c	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/memory.c	Sat Dec 28 15:53:05 2013 -0600
@@ -14,11 +14,11 @@ can be used to define other memory alloc
 
 
 #include <GKlib.h>
 
 /* This is for the global mcore that tracks all heap allocations */
-static __thread gk_mcore_t *gkmcore = NULL;
+static metis__thread gk_mcore_t *gkmcore = NULL;
 
 
 /*************************************************************************/
 /*! Define the set of memory allocation routines for each data type */
 /**************************************************************************/
diff -r 919706ae3202 GKlib/string.c
--- a/GKlib/string.c	Sat Dec 28 13:05:35 2013 -0600
+++ b/GKlib/string.c	Sat Dec 28 15:53:05 2013 -0600
@@ -480,11 +480,11 @@ char *gk_time2str(time_t time)
     return datestr;
 }
 
 
 
-#if !defined(WIN32) && !defined(__MINGW32__)
+#if !defined(WIN32) && !defined(__MINGW32__) && defined(_XOPEN_SOURCE)
 /************************************************************************/
 /*! \brief Converts a date/time string into its equivalent time_t value
 
 This function takes date and/or time specification and converts it in
 the equivalent time_t representation. The conversion is done using the
