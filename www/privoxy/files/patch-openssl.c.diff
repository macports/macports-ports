--- ./openssl.c	2021-11-20 08:43:13.000000000 -0500
+++ ./openssl.c	2021-11-20 08:51:13.000000000 -0500
@@ -500,6 +500,9 @@
       case EVP_PKEY_DSA:
          ret = BIO_printf(bio, "\n%-" BC "s: %d bits", "DSA key size", EVP_PKEY_bits(pkey));
          break;
+      case EVP_PKEY_EC:
+         ret = BIO_printf(bio, "\n%-" BC "s: %d bits", "EC key size", EVP_PKEY_bits(pkey));
+         break;
       default:
          ret = BIO_printf(bio, "\n%-" BC "s: %d bits", "non-RSA/DSA key size", EVP_PKEY_bits(pkey));
          break;
@@ -1476,8 +1479,11 @@
 {
    int ret = 0;
    char* key_file_path;
+#ifndef USE_EVP_PKEY_EC
    BIGNUM *exp;
    RSA *rsa;
+#else  /* #ifndef USE_EVP_PKEY_EC */
+#endif
    EVP_PKEY *key;
 
    key_file_path = make_certs_path(csp->config->certificate_directory,
@@ -1496,6 +1502,7 @@
       return 0;
    }
 
+#ifndef USE_EVP_PKEY_EC
    exp = BN_new();
    rsa = RSA_new();
    key = EVP_PKEY_new();
@@ -1528,7 +1535,18 @@
       ret = -1;
       goto exit;
    }
-
+#else  /* #ifndef USE_EVP_PKEY_EC */
+   /*
+    * https://www.openssl.org/docs/manmaster/man7/EVP_PKEY-EC.html
+    */
+   key = EVP_EC_gen(EC_GROUP_NAME);
+   if (key == NULL)
+   {
+      log_ssl_errors(LOG_LEVEL_ERROR, "EC key generation error");
+      ret = -1;
+      goto exit;
+   }
+#endif
    /*
     * Exporting private key into file
     */
@@ -1544,6 +1562,7 @@
    /*
     * Freeing used variables
     */
+#ifndef USE_EVP_PKEY_EC
    if (exp)
    {
       BN_free(exp);
@@ -1552,6 +1571,8 @@
    {
       RSA_free(rsa);
    }
+#else  /* #ifndef USE_EVP_PKEY_EC */
+#endif
    if (key)
    {
       EVP_PKEY_free(key);
@@ -1856,7 +1877,7 @@
    subject_name = X509_NAME_new();
    if (!subject_name)
    {
-      log_ssl_errors(LOG_LEVEL_ERROR, "RSA key memory allocation failure");
+      log_ssl_errors(LOG_LEVEL_ERROR, "OpenSSL key memory allocation failure");
       ret = -1;
       goto exit;
    }
