worker_processes  auto;

events {
    worker_connections  64;
}

# this must be consistent with daemondo's --pidfile specification
pid @PREFIX@/var/run/nginx/nginx-adblock2privoxy.pid;

# error_log @PREFIX@/var/log/nginx/error_adblock2privoxy.log warn;
error_log off;

http {
  # access_log @PREFIX@/var/log/nginx/access_adblock2privoxy.log;
  access_log off;

  # avoid error 413 Request Entity Too Large
  # client_max_body_size 64M;
  keepalive_timeout 65;

  server {
    listen 127.0.0.1:8119;
    #ab2p css domain name (optional, should be equal to --domainCSS parameter)
    server_name localhost;

    #root = --webDir parameter value
    root @PREFIX@/etc/adblock2privoxy/css;

    # Ensure that http://localhost:8119/ is a legitimate (200 return code)
    # default page; use as iOS proxy.pac blackhole
    # Test with curl -I --proxy http://127.0.0.1:8119 http://www.foo.com/bar?q=snafoo
    location / {
        rewrite ^ /default.html break;
    }

    location ~ ^/+(ab2p(?:\.common)?\.css) {
        # ab2p.css in top-level directory
        try_files $uri $1;
    }

    location ~ ^/[^/.]+\..+/ab2p\.css$ {
        # first reverse domain names order
    rewrite ^/([^/]*?)\.([^/.]+)(?:\.([^/.]+))?(?:\.([^/.]+))?(?:\.([^/.]+))?(?:\.([^/.]+))?(?:\.([^/.]+))?(?:\.([^/.]+))?(?:\.([^/.]+))?/ab2p.css$ /$9/$8/$7/$6/$5/$4/$3/$2/$1/ab2p.css last;
    }

    location ~ (^.*/+)[^/]+/+ab2p\.css {
        # then try to get CSS for current domain
        # if it is unavailable - get CSS for parent domain
        try_files $uri $1ab2p.css;
    }
  }
}
