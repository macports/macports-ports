From cd99503803552cc82ee059017a85d3058a677232 Mon Sep 17 00:00:00 2001
From: Benjamin C Meyer <ben@meyerhome.net>
Date: Sun, 9 Mar 2014 18:01:06 -0400
Subject: [PATCH 16/23] Move FrecencyTimer to the HistoryFilterModel

This timer has nothing to do with the HistoryModel and it only
calls a function in the HistoryFilterModel so the fact that it is
in this class is confusing.
---
 src/history/history.cpp        | 18 ++++++++++++++++++
 src/history/history.h          |  5 +++++
 src/history/historymanager.cpp | 19 +------------------
 src/history/historymanager.h   |  2 --
 4 files changed, 24 insertions(+), 20 deletions(-)

diff --git src/history/history.cpp src/history/history.cpp
index 23e4119..77fc0e9 100644
--- src/history/history.cpp
+++ src/history/history.cpp
@@ -470,7 +470,25 @@ HistoryFilterModel::HistoryFilterModel(QAbstractItemModel *sourceModel, QObject
     : QAbstractProxyModel(parent)
     , m_loaded(false)
 {
+    m_frecencyTimer.setSingleShot(true);
+    connect(&m_frecencyTimer, SIGNAL(timeout()),
+            this, SLOT(refreshFrecencies()));
+
     setSourceModel(sourceModel);
+    startFrecencyTimer();
+}
+
+void HistoryFilterModel::refreshFrecencies()
+{
+    recalculateFrecencies();
+    startFrecencyTimer();
+}
+
+void HistoryFilterModel::startFrecencyTimer()
+{
+    // schedule us to recalculate the frecencies once per day, at 3:00 am (aka 03h00)
+    QDateTime tomorrow(QDate::currentDate().addDays(1), QTime(3, 00));
+    m_frecencyTimer.start(QDateTime::currentDateTime().secsTo(tomorrow)*1000);
 }
 
 int HistoryFilterModel::historyLocation(const QString &url) const
diff --git src/history/history.h src/history/history.h
index 4cef818..5c980ff 100644
--- src/history/history.h
+++ src/history/history.h
@@ -144,9 +144,14 @@ private slots:
     void sourceDataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
     void sourceRowsInserted(const QModelIndex &parent, int start, int end);
     void sourceRowsRemoved(const QModelIndex &, int, int);
+    void refreshFrecencies();
 
 private:
     void load() const;
+    void startFrecencyTimer();
+
+    QTimer m_frecencyTimer;
+    QString m_lastSavedUrl;
 
     struct HistoryData {
         int tailOffset;
diff --git src/history/historymanager.cpp src/history/historymanager.cpp
index c342294..87c0cf5 100644
--- src/history/historymanager.cpp
+++ src/history/historymanager.cpp
@@ -102,9 +102,6 @@ HistoryManager::HistoryManager(QObject *parent)
     m_expiredTimer.setSingleShot(true);
     connect(&m_expiredTimer, SIGNAL(timeout()),
             this, SLOT(checkForExpired()));
-    m_frecencyTimer.setSingleShot(true);
-    connect(&m_frecencyTimer, SIGNAL(timeout()),
-            this, SLOT(refreshFrecencies()));
     connect(this, SIGNAL(entryAdded(const HistoryEntry &)),
             m_saveTimer, SLOT(changeOccurred()));
     connect(this, SIGNAL(entryRemoved(const HistoryEntry &)),
@@ -117,7 +114,6 @@ HistoryManager::HistoryManager(QObject *parent)
 
     // QWebHistoryInterface will delete the history manager
     QWebHistoryInterface::setDefaultInterface(this);
-    startFrecencyTimer();
 }
 
 HistoryManager::~HistoryManager()
@@ -417,17 +413,4 @@ void HistoryManager::save()
             qWarning() << "History: error moving new history over old." << tempFile.errorString() << historyFile.fileName();
     }
     m_lastSavedUrl = m_history.value(0).url;
-}
-
-void HistoryManager::refreshFrecencies()
-{
-    m_historyFilterModel->recalculateFrecencies();
-    startFrecencyTimer();
-}
-
-void HistoryManager::startFrecencyTimer()
-{
-    // schedule us to recalculate the frecencies once per day, at 3:00 am (aka 03h00)
-    QDateTime tomorrow(QDate::currentDate().addDays(1), QTime(3, 00));
-    m_frecencyTimer.start(QDateTime::currentDateTime().secsTo(tomorrow)*1000);
-}
+}
\ No newline at end of file
diff --git src/history/historymanager.h src/history/historymanager.h
index 771b76e..13c0854 100644
--- src/history/historymanager.h
+++ src/history/historymanager.h
@@ -136,7 +136,6 @@ public slots:
 private slots:
     void save();
     void checkForExpired();
-    void refreshFrecencies();
 
 protected:
     void prependHistoryEntry(const HistoryEntry &item);
@@ -150,7 +149,6 @@ private:
     AutoSaver *m_saveTimer;
     int m_daysToExpire;
     QTimer m_expiredTimer;
-    QTimer m_frecencyTimer;
     QHash<QString, int> m_atomicStringHash;
     QList<HistoryEntry> m_history;
     QString m_lastSavedUrl;
-- 
2.44.0

