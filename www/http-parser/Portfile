# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   github 1.0

github.setup                nodejs http-parser 2.8.1 v
categories                  www devel
platforms                   darwin
license                     MIT
maintainers                 {gmail.com:g.litenstein @Lord-Kamina} openmaintainer

description                 http request/response parser for C.
long_description            This is a parser for HTTP messages written in C. It parses both requests and responses. \
                            The parser is designed to be used in performance HTTP applications. \
                            It does not make any syscalls nor allocations, it does not buffer data, it can be interrupted at anytime. \
                            Depending on your architecture, it only requires about 40 bytes of data per message stream (in a web server that is per connection).

checksums                   rmd160  8ebe6c4b7ea28b40c31b1ef1abbfd7a89f57f7fb \
                            sha256  6d6a66251dd4236c6e15565849777230f5bc78a92e16eb2d40cec1f7c0f5bbe3 \
                            size    50744

patchfiles                  patch-Makefile.diff

use_configure               no

universal_variant           yes

configure.cflags-append     -DHTTP_PARSER_STRICT=0

build.target                library
build.post_args-delete      VERBOSE=ON
build.env                   CC=${configure.cc} \
                            PREFIX=${prefix}

pre-build {
    if {[vercmp [macports_version] 2.5.99] >= 0} {
    build.env-append        "CFLAGS=${configure.cflags} [get_canonical_archflags cc]" \
                            "LDFLAGS=${configure.ldflags} [get_canonical_archflags ld]"
    } else {
    build.env-append        CFLAGS="${configure.cflags} [get_canonical_archflags cc]" \
                            LDFLAGS="${configure.ldflags} [get_canonical_archflags ld]"
    }
}

test.run                    yes
test.env                    {*}${build.env}

destroot.env                {*}${build.env}
