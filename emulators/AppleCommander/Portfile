# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           app 1.0
PortGroup           github 1.0
PortGroup           java 1.0

github.setup        AppleCommander AppleCommander 1-6-0 v
revision            0
set gradle_version  5.6.2

version             [string map {- .} ${github.version}]
categories          emulators
platforms           darwin
maintainers         {ryandesign @ryandesign} openmaintainer
license             GPL-2+
supported_archs     noarch

description         GUI and CLI for manipulating Apple II disk images

long_description    ${name} is a GUI and command line for manipulating \
                    Apple DOS 3.3, ProDOS, and other formats of Apple \
                    II disk images. ${name} can read and display \
                    information about disk images, export files of \
                    various types, create disk images, import files \
                    into disk images, and has a rudimentary compiler. \
                    ${name} incorporates support for cc65, an improved \
                    command-line tool, and even an Ant interface.

homepage            https://applecommander.github.io
github.tarball_from archive
set main_distfile   ${distfiles}
set gradle_distfile gradle-${gradle_version}-bin.zip
extract.only        ${main_distfile}
master_sites-append https://services.gradle.org/distributions/
distfiles-append    ${gradle_distfile}

checksums           ${main_distfile} \
                    rmd160  149ee11f2e3f616fc514ce1497973d0f5f4e3c5b \
                    sha256  246cdf31812a9034d1b8f1492d48560ef65e5a2cf13ee873522ded3980c5f627 \
                    size    2637590 \
                    ${gradle_distfile} \
                    rmd160  b1bb3127d1df4fa2abe8e7546e03f3fc5d74ef7b \
                    sha256  32fce6628848f799b0ad3205ae8db67d0d828c10ffe62b748a7c0d9f4a5d9ee0 \
                    size    93890597

proc percent_encode {str} {
    return [subst [regsub -all {[^a-zA-Z0-9/.~_-]} $str {%[format %02x [scan {&} %c]]}]]
}

set gradle_home     ${workpath}/gradle

post-extract {
    copy ${filespath}/cli.in ${workpath}/cli
    copy ${filespath}/gui.in ${workpath}/gui

    # The jar names begin with the root directory name and end with the
    # version number so remove the version number from the directory
    # name so as not to be redundant.
    move ${worksrcpath} ${build.dir}
}

set javadir         ${prefix}/share/java/applecommander
patch.dir           ${workpath}/${name}
build.dir           ${patch.dir}

patchfiles          gradle-wrapper.properties.patch

post-patch {
    reinplace -W ${workpath} "s|@JAVADIR@|${javadir}|g;s|@VERSION@|${version}|g" cli gui
    reinplace "s|@DISTPATH@|[percent_encode ${distpath}]|g" ${build.dir}/gradle/wrapper/gradle-wrapper.properties
}

use_configure       no

build.env           "GRADLE_USER_HOME=${gradle_home}"

# This uses a local copy of a specific version of gradle. Ideally we
# should use the MacPorts gradle port but this build system is currently
# incompatible with gradle 7 or later:
# https://github.com/AppleCommander/AppleCommander/issues/56
build.cmd           ./gradlew

# This builds all targets, including the Linux and Windows GUIs. Ideally
# we should build only what we install but I don't know how to instruct
# gradle to do that.
build.target        assemble

# The developer instructions show what java commands to run to start
# either the GUI or the CLI and the distribution includes a macOS icns
# file but if there is a way to tell the build system to create a
# wrapper script or application bundle I have not been able to determine
# how.
# https://github.com/AppleCommander/AppleCommander/blob/master/DEVELOPER.md#building
app.executable      ${workpath}/gui
app.icon            ${build.dir}/mac/AppleCommander.icns
app.identifier      io.github.${name}
destroot {
    # Upstream documentation suggests the program might be installed as
    # ac but there is already a system utility called ac. Homebrew
    # installs it as applecommander instead so we follow that.
    # https://github.com/AppleCommander/AppleCommander/issues/57
    xinstall ${workpath}/cli ${destroot}${prefix}/bin/applecommander
    xinstall -d ${destroot}${javadir}
    xinstall -W ${destroot.dir}/build/libs \
        ${name}-ac-${version}.jar \
        ${name}-macosx-${version}.jar \
        ${destroot}${javadir}
}
