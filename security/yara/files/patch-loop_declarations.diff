--- cli/yara.c.orig	2020-06-26 02:17:35.000000000 -0500
+++ cli/yara.c	2020-08-07 13:30:47.000000000 -0500
@@ -76,6 +76,7 @@
 
 #define MAX_QUEUED_FILES 64
 
+int i;
 
 typedef struct _MODULE_DATA
 {
@@ -297,8 +298,6 @@
 
 static void file_queue_finish()
 {
-  int i;
-
   for (i = 0; i < YR_MAX_THREADS; i++)
     semaphore_release(&used_slots);
 }
@@ -572,7 +571,7 @@
     const uint8_t* data,
     int length)
 {
-  for (int i = 0; i < length; i++)
+  for (i = 0; i < length; i++)
   {
     if (data[i] >= 32 && data[i] <= 126)
       printf("%c", data[i]);
@@ -627,7 +626,7 @@
     const uint8_t* data,
     int length)
 {
-  for (int i = 0; i < min(32, length); i++)
+  for (i = 0; i < min(32, length); i++)
     printf("%s%02X", (i == 0 ? "" : " "), data[i]);
 
   puts(length > 32 ? " ..." : "");
@@ -796,12 +795,12 @@
 
   printf("number of AC matches in top %d longest lists\n", t);
 
-  for (int i = 0; i < t; i++)
+  for (i = 0; i < t; i++)
     printf(" %3d: %d\n", i + 1, stats.top_ac_match_list_lengths[i]);
 
   printf("match list length percentiles\n");
 
-  for (int i = 100; i >= 0; i--)
+  for (i = 100; i >= 0; i--)
     printf(" %3d: %d\n", i, stats.ac_match_list_length_pctls[i]);
 }
 
@@ -822,7 +821,7 @@
 
     show = false;
 
-    for (int i = 0; !show && tags[i] != NULL; i++)
+    for (i = 0; !show && tags[i] != NULL; i++)
     {
       yr_rule_tags_foreach(rule, tag)
       {
@@ -842,7 +841,7 @@
 
     show = false;
 
-    for (int i = 0; !show && identifiers[i] != NULL; i++)
+    for (i = 0; !show && identifiers[i] != NULL; i++)
     {
       if (strcmp(identifiers[i], rule->identifier) == 0)
       {
@@ -1084,7 +1083,7 @@
 {
   int result = ERROR_SUCCESS;
 
-  for (int i = 0; ext_vars[i] != NULL; i++)
+  for (i = 0; ext_vars[i] != NULL; i++)
   {
     char* equal_sign = strchr(ext_vars[i], '=');
 
@@ -1167,7 +1166,7 @@
 
 static int load_modules_data()
 {
-  for (int i = 0; modules_data[i] != NULL; i++)
+  for (i = 0; modules_data[i] != NULL; i++)
   {
     char* equal_sign = strchr(modules_data[i], '=');
 
--- libyara/arena.c.orig	2020-06-26 02:17:35.000000000 -0500
+++ libyara/arena.c	2020-08-07 13:10:02.000000000 -0500
@@ -41,6 +41,8 @@
 #pragma pack(push)
 #pragma pack(1)
 
+int i;
+
 struct YR_ARENA_FILE_HEADER
 {
   uint8_t magic[4];
@@ -270,7 +272,7 @@
   if (arena->xrefs > 0)
     return ERROR_SUCCESS;
 
-  for (int i = 0; i < arena->num_buffers; i++)
+  for (i = 0; i < arena->num_buffers; i++)
   {
     if (arena->buffers[i].data != NULL)
       yr_free(arena->buffers[i].data);
@@ -414,7 +416,7 @@
   if (address == NULL)
     return 1;
 
-  for (int i = 0; i < arena->num_buffers; ++i)
+  for (i = 0; i < arena->num_buffers; ++i)
   {
     if ((uint8_t*) address >= arena->buffers[i].data &&
         (uint8_t*) address <  arena->buffers[i].data + arena->buffers[i].used)
@@ -563,7 +565,7 @@
 
   FAIL_ON_ERROR(yr_arena_create(hdr.num_buffers, 1048576, &new_arena))
 
-  for (int i = 0; i < hdr.num_buffers; ++i)
+  for (i = 0; i < hdr.num_buffers; ++i)
   {
     if (buffers[i].size == 0)
       continue;
@@ -639,7 +641,7 @@
   uint64_t offset = sizeof(YR_ARENA_FILE_HEADER)
       + sizeof(YR_ARENA_FILE_BUFFER) * arena->num_buffers;
 
-  for (int i = 0; i < arena->num_buffers; ++i)
+  for (i = 0; i < arena->num_buffers; ++i)
   {
     YR_ARENA_FILE_BUFFER buffer = {
       .offset = offset,
@@ -683,7 +685,7 @@
 
   // Now that all relocatable pointers are converted to references, write the
   // buffers.
-  for (int i = 0; i < arena->num_buffers; ++i)
+  for (i = 0; i < arena->num_buffers; ++i)
   {
     YR_ARENA_BUFFER* b = &arena->buffers[i];
 
--- libyara/exec.c.orig	2020-06-26 02:17:35.000000000 -0500
+++ libyara/exec.c	2020-08-07 13:12:34.000000000 -0500
@@ -1683,7 +1683,7 @@
 
   obj_ptr = yr_arena_get_ptr(obj_arena, 0, 0);
 
-  for (int i = 0; i < obj_count; i++)
+  for (i = 0; i < obj_count; i++)
     yr_object_destroy(obj_ptr[i]);
 
   yr_arena_release(obj_arena);
--- libyara/rules.c.orig	2020-06-26 02:17:35.000000000 -0500
+++ libyara/rules.c	2020-08-07 13:27:51.000000000 -0500
@@ -493,8 +493,9 @@
 
   float match_list_length_sum = 0;
   int c = 0;
+  int i;
 
-  for (int i = 0; i < stats->ac_tables_size; i++)
+  for (i = 0; i < stats->ac_tables_size; i++)
   {
     int match_list_length = 0;
 
@@ -531,7 +532,7 @@
   // sort match_list_lengths in increasing order for computing percentiles.
   qsort(match_list_lengths, c, sizeof(match_list_lengths[0]), _uint32_cmp);
 
-  for (int i = 0; i < 100; i++)
+  for (i = 0; i < 100; i++)
   {
     if (i < c)
       stats->top_ac_match_list_lengths[i] = match_list_lengths[c-i-1];
@@ -543,7 +544,7 @@
   stats->ac_match_list_length_pctls[0] = match_list_lengths[0];
   stats->ac_match_list_length_pctls[100] = match_list_lengths[c-1];
 
-  for (int i = 1; i < 100; i++)
+  for (i = 1; i < 100; i++)
     stats->ac_match_list_length_pctls[i] = match_list_lengths[(c * i) / 100];
 
   yr_free(match_list_lengths);
