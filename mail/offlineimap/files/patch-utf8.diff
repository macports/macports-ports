diff --git offlineimap/folder/Base.py offlineimap/folder/Base.py
index f871d6f..c433d7a 100644
--- offlineimap/folder/Base.py
+++ offlineimap/folder/Base.py
@@ -17,6 +17,7 @@ Copyright (C) 2002-2016 John Goerzen & contributors
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 """
 
+import email
 import os.path
 import re
 import time
@@ -26,12 +27,25 @@ from email import policy
 from email.parser import BytesParser
 from email.generator import BytesGenerator
 from email.utils import parsedate_tz, mktime_tz
+from email.charset import Charset
 
 from offlineimap import threadutil
 from offlineimap.ui import getglobalui
 from offlineimap.error import OfflineImapError
 import offlineimap.accounts
 
+# This is wrapper to workaround for:
+# - https://bugs.python.org/issue32330
+class EmailMessage(email.message.EmailMessage):
+    def set_payload(self, payload, charset=None):
+        if hasattr(payload, 'encode') and (charset is not None or self.policy.utf8):
+            if charset is None:
+                charset = Charset('utf-8')
+            elif not isinstance(charset, Charset):
+                charset = Charset(charset)
+            payload = payload.encode(charset.output_charset, 'replace')
+            charset = None
+        super().set_payload(payload, charset)
 
 class BaseFolder:
     """
@@ -49,15 +63,16 @@ class BaseFolder:
         self.messagelist = {}
         # Use the built-in email libraries
         # Establish some policies
+        default_policy = policy.default.clone(message_factory=EmailMessage)
         self.policy = {
           '7bit':
-          policy.default.clone(cte_type='7bit', utf8=False, refold_source='none'),
+          default_policy.clone(cte_type='7bit', utf8=False, refold_source='none'),
           '7bit-RFC':
-          policy.default.clone(cte_type='7bit', utf8=False, refold_source='none', linesep='\r\n'),
+          default_policy.clone(cte_type='7bit', utf8=False, refold_source='none', linesep='\r\n'),
           '8bit':
-          policy.default.clone(cte_type='8bit', utf8=True, refold_source='none'),
+          default_policy.clone(cte_type='8bit', utf8=True, refold_source='none'),
           '8bit-RFC':
-          policy.default.clone(cte_type='8bit', utf8=True, refold_source='none', linesep='\r\n'),
+          default_policy.clone(cte_type='8bit', utf8=True, refold_source='none', linesep='\r\n'),
         }
         # Parsers
         self.parser = {}
