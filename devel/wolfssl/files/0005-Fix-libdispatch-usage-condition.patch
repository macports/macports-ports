From fba8eefd87c4b9c46a7af1cf4e0ce15536ad2b38 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 31 Aug 2024 21:48:13 +0800
Subject: [PATCH 5/6] Fix libdispatch usage condition

---
 wolfcrypt/src/wc_port.c   | 113 ++++++++++++++++++++------------------
 wolfssl/wolfcrypt/types.h |  19 ++++---
 2 files changed, 72 insertions(+), 60 deletions(-)

diff --git a/wolfcrypt/src/wc_port.c b/wolfcrypt/src/wc_port.c
index 294bc415c..fd901f988 100644
--- a/wolfcrypt/src/wc_port.c
+++ b/wolfcrypt/src/wc_port.c
@@ -24,6 +24,10 @@
     #include <config.h>
 #endif
 
+#ifdef __APPLE__
+    #include <AvailabilityMacros.h>
+#endif
+
 #include <wolfssl/wolfcrypt/settings.h>
 #include <wolfssl/wolfcrypt/types.h>
 #include <wolfssl/wolfcrypt/error-crypt.h>
@@ -3814,20 +3818,25 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
     }
 
 #ifdef WOLFSSL_COND
-    #ifndef __MACH__
-    /* Generic POSIX conditional */
+    #if defined(__APPLE__) && MAC_OS_X_VERSION_MIN_REQUIRED >= 1060 \
+        && !defined(__ppc__)
+    /* Apple style dispatch semaphore */
     int wolfSSL_CondInit(COND_TYPE* cond)
     {
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_mutex_init(&cond->mutex, NULL) != 0)
+        /* dispatch_release() fails hard, with Trace/BPT trap signal, if the
+         * sem's internal count is less than the value passed in with
+         * dispatch_semaphore_create().  work around this by initing
+         * with 0, then incrementing it afterwards.
+         */
+        cond->cond = dispatch_semaphore_create(0);
+        if (cond->cond == NULL)
             return MEMORY_E;
 
-        if (pthread_cond_init(&cond->cond, NULL) != 0) {
-            /* Keep compilers happy that we are using the return code */
-            if (pthread_mutex_destroy(&cond->mutex) != 0)
-                return MEMORY_E;
+        if (wc_InitMutex(&cond->mutex) != 0) {
+            dispatch_release(cond->cond);
             return MEMORY_E;
         }
 
@@ -3836,18 +3845,17 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
 
     int wolfSSL_CondFree(COND_TYPE* cond)
     {
-        int ret = 0;
-
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_mutex_destroy(&cond->mutex) != 0)
-            ret = MEMORY_E;
+        dispatch_release(cond->cond);
+        cond->cond = NULL;
 
-        if (pthread_cond_destroy(&cond->cond) != 0)
-            ret = MEMORY_E;
+        if (wc_FreeMutex(&cond->mutex) != 0) {
+            return MEMORY_E;
+        }
 
-        return ret;
+        return 0;
     }
 
     int wolfSSL_CondStart(COND_TYPE* cond)
@@ -3855,7 +3863,7 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_mutex_lock(&cond->mutex) != 0)
+        if (wc_LockMutex(&cond->mutex) != 0)
             return BAD_MUTEX_E;
 
         return 0;
@@ -3866,8 +3874,13 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_cond_signal(&cond->cond) != 0)
-            return MEMORY_E;
+        if (wc_UnLockMutex(&cond->mutex) != 0)
+            return BAD_MUTEX_E;
+
+        dispatch_semaphore_signal(cond->cond);
+
+        if (wc_LockMutex(&cond->mutex) != 0)
+            return BAD_MUTEX_E;
 
         return 0;
     }
@@ -3877,8 +3890,13 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_cond_wait(&cond->cond, &cond->mutex) != 0)
-            return MEMORY_E;
+        if (wc_UnLockMutex(&cond->mutex) != 0)
+            return BAD_MUTEX_E;
+
+        dispatch_semaphore_wait(cond->cond, DISPATCH_TIME_FOREVER);
+
+        if (wc_LockMutex(&cond->mutex) != 0)
+            return BAD_MUTEX_E;
 
         return 0;
     }
@@ -3888,29 +3906,26 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (pthread_mutex_unlock(&cond->mutex) != 0)
+        if (wc_UnLockMutex(&cond->mutex) != 0)
             return BAD_MUTEX_E;
 
         return 0;
     }
-    #else /* __MACH__ */
-    /* Apple style dispatch semaphore */
+
+    #else /* Generic POSIX conditional */
+
     int wolfSSL_CondInit(COND_TYPE* cond)
     {
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        /* dispatch_release() fails hard, with Trace/BPT trap signal, if the
-         * sem's internal count is less than the value passed in with
-         * dispatch_semaphore_create().  work around this by initing
-         * with 0, then incrementing it afterwards.
-         */
-        cond->cond = dispatch_semaphore_create(0);
-        if (cond->cond == NULL)
+        if (pthread_mutex_init(&cond->mutex, NULL) != 0)
             return MEMORY_E;
 
-        if (wc_InitMutex(&cond->mutex) != 0) {
-            dispatch_release(cond->cond);
+        if (pthread_cond_init(&cond->cond, NULL) != 0) {
+            /* Keep compilers happy that we are using the return code */
+            if (pthread_mutex_destroy(&cond->mutex) != 0)
+                return MEMORY_E;
             return MEMORY_E;
         }
 
@@ -3919,17 +3934,18 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
 
     int wolfSSL_CondFree(COND_TYPE* cond)
     {
+        int ret = 0;
+
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        dispatch_release(cond->cond);
-        cond->cond = NULL;
+        if (pthread_mutex_destroy(&cond->mutex) != 0)
+            ret = MEMORY_E;
 
-        if (wc_FreeMutex(&cond->mutex) != 0) {
-            return MEMORY_E;
-        }
+        if (pthread_cond_destroy(&cond->cond) != 0)
+            ret = MEMORY_E;
 
-        return 0;
+        return ret;
     }
 
     int wolfSSL_CondStart(COND_TYPE* cond)
@@ -3937,7 +3953,7 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (wc_LockMutex(&cond->mutex) != 0)
+        if (pthread_mutex_lock(&cond->mutex) != 0)
             return BAD_MUTEX_E;
 
         return 0;
@@ -3948,13 +3964,8 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (wc_UnLockMutex(&cond->mutex) != 0)
-            return BAD_MUTEX_E;
-
-        dispatch_semaphore_signal(cond->cond);
-
-        if (wc_LockMutex(&cond->mutex) != 0)
-            return BAD_MUTEX_E;
+        if (pthread_cond_signal(&cond->cond) != 0)
+            return MEMORY_E;
 
         return 0;
     }
@@ -3964,13 +3975,8 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (wc_UnLockMutex(&cond->mutex) != 0)
-            return BAD_MUTEX_E;
-
-        dispatch_semaphore_wait(cond->cond, DISPATCH_TIME_FOREVER);
-
-        if (wc_LockMutex(&cond->mutex) != 0)
-            return BAD_MUTEX_E;
+        if (pthread_cond_wait(&cond->cond, &cond->mutex) != 0)
+            return MEMORY_E;
 
         return 0;
     }
@@ -3980,11 +3986,12 @@ char* mystrnstr(const char* s1, const char* s2, unsigned int n)
         if (cond == NULL)
             return BAD_FUNC_ARG;
 
-        if (wc_UnLockMutex(&cond->mutex) != 0)
+        if (pthread_mutex_unlock(&cond->mutex) != 0)
             return BAD_MUTEX_E;
 
         return 0;
     }
+
     #endif /* __MACH__ */
 #endif /* WOLFSSL_COND */
 
diff --git a/wolfssl/wolfcrypt/types.h b/wolfssl/wolfcrypt/types.h
index ac42afef4..59277612f 100644
--- a/wolfssl/wolfcrypt/types.h
+++ b/wolfssl/wolfcrypt/types.h
@@ -34,6 +34,10 @@ decouple library dependencies with standard string, memory and so on.
     #include <wolfssl/wolfcrypt/settings.h>
     #include <wolfssl/wolfcrypt/wc_port.h>
 
+    #ifdef __APPLE__
+        #include <AvailabilityMacros.h>
+    #endif
+
     #ifdef __cplusplus
         extern "C" {
     #endif
@@ -1490,18 +1494,19 @@ typedef struct w64wrapper {
         typedef size_t        THREAD_TYPE;
         #define WOLFSSL_THREAD
     #elif defined(WOLFSSL_PTHREADS)
-        #ifndef __MACH__
-            #include <pthread.h>
-            typedef struct COND_TYPE {
-                pthread_mutex_t mutex;
-                pthread_cond_t cond;
-            } COND_TYPE;
-        #else
+        #if defined(__APPLE__) && MAC_OS_X_VERSION_MIN_REQUIRED >= 1060 \
+            && !defined(__ppc__)
             #include <dispatch/dispatch.h>
             typedef struct COND_TYPE {
                 wolfSSL_Mutex mutex;
                 dispatch_semaphore_t cond;
             } COND_TYPE;
+        #else
+            #include <pthread.h>
+            typedef struct COND_TYPE {
+                pthread_mutex_t mutex;
+                pthread_cond_t cond;
+            } COND_TYPE;
         #endif
         typedef void*         THREAD_RETURN;
         typedef pthread_t     THREAD_TYPE;
-- 
2.46.0

