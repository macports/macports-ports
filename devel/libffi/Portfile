# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           github 1.0

github.setup        libffi libffi 3.3 v
revision            1
github.tarball_from releases
categories          devel
platforms           darwin
license             MIT
maintainers         nomaintainer

description         A portable foreign function interface library
long_description    The libffi library provides a portable, high level \
                    programming interface to various calling \
                    conventions. This allows a programmer to call any \
                    function specified by a call interface description \
                    at run-time.

homepage            https://www.sourceware.org/libffi/

checksums           rmd160  2cd43b66d792f1bad76df2e19a8411beacfcb8e0 \
                    sha256  72fba7922703ddfa7a028d513ac15a85c8d54c8d67f55fa5a4802885dc652056 \
                    size    1305466

patchfiles          patch-libffi-darwin-powerpc-no-go-closures.diff

# Don't use macports gcc or clang toolchains to build this due to dependency cycles
compiler.blacklist-append macports-*

# Remove once the included config.guess correctly identifies arm64
use_autoreconf      yes
autoreconf.args     -fvi

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    # Doesn't actually use C++, and having the stdlib set to libc++
    # on 10.6 causes a macports-clang compiler to be chosen.
    configure.cxx_stdlib
}

# Older versions of cctools have a history of being problematic with complex
# asm like libffi has, so opt for the integrated assembler if it's available
if {[string match *clang* ${configure.compiler}]} {
    configure.cflags-append -integrated-as
}

array set merger_host {
    ppc64 powerpc-apple-darwin
}

lappend merger_dont_diff \
    ${prefix}/include/ffi.h \
    ${prefix}/include/ffitarget.h

depends_test-append port:expect port:dejagnu
test.run            yes
test.target         check

github.livecheck.regex {(\d+(?:\.\d+)+)}
