PortSystem 1.0

name                ocaml-findlib
version             1.7.3
distname            findlib-${version}
categories          devel ml
maintainers         {@pmetzger piermont.com:perry} openmaintainer
platforms           darwin
license             MIT
description         Objective Caml library management system
long_description    The findlib library provides a scheme to manage reusable \
                    software components (packages), and includes tools that \
                    support this scheme. Packages are collections of OCaml \
                    modules for which metainformation can be stored. \
                    The packages are kept in the filesystem \
                    hierarchy, but with strict directory structure. \
                    The library contains functions to look the directory up \
                    that stores a package, to query metainformation about \
                    a package, and to retrieve dependency information \
                    about multiple packages. There is also a tool that \
                    allows the user to enter queries on the command-line. \
                    In order to simplify compilation and linkage, there \
                    are new frontends of the various OCaml compilers that \
                    can directly deal with packages.
homepage            http://projects.camlcity.org/projects/findlib.html
master_sites        http://download.camlcity.org/download/
checksums           rmd160  2b6d492fa4416b597f639c7a8a40e6f1af094d6f \
                    sha256  d196608fa23c36c2aace27d5ef124a815132a5fcea668d41fa7d6c1ca246bd8b

livecheck.type      regex
livecheck.regex     "findlib-(.*?).tar.gz"

depends_lib         port:ocaml

# see #44929
# patch modified from https://gitweb.gentoo.org/repo/gentoo.git/tree/dev-ml/findlib/files
# if labltk is updated, patchfile will have to remove labltk META file as well
patchfiles-append   patch-meta.diff
depends_lib-append  port:ocaml-camlp4

configure.args      -bindir ${prefix}/bin \
                    -mandir ${prefix}/share/man \
                    -sitelib ${prefix}/lib/ocaml/site-lib

configure.pre_args  ""

use_parallel_build  no
build.target        all opt

universal_variant   no

# `ocamlfind printconf destdir` returns nothing if the dir isn't in place
# but we know it's the same as our site-lib dir
set ocamlfind_destdir ${prefix}/lib/ocaml/site-lib/stublibs
destroot.keepdirs   ${destroot}${ocamlfind_destdir}

destroot.env-append OCAMLFIND_DESTDIR=${destroot}${prefix}/lib/ocaml/site-lib
destroot.destdir    prefix=${destroot}

post-destroot {
    xinstall -m 755 ${filespath}/camlp4find ${destroot}${prefix}/bin/camlp4find
}

post-activate {
        # Add our stublibs dir path to ld.conf
        set ldconfpath [exec ${prefix}/bin/ocamlfind printconf ldconf]
        # ld.conf should exist since ocaml is installed, but lets just be safe anyway
        if {[file exists $ldconfpath]} then {
          # make sure ld.conf doesn't already have this line, so if the user installs,
          # uninstalls, then installs again, we won't duplicate it
          set has_line 0
          set ldconf [open $ldconfpath r+]
          while {[gets $ldconf line] != -1 && !$has_line} {
            if {[string equal $line $ocamlfind_destdir]} then {
              set has_line 1
            }
          }
          if {!$has_line} {
            if {${registry.format} == "receipt_flat"} {
                ui_msg "## Adding line `${ocamlfind_destdir}' to file ${ldconfpath}"
                ui_msg "## Be sure to remove this line if you uninstall ${name}"
            }
            puts $ldconf $ocamlfind_destdir
          }
          close $ldconf
        } else {
          ui_warn "File ${ldconfpath} doesn't seem to be installed."
          ui_warn "Is ocaml installed properly?"
        }
}

pre-deactivate {
        # remove our stublibs dir path from ld.conf
        set ocamlfind_destdir [file normalize ${prefix}/lib/ocaml/site-lib/stublibs]
        set ldconfpath [exec ${prefix}/bin/ocamlfind printconf ldconf]
        set ldconfoutpath [file dirname $ldconfpath]/.[file tail $ldconfpath]~
        if {[file exists $ldconfpath]} then {
          set ldconf [open $ldconfpath r]
          set ldconfout [open $ldconfoutpath w]
          while {[gets $ldconf line] != -1} {
            if {![string equal $line $ocamlfind_destdir]} {
              puts $ldconfout $line
            }
          }
          close $ldconfout
          close $ldconf
          file rename -force $ldconfoutpath $ldconfpath
        }
}

variant toolbox description {build the toolbox wizard, requires labltk} {
        configure.args-append -with-toolbox
        depends_lib-append port:ocaml-labltk
}
