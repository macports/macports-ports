print architectures supported when -v used

--- /dev/null
+++ src/create_configure
@@ -0,0 +1,17 @@
+#!/bin/bash
+
+echo "" > ${DERIVED_FILE_DIR}/configure.h
+
+if [ -n "${IPHONEOS_DEPLOYMENT_TARGET}" ]; then
+	echo "#define DEFAULT_IPHONEOS_MIN_VERSION \"${IPHONEOS_DEPLOYMENT_TARGET}\"" >> ${DERIVED_FILE_DIR}/configure.h
+else
+  if [ -n "${MACOSX_DEPLOYMENT_TARGET}" ]; then
+	echo "#define DEFAULT_MACOSX_MIN_VERSION \"${MACOSX_DEPLOYMENT_TARGET}\"" >> ${DERIVED_FILE_DIR}/configure.h
+  fi
+fi
+
+if [ -z "${RC_SUPPORTED_ARCHS}" ]; then
+	RC_SUPPORTED_ARCHS="i386 x86_64 ppc ppc64 armv6 armv7"
+fi
+
+echo "#define ALL_SUPPORTED_ARCHS  \"${RC_SUPPORTED_ARCHS}\"" >> ${DERIVED_FILE_DIR}/configure.h
--- src/ld/LTOReader.hpp
+++ src/ld/LTOReader.hpp
@@ -734,7 +734,7 @@ extern void printLTOVersion(Options& opts);
 void printLTOVersion(Options& opts) {
 	const char* vers = lto_get_version();
 	if ( vers != NULL )
-		fprintf(stderr, "%s\n", vers);
+		fprintf(stderr, "LTO support using: %s\n", vers);
 }
 
 
--- src/ld/Options.cpp
+++ src/ld/Options.cpp
@@ -2598,6 +2598,7 @@ void Options::buildSearchPaths(int argc, const char* argv[])
 			fVerbose = true;
 			extern const char ldVersionString[];
 			fprintf(stderr, "%s", ldVersionString);
+			fprintf(stderr, "configured to support archs: %s\n", ALL_SUPPORTED_ARCHS);
 			 // if only -v specified, exit cleanly
 			 if ( argc == 2 ) {
 #if LTO_SUPPORT
-- 
2.11.0
