From c5808c27940d53e73168de9d30d4fc2aa316bffc Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Mon, 10 Jul 2023 22:54:06 +0800
Subject: [PATCH 2/7] filesystem.c++: a hack to fix overloaded set

---
 c++/src/kj/filesystem.c++ | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git c++/src/kj/filesystem.c++ c++/src/kj/filesystem.c++
index 1dff22ba..62346df4 100644
--- src/kj/filesystem.c++
+++ src/kj/filesystem.c++
@@ -1394,6 +1394,12 @@ private:
     void set(Own<const Directory>&& value) {
       node.init<DirectoryNode>(DirectoryNode { kj::mv(value) });
     }
+    void set_file(Own<const File>&& value) {
+      node.init<FileNode>(FileNode { kj::mv(value) });
+    }
+    void set_dir(Own<const Directory>&& value) {
+      node.init<DirectoryNode>(DirectoryNode { kj::mv(value) });
+    }
   };
 
   template <typename T>
@@ -1510,14 +1516,14 @@ private:
             if (mode == TransferMode::COPY) {
               auto copy = newInMemoryFile(clock);
               copy->copy(0, **file, 0, size.orDefault(kj::maxValue));
-              entry.set(kj::mv(copy));
+              entry.set_file(kj::mv(copy));
             } else {
               if (mode == TransferMode::MOVE) {
                 KJ_ASSERT(fromDirectory.tryRemove(fromPath), "couldn't move node", fromPath) {
                   return false;
                 }
               }
-              entry.set(kj::mv(*file));
+              entry.set_file(kj::mv(*file));
             }
             return true;
           } else {
@@ -1542,14 +1548,14 @@ private:
                   cpim.entries.insert(std::make_pair(nameRef, kj::mv(newEntry)));
                 }
               }
-              entry.set(kj::mv(copy));
+              entry.set_dir(kj::mv(copy));
             } else {
               if (mode == TransferMode::MOVE) {
                 KJ_ASSERT(fromDirectory.tryRemove(fromPath), "couldn't move node", fromPath) {
                   return false;
                 }
               }
-              entry.set(kj::mv(*subdir));
+              entry.set_dir(kj::mv(*subdir));
             }
             return true;
           } else {
