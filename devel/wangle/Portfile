# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim: fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           boost 1.0
PortGroup           cmake 1.1
PortGroup           compiler_blacklist_versions 1.0
PortGroup           github 1.0
PortGroup           legacysupport 1.1
PortGroup           openssl 1.0

boost.version       1.81

github.setup        facebook wangle 2023.05.15.00 v
revision            1
checksums           rmd160  b5ef4200a7b85716de20c20a9d3421a064765be2 \
                    sha256  2b12abd6c17319ec6f648bdcb4f6516e08044282aa77aad455447b3a01c2b22f \
                    size    341329

categories          devel
license             BSD
maintainers         {@barracuda156 gmail.com:vital.had} openmaintainer

description         Wangle is a framework providing a set of common \
                    client/server abstractions for building services in a \
                    consistent, modular, and composable way.
long_description    {*}${description}

github.tarball_from releases
distname            ${name}-v${version}
extract.mkdir       yes

set port_libfmt     libfmt9
cmake.module_path-append \
                    ${prefix}/lib/${port_libfmt}/cmake

# doesn't build with libressl as of 2016-09-05
depends_lib-append  port:double-conversion \
                    port:fizz \
                    port:folly \
                    port:google-glog \
                    port:libevent \
                    port:libsodium \
                    port:zlib \
                    port:${port_libfmt}

cmake.source_dir    ${worksrcpath}/${name}

if {${os.platform} eq "darwin" && ${os.major} < 15} {
    patchfiles-append patch-tcp.diff
}

# Fix error: invalid output constraint '=@ccc' in asm
compiler.blacklist-append \
                    {clang < 1200}

compiler.cxx_standard   2017
cmake.generator     Ninja

configure.args-append \
                    -DBUILD_TESTS=OFF \
                    -DBUILD_SHARED_LIBS=ON

legacysupport.newest_darwin_requires_legacy 19

if {[string match *clang* ${configure.compiler}]} {
    # Donâ€™t use libcxx with gcc.
    legacysupport.use_mp_libcxx yes
}

if {[string match *gcc* ${configure.compiler}]} {
    # ___atomic_fetch_sub_8, ___atomic_compare_exchange_8, ___atomic_store_8, ___atomic_load_8, ___atomic_fetch_add_8
    configure.ldflags-append \
                    -latomic
}
