# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0

name                google-cloud-sdk
version             397.0.0
revision            0
categories          devel python
license             Apache-2
maintainers         {breun.nl:nils @breun} openmaintainer
description         Command-line interface for Google Cloud Platform products and services
long_description    Google Cloud SDK is a set of tools for Google Cloud Platform. \
                    It contains gcloud, gsutil, and bq command-line tools, which you can \
                    use to access Compute Engine, Cloud Storage, BigQuery, and other \
                    products and services from the command-line. You can run these tools \
                    interactively or in your automated scripts.

platforms           darwin
supported_archs     i386 x86_64 arm64

if { ${configure.build_arch} eq "i386" } {
    distname        ${name}-${version}-darwin-x86
    checksums       rmd160  481220036d967aa516ebca0592ac6fc7d769baa8 \
                    sha256  278a0e00c6945516c8b28986cd97844888274dddc007d83dc10d997593f49d38 \
                    size    108640837
} elseif { ${configure.build_arch} eq "x86_64" } {
    distname        ${name}-${version}-darwin-x86_64
    checksums       rmd160  6d1c9ca42225f72004a82962ad6dfc0bb6d8db16 \
                    sha256  fa96fce1c9ab1054ba7b4b6d5aaeb2694fa951b6d8bfe262beb32bb28e7a3e46 \
                    size    106639892
} elseif { ${configure.build_arch} eq "arm64" } {
    distname        ${name}-${version}-darwin-arm
    checksums       rmd160  16e31d96d8327ad58eeb2279a31e72eff364f281 \
                    sha256  ff346c9fde207381565f70962176b1b1ceafbb288b83ab0d01166e5daf03e642 \
                    size    105205277
}

homepage            https://cloud.google.com/sdk/
master_sites        https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/

worksrcdir          ${name}

# Recommended Python version according to https://cloud.google.com/sdk/docs/install#mac
python.default_version 37

post-patch {
    # Default to the MacPorts Python binary
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/bq
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/docker-credential-gcloud
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/git-credential-gcloud.sh
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/gcloud
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/gsutil
    reinplace "s|CLOUDSDK_PYTHON=\$(order_python .*|CLOUDSDK_PYTHON=${python.bin}|" ${worksrcpath}/bin/java_dev_appserver.sh

    reinplace "s|^#!/usr/bin/env python$|#!${python.bin}|" ${worksrcpath}/bin/dev_appserver.py
    reinplace "s|^#!/usr/bin/env python$|#!${python.bin}|" ${worksrcpath}/bin/endpointscfg.py

    # Disable updater
    reinplace "s|\"disable_updater\": false|\"disable_updater\": true|" ${worksrcpath}/lib/googlecloudsdk/core/config.json
}

use_configure       no
build               {}

# MacPorts variants are not allowed to contain '-' and gcloud component names use both '-' and '_',
# so each variant adds an explicit mapping from variant name to gcloud component name.
# See https://cloud.google.com/sdk/docs/components for more info about gcloud components.
# Current list of available components is not documented by Google, but can be found via: gcloud components list
# 'gcloud', 'bq', 'gsutil' and 'core' components are installed by default, so are not offered as variants.
set variant_to_component [dict create]
variant alpha description {Add gcloud CLI Alpha Commands} { dict set variant_to_component alpha alpha }
variant anthos_auth description {Add Anthos auth} { dict set variant_to_component anthos_auth anthos-auth }
variant app_engine_go description {Add App Engine Go Extensions} { dict set variant_to_component app_engine_go app-engine-go }
variant app_engine_java description {Add gcloud app Java Extensions} { dict set variant_to_component app_engine_java app-engine-java }
variant app_engine_php description {Add gcloud app PHP Extensions} { dict set variant_to_component app_engine_php app-engine-php }
variant app_engine_python description {Add gcloud app Python Extensions} { dict set variant_to_component app_engine_python app-engine-python }
variant app_engine_python_extras description {Add gcloud app Python Extensions (Extra Libraries)} { dict set variant_to_component app_engine_python_extras app-engine-python-extras }
variant appctl description {Add Appctl} { dict set variant_to_component appctl appctl }
variant beta description {Add gcloud CLI Beta Commands } { dict set variant_to_component beta beta }
variant bigtable description {Add Cloud Bigtable Emulator} { dict set variant_to_component bigtable bigtable }
variant cbt description {Add Cloud Bigtable Command Line Tool} { dict set variant_to_component cbt cbt }
variant cloud_build_local description {Add Google Cloud Build Local Builder} { dict set variant_to_component cloud_build_local cloud-build-local }
variant cloud_datastore_emulator description {Add Cloud Datastore Emulator} { dict set variant_to_component cloud_datastore_emulator cloud-datastore-emulator }
variant cloud_firestore_emulator description {Add Cloud Firestore Emulator} { dict set variant_to_component cloud_firestore_emulator cloud-firestore-emulator }
variant cloud_run_proxy description {Add Cloud Run Proxy} { dict set variant_to_component cloud_run_proxy cloud-run-proxy }
variant cloud_sql_proxy description {Add Cloud SQL Proxy} { dict set variant_to_component cloud_sql_proxy cloud_sql_proxy }
variant config_connector description {Add config connector} { dict set variant_to_component config_connector config-connector }
variant datalab description {Add Cloud Datalab Command Line Tool} { dict set variant_to_component datalab datalab }
variant docker_credential_gcr description {Add Google Container Registry's Docker credential helper} { dict set variant_to_component docker_credential_gcr docker-credential-gcr }
variant gke_gcloud_auth_plugin description {Add GKE Google Cloud auth plugin} { dict set variant_to_component gke_gcloud_auth_plugin gke-gcloud-auth-plugin }
variant kpt description {Add kpt} { dict set variant_to_component kpt kpt }
variant kubectl description {Add kubectl} { dict set variant_to_component kubectl kubectl }
variant kubectl_oidc description {Add kubectl-oidc} { dict set variant_to_component kubectl_oidc kubectl-oidc }
variant kustomize description {Add Kustomize} { dict set variant_to_component kustomize kustomize }
variant local_extract description {Add On-Demand Scanning API extraction helper} { dict set variant_to_component local_extract local-extract }
variant minikube description {Add Minikube} { dict set variant_to_component minikube minikube }
variant nomos description {Add Nomos CLI} { dict set variant_to_component nomos nomos }
variant pkg description {Add pkg} { dict set variant_to_component pkg pkg }
variant pubsub_emulator description {Add Cloud Pub/Sub Emulator} { dict set variant_to_component pubsub_emulator pubsub-emulator }
variant skaffold description {Add Skaffold} { dict set variant_to_component skaffold skaffold }

patch {
    set install_command "CLOUDSDK_CONFIG=${worksrcpath}/.config ./install.sh \
        --usage-reporting false \
        --command-completion false \
        --path-update false \
        --quiet \
        --install-python false"

    set additional_components {}
    foreach component_variant [dict keys ${variant_to_component}] {
        if {[variant_isset ${component_variant}]} {
            lappend additional_components [dict get ${variant_to_component} ${component_variant}]
        }
    }

    if { [llength ${additional_components}] > 0 } {
        append install_command " --additional-components"
        foreach additional_component ${additional_components} {
            append install_command " " ${additional_component}
        }
    }

    system -W ${worksrcpath} ${install_command}
}

test.run    yes
test.cmd    bin/gcloud
test.target
test.args   version

destroot {
    set libexecdir ${destroot}${prefix}/libexec/${name}
    xinstall -d ${libexecdir}
    copy \
        ${worksrcpath}/.install \
        ${worksrcpath}/bin \
        ${worksrcpath}/lib \
        ${worksrcpath}/platform \
        ${libexecdir}
    foreach f { anthoscli bq docker-credential-gcloud gcloud gsutil } {
        ln -s ../libexec/${name}/bin/${f} ${destroot}${prefix}/bin/${f}
    }
    ln -s ../libexec/${name}/bin/git-credential-gcloud.sh ${destroot}${prefix}/bin/git-credential-gcloud

    if {[variant_isset bash_completion]} {
        # set completions_path ${prefix}/share/bash-completion/completions
        set completions_path ${prefix}/etc/bash_completion.d
        xinstall -d ${destroot}${completions_path}
        xinstall -m 644 ${worksrcpath}/completion.bash.inc ${destroot}${completions_path}/google-cloud-sdk
    }

    if {[variant_isset zsh_completion]} {
        set gcloud_libexec ${destroot}${prefix}/libexec/google-cloud-sdk
        xinstall -m 644 ${worksrcpath}/completion.zsh.inc ${gcloud_libexec}
    }
}

variant bash_completion {
    depends_run-append path:etc/bash_completion:bash-completion
}

variant zsh_completion description {Enable completion support for zsh} {
    notes "
        google-cloud-sdk zsh completions aren't loaded automatically.
        You must source them manually in your .zshrc:
            source '${prefix}/libexec/google-cloud-sdk/completion.zsh.inc'"
}

livecheck.url       https://cloud.google.com/sdk/docs/quickstart-macos
