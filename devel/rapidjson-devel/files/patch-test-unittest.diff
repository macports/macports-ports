diff -ur test/unittest/cursorstreamwrappertest.cpp.orig test/unittest/cursorstreamwrappertest.cpp
--- test/unittest/cursorstreamwrappertest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/cursorstreamwrappertest.cpp	2018-05-05 01:37:31.000000000 -0300
@@ -38,8 +38,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 3);
-    EXPECT_EQ(col, 0);
+    EXPECT_EQ(static_cast<long>(line), 3);
+    EXPECT_EQ(static_cast<long>(col), 0);
 }
 
 TEST(CursorStreamWrapper, MissingQuotes) {
@@ -47,8 +47,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 1);
-    EXPECT_EQ(col, 8);
+    EXPECT_EQ(static_cast<long>(line), 1);
+    EXPECT_EQ(static_cast<long>(col), 8);
 }
 
 TEST(CursorStreamWrapper, MissingColon) {
@@ -56,8 +56,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 3);
-    EXPECT_EQ(col, 0);
+    EXPECT_EQ(static_cast<long>(line), 3);
+    EXPECT_EQ(static_cast<long>(col), 0);
 }
 
 TEST(CursorStreamWrapper, MissingSecondQuotes) {
@@ -65,8 +65,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 3);
-    EXPECT_EQ(col, 1);
+    EXPECT_EQ(static_cast<long>(line), 3);
+    EXPECT_EQ(static_cast<long>(col), 1);
 }
 
 TEST(CursorStreamWrapper, MissingComma) {
@@ -74,8 +74,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 3);
-    EXPECT_EQ(col, 12);
+    EXPECT_EQ(static_cast<long>(line), 3);
+    EXPECT_EQ(static_cast<long>(col), 12);
 }
 
 TEST(CursorStreamWrapper, MissingArrayBracket) {
@@ -83,8 +83,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 4);
-    EXPECT_EQ(col, 9);
+    EXPECT_EQ(static_cast<long>(line), 4);
+    EXPECT_EQ(static_cast<long>(col), 9);
 }
 
 TEST(CursorStreamWrapper, MissingArrayComma) {
@@ -92,8 +92,8 @@
     size_t col, line;
     bool ret = testJson(json, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 4);
-    EXPECT_EQ(col, 6);
+    EXPECT_EQ(static_cast<long>(line), 4);
+    EXPECT_EQ(static_cast<long>(col), 6);
 }
 
 TEST(CursorStreamWrapper, MissingLastArrayBracket) {
@@ -101,8 +101,8 @@
     size_t col, line;
     bool ret = testJson(json8, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 4);
-    EXPECT_EQ(col, 15);
+    EXPECT_EQ(static_cast<long>(line), 4);
+    EXPECT_EQ(static_cast<long>(col), 15);
 }
 
 TEST(CursorStreamWrapper, MissingLastBracket) {
@@ -110,6 +110,6 @@
     size_t col, line;
     bool ret = testJson(json9, line, col);
     EXPECT_TRUE(ret);
-    EXPECT_EQ(line, 4);
-    EXPECT_EQ(col, 16);
+    EXPECT_EQ(static_cast<long>(line), 4);
+    EXPECT_EQ(static_cast<long>(col), 16);
 }
diff -ur test/unittest/istreamwrappertest.cpp.orig test/unittest/istreamwrappertest.cpp
--- test/unittest/istreamwrappertest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/istreamwrappertest.cpp	2018-05-05 01:36:02.000000000 -0300
@@ -35,22 +35,22 @@
     {
         StringStreamType iss;
         BasicIStreamWrapper<StringStreamType> is(iss);
-        EXPECT_EQ(0, is.Tell());
-        if (sizeof(Ch) == 1) {
+        EXPECT_EQ(0, static_cast<long>(is.Tell()));
+        if (static_cast<int>(sizeof(Ch)) == 1) {
             EXPECT_EQ(0, is.Peek4());
-            EXPECT_EQ(0, is.Tell());
+            EXPECT_EQ(0, static_cast<long>(is.Tell()));
         }
         EXPECT_EQ(0, is.Peek());
         EXPECT_EQ(0, is.Take());
-        EXPECT_EQ(0, is.Tell());
+        EXPECT_EQ(0, static_cast<long>(is.Tell()));
     }
 
     {
         Ch s[] = { 'A', 'B', 'C', '\0' };
         StringStreamType iss(s);
         BasicIStreamWrapper<StringStreamType> is(iss);
-        EXPECT_EQ(0, is.Tell());
-        if (sizeof(Ch) == 1) {
+        EXPECT_EQ(0, static_cast<long>(is.Tell()));
+        if (static_cast<int>(sizeof(Ch)) == 1) {
             EXPECT_EQ(0, is.Peek4()); // less than 4 bytes
         }
         for (int i = 0; i < 3; i++) {
@@ -59,7 +59,7 @@
             EXPECT_EQ('A' + i, is.Peek());
             EXPECT_EQ('A' + i, is.Take());
         }
-        EXPECT_EQ(3, is.Tell());
+        EXPECT_EQ(3, static_cast<long>(is.Tell()));
         EXPECT_EQ(0, is.Peek());
         EXPECT_EQ(0, is.Take());
     }
@@ -68,11 +68,11 @@
         Ch s[] = { 'A', 'B', 'C', 'D', 'E', '\0' };
         StringStreamType iss(s);
         BasicIStreamWrapper<StringStreamType> is(iss);
-        if (sizeof(Ch) == 1) {
+        if (static_cast<int>(sizeof(Ch)) == 1) {
             const Ch* c = is.Peek4();
             for (int i = 0; i < 4; i++)
                 EXPECT_EQ('A' + i, c[i]);
-            EXPECT_EQ(0, is.Tell());
+            EXPECT_EQ(0, static_cast<long>(is.Tell()));
         }
         for (int i = 0; i < 5; i++) {
             EXPECT_EQ(static_cast<size_t>(i), is.Tell());
@@ -80,7 +80,7 @@
             EXPECT_EQ('A' + i, is.Peek());
             EXPECT_EQ('A' + i, is.Take());
         }
-        EXPECT_EQ(5, is.Tell());
+        EXPECT_EQ(5, static_cast<long>(is.Tell()));
         EXPECT_EQ(0, is.Peek());
         EXPECT_EQ(0, is.Take());
     }
@@ -129,7 +129,7 @@
     Document d;
     EXPECT_TRUE(!d.ParseStream(eis).HasParseError());
     EXPECT_TRUE(d.IsObject());
-    EXPECT_EQ(5, d.MemberCount());
+    EXPECT_EQ(5, static_cast<int>(d.MemberCount()));
 }
 
 TEST(IStreamWrapper, fstream) {
@@ -140,7 +140,7 @@
     Document d;
     EXPECT_TRUE(!d.ParseStream(eis).HasParseError());
     EXPECT_TRUE(d.IsObject());
-    EXPECT_EQ(5, d.MemberCount());
+    EXPECT_EQ(5, static_cast<int>(d.MemberCount()));
 }
 
 // wifstream/wfstream only works on C++11 with codecvt_utf16
@@ -158,7 +158,7 @@
     d.ParseStream<kParseDefaultFlags, UTF16<>, WIStreamWrapper>(isw);
     EXPECT_TRUE(!d.HasParseError());
     EXPECT_TRUE(d.IsObject());
-    EXPECT_EQ(5, d.MemberCount());
+    EXPECT_EQ(5, static_cast<int>(d.MemberCount()));
 }
 
 TEST(IStreamWrapper, wfstream) {
@@ -171,7 +171,7 @@
     d.ParseStream<kParseDefaultFlags, UTF16<>, WIStreamWrapper>(isw);
     EXPECT_TRUE(!d.HasParseError());
     EXPECT_TRUE(d.IsObject());
-    EXPECT_EQ(5, d.MemberCount());
+    EXPECT_EQ(5, static_cast<int>(d.MemberCount()));
 }
 
 #endif
diff -ur test/unittest/pointertest.cpp.orig test/unittest/pointertest.cpp
--- test/unittest/pointertest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/pointertest.cpp	2018-05-05 01:30:13.000000000 -0300
@@ -153,7 +153,7 @@
         EXPECT_EQ(kPointerInvalidIndex, p.GetTokens()[0].index);
     }
 
-    if (sizeof(SizeType) == 4) {
+    if (static_cast<int>(sizeof(SizeType)) == 4) {
         // Invalid index (overflow)
         Pointer p("/4294967296");
         EXPECT_TRUE(p.IsValid());
@@ -290,7 +290,7 @@
         EXPECT_EQ(kPointerInvalidIndex, p.GetTokens()[0].index);
     }
 
-    if (sizeof(SizeType) == 4) {
+    if (static_cast<int>(sizeof(SizeType)) == 4) {
         // Invalid index (overflow)
         Pointer p("#/4294967296");
         EXPECT_TRUE(p.IsValid());
@@ -634,13 +634,13 @@
     EXPECT_TRUE(Pointer("/abc").Get(d) == 0);
     size_t unresolvedTokenIndex;
     EXPECT_TRUE(Pointer("/foo/2").Get(d, &unresolvedTokenIndex) == 0); // Out of boundary
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(Pointer("/foo/a").Get(d, &unresolvedTokenIndex) == 0); // "/foo" is an array, cannot query by "a"
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(Pointer("/foo/0/0").Get(d, &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(Pointer("/foo/0/a").Get(d, &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
 }
 
 TEST(Pointer, GetWithDefault) {
@@ -959,13 +959,13 @@
 
     size_t unresolvedTokenIndex;
     EXPECT_TRUE(GetValueByPointer(d, "/foo/2", &unresolvedTokenIndex) == 0); // Out of boundary
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(d, "/foo/a", &unresolvedTokenIndex) == 0); // "/foo" is an array, cannot query by "a"
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(d, "/foo/0/0", &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(d, "/foo/0/a", &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
 
     // const version
     const Value& v = d;
@@ -973,13 +973,13 @@
     EXPECT_EQ(&d["foo"][0], GetValueByPointer(v, "/foo/0"));
 
     EXPECT_TRUE(GetValueByPointer(v, "/foo/2", &unresolvedTokenIndex) == 0); // Out of boundary
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(v, "/foo/a", &unresolvedTokenIndex) == 0); // "/foo" is an array, cannot query by "a"
-    EXPECT_EQ(1, unresolvedTokenIndex);
+    EXPECT_EQ(1, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(v, "/foo/0/0", &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
     EXPECT_TRUE(GetValueByPointer(v, "/foo/0/a", &unresolvedTokenIndex) == 0); // "/foo/0" is an string, cannot further query
-    EXPECT_EQ(2, unresolvedTokenIndex);
+    EXPECT_EQ(2, static_cast<int>(unresolvedTokenIndex));
 
 }
 
diff -ur test/unittest/readertest.cpp.orig test/unittest/readertest.cpp
--- test/unittest/readertest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/readertest.cpp	2018-05-05 01:42:43.000000000 -0300
@@ -431,8 +431,8 @@
         Reader reader; \
         EXPECT_FALSE(reader.Parse(s, h)); \
         EXPECT_EQ(errorCode, reader.GetParseErrorCode());\
-        EXPECT_EQ(errorOffset, reader.GetErrorOffset());\
-        EXPECT_EQ(streamPos, s.Tell());\
+        EXPECT_EQ(errorOffset, static_cast<long>(reader.GetErrorOffset()));\
+        EXPECT_EQ(streamPos, static_cast<long>(s.Tell()));\
     }
 
     // Number too big to be stored in double.
@@ -617,8 +617,8 @@
     GenericReader<UTF8<> , UTF8<> > reader;\
     reader.Parse<kParseValidateEncodingFlag>(s, h);\
     EXPECT_EQ(errorCode, reader.GetParseErrorCode());\
-    EXPECT_EQ(errorOffset, reader.GetErrorOffset());\
-    EXPECT_EQ(streamPos, s.Tell());\
+    EXPECT_EQ(errorOffset, static_cast<long>(reader.GetErrorOffset()));\
+    EXPECT_EQ(streamPos, static_cast<long>(s.Tell()));\
 }
 
 #define ARRAY(...) { __VA_ARGS__ }
@@ -775,8 +775,8 @@
         GenericReader<UTF8<>, UTF8<>, CrtAllocator> reader; \
         EXPECT_FALSE(reader.Parse(s, h)); \
         EXPECT_EQ(errorCode, reader.GetParseErrorCode());\
-        EXPECT_EQ(errorOffset, reader.GetErrorOffset());\
-        EXPECT_EQ(streamPos, s.Tell());\
+        EXPECT_EQ(errorOffset, static_cast<long>(reader.GetErrorOffset()));\
+        EXPECT_EQ(streamPos, static_cast<long>(s.Tell()));\
     }
 
     // Missing a comma or ']' after an array element.
@@ -943,8 +943,8 @@
         Reader reader; \
         EXPECT_FALSE(reader.Parse(s, h)); \
         EXPECT_EQ(errorCode, reader.GetParseErrorCode());\
-        EXPECT_EQ(errorOffset, reader.GetErrorOffset());\
-        EXPECT_EQ(streamPos, s.Tell());\
+        EXPECT_EQ(errorOffset, static_cast<long>(reader.GetErrorOffset()));\
+        EXPECT_EQ(streamPos, static_cast<long>(s.Tell()));\
     }
 
 TEST(Reader, ParseDocument_Error) {
@@ -1117,8 +1117,8 @@
     reader.Parse<kParseIterativeFlag>(json, handler); \
     EXPECT_TRUE(reader.HasParseError()); \
     EXPECT_EQ(errorCode, reader.GetParseErrorCode()); \
-    EXPECT_EQ(offset, reader.GetErrorOffset()); \
-    EXPECT_EQ(streamPos, json.Tell()); \
+    EXPECT_EQ(offset, static_cast<long>(reader.GetErrorOffset())); \
+    EXPECT_EQ(streamPos, static_cast<long>(json.Tell())); \
 }
 
 TEST(Reader, IterativeParsing_ErrorHandling) {
@@ -1866,8 +1866,8 @@
         Reader reader; \
         EXPECT_FALSE(reader.Parse<kParseNanAndInfFlag>(s, h)); \
         EXPECT_EQ(errorCode, reader.GetParseErrorCode());\
-        EXPECT_EQ(errorOffset, reader.GetErrorOffset());\
-        EXPECT_EQ(streamPos, s.Tell());\
+        EXPECT_EQ(errorOffset, static_cast<long>(reader.GetErrorOffset()));\
+        EXPECT_EQ(streamPos, static_cast<long>(s.Tell()));\
     }
 
     double nan = std::numeric_limits<double>::quiet_NaN();
diff -ur test/unittest/stringbuffertest.cpp.orig test/unittest/stringbuffertest.cpp
--- test/unittest/stringbuffertest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/stringbuffertest.cpp	2018-05-05 01:44:42.000000000 -0300
@@ -41,11 +41,11 @@
 
 TEST(StringBuffer, PutN_Issue672) {
     GenericStringBuffer<UTF8<>, MemoryPoolAllocator<> > buffer;
-    EXPECT_EQ(0, buffer.GetSize());
-    EXPECT_EQ(0, buffer.GetLength());
+    EXPECT_EQ(0, static_cast<long>(buffer.GetSize()));
+    EXPECT_EQ(0, static_cast<long>(buffer.GetLength()));
     rapidjson::PutN(buffer, ' ', 1);
-    EXPECT_EQ(1, buffer.GetSize());
-    EXPECT_EQ(1, buffer.GetLength());
+    EXPECT_EQ(1, static_cast<long>(buffer.GetSize()));
+    EXPECT_EQ(1, static_cast<long>(buffer.GetLength()));
 }
 
 TEST(StringBuffer, Clear) {
@@ -81,7 +81,7 @@
     buffer.Put('E');
     buffer.Pop(3);
 
-    EXPECT_EQ(2u, buffer.GetSize());
+    EXPECT_EQ(2u, static_cast<long>(buffer.GetSize()));
     EXPECT_EQ(2u, buffer.GetLength());
     EXPECT_STREQ("AB", buffer.GetString());
 }
diff -ur test/unittest/valuetest.cpp.orig test/unittest/valuetest.cpp
--- test/unittest/valuetest.cpp.orig	2018-04-24 23:13:00.000000000 -0300
+++ test/unittest/valuetest.cpp	2018-05-05 02:20:08.000000000 -0300
@@ -24,13 +24,13 @@
 using namespace rapidjson;
 
 TEST(Value, Size) {
-    if (sizeof(SizeType) == 4) {
+    if (static_cast<int>(sizeof(SizeType)) == 4) {
 #if RAPIDJSON_48BITPOINTER_OPTIMIZATION
-        EXPECT_EQ(16, sizeof(Value));
+        EXPECT_EQ(16, static_cast<long>(sizeof(Value)));
 #elif RAPIDJSON_64BIT
-        EXPECT_EQ(24, sizeof(Value));
+        EXPECT_EQ(24, static_cast<long>(sizeof(Value)));
 #else
-        EXPECT_EQ(16, sizeof(Value));
+        EXPECT_EQ(16, static_cast<long>(sizeof(Value)));
 #endif
     }
 }
@@ -652,9 +652,9 @@
 
     // Templated functions
     EXPECT_TRUE(z.Is<double>());
-    EXPECT_EQ(56.78, z.Get<double>());
-    EXPECT_EQ(57.78, z.Set(57.78).Get<double>());
-    EXPECT_EQ(58.78, z.Set<double>(58.78).Get<double>());
+    EXPECT_DOUBLE_EQ(56.78, z.Get<double>());
+    EXPECT_DOUBLE_EQ(57.78, z.Set(57.78).Get<double>());
+    EXPECT_DOUBLE_EQ(58.78, z.Set<double>(58.78).Get<double>());
 }
 
 TEST(Value, Float) {
@@ -682,16 +682,16 @@
 
     // Issue 573
     z.SetInt(0);
-    EXPECT_EQ(0.0f, z.GetFloat());
+    EXPECT_FLOAT_EQ(0.0f, z.GetFloat());
 
     z = 56.78f;
     EXPECT_NEAR(56.78f, z.GetFloat(), 0.0f);
 
     // Templated functions
     EXPECT_TRUE(z.Is<float>());
-    EXPECT_EQ(56.78f, z.Get<float>());
-    EXPECT_EQ(57.78f, z.Set(57.78f).Get<float>());
-    EXPECT_EQ(58.78f, z.Set<float>(58.78f).Get<float>());
+    EXPECT_FLOAT_EQ(56.78f, z.Get<float>());
+    EXPECT_FLOAT_EQ(57.78f, z.Set(57.78f).Get<float>());
+    EXPECT_FLOAT_EQ(58.78f, z.Set<float>(58.78f).Get<float>());
 }
 
 TEST(Value, IsLosslessDouble) {
@@ -1135,10 +1135,10 @@
         a.PushBack(1, allocator);
 
         Value::Array a2(a); // copy constructor
-        EXPECT_EQ(1, a2.Size());
+        EXPECT_EQ(1, static_cast<int>(a2.Size()));
 
         Value::Array a3 = a;
-        EXPECT_EQ(1, a3.Size());
+        EXPECT_EQ(1, static_cast<int>(a3.Size()));
 
         Value::ConstArray y = static_cast<const Value&>(x).GetArray();
         (void)y;
@@ -1175,7 +1175,7 @@
         y.PushBack(123, allocator);
         x.PushBack(y.GetArray(), allocator);    // Implicit constructor to convert Array to GenericValue
 
-        EXPECT_EQ(1, x.Size());
+        EXPECT_EQ(1, static_cast<int>(x.Size()));
         EXPECT_EQ(123, x[0][0].GetInt());
         EXPECT_TRUE(y.IsArray());
         EXPECT_TRUE(y.Empty());
@@ -1424,7 +1424,7 @@
     for (; itr != x.MemberEnd(); ++itr) {
         size_t i = static_cast<size_t>((itr - x.MemberBegin())) + 1;
         EXPECT_STREQ(itr->name.GetString(), keys[i]);
-        EXPECT_EQ(i, itr->value[0].GetInt());
+        EXPECT_EQ(static_cast<long>(i), itr->value[0].GetInt());
     }
 
     // Erase the last
@@ -1435,7 +1435,7 @@
     for (; itr != x.MemberEnd(); ++itr) {
         size_t i = static_cast<size_t>(itr - x.MemberBegin()) + 1;
         EXPECT_STREQ(itr->name.GetString(), keys[i]);
-        EXPECT_EQ(i, itr->value[0].GetInt());
+        EXPECT_EQ(static_cast<long>(i), itr->value[0].GetInt());
     }
 
     // Erase the middle
@@ -1447,7 +1447,7 @@
         size_t i = static_cast<size_t>(itr - x.MemberBegin());
         i += (i < 4) ? 1 : 2;
         EXPECT_STREQ(itr->name.GetString(), keys[i]);
-        EXPECT_EQ(i, itr->value[0].GetInt());
+        EXPECT_EQ(static_cast<long>(i), itr->value[0].GetInt());
     }
 
     // EraseMember(ConstMemberIterator, ConstMemberIterator)
@@ -1516,10 +1516,10 @@
         o.AddMember("1", 1, allocator);
 
         Value::Object o2(o); // copy constructor
-        EXPECT_EQ(1, o2.MemberCount());
+        EXPECT_EQ(1, static_cast<int>(o2.MemberCount()));
 
         Value::Object o3 = o;
-        EXPECT_EQ(1, o3.MemberCount());
+        EXPECT_EQ(1, static_cast<int>(o3.MemberCount()));
 
         Value::ConstObject y = static_cast<const Value&>(x).GetObject();
         (void)y;
