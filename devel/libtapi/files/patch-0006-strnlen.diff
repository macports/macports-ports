--- ./clang/lib/Lex/HeaderMap.cpp.orig	2020-01-18 11:46:01.000000000 -0800
+++ ./clang/lib/Lex/HeaderMap.cpp	2020-01-18 11:47:07.000000000 -0800
@@ -26,6 +26,20 @@
 #include <memory>
 using namespace clang;
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 /// HashHMapKey - This is the 'well known' hash function required by the file
 /// format, used to look up keys in the hash table.  The hash table uses simple
 /// linear probing based on this function.
--- llvm/tools/obj2yaml/macho2yaml.cpp.orig	2020-01-18 18:33:48.000000000 -0800
+++ llvm/tools/obj2yaml/macho2yaml.cpp	2020-01-18 18:34:12.000000000 -0800
@@ -17,6 +17,21 @@
 
 #include <string.h> // for memcpy
 
+
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 using namespace llvm;
 
 class MachODumper {
--- llvm/lib/ObjectYAML/MachOYAML.cpp.orig	2020-01-18 16:28:13.000000000 -0800
+++ llvm/lib/ObjectYAML/MachOYAML.cpp	2020-01-18 16:29:55.000000000 -0800
@@ -22,6 +22,20 @@
 #include <cstdint>
 #include <cstring>
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 MachOYAML::LoadCommand::~LoadCommand() = default;
--- llvm/tools/llvm-readobj/ObjDumper.cpp.orig	2020-01-18 18:29:32.000000000 -0800
+++ llvm/tools/llvm-readobj/ObjDumper.cpp	2020-01-18 18:29:58.000000000 -0800
@@ -20,6 +20,20 @@
 #include "llvm/Support/ScopedPrinter.h"
 #include "llvm/Support/raw_ostream.h"
 
+#ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 ObjDumper::ObjDumper(ScopedPrinter &Writer) : W(Writer) {}
