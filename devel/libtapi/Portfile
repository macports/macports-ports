# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               cmake 1.1
PortGroup               compiler_blacklist_versions 1.0
PortGroup               github 1.0

github.setup            tpoechtrager apple-libtapi 664b84
name                    libtapi
version                 1100.0.11
revision                0
categories              devel
platforms               darwin
maintainers             nomaintainer

license                 APSL-2
description             ${name} adds ld64 linker support for text-based API libraries.
long_description        ${description} Newer MacOS SDKs contain only these TAPI stubs.

homepage                http://opensource.apple.com/source/tapi/

checksums               rmd160  cbd3719ff2a33d4f5d738e0c89c5c194b05e0dee \
                        sha256  f2c3b3e467814b45d4afc768e4eb94b591dbfb24e086724f6b9a9c4c05793861 \
                        size    32204487

platform darwin {
    # pick a suitable python to build with
    if {${os.major} < 11} {
        # system python is too old, use python27-bootstrap to minimize dependencies
        depends_build-append    port:python27-bootstrap
        configure.args-append   -DPYTHON_EXECUTABLE=${prefix}/libexec/python27-bootstrap/bin/python2.7
        depends_skip_archcheck-append python27-bootstrap
    } elseif {${os.major} > 19} {
        # Use system python 3.x
        configure.args-append   -DPYTHON_EXECUTABLE=/usr/bin/python3
    } else {
        # use the system python, which is known to be fine for darwin 11 to 19
        configure.args-append   -DPYTHON_EXECUTABLE=/usr/bin/python2.7
    }
}

# remove need for port:libxml2 dependency
configure.args-append -DLIBXML2_LIBRARIES=IGNORE

# avoid opportunistic linking zlib
configure.args-append -DLLVM_ENABLE_ZLIB=OFF

# avoid opportunistic linking ncuses
configure.args-append -DLLVM_ENABLE_TERMINFO=OFF

compiler.cxx_standard   2011

cmake.build_type        Release

# needs support for llvm::Expect, which requires c++17 inline variables (clang 3.9+)
compiler.blacklist-append {clang < 801} {macports-clang-3.[3-8]}

# needs gcc8 or later to compile
# $SRC_DIR/src/llvm/projects/libtapi/lib/Core/APIJSONSerializer.cpp:1202:10: error: could not convert
# 'result' from 'tapi::internal::API' to 'llvm::Expected<tapi::internal::API>'    return result;
compiler.blacklist-append *gcc-3.* *gcc-4.* *gcc-5.* *gcc-6.* *gcc-7.*

if {[string match macports-clang-* ${configure.compiler}]} {

    depends_build-append port:cctools
    depends_skip_archcheck-append cctools
    configure.args-append   -DCMAKE_LIBTOOL=${prefix}/bin/libtool

    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        # the default ld64-127 linker cannot build this with LTO at present in this configuration
        # if we could test the linker version, we might be able to enable it
        # if a newer linker than 127 is installed -- not sure where the cutoff is
        configure.args-append -DLLVM_ENABLE_LTO=OFF
    } else {
        # libtool will error on llvm bitcode generated by a clang version
        # newer than the libLTO.dylib cctools is built against
        # making sure cctools is built against the newest llvm in use prevents this, but we can't
        # always guarantee that will be the case

        # we can instead set DYLD_LIBRARY_PATH to the libLTO.dylib that matches the building clang
        # then libtool will use that libLTO.dylib instead, which matches the clang objects

        set clangversion        [lindex [split ${configure.compiler} -] 2]
        build.env               DYLD_LIBRARY_PATH=${prefix}/libexec/llvm-$clangversion/lib/
    }
}

if {${os.platform} eq "darwin" && ${os.major} < 11} {

    # use cmake-bootstrap to minimize dependencies.
    depends_build-replace  path:bin/cmake:cmake port:cmake-bootstrap
    configure.cmd          ${prefix}/libexec/cmake-bootstrap/bin/cmake

    # Proxy for eliminating the dependency on native TLS
    # http://trac.macports.org/ticket/46887
    configure.args-append -DLLVM_ENABLE_BACKTRACES=OFF

    # https://llvm.org/bugs/show_bug.cgi?id=25680
    configure.cxxflags-append -U__STRICT_ANSI__
}

# add support for PPC architectures
patchfiles-append       patch-0004-tapi-add-PPC-support.diff

# add a missing strnlen definition if needed
patchfiles-append       patch-0006-strnlen.diff

# build manpages for tapi
patchfiles-append       patch-0007-build-manpages-for-tapi.diff

configure.post_args     ${worksrcpath}/src/llvm

# needed for libtapi to find some required files
configure.args-append   -DCMAKE_CXX_FLAGS="-I ${worksrcpath}/src/llvm/projects/clang/include -I ${workpath}/build/projects/clang/include"

configure.args-append   -DLLVM_INCLUDE_TESTS=OFF \
                        -DTAPI_INCLUDE_DOCS=ON

build.target            libtapi tapi
destroot.target         install-libtapi install-tapi install-tapi-headers install-tapi-clang-headers install-tapi-docs

livecheck.type          regex
livecheck.regex         "tapi-(\[\\d.\]+)"
