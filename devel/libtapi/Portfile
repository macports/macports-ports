# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               cmake 1.1
PortGroup               compiler_blacklist_versions 1.0

name                    libtapi
version                 1000.10.8
revision                1
categories              devel
platforms               darwin
maintainers             {kencu @kencu} {jeremyhu @jeremyhu} openmaintainer

license                 APSL-2
description             ${name} adds ld64 linker support for text-based API libraries.
long_description        ${description} Newer MacOS SDKs contain only these TAPI stubs.

homepage                http://opensource.apple.com/source/tapi/

master_sites            http://opensource.apple.com/tarballs/tapi:tapi
distfiles               tapi-${version}.tar.gz:tapi
checksums               tapi-${version}.tar.gz \
                        rmd160  f5aad7f6ed579ce83d1206910ea8885043b4ebdb \
                        sha256  827e996529974305ef7933f3fa790f7ed068caa29db8f8c30b8a83c6826503f7 \
                        size    205606

set llvm_version        7.1.0
master_sites-append     https://github.com/llvm/llvm-project/archive/:llvm
distfiles-append        llvmorg-${llvm_version}.tar.gz:llvm
checksums-append        llvmorg-${llvm_version}.tar.gz \
                        rmd160  abdbeaa08cb1c5e9ce4008e47263eb10597f5aed \
                        sha256  71c93979f20e01f1a1cc839a247945f556fa5e63abf2084e8468b238080fd839 \
                        size    105306132

worksrcdir              tapi_build

post-extract {
    move ${workpath}/llvm-project-llvmorg-${llvm_version} ${workpath}/${worksrcdir}
    move ${workpath}/tapi-${version} ${worksrcpath}/tapi
#   can't quite sort out the built-in "ln" command to do this
    system -W ${worksrcpath} "ln -s ../../tapi ${worksrcpath}/clang/tools/tapi"
}

depends_build-append    port:python27
configure.args-append   -DPYTHON_EXECUTABLE=${prefix}/bin/python2.7
depends_skip_archcheck-append python27

# remove need for port:libxml2 dependency
configure.args-append -DLIBXML2_LIBRARIES=IGNORE

compiler.cxx_standard   2011
configure.pre_args-replace -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_BUILD_TYPE=Release

# needs support for llvm::Expect, which requires c++17 inline variables (clang 3.9+)
compiler.blacklist-append {clang < 801}
compiler.blacklist-append {macports-clang-3.[3-8]}

# gcc5 errors building this
compiler.blacklist-append macports-gcc-5

if {[string match macports-clang-* ${configure.compiler}]} {

    depends_build-append port:cctools
    depends_skip_archcheck-append cctools
    configure.args-append   -DCMAKE_LIBTOOL=${prefix}/bin/libtool

    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        # the default ld64-127 linker cannot build this with LTO at present in this configuration
        # if we could test the linker version, we might be able to enable it
        # if a newer linker than 127 is installed -- not sure where the cutoff is
        configure.args-append -DLLVM_ENABLE_LTO=OFF
    } else {
        # libtool will error on llvm bitcode generated by a clang version
        # newer than the libLTO.dylib cctools is built against
        # making sure cctools is built against the newest llvm in use prevents this, but we can't
        # always guarantee that will be the case

        # we can instead set DYLD_LIBRARY_PATH to the libLTO.dylib that matches the building clang
        # then libtool will use that libLTO.dylib instead, which matches the clang objects

        set clangversion        [lindex [split ${configure.compiler} -] 2]
        build.env               DYLD_LIBRARY_PATH=${prefix}/libexec/llvm-$clangversion/lib/
    }
}

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    # Proxy for eliminating the dependency on native TLS
    # http://trac.macports.org/ticket/46887
    configure.args-append -DLLVM_ENABLE_BACKTRACES=OFF

    # https://llvm.org/bugs/show_bug.cgi?id=25680
    configure.cxxflags-append -U__STRICT_ANSI__
}

configure.post_args     ${worksrcpath}/llvm

# add the tapi directory to the clang build CMakeLists.txt
patchfiles-append       patch-0001-clang-tools-add-tapi.diff

# patches from https://github.com/iains/tapi
# and from https://github.com/tpoechtrager/apple-libtapi
# add zippered support for MacOSX10.14.sdk and above
patchfiles-append       patch-0002-tapi-zippered-support-poechtrager.diff

# fix tapi build for llvm version 7 (and newer?)
patchfiles-append       patch-0003-tapi-llvm7-build-fixes.diff

# add support for PPC architectures
patchfiles-append       patch-0004-tapi-add-PPC-support.diff

# fixes to tests
patchfiles-append       patch-0005-tapi-test-fixes.diff

# add a missing strnlen definition if needed
patchfiles-append       patch-0006-strnlen.diff

if {[string match *clang* ${configure.compiler}]} {
    configure.pre_args-append -C ${worksrcpath}/tapi/cmake/caches/apple-tapi.cmake
    build.target            distribution
    destroot.target         install-distribution
}

if {[string match *gcc* ${configure.compiler}]} {
    # this gcc build is allowed here for possible ld64 bootstrapping purposes
    # it links against libgcc/libstdc++.6.dylib and libgcc/libgcc_s.1.dylib
    configure.args-append    -DLLVM_ENABLE_PROJECTS=\"clang\;tapi\"
    build.target             libtapi tapi
    destroot.target          install-libtapi install-tapi install-tapi-headers install-tapi-clang-headers install-tapi-docs
}

variant tests description {Enable building of test code} {
    test.run                yes
    configure.args-append   -DLLVM_INCLUDE_TESTS=ON

    # tests work on 10.13 - not tested 10.10 - 10.12 as yet

    # there is a conflict between modules and MacPorts' ncurses port: #59992
    # temporarily disabling the ncurses port to run the tests works
    # removing the test that includes modules also works and requires no intervention
    post-patch {
        reinplace "s|add_subdirectory(Mod)||g" ${worksrcpath}/tapi/test/Inputs/CMakeLists.txt
    }

    # tests error on 10.14+ due to hard-coded i386 builds - this fixes most of them
    # there are a few tests that fail due to i386-related errors still
    if {${os.platform} eq "darwin" && ${os.major} >= 18} {
        post-patch {
            foreach dir {test unittests} {
                fs-traverse path ${worksrcpath}/tapi/${dir} {
                    if {[file isfile ${path}] && [string match {*CMakeLists.txt} ${path}]} {
                        reinplace "s|-arch i386||g" ${path}
                    }
                }
            }
        }
    }

    # tests did not work on 10.6.8, first due to missing architecture defines, then
    # due to other errors. Help wanted to fix these tests if possible.
    test.target             check-tapi
}

livecheck.type          regex
livecheck.regex         "tapi-(\[\\d.\]+)"
