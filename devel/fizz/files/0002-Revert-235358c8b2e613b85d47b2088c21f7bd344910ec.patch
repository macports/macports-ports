From 8da95253f706a9de52c3d89b2d5a1488815d14ff Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Fri, 12 Jan 2024 09:57:06 +0800
Subject: [PATCH] Revert 235358c8b2e613b85d47b2088c21f7bd344910ec

---
 fizz/tool/FizzClientCommand.cpp | 32 +++++++++-----------------------
 fizz/tool/FizzServerCommand.cpp |  4 ++--
 2 files changed, 11 insertions(+), 25 deletions(-)

diff --git fizz/tool/FizzClientCommand.cpp fizz/tool/FizzClientCommand.cpp
index 02ee86a4..69eb31de 100644
--- fizz/tool/FizzClientCommand.cpp
+++ fizz/tool/FizzClientCommand.cpp
@@ -83,8 +83,6 @@ void printUsage() {
     << "                          (JSON format: {echconfigs: [${your ECH config here with all the fields..}]})\n"
     << "                          (See FizzCommandCommonTest for an example.)\n"
     << "                          (Note: Setting ech configs implicitly enables ECH.)\n"
-    << " -echbase64 echConfigList (base64 encoded string of echconfigs.)"
-    << "                          (The echconfigs file argument must match the ECH Config List format specified in the ECH RFC.)\n"
 #ifdef FIZZ_TOOL_ENABLE_OQS
     << " -hybridkex               (Use experimental hybrid key exchange. Currently the only supported named groups under\n"
     << "                          this mode are secp384r1_bikel3 and secp521r1_x25519)\n"
@@ -542,7 +540,6 @@ int fizzClientCommand(const std::vector<std::string>& args) {
   bool delegatedCredentials = false;
   bool ech = false;
   std::string echConfigsFile;
-  std::string echConfigsBase64;
   bool uring = false;
   bool uringAsync = false;
   bool uringRegisterFds = false;
@@ -616,9 +613,6 @@ int fizzClientCommand(const std::vector<std::string>& args) {
     }}},
     {"-echconfigs", {true, [&echConfigsFile](const std::string& arg) {
         echConfigsFile = arg;
-    }}},
-    {"-echbase64", {true, [&echConfigsBase64](const std::string& arg) {
-        echConfigsBase64 = arg;
     }}}
 #ifdef FIZZ_TOOL_ENABLE_OQS
     ,{"-hybridkex", {false, [&useHybridKexFactory](const std::string&) {
@@ -794,26 +788,22 @@ int fizzClientCommand(const std::vector<std::string>& args) {
             clientContext->getSupportedSigSchemes());
   }
 
-  folly::Optional<ech::ECHConfigList> echConfigList = folly::none;
+  folly::Optional<std::vector<ech::ECHConfig>> echConfigs = folly::none;
 
   if (ech) {
     // Use default ECH config values.
-    auto echConfigContents = getDefaultECHConfigs();
-    echConfigList->configs = std::move(echConfigContents);
-  } else if (!echConfigsBase64.empty()) {
-    echConfigList = parseECHConfigsBase64(echConfigsBase64);
-    if (!echConfigList.has_value()) {
-      LOG(ERROR) << "Unable to parse ECHConfigList base64.";
-      return 1;
-    }
-  } else if (!echConfigsFile.empty()) {
+    echConfigs = getDefaultECHConfigs();
+  }
+
+  if (!echConfigsFile.empty()) {
+    // Parse user set ECH configs.
     auto echConfigsJson = readECHConfigsJson(echConfigsFile);
     if (!echConfigsJson.has_value()) {
       LOG(ERROR) << "Unable to load ECH configs from json file";
       return 1;
     }
-    echConfigList = parseECHConfigs(echConfigsJson.value());
-    if (!echConfigList.has_value()) {
+    auto gotECHConfigs = parseECHConfigs(echConfigsJson.value());
+    if (!gotECHConfigs.has_value()) {
       LOG(ERROR)
           << "Unable to parse JSON file and make ECH config."
           << "Ensure the format matches what is expected."
@@ -821,11 +811,7 @@ int fizzClientCommand(const std::vector<std::string>& args) {
           << "See FizzCommandCommonTest for a more concrete example.";
       return 1;
     }
-  }
-
-  folly::Optional<std::vector<ech::ECHConfig>> echConfigs;
-  if (echConfigList.has_value()) {
-    echConfigs = std::move(echConfigList->configs);
+    echConfigs = std::move(gotECHConfigs.value().configs);
   }
 
   try {
diff --git fizz/tool/FizzServerCommand.cpp fizz/tool/FizzServerCommand.cpp
index e2da1621..18fd0e26 100644
--- fizz/tool/FizzServerCommand.cpp
+++ fizz/tool/FizzServerCommand.cpp
@@ -597,8 +597,8 @@ std::shared_ptr<ech::Decrypter> setupDecrypterFromInputs(
 
   std::string privKeyStrHex;
   folly::readFile(echPrivateKeyFile.c_str(), privKeyStrHex);
-
-  folly::ByteRange privKeyBuf(folly::trimWhitespace(privKeyStrHex));
+  auto privKeyStr = folly::unhexlify(privKeyStrHex);
+  folly::ByteRange privKeyBuf((folly::StringPiece(privKeyStr)));
 
   // Create a key exchange and set the private key
   auto kexWithPrivateKey =
