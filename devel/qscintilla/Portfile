# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem 1.0
PortGroup           qmake 1.0
PortGroup           cxx11 1.1

name                qscintilla

# NOTE: The version of this port must be kept in sync with the
# 'py*-qscintilla' port(s), since they contain the python bindings!

version             2.10.1
checksums           rmd160 5dbddfdaf826e95251589a41696d5786b497e86f \
                    sha256 97f98a9d91f908db6ce37fecc6d241d955b388a1c487173b60726cba9a3dfa64

categories          devel
license             {GPL-2 GPL-3 OpenSSLException}
maintainers         michaelld openmaintainer
description         QScintilla is a port to Qt of Neil Hodgson's Scintilla C++ editor control.
homepage            http://www.riverbankcomputing.com/software/qscintilla/
platforms           darwin

long_description    QScintilla is a port to Qt of Neil Hodgson's Scintilla C++ editor control. \
                    As well as features found in standard text editing components,      \
                    QScintilla includes features especially useful when editing and     \
                    debugging source code. These include support for syntax styling,    \
                    error indicators, code completion and call tips. The selection      \
                    margin can contain markers like those used in debuggers to indicate \
                    breakpoints and the current line. Styling choices are more open     \
                    than with many editors, allowing the use of proportional fonts,     \
                    bold and italics, multiple foreground and background colours and    \
                    multiple fonts. See the py*-qscintilla port to install python bindings.

distname            QScintilla_gpl-${version}
master_sites        sourceforge:pyqt

# fix up QMake .pro files for +debug, if selected; also fixed up the
# library and header paths to include .. and ../Qt4 before others;
# also, don't include qscintilla2 via CONFIG, instead do it directly
# to avoid linking against an already-installed library.
patchfiles-append   patch-add_debug.diff

# enable C++11
configure.cxxflags-append -std=c++11

# set the correct stdlib for linking for older compilers.
if {${configure.cxx_stdlib} eq "macports-libstdc++" ||
    ${configure.cxx_stdlib} eq "libstdc++"} {
    configure.ldflags-append -stdlib=macports-libstdc++
}

post-patch {
    # allow for universal and non-native building, if desired, by
    # fixing up the QMake .pro files.
    reinplace "s/@ARCHES@/${qt_arch_types}/" \
        ${worksrcpath}/Qt4Qt5/qscintilla.pro
    reinplace "s/@ARCHES@/${qt_arch_types}/" \
        ${worksrcpath}/designer-Qt4Qt5/designer.pro

    # fix up 'Platform.h's, to avoid a conflict with the port 'tidy's
    # 'platform.h'.
    foreach fixfile [exec grep -lr \"Platform\.h\" ${worksrcpath}] {
        reinplace -locale C "s@\"Platform\.h\"@\"include/Platform\.h\"@g" ${fixfile}
    }

    # fix up .pro files to handle debug and release
    set build_type "release"
    if {[variant_isset debug]} {
        set build_type "debug_and_release build_all"
    }
    reinplace "s/@BUILD_TYPE@/${build_type}/" \
        ${worksrcpath}/designer-Qt4Qt5/designer.pro
    reinplace "s/@BUILD_TYPE@/${build_type}/" \
        ${worksrcpath}/Qt4Qt5/qscintilla.pro

    # drop in a simple QMake file, for easy building
    copy ${filespath}/Qsci.pro ${worksrcpath}

    # rename QMake .pro files in subdirs to work with top-level file
    move ${worksrcpath}/Qt4Qt5/qscintilla.pro \
        ${worksrcpath}/Qt4Qt5/Qt4Qt5.pro
    move ${worksrcpath}/designer-Qt4Qt5/designer.pro \
        ${worksrcpath}/designer-Qt4Qt5/designer-Qt4Qt5.pro
}

# allow ccache, if specified by the user
pre-build {
    if {[tbool configure.ccache]} {
        build.post_args "CCACHE=ccache"
    }
}

livecheck.type      regex
livecheck.url       ${homepage}download
livecheck.regex     >QScintilla\[_-\]gpl-\(\[0-9.\]+\)${extract.suffix}<
