Due to a presumed bug in MP's g-ir-scanner[1], generated typelib files often
point to the dylib's relative build path. E.g. running

    g-ir-inspect --print-shlibs Pango

Will print something like

    shlib: ./pango/libpango-1.0.0.dylib

At run-time, the GObject Introspection infrastructure won't be able to find the
libpango dylib, and panic ensues. This patch ensures that the full install
paths are specified in the typelib file. You can ensure correct operation with
the above command, which should print something like

    shlib: /opt/local/lib/libpango-1.0.0.dylib

[1] https://trac.macports.org/ticket/62391

--- mesonbuild/modules/gnome.py.orig
+++ mesonbuild/modules/gnome.py
@@ -816,6 +816,13 @@
         for incdir in typelib_includes:
             typelib_cmd += ["--includedir=" + incdir]
 
+        for target in girtargets:
+            if isinstance(target, build.SharedLibrary):
+                typelib_cmd += ["--shared-library=" +
+                        os.path.join(state.environment.get_prefix(),
+                                     state.environment.get_shared_lib_dir(),
+                                     target.filename)]
+
         typelib_target = self._make_typelib_target(state, typelib_output, typelib_cmd, generated_files, kwargs)
 
         self._devenv_append('GI_TYPELIB_PATH', os.path.join(state.environment.get_build_dir(), state.subdir))
