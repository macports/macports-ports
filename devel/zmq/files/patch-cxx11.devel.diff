--- configure.ac.orig
+++ configure.ac
@@ -57,8 +57,19 @@
 # Checks for programs.
 AC_PROG_CC
 AX_CHECK_COMPILE_FLAG([-std=gnu11], [CFLAGS+=" -std=gnu11"], [AC_PROG_CC_C99])
+
 AC_PROG_CXX
-AX_CXX_COMPILE_STDCXX_11([ext], [optional])
+AC_ARG_ENABLE([cxx11],
+    [AS_HELP_STRING([--enable-cxx11],
+        [enable C++11 for C++ compiler [default=no]])],
+    [zmq_enable_cxx11=$enableval],
+    [zmq_enable_cxx11="no"])
+
+if test "x$zmq_enable_cxx11" != "xno"; then
+    AX_CXX_COMPILE_STDCXX_11([ext], [mandatory])
+    AC_DEFINE(ZMQ_USE_CXX11, 1, [Enable C++11])
+fi
+
 AX_CODE_COVERAGE
 AM_PROG_CC_C_O
 AC_PROG_SED
diff --git a/src/atomic_counter.hpp b/src/atomic_counter.hpp
index 23a7c50..2fc2fe4 100644
--- src/atomic_counter.hpp.orig
+++ src/atomic_counter.hpp
@@ -37,7 +37,7 @@
 #define ZMQ_ATOMIC_COUNTER_MUTEX
 #elif defined ZMQ_HAVE_ATOMIC_INTRINSICS
 #define ZMQ_ATOMIC_COUNTER_INTRINSIC
-#elif (defined __cplusplus && __cplusplus >= 201103L)                          \
+#elif (defined __cplusplus && defined ZMQ_USE_CXX11)                          \
   || (defined _MSC_VER && _MSC_VER >= 1900)
 #define ZMQ_ATOMIC_COUNTER_CXX11
 #elif (defined __i386__ || defined __x86_64__) && defined __GNUC__
--- src/atomic_ptr.hpp.orig
+++ src/atomic_ptr.hpp
@@ -36,7 +36,7 @@
 #define ZMQ_ATOMIC_PTR_MUTEX
 #elif defined ZMQ_HAVE_ATOMIC_INTRINSICS
 #define ZMQ_ATOMIC_PTR_INTRINSIC
-#elif (defined __cplusplus && __cplusplus >= 201103L)                          \
+#elif (defined __cplusplus && defined ZMQ_USE_CXX11)                          \
   || (defined _MSC_VER && _MSC_VER >= 1900)
 #define ZMQ_ATOMIC_PTR_CXX11
 #elif (defined __i386__ || defined __x86_64__) && defined __GNUC__
--- src/blob.hpp.orig
+++ src/blob.hpp
@@ -37,7 +37,7 @@
 #include <string.h>
 #include <algorithm>
 
-#if __cplusplus >= 201103L || defined(_MSC_VER) && _MSC_VER > 1700
+#if defined(ZMQ_USE_CXX11) || (defined(_MSC_VER) && _MSC_VER > 1700)
 #define ZMQ_HAS_MOVE_SEMANTICS
 #define ZMQ_MAP_INSERT_OR_EMPLACE(k, v) emplace (k, v)
 #define ZMQ_PUSH_OR_EMPLACE_BACK emplace_back
--- src/condition_variable.hpp.orig
+++ src/condition_variable.hpp
@@ -45,7 +45,7 @@
 #define _SUPPORT_CONDITION_VARIABLE 0
 #endif
 #else
-#if _cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
 #define _SUPPORT_CONDITION_VARIABLE 1
 #else
 #define _SUPPORT_CONDITION_VARIABLE 0
