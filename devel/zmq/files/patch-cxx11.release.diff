diff --git a/configure.ac b/configure.ac
index 61be86f..084a04f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -86,7 +86,15 @@ if test "x$enable_force_CXX98_compat" = "xyes"; then
     AX_CHECK_COMPILE_FLAG([-Wc++98-compat -Wc++98-compat-pedantic], [CXXFLAGS+=" -Wc++98-compat"], [])
     AC_LANG_POP([C++])
 else
-    AX_CXX_COMPILE_STDCXX_11([ext], [optional])
+    AC_ARG_ENABLE([cxx11],
+        [AS_HELP_STRING([--enable-cxx11],
+            [enable C++11 for C++ compiler [default=no]])],
+        [zmq_enable_cxx11=$enableval],
+        [zmq_enable_cxx11="no"])
+    if test "x$zmq_enable_cxx11" != "xno"; then
+        AX_CXX_COMPILE_STDCXX_11([ext], [mandatory])
+        AC_DEFINE(ZMQ_USE_CXX11, 1, [Enable C++11])
+    fi
 fi
 
 # Check whether to build a with debug symbols
diff --git a/perf/benchmark_radix_tree.cpp b/perf/benchmark_radix_tree.cpp
index efc889c..4cfd4e8 100644
--- a/perf/benchmark_radix_tree.cpp
+++ b/perf/benchmark_radix_tree.cpp
@@ -27,7 +27,7 @@
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
-#if __cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
 
 #include "radix_tree.hpp"
 #include "trie.hpp"
diff --git a/src/atomic_counter.hpp b/src/atomic_counter.hpp
index 4f2ff58..298283a 100644
--- a/src/atomic_counter.hpp
+++ b/src/atomic_counter.hpp
@@ -37,7 +37,7 @@
 #define ZMQ_ATOMIC_COUNTER_MUTEX
 #elif defined ZMQ_HAVE_ATOMIC_INTRINSICS
 #define ZMQ_ATOMIC_COUNTER_INTRINSIC
-#elif (defined __cplusplus && __cplusplus >= 201103L)                          \
+#elif defined(ZMQ_USE_CXX11)                                                   \
   || (defined _MSC_VER && _MSC_VER >= 1900)
 #define ZMQ_ATOMIC_COUNTER_CXX11
 #elif (defined __i386__ || defined __x86_64__) && defined __GNUC__
diff --git a/src/atomic_ptr.hpp b/src/atomic_ptr.hpp
index e16259f..36a5879 100644
--- a/src/atomic_ptr.hpp
+++ b/src/atomic_ptr.hpp
@@ -36,7 +36,7 @@
 #define ZMQ_ATOMIC_PTR_MUTEX
 #elif defined ZMQ_HAVE_ATOMIC_INTRINSICS
 #define ZMQ_ATOMIC_PTR_INTRINSIC
-#elif (defined __cplusplus && __cplusplus >= 201103L)                          \
+#elif defined(ZMQ_USE_CXX11)                                                   \
   || (defined _MSC_VER && _MSC_VER >= 1900)
 #define ZMQ_ATOMIC_PTR_CXX11
 #elif (defined __i386__ || defined __x86_64__) && defined __GNUC__
diff --git a/src/blob.hpp b/src/blob.hpp
index c14633c..66a5171 100644
--- a/src/blob.hpp
+++ b/src/blob.hpp
@@ -37,7 +37,7 @@
 #include <string.h>
 #include <algorithm>
 
-#if __cplusplus >= 201103L || defined(_MSC_VER) && _MSC_VER > 1700
+#if defined(ZMQ_USE_CXX11) || defined(_MSC_VER) && _MSC_VER > 1700
 #define ZMQ_HAS_MOVE_SEMANTICS
 #define ZMQ_MAP_INSERT_OR_EMPLACE(k, v) emplace (k, v)
 #define ZMQ_PUSH_OR_EMPLACE_BACK emplace_back
diff --git a/src/condition_variable.hpp b/src/condition_variable.hpp
index e5c7224..c316037 100644
--- a/src/condition_variable.hpp
+++ b/src/condition_variable.hpp
@@ -45,7 +45,7 @@
 #define _SUPPORT_CONDITION_VARIABLE 0
 #endif
 #else
-#if _cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
 #define _SUPPORT_CONDITION_VARIABLE 1
 #else
 #define _SUPPORT_CONDITION_VARIABLE 0
diff --git a/src/ctx.cpp b/src/ctx.cpp
index 67acf03..fa168d7 100644
--- a/src/ctx.cpp
+++ b/src/ctx.cpp
@@ -550,7 +550,7 @@ void zmq::ctx_t::unregister_endpoints (socket_base_t *socket_)
                                end = _endpoints.end ();
          it != end;) {
         if (it->second.socket == socket_)
-#if __cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
             it = _endpoints.erase (it);
 #else
             _endpoints.erase (it++);
diff --git a/src/mtrie.hpp b/src/mtrie.hpp
index b5ca3ac..52cdeaa 100644
--- a/src/mtrie.hpp
+++ b/src/mtrie.hpp
@@ -32,7 +32,7 @@
 
 #include "generic_mtrie.hpp"
 
-#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER > 1600)
+#if defined(ZMQ_USE_CXX11) || (defined(_MSC_VER) && _MSC_VER > 1600)
 #define ZMQ_HAS_EXTERN_TEMPLATE 1
 #else
 #define ZMQ_HAS_EXTERN_TEMPLATE 0
diff --git a/src/options.hpp b/src/options.hpp
index b591e96..b3c36b5 100644
--- a/src/options.hpp
+++ b/src/options.hpp
@@ -47,7 +47,7 @@
 #include <sys/ucred.h>
 #endif
 
-#if __cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
 #include <type_traits>
 #endif
 
@@ -285,7 +285,7 @@ int do_getsockopt (void *const optval_,
 template <typename T>
 int do_getsockopt (void *const optval_, size_t *const optvallen_, T value_)
 {
-#if __cplusplus >= 201103L && (!defined(__GNUC__) || __GNUC__ > 5)
+#if defined(ZMQ_USE_CXX11) && (!defined(__GNUC__) || __GNUC__ > 5)
     static_assert (std::is_trivially_copyable<T>::value,
                    "invalid use of do_getsockopt");
 #endif
diff --git a/src/radio.cpp b/src/radio.cpp
index 486732a..9605fff 100644
--- a/src/radio.cpp
+++ b/src/radio.cpp
@@ -126,7 +126,7 @@ void zmq::radio_t::xpipe_terminated (pipe_t *pipe_)
                                    end = _subscriptions.end ();
          it != end;) {
         if (it->second == pipe_) {
-#if __cplusplus >= 201103L
+#if defined(ZMQ_USE_CXX11)
             it = _subscriptions.erase (it);
 #else
             _subscriptions.erase (it++);
diff --git a/src/random.cpp b/src/random.cpp
index 6a2c7e2..735e352 100644
--- a/src/random.cpp
+++ b/src/random.cpp
@@ -100,7 +100,7 @@ uint32_t zmq::generate_random ()
 //    configurable via config.h
 
 //  TODO this should probably be done via config.h
-#if __cplusplus >= 201103L                                                     \
+#if defined(ZMQ_USE_CXX11)                                                     \
   || (defined(__cpp_threadsafe_static_init)                                    \
       && __cpp_threadsafe_static_init >= 200806)                               \
   || (defined(_MSC_VER) && _MSC_VER >= 1900)
