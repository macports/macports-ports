# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           github 1.0
PortGroup           compiler_blacklist_versions 1.0

github.setup        01org tbb 2018_U3
revision            0
categories          devel
platforms           darwin
maintainers         nomaintainer
license             Apache-2

description         Intel Threading Building Blocks offers a rich and complete approach to parallelism in C++

long_description    ${description} \
                    It represents a higher-level, task-based parallelism that abstracts \
                    platform details and threading mechanisms for scalability and performance

homepage            http://threadingbuildingblocks.org/

checksums           rmd160  30549c34cba71affbbd667dbc21daadd46dbc5a9 \
                    sha256  9ace81a7d9e3d50117ed5da3021151f44a9729c0fba0a41f624add76228acf28

use_configure       no

# Force a compatible compiler
compiler.blacklist-append *gcc* {clang < 602} macports-clang-3.3 macports-clang-3.4 \
                          macports-clang-3.5 macports-clang-3.6 macports-clang-3.7
compiler.whitelist clang macports-clang-3.9 macports-clang-3.8

set tbb_arch(i386)      ia32
set tbb_arch(ppc)       ppc32
set tbb_arch(x86_64)    intel64
if {![info exists tbb_arch(${configure.build_arch})]} {
    set tbb_arch(${configure.build_arch}) ${configure.build_arch}
}

if {[string match *clang* ${configure.compiler}]} {
    set tbb_compiler clang
} else {
    set tbb_compiler gcc
}

set tbb_build_prefix macports

patchfiles        patch-tbb-older-malloc.diff

post-patch {
    reinplace "/^CONLY *=/s|=.*$|= ${configure.cc}|g" ${worksrcpath}/build/macos.${tbb_compiler}.inc
    reinplace "/^CPLUS *=/s|=.*$|= ${configure.cxx}|g" ${worksrcpath}/build/macos.${tbb_compiler}.inc

    # http://software.intel.com/en-us/forums/topic/505370
    reinplace "/ -dynamiclib/s|$| -install_name ${prefix}/lib/\$@|g" ${worksrcpath}/build/macos.${tbb_compiler}.inc
}

build.target        tbb tbbmalloc tbbproxy
build.args-append   compiler=${tbb_compiler} \
                    tbb_build_prefix=${tbb_build_prefix} \
                    use_proxy=1

test.run            yes
test.target         test
test.args-append    ${build.args}

# The Makefile does not have an install target.
# http://software.intel.com/en-us/forums/topic/347428
# but the muniversal portgroup requires a destroot.cmd
destroot.cmd        true

if {[variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        set merger_build_args(${arch}) arch=$tbb_arch(${arch})
        set merger_test_args(${arch}) arch=$tbb_arch(${arch})
    }
    merger-post-destroot {
        foreach arch ${universal_archs_to_use} {
            tbb_destroot ${worksrcpath}-${arch} ${destroot}-${arch}
        }
    }
} else {
    build.args-append arch=$tbb_arch(${configure.build_arch})
    test.args-append arch=$tbb_arch(${configure.build_arch})
    post-destroot {
        tbb_destroot ${worksrcpath} ${destroot}
    }
}

proc tbb_destroot {worksrcpath destroot} {
    global          destroot.dir prefix tbb_build_prefix
    destroot.dir    ${worksrcpath}/build/${tbb_build_prefix}_release

    # fix paths
    reinplace -W ${destroot.dir} "s|\\(TBBROOT.\\)\".*\"|\\1\"${prefix}\"|g" tbbvars.sh tbbvars.csh
    reinplace -W ${destroot.dir} "s|\\(tbb_bin.\\)\".*\"|\\1\"${prefix}/lib\"|g" tbbvars.sh tbbvars.csh

    # copy lib, include & bin
    copy {*}[glob ${destroot.dir}/lib*.dylib] ${destroot}${prefix}/lib
    copy {*}[glob ${destroot.dir}/tbbvars.*sh] ${destroot}${prefix}/bin
    copy ${worksrcpath}/include/tbb ${destroot}${prefix}/include/tbb
}

post-destroot {
    # copy examples & docs
    xinstall -d ${destroot}${prefix}/share/${name}
    copy ${worksrcpath}/doc ${destroot}${prefix}/share/${name}/doc
    copy ${worksrcpath}/examples ${destroot}${prefix}/share/${name}/examples
}
