# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                MacOSX.sdk
categories          devel
platforms           macosx
maintainers         {ryandesign @ryandesign}
license             Restrictive Nomirror
supported_archs     i386 x86_64

homepage            https://developer.apple.com/macos/
master_sites        https://download.developer.apple.com/Developer_Tools
default dist_subdir {Xcode/${xcode_vers}}
default distname    {Xcode_${xcode_vers}}

# Only extract these paths from the distfile.
options my_extract_only_paths
default my_extract_only_paths {"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${macos_major}.sdk"}

# "use_dmg" would copy the entire contents of the dmg to workpath.
proc my_use_dmg {use_dmg} {
    if [tbool use_dmg] {
        extract.suffix  .dmg
    }
}

subport MacOSX10.6.sdk {
    # Xcode   SDK             File                                          Size
    # 3.2     10.6-10A432     xcode3210a432.dmg                        785073678
    # 3.2.1   10.6-10M2003    xcode321_10m2003_developerdvd.dmg        787658017
    # 3.2.2   10.6-10M2148    xcode322_2148_developerdvd.dmg           780887329
    # 3.2.3   10.6-10M2262    xcode_3.2.3_and_ios_sdk_4.0.1.dmg       2446068106
    # 3.2.3   10.6-10M2262    xcode_3.2.3_and_ios_sdk_4.0.2.dmg       2675189630
    # 3.2.4   10.6-10M2309    xcode_3.2.4_and_ios_sdk_4.1.dmg         3154281265
    # 3.2.5   10.6-10M2423    xcode_3.2.5_and_ios_sdk_4.2_final.dmg   3782241266
    # 3.2.6   10.6-10M2518    xcode_3.2.6_and_ios_sdk_4.3.dmg         4443150993
    # 4.0.1   10.6-4A1006     xcode_4.0.1_and_ios_sdk_4.3.dmg         4607939522
    # 4.0.2   10.6-4A2002a    xcode_4.0.2_and_ios_sdk_4.3.dmg         4608009154
    # 4.1     10.6-4B110f     xcode_4.1_for_snow_leopard.dmg          4645556106
    # 4.1     10.6.6-10J567   installxcode_41_lion.dmg                3175033467
    # 4.2     10.6.8-10K549   xcode_4.2_for_snow_leopard.dmg          1761397888
    # 4.2     10.6.8-10K549   installxcode_42_lion.dmg                1807251365
    # 4.2.1   10.6.8-10K549   installxcode_421_lion.dmg               1807220808
    # 4.3     10.6.8-10K549   xcode_43_lion.dmg                       1507343939
    # 4.3.1   10.6.8-10K549   xcode_431_lion.dmg                      1591796004
    # 4.3.2   10.6.8-10K549   xcode_432_lion.dmg                      1981944415
    # 4.3.3   10.6.8-10K549   xcode_4.3.3_for_lion.dmg                1975427679
    set macos_name  {Mac OS X Snow Leopard}
    set xcode_vers  4.3
    version         10.6.8-10K549
    revision        0
    checksums       rmd160  df28439edd8347c3afa9bbde02df670b4b1ef55c \
                    sha256  94baaca2dcdc61ede95333b76167972147de807c530c7622ba2770010963a330 \
                    size    1507343939

    master_sites    ${master_sites}/xcode_${xcode_vers}_for_lion_21266/
    distname        xcode_43_lion
    my_use_dmg      yes
}

pre-fetch {
    foreach distfile ${distfiles} {
        if {![file isfile ${distpath}/${distfile}]} {
            ui_error "This port cannot download the needed files automatically."
            ui_error "Please log in to your Apple Developer account at:"
            ui_error ""
            ui_error "https://developer.apple.com/download/more/"
            ui_error ""
            ui_error "Then download Xcode ${xcode_vers} by pasting this URL into your browser:"
            ui_error ""
            ui_error "[lindex ${master_sites} 0]/${distfile}"
            ui_error ""
            ui_error "Place the downloaded file in this directory:"
            ui_error ""
            ui_error "${distpath}"
            ui_error ""
            ui_error "Then retry installing this port."
            return -code error "distfiles missing"
        }
    }
}

# You'd think this would be in Tcl or MacPorts base already.
# http://wiki.tcl.tk/4884
proc map {prefix list} {
    set result {}
    foreach item ${list} {
        lappend result [{*}${prefix} ${item}]
    }
    return ${result}
}

# You'd think this would be in MacPorts base already.
proc shell_quote {path} {
    # This is terrible, but good enough for this port.
    return "\"${path}\""
}

proc check_disk_space {path requested_bytes} {
    set requested_mbytes [expr {${requested_bytes} / 1024 / 1024}]
    set df_k [lindex [split [exec df -k ${path}] \n] end]
    set volume_mbytes [expr {[lindex ${df_k} 1] / 1024}]
    set free_mbytes [expr {[lindex ${df_k} 3] / 1024}]
    set needed_mbytes [expr {ceil((1.05 * ${requested_mbytes} + 0.01 * ${volume_mbytes}) - ${free_mbytes})}]
    ui_debug "${requested_mbytes} MiB requested; ${free_mbytes} MiB free"
    if {${needed_mbytes} > 0} {
        ui_error "The disk is nearly full. Please free up an additional ${needed_mbytes} MiB."
        return -code error "insufficient disk space"
    }
}

extract {
    set my_quoted_extract_only_paths [join [map {shell_quote} ${my_extract_only_paths}] " "]
    foreach distfile ${extract.only} {
        set suffix [file extension ${distfile}]
        switch ${suffix} {
            .dmg {
                set dmg_mount   [mkdtemp "/tmp/mports.XXXXXXXX"]
                extract.cmd     [findBinary hdiutil ${portutil::autoconf::hdiutil_path}]
                system "${extract.cmd} attach [shell_quote ${distpath}/${distfile}] -private -readonly -nobrowse -mountpoint [shell_quote ${dmg_mount}]"
                system -W ${dmg_mount} "[findBinary find ${portutil::autoconf::find_path}] [expr {[llength ${my_extract_only_paths}] > 0 ? ${my_quoted_extract_only_paths} : {.}}] -depth -perm -+r -print0 | [findBinary cpio ${portutil::autoconf::cpio_path}] -p0dmu [shell_quote ${extract.dir}/${worksrcdir}]"
                system "${extract.cmd} detach [shell_quote ${dmg_mount}]"
                delete ${dmg_mount}
            }
            default {
                return -code error "unhandled extract suffix ${suffix}"
            }
        }
    }
}

set sdk_dir         ${prefix}/Developer/SDKs

use_configure       no

build {}

pre-destroot {
    xinstall -d ${destroot}${sdk_dir}
}

if {${subport} eq ${name}} {
    version             10.6
    revision            0
    description         latest Mac OS X SDK
    long_description    This port installs a link to the latest Mac OS X SDK.
    distfiles
    supported_archs     noarch
    depends_run-append  port:MacOSX${version}.sdk
    destroot {
        ln -s MacOSX${version}.sdk ${destroot}${sdk_dir}/MacOSX.sdk
    }
} else {
    set macos_version   [lindex [split ${version} -] 0]
    set macos_build     [lindex [split ${version} -] 1]
    set macos_major     [join [lrange [split ${macos_version} .] 0 1] .]
    }
    description         ${macos_name} v${macos_version} (${macos_build}) SDK
    long_description    This port installs the ${macos_name} v${macos_version} (${macos_build}) SDK.
    destroot {
        move ${worksrcpath}/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${macos_major}.sdk ${destroot}${sdk_dir}
    }
}

if {[llength ${supported_archs}] > 1} {
    variant universal {}
    default_variants +universal
    variant_set universal
}

livecheck.type      none
