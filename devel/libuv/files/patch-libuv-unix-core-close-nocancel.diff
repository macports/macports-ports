--- src/unix/core.c.orig	2019-05-22 12:46:39.000000000 -0700
+++ src/unix/core.c	2019-05-22 12:50:03.000000000 -0700
@@ -522,13 +522,33 @@
  * will unwind the thread when it's in the cancel state. Work around that
  * by making the system call directly. Musl libc is unaffected.
  */
+ 
+#if defined(__GNUC__)
+#define GCC_VERSION \
+	(__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
+#endif
+#if defined(__clang__) || (GCC_VERSION >= 40500)
+/* gcc diagnostic pragmas available */
+#define GCC_DIAGNOSTIC_AVAILABLE
+#endif
+
+
 int uv__close_nocancel(int fd) {
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdollar-in-identifier-extension"
+#if defined(GCC_DIAGNOSTIC_AVAILABLE)
+#  pragma GCC diagnostic push
+#  pragma GCC diagnostic ignored "-Wdollar-in-identifier-extension"
+#endif
+#if __LP64__
   extern int close$NOCANCEL(int);
   return close$NOCANCEL(fd);
-#pragma GCC diagnostic pop
+#else
+  extern int close$NOCANCEL$UNIX2003(int);
+  return close$NOCANCEL$UNIX2003(fd);
+#endif
+#if defined(GCC_DIAGNOSTIC_AVAILABLE)
+#  pragma GCC diagnostic pop
+#endif
 #elif defined(__linux__)
   return syscall(SYS_close, fd);
 #else
@@ -536,7 +555,6 @@
 #endif
 }
 
-
 int uv__close_nocheckstdio(int fd) {
   int saved_errno;
   int rc;
