From 8c836eb577b0cc5b9597005a9715ddb0b9da239f Mon Sep 17 00:00:00 2001
From: Ken Cunningham <kencu@macports.org>
Date: Mon, 12 Nov 2018 14:40:24 -0800
Subject: [PATCH 3/3] support legacy macos (pre v11)

See: https://github.com/libuv/libuv/blob/v1.x/SUPPORTED_PLATFORMS.md

Co-authored-by: Michael Dickens <michaelld@macports.org>
Co-authored-by: Sergey Fedorov <vital.had@gmail.com>
Co-authored-by: Evan Miller <emmiller@gmail.com>
---
 src/unix/fs.c       |  4 ++--
 src/unix/internal.h |  8 ++++----
 src/unix/process.c  | 13 ++++++++++---
 src/unix/tty.c      |  2 +-
 src/unix/udp.c      | 14 ++++++++------
 test/test-fs.c      |  4 ++--
 6 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/src/unix/fs.c b/src/unix/fs.c
index 717f3fab..52078c14 100644
--- a/src/unix/fs.c
+++ b/src/unix/fs.c
@@ -1073,7 +1073,7 @@ static ssize_t uv__fs_sendfile(uv_fs_t* req) {
     return -1;
   }
 /* sendfile() on iOS(arm64) will throw SIGSYS signal cause crash. */
-#elif (defined(__APPLE__) && !TARGET_OS_IPHONE)                               \
+#elif (defined(__APPLE__) && !TARGET_OS_IPHONE && (MAC_OS_X_VERSION_MAX_ALLOWED >= 1050)) \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)
   {
@@ -1442,7 +1442,7 @@ static void uv__to_stat(struct stat* src, uv_stat_t* dst) {
   dst->st_blksize = src->st_blksize;
   dst->st_blocks = src->st_blocks;
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MAX_ALLOWED >= 1050)
   dst->st_atim.tv_sec = src->st_atimespec.tv_sec;
   dst->st_atim.tv_nsec = src->st_atimespec.tv_nsec;
   dst->st_mtim.tv_sec = src->st_mtimespec.tv_sec;
diff --git a/src/unix/internal.h b/src/unix/internal.h
index a1d7d436..bd09d329 100644
--- a/src/unix/internal.h
+++ b/src/unix/internal.h
@@ -75,11 +75,11 @@
 # include <poll.h>
 #endif /* _AIX */
 
-#if defined(__APPLE__)
+#if (defined(__APPLE__) && !TARGET_OS_IPHONE)
+# include <AvailabilityMacros.h>
+#endif
+#if (defined(__APPLE__) && (TARGET_OS_IPHONE || MAC_OS_X_VERSION_MIN_REQUIRED >= 101000))
 # include "darwin-syscalls.h"
-# if !TARGET_OS_IPHONE
-#  include <AvailabilityMacros.h>
-# endif
 #endif
 
 /*
diff --git a/src/unix/process.c b/src/unix/process.c
index 43e6b798..cb1cd744 100644
--- a/src/unix/process.c
+++ b/src/unix/process.c
@@ -36,7 +36,9 @@
 #include <poll.h>
 
 #if defined(__APPLE__)
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
 # include <spawn.h>
+#endif
 # include <paths.h>
 # include <sys/kauth.h>
 # include <sys/types.h>
@@ -417,7 +419,7 @@ static void uv__process_child_init(const uv_process_options_t* options,
 }
 
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1050)
 typedef struct uv__posix_spawn_fncs_tag {
   struct {
     int (*addchdir_np)(const posix_spawn_file_actions_t *, const char *);
@@ -500,7 +502,10 @@ static int uv__spawn_set_posix_spawn_attrs(
    *    spawn-sigmask in attributes
    * 4) POSIX_SPAWN_SETSID: Make the process a new session leader if a detached
    *    session was requested. */
-  flags = POSIX_SPAWN_CLOEXEC_DEFAULT |
+  flags =
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
+          POSIX_SPAWN_CLOEXEC_DEFAULT |
+#endif
           POSIX_SPAWN_SETSIGDEF |
           POSIX_SPAWN_SETSIGMASK;
   if (options->flags & UV_PROCESS_DETACHED) {
@@ -618,9 +623,11 @@ static int uv__spawn_set_posix_spawn_file_actions(
       }
     }
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     if (fd == use_fd)
         err = posix_spawn_file_actions_addinherit_np(actions, fd);
     else
+#endif
         err = posix_spawn_file_actions_adddup2(actions, use_fd, fd);
     assert(err != ENOSYS);
     if (err != 0)
@@ -869,7 +876,7 @@ static int uv__spawn_and_init_child(
   int exec_errorno;
   ssize_t r;
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1050)
   uv_once(&posix_spawn_init_once, uv__spawn_init_posix_spawn);
 
   /* Special child process spawn case for macOS Big Sur (11.0) onwards
diff --git a/src/unix/tty.c b/src/unix/tty.c
index b8610720..4fa9885a 100644
--- a/src/unix/tty.c
+++ b/src/unix/tty.c
@@ -85,7 +85,7 @@ static int uv__tty_is_slave(const int fd) {
   int dummy;
 
   result = ioctl(fd, TIOCGPTN, &dummy) != 0;
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
   char dummy[256];
 
   result = ioctl(fd, TIOCPTYGNAME, &dummy) != 0;
diff --git a/src/unix/udp.c b/src/unix/udp.c
index c4a3559d..b4791839 100644
--- a/src/unix/udp.c
+++ b/src/unix/udp.c
@@ -152,7 +152,7 @@ static void uv__udp_io(uv_loop_t* loop, uv__io_t* w, unsigned int revents) {
 }
 
 static int uv__udp_recvmmsg(uv_udp_t* handle, uv_buf_t* buf) {
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__)
+#if defined(__linux__) || defined(__FreeBSD__) || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 101000))
   struct sockaddr_in6 peers[20];
   struct iovec iov[ARRAY_SIZE(peers)];
   struct mmsghdr msgs[ARRAY_SIZE(peers)];
@@ -215,9 +215,9 @@ static int uv__udp_recvmmsg(uv_udp_t* handle, uv_buf_t* buf) {
       handle->recv_cb(handle, 0, buf, NULL, UV_UDP_MMSG_FREE);
   }
   return nread;
-#else  /* __linux__ || ____FreeBSD__ || __APPLE__ */
+#else  /* __linux__ || __FreeBSD__ || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 101000)) */
   return UV_ENOSYS;
-#endif  /* __linux__ || ____FreeBSD__ || __APPLE__ */
+#endif  /* __linux__ || __FreeBSD__ || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 101000)) */
 }
 
 static void uv__udp_recvmsg(uv_udp_t* handle) {
@@ -767,6 +767,7 @@ static int uv__udp_set_membership6(uv_udp_t* handle,
     !defined(__ANDROID__) &&                                        \
     !defined(__DragonFly__) &&                                      \
     !defined(__QNX__) &&                                            \
+    (!defined(__APPLE__) || (MAC_OS_X_VERSION_MAX_ALLOWED >= 1070)) && \
     !defined(__GNU__)
 static int uv__udp_set_source_membership4(uv_udp_t* handle,
                                           const struct sockaddr_in* multicast_addr,
@@ -890,7 +891,7 @@ int uv__udp_init_ex(uv_loop_t* loop,
 
 
 int uv_udp_using_recvmmsg(const uv_udp_t* handle) {
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__)
+#if defined(__linux__) || defined(__FreeBSD__) || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 1070))
   if (handle->flags & UV_HANDLE_UDP_RECVMMSG)
     return 1;
 #endif
@@ -958,6 +959,7 @@ int uv_udp_set_source_membership(uv_udp_t* handle,
     !defined(__ANDROID__) &&                                        \
     !defined(__DragonFly__) &&                                      \
     !defined(__QNX__) &&                                            \
+    (!defined(__APPLE__) || (MAC_OS_X_VERSION_MAX_ALLOWED >= 1070)) && \
     !defined(__GNU__)
   int err;
   union uv__sockaddr mcast_addr;
@@ -1311,7 +1313,7 @@ static int uv__udp_sendmsgv(int fd,
   r = 0;
   nsent = 0;
 
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) || \
+#if defined(__linux__) || defined(__FreeBSD__) || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 101000)) || \
   (defined(__sun__) && defined(MSG_WAITFORONE))
   if (count > 1) {
     for (i = 0; i < count; /*empty*/) {
@@ -1339,7 +1341,7 @@ static int uv__udp_sendmsgv(int fd,
 
     goto exit;
   }
-#endif  /* defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||
+#endif  /* defined(__linux__) || defined(__FreeBSD__) || (defined(__APPLE__) && (MAC_OS_X_VERSION_MIN_REQUIRED >= 101000)) ||
 	 * (defined(__sun__) && defined(MSG_WAITFORONE))
 	 */
 
diff --git a/test/test-fs.c b/test/test-fs.c
index 4761b15b..8b33c1ba 100644
--- a/test/test-fs.c
+++ b/test/test-fs.c
@@ -1516,7 +1516,7 @@ TEST_IMPL(fs_fstat) {
   ASSERT_OK(uv_fs_fstat(NULL, &req, file, NULL));
   ASSERT_OK(req.result);
   s = req.ptr;
-# if defined(__APPLE__)
+# if defined(__APPLE__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050)
   ASSERT_EQ(s->st_birthtim.tv_sec, t.st_birthtimespec.tv_sec);
   ASSERT_EQ(s->st_birthtim.tv_nsec, t.st_birthtimespec.tv_nsec);
 # elif defined(__linux__)
@@ -1557,7 +1557,7 @@ TEST_IMPL(fs_fstat) {
   ASSERT_EQ(s->st_size, (uint64_t) t.st_size);
   ASSERT_EQ(s->st_blksize, (uint64_t) t.st_blksize);
   ASSERT_EQ(s->st_blocks, (uint64_t) t.st_blocks);
-#if defined(__APPLE__)
+# if defined(__APPLE__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050)
   ASSERT_EQ(s->st_atim.tv_sec, t.st_atimespec.tv_sec);
   ASSERT_EQ(s->st_atim.tv_nsec, t.st_atimespec.tv_nsec);
   ASSERT_EQ(s->st_mtim.tv_sec, t.st_mtimespec.tv_sec);
-- 
2.48.0

