From 2d3a6253989cc93e8f8e5c83e567694f2c588b1a Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Wed, 17 May 2023 14:40:59 +0800
Subject: [PATCH 6/6] Revert "`writeChainWithFds` using
 `SendMsgParamsCallback`"

This reverts commit 62eeb799779cbc24b622ec8ce3501c7969d60bae.
---
 folly/io/async/AsyncSocket.h            |   2 +-
 folly/io/async/fdsock/AsyncFdSocket.cpp | 204 ------------------------
 folly/io/async/fdsock/AsyncFdSocket.h   | 158 ------------------
 folly/io/async/fdsock/SocketFds.h       | 126 ---------------
 4 files changed, 1 insertion(+), 489 deletions(-)
 delete mode 100644 folly/io/async/fdsock/AsyncFdSocket.cpp
 delete mode 100644 folly/io/async/fdsock/AsyncFdSocket.h
 delete mode 100644 folly/io/async/fdsock/SocketFds.h

diff --git folly/io/async/AsyncSocket.h folly/io/async/AsyncSocket.h
index 9ff04ea6c..e65f1ba23 100644
--- folly/io/async/AsyncSocket.h
+++ folly/io/async/AsyncSocket.h
@@ -1657,7 +1657,7 @@ class AsyncSocket : public AsyncSocketTransport {
   bool containsZeroCopyBuf(folly::IOBuf* ptr);
   void releaseZeroCopyBuf(uint32_t id);
 
-  virtual void releaseIOBuf(
+  void releaseIOBuf(
       std::unique_ptr<folly::IOBuf> buf, ReleaseIOBufCallback* callback);
 
   ReadCode processZeroCopyRead();
diff --git folly/io/async/fdsock/AsyncFdSocket.cpp folly/io/async/fdsock/AsyncFdSocket.cpp
deleted file mode 100644
index d8cadc038..000000000
--- folly/io/async/fdsock/AsyncFdSocket.cpp
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "AsyncFdSocket.h"
-
-namespace folly {
-
-AsyncFdSocket::AsyncFdSocket(EventBase* evb)
-    : AsyncSocket(evb)
-#if !defined(_WIN32)
-      ,
-      sendMsgCob_(evb) {
-  setUpCallbacks();
-}
-#else
-{
-}
-#endif
-
-AsyncFdSocket::AsyncFdSocket(
-    EventBase* evb,
-    const folly::SocketAddress& address,
-    uint32_t connectTimeout)
-    : AsyncFdSocket(evb) {
-  connect(nullptr, address, connectTimeout);
-}
-
-AsyncFdSocket::AsyncFdSocket(
-    EventBase* evb, NetworkSocket fd, const folly::SocketAddress* peerAddress)
-    : AsyncSocket(evb, fd, /* zeroCopyBufId */ 0, peerAddress)
-#if !defined(_WIN32)
-      ,
-      sendMsgCob_(evb) {
-  setUpCallbacks();
-}
-#else
-{
-}
-#endif
-
-void AsyncFdSocket::writeChainWithFds(
-    WriteCallback* callback,
-    std::unique_ptr<folly::IOBuf> buf,
-    SocketFds::ToSend fds,
-    WriteFlags flags) {
-#if defined(_WIN32)
-  DCHECK(fds.empty()) << "AsyncFdSocket cannot send FDs on Windows";
-#else
-  DCHECK_EQ(&sendMsgCob_, getSendMsgParamsCB());
-
-  if (buf->empty() && !fds.empty()) {
-    DestructorGuard dg(this);
-    AsyncSocketException ex(
-        AsyncSocketException::BAD_ARGS,
-        withAddr("Cannot send FDs without at least 1 data byte"));
-    return failWrite(__func__, callback, 0, ex);
-  }
-
-  if (!sendMsgCob_.registerFdsForWriteTag(
-          WriteRequestTag{buf.get()},
-          std::move(fds) // discarded on error
-          )) {
-    // Careful: this has no unittest coverage because I don't have a good
-    // idea for how to cause this in a meaningful way.  Should this be
-    // a DCHECK? Plans that don't work:
-    //  - Creating two `unique_ptr` from the same raw pointer would be
-    //    bad news bears for the test.
-    //  - IOBuf recycling via getReleaseIOBufCallback() shouldn't be
-    //    possible either, since we unregister the tag in our `releaseIOBuf`
-    //    override below before releasing the IOBuf.
-    DestructorGuard dg(this);
-    AsyncSocketException ex(
-        AsyncSocketException::BAD_ARGS,
-        withAddr("Buffer was already owned by this socket"));
-    return failWrite(__func__, callback, 0, ex);
-  }
-#endif // !Windows
-
-  writeChain(callback, std::move(buf), flags);
-}
-
-// The callbacks aren't defined on Windows -- the CMSG macros don't compile
-#if !defined(_WIN32)
-
-void AsyncFdSocket::setUpCallbacks() noexcept {
-  AsyncSocket::setSendMsgParamCB(&sendMsgCob_);
-}
-
-void AsyncFdSocket::releaseIOBuf(
-    std::unique_ptr<folly::IOBuf> buf, ReleaseIOBufCallback* callback) {
-  sendMsgCob_.destroyFdsForWriteTag(WriteRequestTag{buf.get()});
-  AsyncSocket::releaseIOBuf(std::move(buf), callback);
-}
-
-std::pair<
-    size_t,
-    AsyncFdSocket::FdSendMsgParamsCallback::WriteTagToFds::iterator>
-AsyncFdSocket::FdSendMsgParamsCallback::getCmsgSizeAndFds(
-    const AsyncSocket::WriteRequestTag& writeTag) noexcept {
-  auto it = writeTagToFds_.find(writeTag);
-  if (it == writeTagToFds_.end()) {
-    return std::make_pair(0, it);
-  }
-  return std::make_pair(CMSG_SPACE(sizeof(int) * it->second.size()), it);
-}
-
-void AsyncFdSocket::FdSendMsgParamsCallback::getAncillaryData(
-    folly::WriteFlags,
-    void* data,
-    const WriteRequestTag& writeTag,
-    const bool /*byteEventsEnabled*/) noexcept {
-  eventBase_->dcheckIsInEventBaseThread();
-
-  auto [cmsgSpace, fdsIt] = getCmsgSizeAndFds(writeTag);
-  CHECK_NE(0, cmsgSpace);
-  const auto& fds = fdsIt->second;
-
-  // NOT checking `fds.size() < SCM_MAX_FD` here because there's no way to
-  // propagate the error to the caller, and ultimately the write will fail
-  // out with EINVAL anyway.  The front-end that accepts FDs should check
-  // this instead.  If there is a debuggability issue, do add a LOG(ERROR).
-
-  ::msghdr msg{}; // Discarded, we just need to populate `data`
-
-  msg.msg_control = data;
-  msg.msg_controllen = cmsgSpace;
-  struct ::cmsghdr* cmsg = CMSG_FIRSTHDR(&msg);
-  CHECK_NOTNULL(cmsg);
-
-  cmsg->cmsg_len = CMSG_LEN(sizeof(int) * fds.size());
-  cmsg->cmsg_level = SOL_SOCKET;
-  cmsg->cmsg_type = SCM_RIGHTS;
-
-  auto* outFds = reinterpret_cast<int*>(CMSG_DATA(cmsg));
-  for (size_t n = 0; n < fds.size(); ++n) {
-    outFds[n] = fds[n]->fd();
-  }
-
-  VLOG(4) << "this=" << this << ", getAncillaryData() sending " << fds.size()
-          << " FDs";
-}
-
-uint32_t AsyncFdSocket::FdSendMsgParamsCallback::getAncillaryDataSize(
-    folly::WriteFlags,
-    const WriteRequestTag& writeTag,
-    const bool /*byteEventsEnabled*/) noexcept {
-  // Not checking thread because `getAncillaryData` will follow.
-
-  // Due to the unfortunate design of the callback API, this will run
-  // again in `getAncillaryData`, let's pray for CPU caches here.
-  auto [size, _] = getCmsgSizeAndFds(writeTag);
-  return size;
-}
-
-void AsyncFdSocket::FdSendMsgParamsCallback::wroteBytes(
-    const WriteRequestTag& writeTag) noexcept {
-  auto nh = writeTagToFds_.extract(writeTag);
-  if (nh.empty()) {
-    // `AsyncSocket` will only call `wroteBytes` if `getAncillaryDataSize`
-    // returned a nonzero value, so we'll never get here.
-    LOG(DFATAL) << "wroteBytes without a matching `getAncillaryData`?";
-  } else {
-    VLOG(5) << "this=" << this << ", FdSendMsgParamsCallback::wroteBytes() on "
-            << nh.mapped().size() << " FDs for tag " << writeTag;
-  }
-}
-
-bool AsyncFdSocket::FdSendMsgParamsCallback::registerFdsForWriteTag(
-    WriteRequestTag writeTag, SocketFds::ToSend&& fds) {
-  VLOG(5) << "this=" << this << ", registerFdsForWriteTag() on " << fds.size()
-          << " FDs for tag " << writeTag;
-  if (writeTag.empty()) {
-    return false; // no insertion, error: we require a nonempty tag
-  }
-  auto [it, inserted] = writeTagToFds_.try_emplace(writeTag, std::move(fds));
-  return inserted;
-}
-
-void AsyncFdSocket::FdSendMsgParamsCallback::destroyFdsForWriteTag(
-    WriteRequestTag writeTag) noexcept {
-  auto nh = writeTagToFds_.extract(writeTag);
-  if (nh.empty()) {
-    return; // Not every write has FDs; also, `wroteBytes` clears them.
-  }
-  VLOG(5) << "this=" << this << ", destroyFdsForWriteTag() on "
-          << nh.mapped().size() << " FDs for tag " << writeTag;
-}
-
-#endif // !Windows
-
-} // namespace folly
diff --git folly/io/async/fdsock/AsyncFdSocket.h folly/io/async/fdsock/AsyncFdSocket.h
deleted file mode 100644
index d72d086ac..000000000
--- folly/io/async/fdsock/AsyncFdSocket.h
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <folly/io/async/AsyncSocket.h>
-#include <folly/io/async/fdsock/SocketFds.h>
-
-namespace folly {
-
-/**
- * Intended for use with Unix sockets. Unlike regular `AsyncSocket`:
- *  - Can send FDs via `writeChainWithFds` using socket ancillary data (see
- *    `man cmsg`).
- *  - Always attempts to receive FDs included in incoming ancillary data.
- *    Groups of received FDs are enqueued to be retrieved via
- *    `popNextReceivedFds`.
- *  - The "read ancillary data" and "sendmsg params" callbacks are built-in
- *    are NOT customizable.
- *
- * Implementation limitation: Unlike regular `AsyncSocket`, this currently
- * does not automatically send socket timestamping events.  This could
- * easily be added, but seems of limited utility for Unix sockets.
- */
-class AsyncFdSocket : public AsyncSocket {
- public:
-  using UniquePtr = std::unique_ptr<AsyncSocket, Destructor>;
-
-  /**
-   * Create a new unconnected AsyncSocket.
-   *
-   * connect() must later be called on this socket to establish a connection.
-   */
-  explicit AsyncFdSocket(EventBase* evb);
-
-  /**
-   * Create a new AsyncSocket and begin the connection process.
-   *
-   * Unlike `AsyncSocket`, lacks `useZeroCopy` since Unix sockets do not
-   * support zero-copy.
-   */
-  AsyncFdSocket(
-      EventBase* evb,
-      const folly::SocketAddress& address,
-      uint32_t connectTimeout = 0);
-
-  /**
-   * Create a AsyncSocket from an already connected socket file descriptor.
-   *
-   * Unlike `AsyncSocket`, lacks `zeroCopyBufId` since Unix sockets do not
-   * support zero-copy.
-   */
-  AsyncFdSocket(
-      EventBase* evb,
-      NetworkSocket fd,
-      const folly::SocketAddress* peerAddress = nullptr);
-
-  /**
-   * `AsyncSocket::writeChain` analog that passes FDs as ancillary data over
-   * the socket (see `man cmsg`).
-   *
-   * Invariants:
-   *  - Max FDs per IOBuf: `SCM_MAX_FD` from include/net/scm.h, 253 for
-   *    effectively all of Linux history.
-   *  - FDs are received no earlier than the first data byte of the IOBuf,
-   *    and no later than the last data byte. More specifically:
-   *     - The currently implemented behavior is that FDs arrive precisely
-   *       with the first data byte.  This was efficient and good enough for
-   *       Thrift Rocket transport, where each message knows whether it
-   *       expects FDs, and FDs are sent with the last data fragment of each
-   *       message.
-   *     - In other conceivable designs, it could be useful to pass FDs
-   *       with the last data byte instead, which could be implemented as an
-   *       optional write flag. In Thrift Rocket, this would minimize the
-   *       buffering of FDs by the receiver, at the cost of more syscalls.
-   */
-  void writeChainWithFds(
-      WriteCallback*,
-      std::unique_ptr<folly::IOBuf>,
-      SocketFds::ToSend,
-      WriteFlags flags = WriteFlags::NONE);
-
-  void setSendMsgParamCB(SendMsgParamsCallback*) override {
-    LOG(DFATAL) << "AsyncFdSocket::setSendMsgParamCB is forbidden";
-  }
-
-// This uses no ancillary data callbacks on Windows, they wouldn't compile.
-#if !defined(_WIN32)
- protected:
-  void releaseIOBuf(
-      std::unique_ptr<folly::IOBuf>, ReleaseIOBufCallback*) override;
-
- private:
-  class FdSendMsgParamsCallback : public SendMsgParamsCallback {
-   public:
-    explicit FdSendMsgParamsCallback(folly::EventBase* evb) : eventBase_(evb) {}
-
-    void getAncillaryData(
-        folly::WriteFlags,
-        void* data,
-        const WriteRequestTag&,
-        const bool byteEventsEnabled) noexcept override;
-
-    uint32_t getAncillaryDataSize(
-        folly::WriteFlags,
-        const WriteRequestTag&,
-        const bool byteEventsEnabled) noexcept override;
-
-    void wroteBytes(const WriteRequestTag&) noexcept override;
-
-   protected:
-    friend class AsyncFdSocket;
-
-    // Returns true on success, false if the tag was already registered, or
-    // has a null IOBuf* (both are usage error).  The FDs are discarded on
-    // error.
-    bool registerFdsForWriteTag(WriteRequestTag, SocketFds::ToSend&&);
-
-    // Called from `releaseIOBuf()` above, once we're sure that an IOBuf
-    // will not be used for a write any more.  This is a good time to
-    // discard the FDs associated with this write.
-    //
-    // CAREFUL: This may be invoked for IOBufs that never had a
-    // corresponding `getAncillaryData*` call.
-    void destroyFdsForWriteTag(WriteRequestTag) noexcept;
-
-   private:
-    using WriteTagToFds =
-        std::unordered_map<WriteRequestTag, SocketFds::ToSend>;
-
-    std::pair<size_t, WriteTagToFds::iterator> getCmsgSizeAndFds(
-        const WriteRequestTag& writeTag) noexcept;
-
-    const folly::EventBase* eventBase_; // only for dcheckIsInEventBaseThread
-
-    WriteTagToFds writeTagToFds_;
-  };
-
-  void setUpCallbacks() noexcept;
-
-  FdSendMsgParamsCallback sendMsgCob_;
-#endif // !Windows
-};
-
-} // namespace folly
diff --git folly/io/async/fdsock/SocketFds.h folly/io/async/fdsock/SocketFds.h
deleted file mode 100644
index f160d78cb..000000000
--- folly/io/async/fdsock/SocketFds.h
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <memory>
-#include <variant>
-#include <glog/logging.h>
-
-#include <folly/File.h>
-
-namespace folly {
-
-/**
- * Represents an ordered collection of file descriptors. This union type
- * either contains:
- *  - FDs to be sent on a socket -- with shared ownership, since the sender
- *    may still need them, OR
- *  - FDs just received, with sole ownership.
- *
- * This hides the variant of containers behind a `unique_ptr` so that the
- * normal / fast path, which is not passing FDs, is as light as possible,
- * adding just 8 bytes for a pointer.
- *
- * == Rationale ==
- *
- * In order to send FDs over Unix sockets, Thrift plumbs them through a
- * variety of classes.  Many of these can be used both for send & receive
- * operations (THeader, StreamPayload, etc).
- *
- * This is especially useful in regular Thrift request-response handler
- * methods, where the same THeader is used for consuming the received FDs,
- * and sending back FDs with the response -- necessarily in that order.
- */
-class SocketFds final {
- public:
-  using Received = std::vector<folly::File>;
-  using ToSend = std::vector<std::shared_ptr<folly::File>>;
-
- private:
-  using FdsVariant = std::variant<Received, ToSend>;
-
- public:
-  SocketFds() = default;
-  SocketFds(SocketFds&& other) = default;
-  template <class T>
-  explicit SocketFds(T fds) {
-    ptr_ = std::make_unique<FdsVariant>(std::move(fds));
-  }
-
-  SocketFds& operator=(SocketFds&& other) = default;
-
-  bool empty() const { return !ptr_; }
-
-  size_t size() const {
-    if (empty()) {
-      return 0;
-    }
-    return std::visit([](auto&& v) { return v.size(); }, *ptr_);
-  }
-
-  // These methods help ensure the right kind of data is being plumbed or
-  // overwritten:
-  //   fds.dcheckEmpty() = otherFds.dcheck{Received,ToSend}();
-  SocketFds& dcheckEmpty() {
-    DCHECK(!ptr_);
-    return *this;
-  }
-  SocketFds& dcheckReceived() {
-    DCHECK(std::holds_alternative<Received>(*ptr_));
-    return *this;
-  }
-  SocketFds& dcheckToSend() {
-    DCHECK(std::holds_alternative<ToSend>(*ptr_));
-    return *this;
-  }
-
-  // Since ownership of `ToSend` FDs is shared, it is permissible to clone
-  // `SocketFds` that are known to be in this state.
-  //  - Invariant: `other` must be `ToSend`.
-  //  - Cost: Cloning copies a vector into a new heap allocation.
-  void cloneToSendFrom(const SocketFds& other) {
-    if (!other.empty()) {
-      auto* fds = CHECK_NOTNULL(std::get_if<ToSend>(other.ptr_.get()));
-      ptr_ = std::make_unique<FdsVariant>(*fds);
-    }
-  }
-
-  Received releaseReceived() {
-    auto fds = std::move(*CHECK_NOTNULL(std::get_if<Received>(ptr_.get())));
-    // NB: In the case of a Thrift server handler method that is receiving
-    // and then sending back FDs using the same `SocketFds` object, this
-    // deallocation (and subsequent allocation) could be avoided, e.g. by:
-    //  - Without changing the API by having an additional `std::monostate`
-    //    representing the variant being empty. This has the downside of
-    //    holding on to allocations unnecessarily in other cases.
-    //  - By adding `std::pair<Received, ToSend&> releaseReceivedAndSend()`.
-    //    This complicates the user experience.
-    ptr_.reset();
-    return fds;
-  }
-
-  ToSend releaseToSend() {
-    auto fds = std::move(*CHECK_NOTNULL(std::get_if<ToSend>(ptr_.get())));
-    ptr_.reset();
-    return fds;
-  }
-
- private:
-  std::unique_ptr<FdsVariant> ptr_;
-};
-
-} // namespace folly
-- 
2.40.1

