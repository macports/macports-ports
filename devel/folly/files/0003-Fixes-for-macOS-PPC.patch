From 4e933097037f8f47178ee27ee8161ad7ea0085b8 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Tue, 3 Jan 2023 04:13:06 +0700
Subject: [PATCH 3/3] Fixes for macOS PPC

---
 CMakeLists.txt                           | 10 ++++++++++
 folly/Portability.h                      | 12 +++++++++++-
 folly/detail/base64_detail/Base64Api.cpp |  6 ++++++
 folly/portability/Asm.h                  |  4 +++-
 4 files changed, 30 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fab26959c..aca96e4a8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -242,6 +242,16 @@ if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
 endif()
 
 # base64 SIMD files compilation
+
+if (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "ppc|ppc64")
+  message(
+    STATUS
+    "PowerPC Big Endian has a limited support, "
+    "skipping building Base64SWAR of base64"
+  )
+  list(REMOVE_ITEM files ${FOLLY_DIR}/detail/base64_detail/Base64SWAR.cpp)
+endif()
+
 if (NOT(${IS_X86_64_ARCH}))
   message(
     STATUS
diff --git a/folly/Portability.h b/folly/Portability.h
index 83d68d26e..4d94c4a8a 100644
--- a/folly/Portability.h
+++ b/folly/Portability.h
@@ -103,12 +103,18 @@ constexpr bool kHasUnalignedAccess = false;
 #define FOLLY_AARCH64 0
 #endif
 
-#if defined(__powerpc64__)
+#if defined(__powerpc64__) || defined(__ppc64__)
 #define FOLLY_PPC64 1
 #else
 #define FOLLY_PPC64 0
 #endif
 
+#if defined(__ppc__)
+#define FOLLY_PPC 1
+#else
+#define FOLLY_PPC 0
+#endif
+
 #if defined(__s390x__)
 #define FOLLY_S390X 1
 #else
@@ -120,6 +126,7 @@ constexpr bool kIsArchArm = FOLLY_ARM == 1;
 constexpr bool kIsArchAmd64 = FOLLY_X64 == 1;
 constexpr bool kIsArchAArch64 = FOLLY_AARCH64 == 1;
 constexpr bool kIsArchPPC64 = FOLLY_PPC64 == 1;
+constexpr bool kIsArchPPC = FOLLY_PPC == 1;
 constexpr bool kIsArchS390X = FOLLY_S390X == 1;
 } // namespace folly
 
@@ -318,6 +325,9 @@ constexpr auto kIsLittleEndian = false;
 #else
 constexpr auto kIsLittleEndian = true;
 #endif
+#elif defined(__APPLE__) && defined(__POWERPC__)
+// Darwin ppc/ppc64
+constexpr auto kIsLittleEndian = false;
 #else
 constexpr auto kIsLittleEndian = __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__;
 #endif
diff --git a/folly/detail/base64_detail/Base64Api.cpp b/folly/detail/base64_detail/Base64Api.cpp
index 9c8493c06..1d4666ac5 100644
--- a/folly/detail/base64_detail/Base64Api.cpp
+++ b/folly/detail/base64_detail/Base64Api.cpp
@@ -31,10 +31,16 @@ Base64RuntimeImpl base64EncodeSelectImplementation() {
         base64URLDecodeSWAR};
   }
 #endif
+#if defined(__POWERPC__) // PowerPC BE
+  return {
+      base64EncodeScalar,
+      base64URLEncode};
+#else // Everything but PowerPC BE
   return {
       base64EncodeScalar,
       base64URLEncodeScalar,
       base64DecodeSWAR,
       base64URLDecodeSWAR};
+#endif
 }
 } // namespace folly::detail::base64_detail
diff --git a/folly/portability/Asm.h b/folly/portability/Asm.h
index aa1317296..93ef58d38 100644
--- a/folly/portability/Asm.h
+++ b/folly/portability/Asm.h
@@ -41,8 +41,10 @@ inline void asm_volatile_pause() {
   asm volatile("pause");
 #elif FOLLY_AARCH64 || (defined(__arm__) && !(__ARM_ARCH < 7))
   asm volatile("yield");
-#elif FOLLY_PPC64
+#elif FOLLY_PPC64 && !(defined(__APPLE__))
   asm volatile("or 27,27,27");
+#elif (FOLLY_PPC || FOLLY_PPC64) && defined(__APPLE__)
+  __asm__ volatile ("or r27,r27,r27" ::: "memory");
 #endif
 }
 } // namespace folly
-- 
2.39.0

