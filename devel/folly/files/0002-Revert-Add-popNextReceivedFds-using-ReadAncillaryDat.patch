From d7a0a0e96bcbdfad5819fd12eff9307f40ddd298 Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Wed, 17 May 2023 14:38:31 +0800
Subject: [PATCH 2/6] Revert "Add `popNextReceivedFds` using
 `ReadAncillaryDataCallback`"

This reverts commit 185e3b2b18fca08f4ce7f58bd2cc50e53c1a3a3d.
---
 folly/io/async/AsyncSocket.cpp          |   7 +-
 folly/io/async/fdsock/AsyncFdSocket.cpp | 114 +-----------------------
 folly/io/async/fdsock/AsyncFdSocket.h   |  54 +----------
 3 files changed, 6 insertions(+), 169 deletions(-)

diff --git folly/io/async/AsyncSocket.cpp folly/io/async/AsyncSocket.cpp
index 696b18729..8339b586b 100644
--- folly/io/async/AsyncSocket.cpp
+++ folly/io/async/AsyncSocket.cpp
@@ -2513,22 +2513,17 @@ AsyncSocket::ReadResult AsyncSocket::performReadMsg(
     bytes = netops_->recv(
         fd_, msg.msg_iov[0].iov_base, msg.msg_iov[0].iov_len, MSG_DONTWAIT);
   } else {
-    int recvFlags = 0;
     if (readAncillaryDataCallback_) {
       auto buf = readAncillaryDataCallback_->getAncillaryDataCtrlBuffer();
       msg.msg_control = buf.data();
       msg.msg_controllen = buf.size();
-#if defined(__linux__)
-      // On BSD / MacOS, `AsyncFdSocket` has to do 2 extra `fcntl`s per FD.
-      recvFlags |= MSG_CMSG_CLOEXEC;
-#endif
     } else {
       msg.msg_control = nullptr;
       msg.msg_controllen = 0;
     }
 
     // `msg.msg_iov*` were set by the caller, we're ready.
-    bytes = netops::recvmsg(fd_, &msg, recvFlags);
+    bytes = netops::recvmsg(fd_, &msg, 0);
 
     // KEY INVARIANT: If `bytes > 0`, we must proceed to `ancillaryData` --
     // no error branches must interrupt this flow.  The reason is that
diff --git folly/io/async/fdsock/AsyncFdSocket.cpp folly/io/async/fdsock/AsyncFdSocket.cpp
index 24ce50111..d8cadc038 100644
--- folly/io/async/fdsock/AsyncFdSocket.cpp
+++ folly/io/async/fdsock/AsyncFdSocket.cpp
@@ -22,8 +22,7 @@ AsyncFdSocket::AsyncFdSocket(EventBase* evb)
     : AsyncSocket(evb)
 #if !defined(_WIN32)
       ,
-      sendMsgCob_(evb),
-      readAncillaryDataCob_(this) {
+      sendMsgCob_(evb) {
   setUpCallbacks();
 }
 #else
@@ -44,8 +43,7 @@ AsyncFdSocket::AsyncFdSocket(
     : AsyncSocket(evb, fd, /* zeroCopyBufId */ 0, peerAddress)
 #if !defined(_WIN32)
       ,
-      sendMsgCob_(evb),
-      readAncillaryDataCob_(this) {
+      sendMsgCob_(evb) {
   setUpCallbacks();
 }
 #else
@@ -99,7 +97,6 @@ void AsyncFdSocket::writeChainWithFds(
 
 void AsyncFdSocket::setUpCallbacks() noexcept {
   AsyncSocket::setSendMsgParamCB(&sendMsgCob_);
-  AsyncSocket::setReadAncillaryDataCB(&readAncillaryDataCob_);
 }
 
 void AsyncFdSocket::releaseIOBuf(
@@ -202,113 +199,6 @@ void AsyncFdSocket::FdSendMsgParamsCallback::destroyFdsForWriteTag(
           << nh.mapped().size() << " FDs for tag " << writeTag;
 }
 
-namespace {
-
-// Logs and returns `false` on error.
-bool receiveFdsFromCMSG(
-    const struct ::cmsghdr& cmsg, std::vector<folly::File>* fds) noexcept {
-  if (cmsg.cmsg_len < CMSG_LEN(sizeof(int))) {
-    LOG(ERROR) << "Got truncated SCM_RIGHTS message: length=" << cmsg.cmsg_len;
-    return false;
-  }
-  const size_t dataLength = cmsg.cmsg_len - CMSG_LEN(0);
-
-  const size_t numFDs = dataLength / sizeof(int);
-  if ((dataLength % sizeof(int)) != 0) {
-    LOG(ERROR) << "Non-integer number of file descriptors: size=" << dataLength;
-    return false;
-  }
-
-  const auto* data = reinterpret_cast<const int*>(CMSG_DATA(&cmsg));
-  for (size_t n = 0; n < numFDs; ++n) {
-    auto fd = data[n];
-
-// On Linux, `AsyncSocket` sets `MSG_CMSG_CLOEXEC` for us.
-#if !defined(__linux__)
-    int flags = ::fcntl(fd, F_GETFD);
-    // On error, "fail open" by leaving the FD unmodified.
-    if (UNLIKELY(flags == -1)) {
-      PLOG(ERROR) << "FdReadAncillaryDataCallback F_GETFD";
-    } else if (UNLIKELY(-1 == ::fcntl(fd, F_SETFD, flags | FD_CLOEXEC))) {
-      PLOG(ERROR) << "FdReadAncillaryDataCallback F_SETFD";
-    }
-#endif // !Linux
-
-    fds->emplace_back(fd, /*owns_fd*/ true);
-  }
-
-  return true;
-}
-
-// Logs and returns `false` on error.
-bool receiveFds(struct ::msghdr& msg, std::vector<folly::File>* fds) noexcept {
-  struct ::cmsghdr* cmsg = CMSG_FIRSTHDR(&msg);
-  while (cmsg) {
-    if (cmsg->cmsg_level != SOL_SOCKET) {
-      LOG(ERROR) << "Unexpected cmsg_level=" << cmsg->cmsg_level;
-      return false;
-    } else if (cmsg->cmsg_type != SCM_RIGHTS) {
-      LOG(ERROR) << "Unexpected cmsg_type=" << cmsg->cmsg_type;
-      return false;
-    } else {
-      if (!receiveFdsFromCMSG(*cmsg, fds)) {
-        return false;
-      }
-    }
-    cmsg = CMSG_NXTHDR(&msg, cmsg);
-  }
-  return true;
-}
-
-} // namespace
-
-void AsyncFdSocket::enqueueFdsFromAncillaryData(struct ::msghdr& msg) noexcept {
-  eventBase_->dcheckIsInEventBaseThread();
-
-  if (msg.msg_flags & MSG_CTRUNC) {
-    AsyncSocketException ex(
-        AsyncSocketException::INTERNAL_ERROR,
-        "Got MSG_CTRUNC because the `AsyncFdSocket` buffer was too small");
-    AsyncSocket::failRead(__func__, ex);
-    return;
-  }
-
-  std::vector<folly::File> fds;
-  if (!receiveFds(msg, &fds)) {
-    AsyncSocketException ex(
-        AsyncSocketException::INTERNAL_ERROR,
-        "Failed to read FDs from msghdr.msg_control");
-    AsyncSocket::failRead(__func__, ex);
-    return;
-  }
-
-  // Don't waste queue space with empty FD lists since we match FDs only to
-  // requests that claim to include FDs.
-  if (fds.empty()) {
-    return;
-  }
-
-  VLOG(4) << "this=" << this << ", enqueueFdsFromAncillaryData() got "
-          << fds.size() << " FDs, prev queue size " << fdsQueue_.size();
-  fdsQueue_.emplace(std::move(fds));
-}
-
 #endif // !Windows
 
-std::optional<SocketFds::Received> AsyncFdSocket::popNextReceivedFds() {
-#if defined(_WIN32)
-  return std::nullopt;
-#else
-  eventBase_->dcheckIsInEventBaseThread();
-
-  DCHECK_EQ(&readAncillaryDataCob_, getReadAncillaryDataCallback());
-  if (fdsQueue_.empty()) {
-    return std::nullopt;
-  }
-  auto fds = std::move(fdsQueue_.front());
-  fdsQueue_.pop();
-  return fds;
-#endif // !Windows
-}
-
 } // namespace folly
diff --git folly/io/async/fdsock/AsyncFdSocket.h folly/io/async/fdsock/AsyncFdSocket.h
index 65e43dcff..d72d086ac 100644
--- folly/io/async/fdsock/AsyncFdSocket.h
+++ folly/io/async/fdsock/AsyncFdSocket.h
@@ -16,8 +16,6 @@
 
 #pragma once
 
-#include <optional>
-
 #include <folly/io/async/AsyncSocket.h>
 #include <folly/io/async/fdsock/SocketFds.h>
 
@@ -27,9 +25,9 @@ namespace folly {
  * Intended for use with Unix sockets. Unlike regular `AsyncSocket`:
  *  - Can send FDs via `writeChainWithFds` using socket ancillary data (see
  *    `man cmsg`).
- *  - Whenever handling regular reads, concurrently attempts to receive FDs
- *    included in incoming ancillary data.  Groups of received FDs are
- *    enqueued to be retrieved via `popNextReceivedFds`.
+ *  - Always attempts to receive FDs included in incoming ancillary data.
+ *    Groups of received FDs are enqueued to be retrieved via
+ *    `popNextReceivedFds`.
  *  - The "read ancillary data" and "sendmsg params" callbacks are built-in
  *    are NOT customizable.
  *
@@ -95,24 +93,9 @@ class AsyncFdSocket : public AsyncSocket {
       SocketFds::ToSend,
       WriteFlags flags = WriteFlags::NONE);
 
-  /**
-   * This socket will look for file descriptors in the ancillary data (`man
-   * cmsg`) of each incoming read.
-   *   - FDs are kept in an internal queue, to be retrieved via this call.
-   *   - FDs are marked with FD_CLOEXEC upon receipt, although on non-Linux
-   *     platforms there is a short race window before this happens.
-   *   - Empty lists of FDs (0 FDs with this message) are not stored in the
-   *     queue.
-   *   - Returns `std::nullopt` if the queue is empty.
-   */
-  std::optional<SocketFds::Received> popNextReceivedFds();
-
   void setSendMsgParamCB(SendMsgParamsCallback*) override {
     LOG(DFATAL) << "AsyncFdSocket::setSendMsgParamCB is forbidden";
   }
-  void setReadAncillaryDataCB(ReadAncillaryDataCallback*) override {
-    LOG(DFATAL) << "AsyncFdSocket::setReadAncillaryDataCB is forbidden";
-  }
 
 // This uses no ancillary data callbacks on Windows, they wouldn't compile.
 #if !defined(_WIN32)
@@ -166,40 +149,9 @@ class AsyncFdSocket : public AsyncSocket {
     WriteTagToFds writeTagToFds_;
   };
 
-  class FdReadAncillaryDataCallback : public ReadAncillaryDataCallback {
-   public:
-    explicit FdReadAncillaryDataCallback(AsyncFdSocket* socket)
-        : socket_(socket) {}
-
-    void ancillaryData(struct ::msghdr& msg) noexcept override {
-      socket_->enqueueFdsFromAncillaryData(msg);
-    }
-
-    folly::MutableByteRange getAncillaryDataCtrlBuffer() noexcept override {
-      // Not checking thread because `ancillaryData()` will follow.
-      return folly::MutableByteRange(ancillaryDataCtrlBuffer_);
-    }
-
-   private:
-    // Max number of fds in a single `sendmsg` / `recvmsg` message
-    // Defined as SCM_MAX_FD in linux/include/net/scm.h
-    static constexpr size_t kMaxFdsPerSocketMsg{253};
-
-    AsyncFdSocket* socket_;
-    std::array<uint8_t, CMSG_SPACE(sizeof(int) * kMaxFdsPerSocketMsg)>
-        ancillaryDataCtrlBuffer_;
-  };
-
-  friend class FdReadAncillaryDataCallback;
-
-  void enqueueFdsFromAncillaryData(struct ::msghdr& msg) noexcept;
-
   void setUpCallbacks() noexcept;
 
   FdSendMsgParamsCallback sendMsgCob_;
-  std::queue<SocketFds::Received>
-      fdsQueue_; // must outlive readAncillaryDataCob_
-  FdReadAncillaryDataCallback readAncillaryDataCob_;
 #endif // !Windows
 };
 
-- 
2.40.1

