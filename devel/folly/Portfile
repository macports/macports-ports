# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim: fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           cmake 1.1
PortGroup           boost 1.0
PortGroup           openssl 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           legacysupport 1.1

legacysupport.newest_darwin_requires_legacy 19
legacysupport.use_mp_libcxx                 yes

github.setup        facebook folly 2022.08.08.00 v
revision            0
checksums           rmd160  aaaf802ce3318fb2a666201779d8d254a53e6dec \
                    sha256  a8915c7191f36d5529a49b89c3fe6847db840e5e28a9456149352c0238a5776d \
                    size    3684846

categories          devel
license             Apache-2
maintainers         nomaintainer

description         An open-source C++ library developed and used at Facebook.
long_description    Folly (acronymed loosely after Facebook Open Source Library) is a library of \
                    C++14 components designed with practicality and efficiency in mind. Folly contains \
                    a variety of core library components used extensively at Facebook. In particular, \
                    it's often a dependency of Facebook's other open source C++ efforts and place where \
                    those projects can share code. \
                    It complements (as opposed to competing against) offerings such as Boost and of course \
                    std. In fact, we embark on defining our own component only when something we need is \
                    either not available, or does not meet the needed performance profile. We endeavor to \
                    remove things from folly if or when std or Boost obsoletes them.\
                    Performance concerns permeate much of Folly, sometimes leading to designs that are \
                    more idiosyncratic than they would otherwise be (see e.g. PackedSyncPtr.h, SmallLocks.h). \
                    Good performance at large scale is a unifying theme in all of Folly.

github.tarball_from releases
distname            ${name}-v${version}
extract.mkdir       yes

platform darwin {
    if {${os.major} < 16} {
        known_fail      yes
        pre-fetch {
            ui_error "${subport} requires macOS 10.12 or later"
            return -code error "incompatible macOS version"
        }
    }
}

set port_libfmt     libfmt9
cmake.module_path-append \
                    ${prefix}/lib/${port_libfmt}/cmake

depends_lib-append  port:bzip2 \
                    port:gflags \
                    port:google-glog \
                    port:double-conversion \
                    port:libevent \
                    port:snappy \
                    port:lz4 \
                    port:lzma \
                    port:xz \
                    port:zlib \
                    port:zstd \
                    port:libsodium \
                    port:libunwind \
                    port:${port_libfmt}

cmake.generator     Ninja

configure.args-append -DBUILD_SHARED_LIBS=ON -DFOLLY_USE_JEMALLOC=0

compiler.cxx_standard   2017
configure.cxxflags-append -std=c++17

# error: typedef redefinition with different types ('uint8_t' (aka 'unsigned char') vs 'enum clockid_t')
compiler.blacklist-append {clang < 1100}
# error: 'path' is unavailable: introduced in macOS 10.15
compiler.blacklist-append {macports-clang-[5-9].0}

platform darwin {
    # https://github.com/facebook/folly/issues/864
    if {${os.major} <= 16} {
        configure.args-append     -DCOMPILER_HAS_F_ALIGNED_NEW=OFF
        configure.cxxflags-append -fno-aligned-allocation
    }
    # Support for TCP fast-open was only added to macOS 10.11+
    if {${os.major} < 15} {
        configure.cxxflags-append -DFOLLY_ALLOW_TFO=0
    }
    configure.cxxflags-append -DFOLLY_MOBILE=0
}

variant jemalloc description {Use je_malloc} {
    depends_lib-append       port:jemalloc
    configure.args-append    -DFOLLY_HAVE_WEAK_SYMBOLS=ON
    configure.args-replace   -DFOLLY_USE_JEMALLOC=0 -DFOLLY_USE_JEMALLOC=1
    configure.ldflags-append -ljemalloc
}

variant native description {Build with best native support for local CPU capabilities} {
    configure.cxxflags-append -march=native
}
