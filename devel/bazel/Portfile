# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

# Global Keywords
PortSystem                1.0
PortGroup                 github 1.0

github.setup              bazelbuild bazel 0.9.0
github.tarball_from       releases
categories                devel
maintainers               {tfmnet.com:mohamed.issa @RootFunction} \
                          openmaintainer
description               A tool for automating builds and tests.
long_description          ${description}
platforms                 darwin
license                   Apache-2

# Pre-Fetch Phase
pre-fetch {
    # Make sure the Java compiler exists
    set cmdnm "javac"
    set param [auto_execok $cmdnm]
    if {$param == ""} {
        error "The Java compiler was not detected on this machine. \
               Please ensure JDK 8 or newer is properly installed."
    }

    # Get the Java compiler version and then extract the major + minor parts
    set ver [exec -ignorestderr -- $cmdnm -version 2>@1]
    set count [scan $ver "%s %d.%d." cmdnm mjver mnver]
    if {$count != 3} {
        error "The Java compiler version data could not be parsed."
    }

    # Check for major version incompatbility
    if {$mjver < 1} {
        error "The installed JDK is too old, please upgrade to JDK 8 or newer."
    }

    # Check for minor version incompatbility
    if {$mjver == 1} {
        if {$mnver < 8} {
            error "The installed JDK is too old, please upgrade to JDK 8 or newer."
        }
    }
}

# Fetch Phase
distname                  ${distname}-dist
dist_subdir               ${name}

# Checksum Phase
checksums           rmd160  5cb89e5598a2c27c8ce6c30bad9107f67d7547ee \
                    sha256  efb28fed4ffcfaee653e0657f6500fc4cbac61e32104f4208da385676e76312a

# Extract Phase
use_zip                   yes
extract.mkdir             yes

# Patch Phase
patch {}

# Configure Phase
use_configure             no

# Build Phase
build {
    # The Bazel compilation script erroneously writes to the standard
    # error stream, so we'll just ignore it. If the build fails, then there
    # won't be a binary to copy and the destroot phase will fail.
    exec -ignorestderr -- bash ${worksrcpath}/compile.sh

    # Put executable in main working folder
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${worksrcpath}

    # Get ready to build the bash completion script
    file delete -force /var/tmp/_${name}_root
    exec -ignorestderr -- git init ${worksrcpath}
    exec -ignorestderr -- git add ${worksrcpath}
    exec -ignorestderr -- git commit -m GitRepo

    # Build the bash completion script
    exec -ignorestderr -- ${worksrcpath}/${name} build //scripts:${name}-complete.bash
}

# Test Phase
test {}

# Destroot Phase
destroot {
    # Copy compiled binary
    set bindir ${prefix}/bin
    xinstall -d ${destroot}${bindir}
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${destroot}${bindir}

    # Copy bash and zsh completion scripts to designated area for on-demand usage
    set bcompldir ${prefix}/share/bash-completion/completions
    xinstall -d ${destroot}${bcompldir}
    xinstall -m 755 ${worksrcpath}/${name}-bin/scripts/${name}-complete.bash ${destroot}${bcompldir}/${name}
    set zcompldir ${prefix}/share/zsh/site-functions
    xinstall -d ${destroot}${zcompldir}
    xinstall -m 755 ${worksrcpath}/scripts/zsh_completion/_${name} ${destroot}${zcompldir}
}

# Post-Destroot Phase
post-destroot {
    # Mark documentation, source, and example directories
    set docdir ${prefix}/share/doc/${name}
    set srcdir ${prefix}/src/${name}
    set expdir ${prefix}/share/examples/${name}

    # Copy documentation files
    xinstall -d ${destroot}${docdir}
    xinstall -m 644 -W ${worksrcpath} AUTHORS \
                                      CHANGELOG.md \
                                      CONTRIBUTING.md \
                                      CONTRIBUTORS \
                                      ISSUE_TEMPLATE.md \
                                      LICENSE \
                                      README.md \
                       ${destroot}${docdir}

    # Copy source files
    xinstall -d ${destroot}${srcdir}
    file copy -force {*}[glob ${worksrcpath}/src/*] ${destroot}${srcdir}

    # Copy example files
    xinstall -d ${destroot}${expdir}
    file copy -force {*}[glob ${worksrcpath}/examples/*] ${destroot}${expdir}
}

notes "
See http://bazel.build/docs/getting-started.html to start a new project!
"
