# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                                            1.0
PortGroup             github                          1.0
PortGroup             java                            1.0
PortGroup             compilers                       1.0
PortGroup             xcodeversion                    1.0
PortGroup             compiler_blacklist_versions     1.0

# epoch unfortunately needed to go back to 0.18.0 as 0.19.0
# built tensorflow badily, giving runtime seg. faults...
# Now resolved, but epoch must NOT be removed though now.
epoch                 1

# List of all bazel sub-ports ( e.g. as required by tensorflow )
set bazel_subports {bazel-0.25 bazel-2.0}
set all_bazels ${bazel_subports}
lappend all_bazels bazel

# define ports and sub-ports
name bazel
foreach b ${bazel_subports} { subport $b {} }

# Set the conflicts list
foreach b [lsearch -inline -all -not -exact $all_bazels ${subport}] {
    conflicts-append $b
}

# Java PG settings. Potentially changed in sub-port specifics below.
set java_v 11+
set java_f openjdk13

# Min supported Darwin version
set min_darwin 16

if { ${name} eq ${subport} } {

    # Main port
    github.setup      bazelbuild ${name} 3.2.0
    revision          0

    checksums         rmd160  874d690b524dc038af1f20a3fe4770ac5e0c15a1 \
                      sha256  44ec129436f6de45f2230e14100104919443a1364c2491f5601666b358738bfa \
                      size    269368916

} elseif { "bazel-2.0" eq ${subport} } {
    
    # Specific version for py-tensorflow - DO NOT CHANGE
    github.setup      bazelbuild ${name} 2.0.0
    revision          0

    # livecheck none is correct here, see above.
    livecheck.type    none
    
    checksums         rmd160  acf9b886d2ec69f2c7019037e3aeba6de48cb011 \
                      sha256  724da3c656f68e787a86ebb9844773aa1c2e3a873cc39462a8f1b336153d6cbb \
                      size    259625808

} elseif { "bazel-0.25" eq ${subport} } {

    # Specific version for py-tensorflow1 - DO NOT CHANGE
    github.setup      bazelbuild ${name} 0.25.2
    revision          1

    # livecheck none is correct here, see above.
    livecheck.type    none

    checksums         rmd160  cfff49a4be85f7693ae615c293b13d0a447b80d7 \
                      sha256  7456032199852c043e6c5b3e4c71dd8089c1158f72ec554e6ec1c77007f0ab51 \
                      size    275804130
    
    # Java fallback
    set java_f openjdk12

    # min OS
    set min_darwin 14

}

# Check OS support
if { ${os.platform} eq "darwin" && ${os.major} < ${min_darwin} } {
    known_fail yes
    # https://trac.macports.org/ticket/58518
    pre-fetch {
        ui_error "${subport} ${version} requires Darwin ${min_darwin} or newer"
        return -code error "incompatible macOS version"
    }
}

# Required java version.
java.version          ${java_v}
# JDK port to install if required java not found
java.fallback         ${java_f}
# JDK only needed at build time, but java PG sets lib dependency so
# declare no conflict to allow redistribution of binaries.
license_noconflict    ${java_f}

github.tarball_from   releases

categories            devel

maintainers           {tfmnet.com:mohamed.issa @RootFunction} \
                      {jonesc @cjones051073} \
                      openmaintainer

description           A tool for automating builds and tests.
long_description      {*}${description}

platforms             darwin
license               Apache-2

distname              ${distname}-dist

use_zip               yes
extract.mkdir         yes

use_configure         no

patch.pre_args        -p1

# The oldest Xcode version to use default Xcode compiler
# Note setting here should be in sync with that in py-tensorflow
set bazel_min_xcode   9.0
# Work out if we should be using macports clang
set use_mp_clang [ expr ( [ string match macports-clang-* ${configure.compiler} ] || [ vercmp ${xcodeversion} ${bazel_min_xcode} ] < 0 ) ]

# Even though bazel can build without Xcode, mark use Xcode for now since it fails to
# build with tracemode on latest master if both CLT and Xcode are available.
# Better solution is to respect MacPorts environment configure.developer_dir
use_xcode             yes

# python versions. Build needs both 'python2' and 'python3'
set py3ver 3.8
set py2ver 2.7

depends_lib-append    port:cctools

depends_build-append  bin:zip:zip \
                      port:python[string map {. {}} ${py2ver}] \
                      port:python[string map {. {}} ${py3ver}]

post-extract {
    # Make dir with selected MP 'python2' and 'python3' and add to PATH during build below
    file mkdir ${workpath}/bin
    ln -s ${prefix}/bin/python${py2ver} ${workpath}/bin/python2
    ln -s ${prefix}/bin/python${py3ver} ${workpath}/bin/python3
}

if {${os.platform} eq "darwin" && ${os.major} < 16} {
    # https://github.com/bazelbuild/bazel/issues/6188
    depends_build-append  port:unzip
}
post-patch {
    if       {[vercmp ${xcodeversion} 7.0] < 0} {
        # Use hacked version that does not find anything.
        # We use MacPorts compiler toolchain anyway so not a problem.
        file copy -force ${filespath}/xcode_locator_fixes/Xcode6-xcode_locator.m ${worksrcpath}/tools/osx/xcode_locator.m
    } elseif {[vercmp ${xcodeversion} 8.0] < 0} {
        # Revert xcode-locator to an older version
        # https://raw.githubusercontent.com/bazelbuild/bazel/7372c04d40d7ab45fa2649c8be002ee6909668d1/tools/osx/xcode_locator.m
        file copy -force ${filespath}/xcode_locator_fixes/Xcode7-xcode_locator.m ${worksrcpath}/tools/osx/xcode_locator.m
    } elseif {[vercmp ${xcodeversion} 9.0] < 0} {
        # Revert xcode-locator to an older version
        # From bazel 0.21.0
        file copy -force ${filespath}/xcode_locator_fixes/Xcode8-xcode_locator.m ${worksrcpath}/tools/osx/xcode_locator.m
    }

    # Patch build files to enforce correct compiler
    foreach f [ exec find ${worksrcpath}/ -name "configure" -or -name "configure.py" -or -name "compile.sh" -or -name "*.tpl" -or -name "*.bzl" -or -name "CROSSTOOL" -or -name "configure.py" -or -name "MOCK_CROSSTOOL" ] {
        foreach cmd {ar nm strip libtool ld objdump} {
            reinplace -q "s|/usr/bin/${cmd}|${prefix}/bin/${cmd}|g" ${f}
        }
        reinplace -q "s|/usr/bin/clang|${configure.cc}|g"       ${f}
        reinplace -q "s|\"clang\"|\"${configure.cc}\"|g"        ${f}
        reinplace -q "s| clang | ${configure.cc} |g"            ${f}
        reinplace -q "s|/usr/local/include|${prefix}/include|g" ${f}
        reinplace -q "s|std=c++0x|std=c++11|g"                  ${f}
        reinplace -q "s|std=c++1y|std=c++14|g"                  ${f}
        reinplace -q "s|std=c++1z|std=c++17|g"                  ${f}
    }
}

# Blacklist too old system compilers
compiler.blacklist-append {clang < 710}

# Clang 7, 8 and 9 fail with missing libarclite on older systems (e.g. 10.10)
# ../usr/bin/xcrun /opt/local/bin/clang-mp-8.0 -fobjc-arc -framework CoreServices -framework Foundation -o /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_bazel/bazel26/work/.tmp/bazel_4sKHinCP/archive/_embedded_binaries/xcode-locator tools/osx/xcode_locator.m
# ld: file not found: /opt/local/libexec/llvm-8.0/lib/arc/libarclite_macosx.a
compiler.blacklist-append {macports-clang-[7-9].0}

# require c++11
compiler.cxx_standard 2011

build.env-append  CC=${configure.cc} \
                 CXX=${configure.cxx} \
              TMPDIR=${workpath}/tmp \
           JAVA_HOME=${java.home}
# Disable Xcode detection on older OSes, as we want the
# MP provided commandline utilities to be used instead.
if { ${use_mp_clang} } {
    build.env-append BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
}

variant bash_completion {
    depends_build-append  bin:bash:bash
}

build {

    # bazel cannot be built if gcc is 'port selected'
    # https://trac.macports.org/ticket/58569
    # Until it can be figured out how to stop bazel finding and using macports gcc
    # just detect when this situation arises and error out...
    if { [file exists ${prefix}/bin/gcc] } {
        ui_error "${subport} cannot be built with 'port select gcc' active."
        ui_error "Please run 'sudo port select gcc none' and try again."
        ui_error "Once the build is complete, you can safely re-select your preferred gcc."
        return -code error "build error"
    }

    # Build bazel
    system -W ${worksrcpath} "PATH=${workpath}/bin:\$PATH JAVA_HOME=${java.home} VERBOSE=yes BAZEL_WRKDIR=${workpath} ./compile.sh"

    # Put executable in main working folder
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${worksrcpath}
    
    # Include bash completion support ?
    if { [variant_isset bash_completion]} {

        # Get ready to build the bash completion script
        file delete -force /var/tmp/_${name}_root

        # Build the bash completion script
        system -W ${worksrcpath} "./${name} --max_idle_secs=60 --output_user_root=${workpath} build -s --javabase //:jdk10 --host_javabase //:jdk10 //scripts:${name}-complete.bash"

    }
}

destroot {
    # Copy compiled binary
    set bindir ${prefix}/bin
    xinstall -d ${destroot}${bindir}
    xinstall -m 755 -W ${worksrcpath}/output ${name} ${destroot}${bindir}
    # Copy bash and zsh completion scripts to designated area for on-demand usage
    if { [variant_isset bash_completion]} {
        set bcompldir ${prefix}/share/bash-completion/completions
        xinstall -d ${destroot}${bcompldir}
        xinstall -m 755 ${worksrcpath}/${name}-bin/scripts/${name}-complete.bash ${destroot}${bcompldir}/${name}
        set zcompldir ${prefix}/share/zsh/site-functions
        xinstall -d ${destroot}${zcompldir}
        xinstall -m 755 ${worksrcpath}/scripts/zsh_completion/_${name} ${destroot}${zcompldir}
    }
}

post-destroot {
    # Mark documentation, source, and example directories
    set docdir ${prefix}/share/doc/${name}
    set srcdir ${prefix}/src/${name}
    set expdir ${prefix}/share/examples/${name}

    # Copy documentation files
    xinstall -d ${destroot}${docdir}
    xinstall -m 644 -W ${worksrcpath} AUTHORS \
                                      CHANGELOG.md \
                                      CONTRIBUTING.md \
                                      CONTRIBUTORS \
                                      ISSUE_TEMPLATE.md \
                                      LICENSE \
                                      README.md \
                       ${destroot}${docdir}

    # Copy source files
    xinstall -d ${destroot}${srcdir}
    file copy -force {*}[glob ${worksrcpath}/src/*] ${destroot}${srcdir}

    # Copy example files
    xinstall -d ${destroot}${expdir}
    file copy -force {*}[glob ${worksrcpath}/examples/*] ${destroot}${expdir}
}

notes "
See http://bazel.build/docs/getting-started.html to start a new project!
"
