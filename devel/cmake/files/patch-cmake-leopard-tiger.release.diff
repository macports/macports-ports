kencu@macports.org
The <memory> header seems to be needed if building with gcc/libstdc++ on MacOS
adding it does no harm to clang/libc++ builds
it must be somehow automatically included with the libc++ headers

diff --git Source/cmMachO.h Source/cmMachO.h
index 0c44b55..06c39db 100644
--- Source/cmMachO.h
+++ Source/cmMachO.h
@@ -7,6 +7,7 @@
 
 #include <iosfwd>
 #include <string>
+#include <memory>
 
 #if !defined(CMAKE_USE_MACH_PARSER)
 #  error "This file may be included only if CMAKE_USE_MACH_PARSER is enabled."
---

kencu@macports.org
The patches below match the tiger patches in the libuv port.

Although cmake is configured to use the system libuv, it appears that the
bootstrap version of cmake uses a more current version, and that is a moving
target as libuv advances.

At some point we may have to switch to an older bootstrap version of cmake,
if libuv becomes too difficult to keep up-to-date.

diff --git Utilities/cmlibuv/src/unix/core.c Utilities/cmlibuv/src/unix/core.c
index cf7dea0..b48ca73 100644
--- Utilities/cmlibuv/src/unix/core.c
+++ Utilities/cmlibuv/src/unix/core.c
@@ -525,10 +525,24 @@ skip:
  * will unwind the thread when it's in the cancel state. Work around that
  * by making the system call directly. Musl libc is unaffected.
  */
+
+#if defined(__GNUC__)
+#define GCC_VERSION \
+	(__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
+#endif
+#if defined(__clang__) || (defined(GCC_VERSION) && (GCC_VERSION >= 40500))
+/* gcc diagnostic pragmas available */
+# define GCC_DIAGNOSTIC_AVAILABLE
+#endif
+
 int uv__close_nocancel(int fd) {
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
+
+#if defined(GCC_DIAGNOSTIC_AVAILABLE)
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdollar-in-identifier-extension"
+#endif
+
 #if defined(__LP64__)
   extern int close$NOCANCEL(int);
   return close$NOCANCEL(fd);
@@ -536,7 +550,11 @@ int uv__close_nocancel(int fd) {
   extern int close$NOCANCEL$UNIX2003(int);
   return close$NOCANCEL$UNIX2003(fd);
 #endif
+
+#if defined(GCC_DIAGNOSTIC_AVAILABLE)
 #pragma GCC diagnostic pop
+#endif
+
 #elif defined(__linux__)
   return syscall(SYS_close, fd);
 #else
@@ -1306,8 +1324,12 @@ int uv_os_unsetenv(const char* name) {
   if (name == NULL)
     return UV_EINVAL;
 
+#if ( defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED < 1050)
+    unsetenv(name);
+#else
   if (unsetenv(name) != 0)
     return UV__ERR(errno);
+#endif
 
   return 0;
 }
diff --git Utilities/cmlibuv/src/unix/fs.c Utilities/cmlibuv/src/unix/fs.c
index 5fb34f1..7453980 100644
--- Utilities/cmlibuv/src/unix/fs.c
+++ Utilities/cmlibuv/src/unix/fs.c
@@ -743,7 +743,7 @@ static ssize_t uv__fs_sendfile(uv_fs_t* req) {
 
     return -1;
   }
-#elif defined(__APPLE__)           || \
+#elif defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050 || \
       defined(__DragonFly__)       || \
       defined(__FreeBSD__)         || \
       defined(__FreeBSD_kernel__)
@@ -1055,7 +1055,7 @@ static void uv__to_stat(struct stat* src, uv_stat_t* dst) {
   dst->st_blksize = src->st_blksize;
   dst->st_blocks = src->st_blocks;
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
   dst->st_atim.tv_sec = src->st_atimespec.tv_sec;
   dst->st_atim.tv_nsec = src->st_atimespec.tv_nsec;
   dst->st_mtim.tv_sec = src->st_mtimespec.tv_sec;
diff --git Utilities/cmlibuv/src/unix/tty.c Utilities/cmlibuv/src/unix/tty.c
index db479d6..5a7a86b 100644
--- Utilities/cmlibuv/src/unix/tty.c
+++ Utilities/cmlibuv/src/unix/tty.c
@@ -44,7 +44,7 @@ static int uv__tty_is_slave(const int fd) {
   int dummy;
 
   result = ioctl(fd, TIOCGPTN, &dummy) != 0;
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
   char dummy[256];
 
   result = ioctl(fd, TIOCPTYGNAME, &dummy) != 0;
