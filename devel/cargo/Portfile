# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0

github.setup        rust-lang cargo 0.24.0
revision            1
categories          devel
platforms           darwin
supported_archs     i386 x86_64
license             {MIT Apache-2}
maintainers         sean openmaintainer

description         The Rust package manager

long_description    Cargo downloads your Rust projectâ€™s dependencies and \
                    compiles your project.

homepage            https://crates.io

# can use cmake or cmake-devel; default to cmake.
depends_build       bin:cmake:cmake \
                    bin:python:python27

depends_lib         port:openssl \
                    port:curl \
                    port:rust

# Use an older version of cargo to build itself
set stage0(version)  0.22.0
set stage0(platform) ${build_arch}-apple-darwin

if {${build_arch} eq "i386"} {
    set stage0(platform) i686-apple-darwin
}

set stage0(distname) ${name}-${stage0(version)}-${stage0(platform)}
set stage0(distfile) ${stage0(distname)}${extract.suffix}

master_sites-append https://static.rust-lang.org/dist/:stage0
distfiles-append    ${stage0(distfile)}:stage0

checksums           ${distname}${extract.suffix} \
                    rmd160  b731ffc29dc2cacd195bfb0a219f0fe2dde14791 \
                    sha256  9356ec75e2716fb1442b009feac8e83d0ad9dd80e292dbc3ea1dbe168d9e08c1

if {${build_arch} eq "i386"} {
    checksums-append \
                    ${stage0(distfile)} \
                    rmd160  a3e5641d43fdce80a5414ba15c394d211d256f45 \
                    sha256  ca1149714d3c537c6ac82e8161387df317f69fb2b386c95dc046d3d37af87edd
} else {
    checksums-append \
                    ${stage0(distfile)} \
                    rmd160  5c5ef6d93c61c95c786ca5f067236537e45712ab \
                    sha256  8968697ae6eef3b178438a6d5563f531e499308dcea7f4915665dbcec54c851a
}

# github.setup sets this to yes, breaking the stage0 fetch
fetch.ignore_sslcert no

use_configure       no

build.cmd           ${workpath}/${stage0(distname)}/${name}/bin/cargo
build.target        build
build.args          --release -j${build.jobs}
build.env           OPENSSL_DIR=${prefix}

destroot {
    xinstall ${worksrcpath}/target/release/cargo ${destroot}${prefix}/bin

    xinstall {*}[glob ${worksrcpath}/src/etc/man/*] \
        ${destroot}${prefix}/share/man/man1

    xinstall -d ${destroot}${prefix}/share/doc/${name}
    xinstall -W ${worksrcpath} \
        LICENSE-APACHE LICENSE-MIT LICENSE-THIRD-PARTY README.md \
        ${destroot}${prefix}/share/doc/${name}

    xinstall -d ${destroot}${prefix}/etc/bash_completion.d
    xinstall ${worksrcpath}/src/etc/cargo.bashcomp.sh \
        ${destroot}${prefix}/etc/bash_completion.d/${name}

    xinstall -d ${destroot}${prefix}/share/zsh/site-functions
    xinstall ${worksrcpath}/src/etc/_cargo \
        ${destroot}${prefix}/share/zsh/site-functions
}
