# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           clang_dependency 1.0
PortGroup           muniversal 1.0

name                legacy-support
categories          devel
platforms           darwin

maintainers         {jonesc @cjones051073} openmaintainer
license             MIT

description         Installs wrapper headers to add missing functionality to legacy OSX versions.
long_description    {*}${description}

# Primary release version
set release_ver     1.0.6

# Binary compatibility version
set compat_ver      1.0.0

subport ${name} {
    conflicts           ${name}-devel
    github.setup        macports macports-legacy-support ${release_ver} v
    revision            1
    checksums           rmd160  dd0cc654a70aca90c465c625c4f9beb69f93bf24 \
                        sha256  165068ed58369610a760fa4bb14b80774732e51e84deb85b30d57158ffbf9f13 \
                        size    54909
}

subport ${name}-devel {
    conflicts           ${name}
    github.setup        macports macports-legacy-support 55619949e8265723163a3029494d6c66874661b8
    version             20220421
    revision            1
    livecheck.type      none
    checksums           rmd160  dd0cc654a70aca90c465c625c4f9beb69f93bf24 \
                        sha256  165068ed58369610a760fa4bb14b80774732e51e84deb85b30d57158ffbf9f13 \
                        size    54909
    set v_split         [split ${release_ver} .]
    set release_ver     [lindex ${v_split} 0].[lindex ${v_split} 1].99
}

use_configure       no

# Until this can be fixed disable parallel builds...
# https://build.macports.org/builders/ports-10.10_x86_64-builder/builds/141962/steps/install-port/logs/stdio
use_parallel_build  no

post-extract {
    # until upstream can be fixed, do not include atexit symbols
    # under certain circumstances, infinite recursive loops can form
    delete ${worksrcpath}/src/macports_legacy_atexit.c
}

set max_darwin_reexport 19
set max_darwin_optool   20

build.env-append    CXX=${configure.cxx} \
                    CC=${configure.cc} \
                    PREFIX=${prefix} \
                    "LIPO=/usr/bin/lipo" \
                    PLATFORM=${os.major} \
                    MAX_DARWIN_REEXPORT=${max_darwin_reexport} \
                    SOCURVERSION=${release_ver} \
                    SOCOMPATVERSION=${compat_ver}

destroot.env        PREFIX=${prefix}

# install Tiger-specific fixes
platform darwin 8 {
    # there is no system copyfile.h, so find local copy
    configure.cflags-append -isystem${worksrcpath}/tiger_only/include
    post-destroot {
        # use Tiger version of copyfile.h
        delete ${destroot}${prefix}/include/LegacySupport/copyfile.h
        # Copy all tiger specific 'binaries' and includes
        tiger_copy ${worksrcpath}/tiger_only/bin      ${destroot}${prefix}/bin/
        tiger_copy ${worksrcpath}/tiger_only/include  ${destroot}${prefix}/include/LegacySupport/
    }
}

if {![info exists universal_possible]} {
    set universal_possible [expr {${os.universal_supported} && [llength ${configure.universal_archs}] >= 2}]
}
if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${universal_archs_supported} {
        lappend merger_build_env(${arch})   "CXXFLAGS=${configure.cxxflags} [muniversal_get_arch_flag ${arch}]" \
                                            "CFLAGS=${configure.cflags} [muniversal_get_arch_flag ${arch}]" \
                                            "LDFLAGS=${configure.ldflags} [muniversal_get_arch_flag ${arch}]" \
                                            "FORCE_ARCH=${arch}"
    }
} else {
    build.env-append                        "CXXFLAGS=${configure.cxxflags} [get_canonical_archflags cxx]" \
                                            "CFLAGS=${configure.cflags} [get_canonical_archflags cc]" \
                                            "LDFLAGS=${configure.ldflags} [get_canonical_archflags ld]" \
                                            "FORCE_ARCH=${build_arch}"
}

test.env            {*}${build.env}
test.run            yes
test.target         test

proc tiger_copy {from to} {
    fs-traverse f [glob -directory ${from} *] {
        if {[file isdirectory ${f}]} {
            set base_dir [file tail ${f}]
            xinstall -d ${to}${base_dir}
            tiger_copy ${f} ${to}${base_dir}
        } else {
            ui_debug "Copying ${f} to ${to}"
            copy ${f} ${to}
        }
    }
}

# The legacy-support build cannot create the LegacySupportSystem library directly
# on newer systems as the reexport link option to /usr/lib/libSystem.B.dylib
# does not work, due to the file system library cache added in macOS11.
# Fallback to using optool here. Optool also currently not working on arm.
if { ${build_arch} ne "arm64" && ${os.major} > ${max_darwin_reexport} && ${os.major} <= ${max_darwin_optool} } {
    depends_build-append port:optool
    post-destroot {
        set legSupp   ${prefix}/lib/libMacportsLegacySupport.dylib
        set legSystem ${prefix}/lib/libMacportsLegacySystem.B.dylib
        if {![file exists ${destroot}${legSystem}]} {
            copy ${destroot}${legSupp} ${destroot}${legSystem}
            system "${prefix}/bin/optool install -c reexport -p /usr/lib/libSystem.B.dylib -t ${destroot}${legSystem}"
        } else {
            ui_warn "${destroot}${legSystem} already exists."
        }
    }
}

if {![file exists ${prefix}/libexec/mpstats]} {
    notes "
    To help make sure your system continues to be well represented by MacPorts, especially\
    if your system is not one of the latest macOS releases, please consider installing mpstats.\
    It will periodically send an anonymous synopsis of your OS settings and installed ports.\
    The information provided by this is useful to help determine how resources are allocated.

    You can install mpstats like this:    sudo port install mpstats
    "
}
