# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0

name                    cctools
# Xcode 8.1
version                 895
revision                7
set ld64_version        274.1
categories              devel
platforms               darwin
maintainers             {jeremyhu @jeremyhu} openmaintainer
license                 {APSL-2 GPL-2+}
installs_libs           no
description             Compiler Tools for Mac OS X and Darwin
long_description        A set of essential tools to support development \
                        on Mac OS X and Darwin. Conceptually similar \
                        similar to binutils on other platforms.

homepage                http://opensource.apple.com/source/${name}/
master_sites            http://opensource.apple.com/tarballs/${name} \
                        http://opensource.apple.com/tarballs/ld64

distfiles               ld64-${ld64_version}.tar.gz ${name}-${version}.tar.gz

checksums               ld64-274.1.tar.gz \
                        rmd160  c86030f9d6d44a6a53d262952d9508b5eff46353 \
                        sha256  6cbe886717de833789fa562ec4889ebf9136ae5f7573d17d39836d3f5755b7ab \
                        cctools-895.tar.gz \
                        rmd160  e46dd79bd87c727f1326c569d0b8e9eadcc57495 \
                        sha256  ce66034fa35117f9ae76bbb7dd72d8068c405778fa42e877e8a13237a10c5cb7

patchfiles              cctools-829-lto.patch \
                        PR-37520.patch \
                        cctools-839-static-dis_info.patch \
                        PR-12400897.patch \
                        cctools-862-prunetrie.patch \
                        cctools-895-big_endian.patch \
                        cctools-895-OFILE_LLVM_BITCODE.patch \
                        not-clang.patch

if {${os.major} < 11} {
    patchfiles-append snowleopard-strnlen.patch
}

set all_llvm_variants {llvm39 llvm40 llvm50 llvmdev}
if {${os.major} < 12} {
    lappend all_llvm_variants llvm34
}
if {${os.major} < 14} {
    lappend all_llvm_variants llvm37
}
array set llvm_variant_version {llvm34 3.4 llvm37 3.7 llvm39 3.9 llvm40 4.0 llvm50 5.0 llvmdev devel}
set llvm_version {}

foreach variantname $all_llvm_variants {
    set this_llvm_version $llvm_variant_version($variantname)
    variant $variantname conflicts xcode {*}[ldelete $all_llvm_variants $variantname] description "Use llvm-${this_llvm_version} for libLTO, llvm-mc, llvm-size, and llvm-nm" "
        set llvm_version        $this_llvm_version
        depends_lib-append      port:llvm-${this_llvm_version}
    "
}

# Disable all llvm variants on Xcode 9 systems, to force use of xcode variant
# base has variant_set, but no variant_unset, so emulate it.
global variations
if {[vercmp $xcodeversion 9.0] >= 0} {
    foreach variantname $all_llvm_variants {
        if {[variant_isset ${variantname}]} {
            ui_msg "Forcibly disabling variant ${variantname}"
            default_variants -${variantname}
            set variations(${variantname}) -
        }
    }
}

proc some_llvm_variant_set {} {
    global all_llvm_variants
    foreach variantname $all_llvm_variants {
        if {[variant_isset $variantname]} {
            return yes
        }
    }
    return no
}

if { ![some_llvm_variant_set] && ![variant_isset xcode] } {
    if {${os.major} == 12 || ${os.major} == 13} {
        # Using llvm-3.7 to break a dependency cycle (https://trac.macports.org/ticket/53138)
        default_variants +llvm37
    } elseif {${os.major} == 10 || ${os.major} == 11} {
        default_variants +llvm34
    }

    # TODO?: cctools-895 requires llvm-3.4 as a minimum version for LTO support
    # elseif {${os.major} == 9} {
    #     # Using llvm-3.3 to break dependency cycle (https://trac.macports.org/ticket/52091)
    #     default_variants +llvm33
    # }

    if {[vercmp $xcodeversion 9.0] >= 0} {
        default_variants +xcode
    } elseif {![some_llvm_variant_set] && ${os.major} >= 10} {
        default_variants +llvm50
    }
}

variant xcode conflicts universal description "Use Xcode supplied toolkit" {
    supported_archs noarch
    patchfiles
    distfiles
    build {}
    destroot {
        set xcode_cmds {bitcode-strip nm nm-classic as ar otool ranlib lipo libtool segedit strip size size-classic strings objdump}
        foreach xcode_cmd $xcode_cmds {
            set mp_cmd ${destroot}${prefix}/bin/${xcode_cmd}
            # Create script that uses xcrun to run the Xcode provided command
            system "echo '#!/bin/bash'                                          > ${mp_cmd}"
            system "echo 'if \[\[ \-x \/usr\/bin\/xcrun \]\] \; then'          >> ${mp_cmd}"
            system "echo '  exec \/usr\/bin\/xcrun ${xcode_cmd} \"\$\{\@\}\"'  >> ${mp_cmd}"
            system "echo 'elif \[\[ \-x \/usr\/bin\/${xcode_cmd} \]\] \; then' >> ${mp_cmd}"
            system "echo '  exec \/usr\/bin/${xcode_cmd} \"\$\{\@\}\"'         >> ${mp_cmd}"
            system "echo 'else'                                                >> ${mp_cmd}"
            system "echo '  exec ${xcode_cmd} \"\$\{\@\}\"'                    >> ${mp_cmd}"
            system "echo 'fi'                                                  >> ${mp_cmd}"
            # make executable
            system "chmod +x ${mp_cmd}"
        }
    }
}

destroot.args           RAW_DSTROOT=${destroot} DSTROOT=${destroot}${prefix} RC_ProjectSourceVersion=${version}

if {![variant_isset xcode]} {
    depends_build       port:libunwind-headers
    variant universal conflicts xcode {}
}

post-extract {
    if {![variant_isset xcode]} {
        file copy ${worksrcpath}/../ld64-${ld64_version}/src/other/PruneTrie.cpp ${worksrcpath}/misc
        system "touch ${worksrcpath}/../ld64-${ld64_version}/src/abstraction/configure.h"
    }
}

post-patch {
    if {![variant_isset xcode]} {
        # We don't want to build cctools ld.  We want to use ld64
        reinplace "/^SUBDIRS_32/s/ld//" ${worksrcpath}/Makefile
        reinplace "/^COMMON_SUBDIRS/s/ ld / /" ${worksrcpath}/Makefile

        # Use our chosen version of llvm
        if {${llvm_version} ne ""} {
            reinplace "s:\"llvm-objdump\":\"llvm-objdump-mp-${llvm_version}\":" ${worksrcpath}/otool/main.c
            reinplace "s:\"llvm-mc\":\"llvm-mc-mp-${llvm_version}\":" ${worksrcpath}/as/driver.c
            reinplace "s:@@LLVM_LIBDIR@@:${prefix}/libexec/llvm-${llvm_version}/lib:" ${worksrcpath}/libstuff/lto.c
        }

        foreach file [glob ${worksrcpath}/{*/,}Makefile] {
            reinplace "s:/usr/local:@PREFIX@:g" ${file}
            reinplace "s:/usr:@PREFIX@:g" ${file}
            reinplace "s:@PREFIX@:${prefix}:g" ${file}
            reinplace "s:${prefix}/efi:${prefix}:g" ${file}
            reinplace "s:/Developer${prefix}:${prefix}:g" ${file}
            reinplace "s:${prefix}/man:${prefix}/share/man:g" ${file}

            # Don't strip installed binaries
            reinplace "s:\\(install .*\\)-s :\\1:g" ${file}

            if {${os.major} < 10} {
                reinplace "s:${prefix}/bin/mig:/usr/bin/mig:g" ${file}
            }
        }
    }
}

use_configure           no
use_parallel_build      yes

# https://trac.macports.org/ticket/43745
configure.cflags-append -std=gnu99

build.target            all

set cxx_stdlibflags {}
if {[string match *clang* ${configure.cxx}]} {
    set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
}

configure.cppflags-append \
                        -I${worksrcpath}/../ld64-${ld64_version}/src/abstraction \
                        -I${worksrcpath}/../ld64-${ld64_version}/src/other \
                        -I${worksrcpath}/include

pre-build {
    if {![variant_isset xcode]} {
        build.args-append \
            RC_ProjectSourceVersion=${version} \
            USE_DEPENDENCY_FILE=NO \
            BUILD_DYLIBS=NO \
            CC="${configure.cc} ${configure.cflags}" \
            CXX="${configure.cxx} ${configure.cxxflags}" \
            CXXLIB="${cxx_stdlibflags}" \
            TRIE=-DTRIE_SUPPORT \
            RC_ARCHS="[get_canonical_archs]" \
            SDK="${configure.cppflags}"

        if {${llvm_version} ne ""} {
            build.args-append \
                LTO=-DLTO_SUPPORT \
                RC_CFLAGS="[get_canonical_archflags] `llvm-config-mp-${llvm_version} --cflags`" \
                LLVM_MC="llvm-mc-mp-${llvm_version}"
        } else {
            build.args-append \
                LTO= \
                RC_CFLAGS="[get_canonical_archflags]"
        }
    }
}

pre-destroot {
    if {![variant_isset xcode]} {
        destroot.args-append \
            RC_ProjectSourceVersion=${version} \
            USE_DEPENDENCY_FILE=NO \
            BUILD_DYLIBS=NO \
            CC="${configure.cc} ${configure.cflags}" \
            CXX="${configure.cxx} ${configure.cxxflags}" \
            CXXLIB="${cxx_stdlibflags}" \
            TRIE=-DTRIE_SUPPORT \
            RC_ARCHS="[get_canonical_archs]" \
            SDK="${configure.cppflags}"

        if {${llvm_version} ne ""} {
            destroot.args-append \
                LTO=-DLTO_SUPPORT \
                RC_CFLAGS="[get_canonical_archflags] `llvm-config-mp-${llvm_version} --cflags`" \
                LLVM_MC="llvm-mc-mp-${llvm_version}"
        } else {
            destroot.args-append \
                LTO= \
                RC_CFLAGS="[get_canonical_archflags]"
        }
    }
}

platform macosx {
    build.args-append RC_OS="macos"
    destroot.args-append RC_OS="macos"
}

destroot.target install_tools
destroot.args-append DSTROOT=${destroot}
post-destroot {
    if {![variant_isset xcode]} {
        file delete -force ${destroot}${prefix}/OpenSourceLicenses
        file delete -force ${destroot}${prefix}/OpenSourceVersions
        file delete -force ${destroot}${prefix}/RelNotes

        if {${os.major} < 10} {
            file delete -force ${destroot}/Developer
        }

        # Provided by port:cctools-headers
        file delete -force ${destroot}${prefix}/include

        # Older versions of llvm either don't have some tools, or they're not compatible

        file delete -force ${destroot}${prefix}/bin/nm
        file delete -force ${destroot}${prefix}/bin/size
        if {${llvm_version} eq "3.4" || ${llvm_version} eq "3.7" || ${llvm_version} eq ""} {
            ln -s nm-classic ${destroot}${prefix}/bin/nm
            ln -s size-classic ${destroot}${prefix}/bin/size

            # https://trac.macports.org/ticket/53099
            file delete -force ${destroot}${prefix}/bin/otool
            file delete -force ${destroot}${prefix}/bin/llvm-otool
            ln -s otool-classic ${destroot}${prefix}/bin/otool
        } else {
            ln -s llvm-nm-mp-${llvm_version} ${destroot}${prefix}/bin/nm
            ln -s llvm-size-mp-${llvm_version} ${destroot}${prefix}/bin/size
        }
    }
}

livecheck.type          regex
livecheck.regex         "${name}-(\[\\d.\]+)"
