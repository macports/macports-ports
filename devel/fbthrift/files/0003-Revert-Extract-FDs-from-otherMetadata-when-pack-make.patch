From 1c313b21a94a7769a8e69daf0e22ca2c9fc8a74e Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Wed, 17 May 2023 16:17:34 +0800
Subject: [PATCH 3/4] Revert "Extract FDs from `otherMetadata` when `pack`
 makes the payload"

This reverts commit 68198fbee27bb8404e961015e05830f20e0bdbba.
---
 thrift/lib/cpp2/CMakeLists.txt                |  1 -
 thrift/lib/cpp2/async/RocketClientChannel.cpp | 13 ++---
 thrift/lib/cpp2/async/StreamCallbacks.h       |  3 -
 .../transport/rocket/FdSocketMetadata.cpp     | 51 -----------------
 .../cpp2/transport/rocket/FdSocketMetadata.h  | 36 ------------
 .../cpp2/transport/rocket/PayloadUtils.cpp    |  6 --
 .../lib/cpp2/transport/rocket/PayloadUtils.h  | 39 ++-----------
 thrift/lib/cpp2/transport/rocket/Types.h      |  3 -
 .../rocket/server/RocketThriftRequests.cpp    |  2 +-
 .../rocket/test/FdSocketMetadataTest.cpp      | 55 -------------------
 .../thrift/util/ExceptionUtilTest.java        | 12 ++--
 thrift/lib/thrift/RpcMetadata.thrift          |  3 -
 12 files changed, 17 insertions(+), 207 deletions(-)
 delete mode 100644 thrift/lib/cpp2/transport/rocket/FdSocketMetadata.cpp
 delete mode 100644 thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h
 delete mode 100644 thrift/lib/cpp2/transport/rocket/test/FdSocketMetadataTest.cpp

diff --git thrift/lib/cpp2/CMakeLists.txt thrift/lib/cpp2/CMakeLists.txt
index 9adf60ff54..5b15464285 100644
--- thrift/lib/cpp2/CMakeLists.txt
+++ thrift/lib/cpp2/CMakeLists.txt
@@ -274,7 +274,6 @@ add_library(
   transport/core/ThriftClient.cpp
   transport/core/ThriftClientCallback.cpp
   transport/core/ThriftRequest.cpp
-  transport/rocket/FdSocketMetadata.cpp
   transport/rocket/PayloadUtils.cpp
   transport/rocket/Types.cpp
   transport/rocket/client/RequestContext.cpp
diff --git thrift/lib/cpp2/async/RocketClientChannel.cpp thrift/lib/cpp2/async/RocketClientChannel.cpp
index c22256efb8..71dfd6ab14 100644
--- thrift/lib/cpp2/async/RocketClientChannel.cpp
+++ thrift/lib/cpp2/async/RocketClientChannel.cpp
@@ -49,7 +49,6 @@
 #include <thrift/lib/cpp2/transport/core/RpcMetadataUtil.h>
 #include <thrift/lib/cpp2/transport/core/ThriftClientCallback.h>
 #include <thrift/lib/cpp2/transport/core/TryUtil.h>
-#include <thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h>
 #include <thrift/lib/cpp2/transport/rocket/PayloadUtils.h>
 #include <thrift/lib/cpp2/transport/rocket/RocketException.h>
 #include <thrift/lib/cpp2/transport/rocket/client/RocketClient.h>
@@ -814,8 +813,7 @@ void RocketClientChannel::sendRequestStream(
   auto buf = std::move(request.buffer);
   setCompression(metadata, buf->computeChainDataLength());
 
-  auto payload = rocket::packWithFds(
-      &metadata, std::move(buf), rocket::releaseFdsFromMetadata(metadata));
+  auto payload = rocket::pack(metadata, std::move(buf));
   assert(metadata.name_ref());
   return rocket::RocketClient::sendRequestStream(
       std::move(payload),
@@ -856,8 +854,7 @@ void RocketClientChannel::sendRequestSink(
   auto buf = std::move(request.buffer);
   setCompression(metadata, buf->computeChainDataLength());
 
-  auto payload = rocket::packWithFds(
-      &metadata, std::move(buf), rocket::releaseFdsFromMetadata(metadata));
+  auto payload = rocket::pack(metadata, std::move(buf));
   assert(metadata.name_ref());
   return rocket::RocketClient::sendRequestSink(
       std::move(payload),
@@ -924,8 +921,7 @@ void RocketClientChannel::sendSingleRequestNoResponse(
     RequestRpcMetadata&& metadata,
     std::unique_ptr<folly::IOBuf> buf,
     RequestClientCallback::Ptr cb) {
-  auto requestPayload = rocket::packWithFds(
-      &metadata, std::move(buf), rocket::releaseFdsFromMetadata(metadata));
+  auto requestPayload = rocket::pack(metadata, std::move(buf));
   const bool isSync = cb->isSync();
   SingleRequestNoResponseCallback callback(std::move(cb));
 
@@ -945,8 +941,7 @@ void RocketClientChannel::sendSingleRequestSingleResponse(
     std::unique_ptr<folly::IOBuf> buf,
     RequestClientCallback::Ptr cb) {
   const auto requestSerializedSize = buf->computeChainDataLength();
-  auto requestPayload = rocket::packWithFds(
-      &metadata, std::move(buf), rocket::releaseFdsFromMetadata(metadata));
+  auto requestPayload = rocket::pack(metadata, std::move(buf));
   const auto requestWireSize = requestPayload.dataSize();
   const auto requestMetadataAndPayloadSize =
       requestPayload.metadataAndDataSize();
diff --git thrift/lib/cpp2/async/StreamCallbacks.h thrift/lib/cpp2/async/StreamCallbacks.h
index efc2c9349d..41a3d852c1 100644
--- thrift/lib/cpp2/async/StreamCallbacks.h
+++ thrift/lib/cpp2/async/StreamCallbacks.h
@@ -26,7 +26,6 @@
 #include <folly/Utility.h>
 #include <folly/io/IOBuf.h>
 #include <folly/io/async/EventBase.h>
-#include <folly/io/async/fdsock/SocketFds.h>
 
 #include <thrift/lib/cpp/TApplicationException.h>
 #include <thrift/lib/cpp/transport/THeader.h>
@@ -42,7 +41,6 @@ struct FirstResponsePayload {
 
   std::unique_ptr<folly::IOBuf> payload;
   ResponseRpcMetadata metadata;
-  folly::SocketFds fds;
 };
 
 struct StreamPayload {
@@ -74,7 +72,6 @@ struct StreamPayload {
   StreamPayloadMetadata metadata;
   // OrderedHeader is sent as a PAYLOAD frame with an empty payload
   bool isOrderedHeader;
-  folly::SocketFds fds;
 };
 
 struct HeadersPayload {
diff --git thrift/lib/cpp2/transport/rocket/FdSocketMetadata.cpp thrift/lib/cpp2/transport/rocket/FdSocketMetadata.cpp
deleted file mode 100644
index fb1540e4ab..0000000000
--- thrift/lib/cpp2/transport/rocket/FdSocketMetadata.cpp
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <folly/Conv.h>
-#include <folly/File.h>
-#include <folly/String.h>
-
-#include "FdSocketMetadata.h"
-
-namespace apache {
-namespace thrift {
-namespace rocket {
-
-folly::SocketFds releaseFdsFromMetadata(RequestRpcMetadata& metadata) {
-  if (!metadata.otherMetadata()) {
-    return folly::SocketFds{};
-  }
-  auto& otherMetadata = *metadata.otherMetadata();
-  auto it = otherMetadata.find("__UNSAFE_FDS_FOR_REQUEST__");
-  if (it == otherMetadata.end()) {
-    return folly::SocketFds{};
-  }
-
-  folly::SocketFds::ToSend fds;
-  std::vector<folly::StringPiece> fdStrVec;
-  folly::split(",", it->second, fdStrVec);
-  for (const auto& fdStr : fdStrVec) {
-    fds.emplace_back(
-        std::make_shared<folly::File>(folly::to<int>(fdStr), /*ownsFd*/ false));
-  }
-  otherMetadata.erase(it);
-
-  return fds.size() ? folly::SocketFds{std::move(fds)} : folly::SocketFds{};
-}
-
-} // namespace rocket
-} // namespace thrift
-} // namespace apache
diff --git thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h
deleted file mode 100644
index 41137eb3f4..0000000000
--- thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include <folly/io/async/fdsock/SocketFds.h>
-#include <thrift/lib/cpp2/transport/rocket/Types.h>
-#include <thrift/lib/thrift/gen-cpp2/RpcMetadata_types.h>
-
-namespace apache {
-namespace thrift {
-namespace rocket {
-
-// Remove the temporary proof-of-concept "plumbing key" from the headers.
-// Instead, update the metadata with the number of FDs being sent.
-//
-// For the real deal, we will want to plumb through proper C++ objects
-// representing FD ownership.
-folly::SocketFds releaseFdsFromMetadata(RequestRpcMetadata&);
-
-} // namespace rocket
-} // namespace thrift
-} // namespace apache
diff --git thrift/lib/cpp2/transport/rocket/PayloadUtils.cpp thrift/lib/cpp2/transport/rocket/PayloadUtils.cpp
index 82a87adb1f..e172a0a1f4 100644
--- thrift/lib/cpp2/transport/rocket/PayloadUtils.cpp
+++ thrift/lib/cpp2/transport/rocket/PayloadUtils.cpp
@@ -24,12 +24,6 @@ namespace detail {
 template <class Metadata>
 Payload makePayload(
     const Metadata& metadata, std::unique_ptr<folly::IOBuf> data) {
-  DCHECK(
-      !metadata.otherMetadata() ||
-      !metadata.otherMetadata()->contains("__UNSAFE_FDS_FOR_REQUEST__"))
-      << "Not implemented: attaching FDs via "
-      << "otherMetadata[__UNSAFE_FDS_FOR_REQUEST__] on this code path";
-
   CompactProtocolWriter writer;
   // Default is to leave some headroom for rsocket headers
   size_t serSize = metadata.serializedSizeZC(&writer);
diff --git thrift/lib/cpp2/transport/rocket/PayloadUtils.h thrift/lib/cpp2/transport/rocket/PayloadUtils.h
index 6751a2b351..9aa0941e68 100644
--- thrift/lib/cpp2/transport/rocket/PayloadUtils.h
+++ thrift/lib/cpp2/transport/rocket/PayloadUtils.h
@@ -157,48 +157,21 @@ inline std::unique_ptr<folly::IOBuf> packCompact(
   return std::move(data);
 }
 
-// NB: Populates `metadata.numFds` if `fds` is nonempty.
 template <typename Payload, typename Metadata>
-rocket::Payload packWithFds(
-    Metadata* metadata, Payload&& payload, folly::SocketFds fds) {
+rocket::Payload pack(const Metadata& metadata, Payload&& payload) {
   auto serializedPayload = packCompact(std::forward<Payload>(payload));
-  if (auto compress = metadata->compression_ref()) {
+  if (auto compress = metadata.compression_ref()) {
     apache::thrift::rocket::detail::compressPayload(
         serializedPayload, *compress);
   }
-  auto numFds = fds.size();
-  if (numFds) {
-    // When received, the request will know to retrieve this many FDs.
-    //
-    // NB: The receiver could more confidently assert that the right FDs are
-    // associated with the right request if we could:
-    //  - Additionally store the "socket sequence number" of these FDs into
-    //    the metadata here.
-    //  - Have `AsyncFdSocket::writeIOBufsWithFds` check, via a token
-    //    object, that the sequence number chosen at parse-time matches the
-    //    actual write order).
-    // Unfortunately, implementing this check would require adding
-    // considerable plumbing to Rocket, so we skip it in favor of asserting
-    // we got the right # of FDs, and documenting the correct FD+data
-    // ordering invariant in the client & server code that interacts with
-    // the socket.
-    metadata->numFds() = numFds;
-  }
-  auto ret = apache::thrift::rocket::detail::makePayload(
-      *metadata, std::move(serializedPayload));
-  if (numFds) {
-    ret.fds = std::move(fds.dcheckToSend());
-  }
-  return ret;
+  return apache::thrift::rocket::detail::makePayload(
+      metadata, std::move(serializedPayload));
 }
 
 template <class T>
 rocket::Payload pack(T&& payload) {
-  auto metadata = std::forward<T>(payload).metadata;
-  return packWithFds(
-      &metadata,
-      std::forward<T>(payload).payload,
-      std::forward<T>(payload).fds);
+  return pack(
+      std::forward<T>(payload).metadata, std::forward<T>(payload).payload);
 }
 } // namespace rocket
 } // namespace thrift
diff --git thrift/lib/cpp2/transport/rocket/Types.h thrift/lib/cpp2/transport/rocket/Types.h
index 891dbe661a..650d3537a4 100644
--- thrift/lib/cpp2/transport/rocket/Types.h
+++ thrift/lib/cpp2/transport/rocket/Types.h
@@ -23,7 +23,6 @@
 
 #include <folly/Range.h>
 #include <folly/io/IOBuf.h>
-#include <folly/io/async/fdsock/SocketFds.h>
 
 namespace apache {
 namespace thrift {
@@ -142,8 +141,6 @@ class Payload {
 
   bool hasData() const { return buffer_ != nullptr; }
 
-  folly::SocketFds fds;
-
  private:
   std::unique_ptr<folly::IOBuf> buffer_;
   size_t metadataSize_{0};
diff --git thrift/lib/cpp2/transport/rocket/server/RocketThriftRequests.cpp thrift/lib/cpp2/transport/rocket/server/RocketThriftRequests.cpp
index 48502cf221..e99598ef77 100644
--- thrift/lib/cpp2/transport/rocket/server/RocketThriftRequests.cpp
+++ thrift/lib/cpp2/transport/rocket/server/RocketThriftRequests.cpp
@@ -470,7 +470,7 @@ void ThriftServerRequestResponse::sendThriftResponse(
   }
 
   context_.sendPayload(
-      packWithFds(&metadata, std::move(data), folly::SocketFds{}),
+      pack(metadata, std::move(data)),
       Flags().next(true).complete(true),
       std::move(cb));
 }
diff --git thrift/lib/cpp2/transport/rocket/test/FdSocketMetadataTest.cpp thrift/lib/cpp2/transport/rocket/test/FdSocketMetadataTest.cpp
deleted file mode 100644
index 71fe08942d..0000000000
--- thrift/lib/cpp2/transport/rocket/test/FdSocketMetadataTest.cpp
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (c) Meta Platforms, Inc. and affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <folly/portability/GTest.h>
-
-#include <thrift/lib/cpp2/transport/rocket/FdSocketMetadata.h>
-
-using namespace apache::thrift;
-
-TEST(FdSocketMetadata, ReleaseFdsFromMetadataEmpty) {
-  RequestRpcMetadata emptyMeta;
-  EXPECT_TRUE(rocket::releaseFdsFromMetadata(emptyMeta).empty());
-  EXPECT_EQ(RequestRpcMetadata{}, emptyMeta); // no changes
-
-  RequestRpcMetadata noMagicKey;
-  noMagicKey.otherMetadata() = {};
-  EXPECT_TRUE(rocket::releaseFdsFromMetadata(noMagicKey).empty());
-  RequestRpcMetadata alsoNoMagicKey;
-  alsoNoMagicKey.otherMetadata() = {};
-  EXPECT_EQ(alsoNoMagicKey, noMagicKey);
-}
-
-TEST(FdSocketMetadata, ReleaseFdsFromMetadata) {
-  RequestRpcMetadata meta;
-  meta.otherMetadata() = {
-      {"__UNSAFE_FDS_FOR_REQUEST__", "2,0,1"},
-      {"OtherKeysAreNotDeleted", "whew"},
-  };
-  auto fds = rocket::releaseFdsFromMetadata(meta);
-
-  RequestRpcMetadata noMagicKey;
-  noMagicKey.otherMetadata() = {{"OtherKeysAreNotDeleted", "whew"}};
-  EXPECT_EQ(noMagicKey, meta);
-
-  EXPECT_EQ(3, fds.size());
-  auto sendFds = fds.releaseToSend();
-  EXPECT_TRUE(fds.empty());
-  EXPECT_EQ(3, sendFds.size());
-  EXPECT_EQ(2, sendFds[0]->fd());
-  EXPECT_EQ(0, sendFds[1]->fd());
-  EXPECT_EQ(1, sendFds[2]->fd());
-}
diff --git thrift/lib/java/runtime/src/test/java/com/facebook/thrift/util/ExceptionUtilTest.java thrift/lib/java/runtime/src/test/java/com/facebook/thrift/util/ExceptionUtilTest.java
index aed59b46e0..fb2240ee43 100644
--- thrift/lib/java/runtime/src/test/java/com/facebook/thrift/util/ExceptionUtilTest.java
+++ thrift/lib/java/runtime/src/test/java/com/facebook/thrift/util/ExceptionUtilTest.java
@@ -75,7 +75,7 @@ public class ExceptionUtilTest {
 
     ResponseRpcMetadata metadata =
         new ResponseRpcMetadata(
-            Collections.singletonMap("ex", "x"), 0L, 0, null, null, null, 0, null, null);
+            Collections.singletonMap("ex", "x"), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
@@ -90,7 +90,7 @@ public class ExceptionUtilTest {
 
     ResponseRpcMetadata metadata =
         new ResponseRpcMetadata(
-            Collections.singletonMap("ex", "3"), 0L, 0, null, null, null, 0, null, null);
+            Collections.singletonMap("ex", "3"), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
@@ -106,7 +106,7 @@ public class ExceptionUtilTest {
 
     ResponseRpcMetadata metadata =
         new ResponseRpcMetadata(
-            Collections.singletonMap("ex", "3"), 0L, 0, null, null, null, 0, null, null);
+            Collections.singletonMap("ex", "3"), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
@@ -121,7 +121,7 @@ public class ExceptionUtilTest {
 
     ResponseRpcMetadata metadata =
         new ResponseRpcMetadata(
-            Collections.singletonMap("ex", "4"), 0L, 0, null, null, null, 0, null, null);
+            Collections.singletonMap("ex", "4"), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
@@ -135,7 +135,7 @@ public class ExceptionUtilTest {
     MyException myExp = new MyException("my exception");
 
     ResponseRpcMetadata metadata =
-        new ResponseRpcMetadata(Collections.emptyMap(), 0L, 0, null, null, null, 0, null, null);
+        new ResponseRpcMetadata(Collections.emptyMap(), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
@@ -149,7 +149,7 @@ public class ExceptionUtilTest {
 
     ResponseRpcMetadata metadata =
         new ResponseRpcMetadata(
-            Collections.singletonMap("ex", "5"), 0L, 0, null, null, null, 0, null, null);
+            Collections.singletonMap("ex", "5"), 0L, 0, null, null, null, 0, null);
 
     ClientResponsePayload responsePayload =
         ClientResponsePayload.createException(myExp, metadata, null, false);
diff --git thrift/lib/thrift/RpcMetadata.thrift thrift/lib/thrift/RpcMetadata.thrift
index 35f7a7f21f..d560de2eae 100644
--- thrift/lib/thrift/RpcMetadata.thrift
+++ thrift/lib/thrift/RpcMetadata.thrift
@@ -187,7 +187,6 @@ struct RequestRpcMetadata {
   // Thrift is typically used within a larger framework.
   // This field is for storing framework-specific metadata.
   20: optional IOBufPtr frameworkMetadata;
-  21: optional i32 numFds; // Linux currently limits this to SCM_MAX_FD.
 }
 
 struct ErrorClassification {
@@ -285,7 +284,6 @@ struct ResponseRpcMetadata {
   9: optional i32 streamId;
   // Set on a sampled basis for tracking queueing times.
   10: optional QueueMetadata queueMetadata;
-  11: optional i32 numFds; // Linux currently limits this to SCM_MAX_FD.
 }
 
 enum ResponseRpcErrorCategory {
@@ -386,7 +384,6 @@ struct StreamPayloadMetadata {
   // Metadata describing the type of stream payload. MUST be set for protocol
   // version 8+.
   3: optional PayloadMetadata payloadMetadata;
-  4: optional i32 numFds; // Linux currently limits this to SCM_MAX_FD.
 }
 
 // Setup metadata sent from the client to the server at the time
-- 
2.40.1

