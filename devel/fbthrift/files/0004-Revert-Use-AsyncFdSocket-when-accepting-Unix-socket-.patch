From 872d5c59ed7a55f4f19af7b1296f014206946616 Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Wed, 17 May 2023 16:54:15 +0800
Subject: [PATCH 4/4] Revert "Use `AsyncFdSocket` when accepting Unix socket
 connections"

This reverts commit 7631d8f859447ffc24bb9022a72f1419a4db66d3.
---
 thrift/lib/cpp2/server/Cpp2Worker.cpp | 18 ------------------
 thrift/lib/cpp2/server/Cpp2Worker.h   |  5 -----
 2 files changed, 23 deletions(-)

diff --git thrift/lib/cpp2/server/Cpp2Worker.cpp thrift/lib/cpp2/server/Cpp2Worker.cpp
index 24662548a7..9225600db5 100644
--- thrift/lib/cpp2/server/Cpp2Worker.cpp
+++ thrift/lib/cpp2/server/Cpp2Worker.cpp
@@ -26,11 +26,9 @@
 #include <folly/io/async/AsyncSSLSocket.h>
 #include <folly/io/async/AsyncSocket.h>
 #include <folly/io/async/EventBaseLocal.h>
-#include <folly/io/async/fdsock/AsyncFdSocket.h>
 #include <folly/portability/Sockets.h>
 #include <thrift/lib/cpp/async/TAsyncSSLSocket.h>
 #include <thrift/lib/cpp/concurrency/Util.h>
-#include <thrift/lib/cpp2/Flags.h>
 #include <thrift/lib/cpp2/async/ResponseChannel.h>
 #include <thrift/lib/cpp2/security/extensions/ThriftParametersContext.h>
 #include <thrift/lib/cpp2/server/Cpp2Connection.h>
@@ -42,10 +40,6 @@
 #include <wangle/acceptor/SSLAcceptorHandshakeHelper.h>
 #include <wangle/acceptor/UnencryptedAcceptorHandshakeHelper.h>
 
-// DANGER: If you disable this overly broadly, this can completely break
-// workloads that rely on passing FDs over Unix sockets + Thrift.
-THRIFT_FLAG_DEFINE_bool(enable_server_async_fd_socket, /* default = */ true);
-
 namespace apache {
 namespace thrift {
 
@@ -198,18 +192,6 @@ void Cpp2Worker::plaintextConnectionReady(
       server_->getObserverShared());
 }
 
-folly::AsyncSocket::UniquePtr Cpp2Worker::makeNewAsyncSocket(
-    folly::EventBase* base, int fd, const folly::SocketAddress* peerAddress) {
-  if (THRIFT_FLAG(enable_server_async_fd_socket) &&
-      peerAddress->getFamily() == AF_UNIX) {
-    VLOG(4) << "Enabling AsyncFdSocket"; // peerAddress is always anonymous
-    // Enable passing FDs over Unix sockets, see `man cmsg`.
-    return folly::AsyncSocket::UniquePtr(new folly::AsyncFdSocket(
-        base, folly::NetworkSocket::fromFd(fd), peerAddress));
-  }
-  return Acceptor::makeNewAsyncSocket(base, fd, peerAddress);
-}
-
 void Cpp2Worker::useExistingChannel(
     const std::shared_ptr<HeaderServerChannel>& serverChannel) {
   folly::SocketAddress address;
diff --git thrift/lib/cpp2/server/Cpp2Worker.h thrift/lib/cpp2/server/Cpp2Worker.h
index 951a62019e..0275f7caed 100644
--- thrift/lib/cpp2/server/Cpp2Worker.h
+++ thrift/lib/cpp2/server/Cpp2Worker.h
@@ -390,11 +390,6 @@ class Cpp2Worker : public IOWorkerContext,
   mutable folly::F14NodeMap<AsyncProcessorFactory*, PerServiceMetadata>
       perServiceMetadata_;
 
-  folly::AsyncSocket::UniquePtr makeNewAsyncSocket(
-      folly::EventBase* base,
-      int fd,
-      const folly::SocketAddress* peerAddress) override;
-
   folly::AsyncSSLSocket::UniquePtr makeNewAsyncSSLSocket(
       const std::shared_ptr<folly::SSLContext>& ctx,
       folly::EventBase* base,
-- 
2.40.1

