diff --git modules/audio_output/auhal.c modules/audio_output/auhal.c
index 22044631c7202fadd43f38eb7dcef24891344993..636217708c443bd6c626d9df3dedf557365c5d41 100644
--- modules/audio_output/auhal.c
+++ modules/audio_output/auhal.c
@@ -295,7 +295,6 @@ IsAudioFormatDigital(AudioFormatID id)
         case 'iac3':
         case kAudioFormat60958AC3:
         case kAudioFormatAC3:
-        case kAudioFormatEnhancedAC3:
             return true;
         default:
             return false;
diff --git modules/codec/vt_utils.c modules/codec/vt_utils.c
index f0a5f4a00f0972292beb0f29ef8bfcc2b0bc02e6..c919b7d5204e0a6f235b2c60c557ea079d4b12c5 100644
--- modules/codec/vt_utils.c
+++ modules/codec/vt_utils.c
@@ -155,7 +155,7 @@ cvpxpic_create_mapped(const video_format_t *fmt, CVPixelBufferRef cvpx,
         default: return NULL;
     }
 
-    CVPixelBufferLockFlags lock = readonly ? kCVPixelBufferLock_ReadOnly : 0;
+    enum CVPixelBufferLockFlags lock = readonly ? kCVPixelBufferLock_ReadOnly : 0;
     CVPixelBufferLockBaseAddress(cvpx, lock);
     picture_resource_t rsc = { };
 
diff --git modules/codec/videotoolbox.m modules/codec/videotoolbox.m
index a63ac7a62ff84b865b7c23c573992aa2f2b3a30f..2d48e6e96991a5da689d4c055e3ad16bd5674e26 100644
--- modules/codec/videotoolbox.m
+++ modules/codec/videotoolbox.m
@@ -996,12 +996,12 @@ static CMVideoCodecType CodecPrecheck(decoder_t *p_dec)
             return kCMVideoCodecType_H264;
 
         case VLC_CODEC_HEVC:
-            if (!deviceSupportsHEVC())
-            {
+//             if (!deviceSupportsHEVC())
+//             {
                 msg_Warn(p_dec, "device doesn't support HEVC");
                 return -1;
-            }
-            return kCMVideoCodecType_HEVC;
+//             }
+//             return kCMVideoCodecType_HEVC;
 
         case VLC_CODEC_MP4V:
         {
@@ -1136,11 +1136,11 @@ static CFMutableDictionaryRef CreateSessionDescriptionFormat(decoder_t *p_dec,
         case COLOR_SPACE_BT2020:
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wpartial-availability"
-            if (&kCVImageBufferColorPrimaries_ITU_R_2020 != nil)
-            {
-                yuvmatrix = kCVImageBufferColorPrimaries_ITU_R_2020;
-                break;
-            }
+//             if (&kCVImageBufferColorPrimaries_ITU_R_2020 != nil)
+//             {
+//                 yuvmatrix = kCVImageBufferColorPrimaries_ITU_R_2020;
+//                 break;
+//             }
 #pragma clang diagnostic pop
             /* fall through */
         case COLOR_SPACE_BT709:
@@ -1421,19 +1421,19 @@ static int OpenDecoder(vlc_object_t *p_this)
             p_sys->b_vt_need_keyframe = true;
             break;
 
-        case kCMVideoCodecType_HEVC:
-            p_sys->pf_codec_init = InitHEVC;
-            p_sys->pf_codec_clean = CleanHEVC;
-            p_sys->pf_codec_supported = CodecSupportedHEVC;
-            p_sys->pf_late_start = LateStartHEVC;
-            p_sys->pf_process_block = ProcessBlockHEVC;
-            p_sys->pf_need_restart = VideoToolboxNeedsToRestartHEVC;
-            p_sys->pf_configure_vout = ConfigureVoutHEVC;
-            p_sys->pf_get_extradata = GetDecoderExtradataHEVC;
-            p_sys->pf_fill_reorder_info = FillReorderInfoHEVC;
-            p_sys->b_poc_based_reorder = true;
-            p_sys->b_vt_need_keyframe = true;
-            break;
+//         case kCMVideoCodecType_HEVC:
+//             p_sys->pf_codec_init = InitHEVC;
+//             p_sys->pf_codec_clean = CleanHEVC;
+//             p_sys->pf_codec_supported = CodecSupportedHEVC;
+//             p_sys->pf_late_start = LateStartHEVC;
+//             p_sys->pf_process_block = ProcessBlockHEVC;
+//             p_sys->pf_need_restart = VideoToolboxNeedsToRestartHEVC;
+//             p_sys->pf_configure_vout = ConfigureVoutHEVC;
+//             p_sys->pf_get_extradata = GetDecoderExtradataHEVC;
+//             p_sys->pf_fill_reorder_info = FillReorderInfoHEVC;
+//             p_sys->b_poc_based_reorder = true;
+//             p_sys->b_vt_need_keyframe = true;
+//             break;
 
         case kCMVideoCodecType_MPEG4Video:
             p_sys->pf_get_extradata = GetDecoderExtradataMPEG4;
diff --git modules/keystore/keychain.m modules/keystore/keychain.m
index 09b2dc9c1c231cc51a1aa5683b83893982ffc7b4..d2d331c6c9fb20e7de82a7cf54d9132d5778dddb 100644
--- modules/keystore/keychain.m
+++ modules/keystore/keychain.m
@@ -206,7 +206,7 @@ static NSString * ErrorForStatus(OSStatus status)
 }
 
 #define OSX_MAVERICKS (NSAppKitVersionNumber >= 1265)
-extern const CFStringRef kSecAttrAccessible;
+// extern const CFStringRef kSecAttrAccessible;
 
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wpartial-availability"
diff --git modules/video_filter/ci_filters.m modules/video_filter/ci_filters.m
index 795c907aa51a3dffc5452ba163c1073eac5c8621..966062af3f31fdd6dfb8138099d0ae3d57ded61b 100644
--- modules/video_filter/ci_filters.m
+++ modules/video_filter/ci_filters.m
@@ -36,10 +36,10 @@
 #include "filter_picture.h"
 #include "vt_utils.h"
 
-#include <CoreImage/CIContext.h>
-#include <CoreImage/CIImage.h>
-#include <CoreImage/CIFilter.h>
-#include <CoreImage/CIVector.h>
+#include <QuartzCore/CIContext.h>
+#include <QuartzCore/CIImage.h>
+#include <QuartzCore/CIFilter.h>
+#include <QuartzCore/CIVector.h>
 
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wpartial-availability"
@@ -589,11 +589,11 @@ Open(vlc_object_t *obj, char const *psz_filter)
         case VLC_CODEC_CVPX_UYVY:
         case VLC_CODEC_CVPX_I420:
         case VLC_CODEC_CVPX_BGRA:
-            if (&kCGColorSpaceITUR_709 == nil)
-            {
+//             if (&kCGColorSpaceITUR_709 == nil)
+//             {
                 msg_Warn(obj, "iOS/macOS version is too old, aborting...");
                 return VLC_EGENERIC;
-            }
+//             }
             break;
         default:
             return VLC_EGENERIC;
diff --git modules/Makefile.in modules/Makefile.in
index 29924af..39f3298 100644
--- modules/Makefile.in
+++ modules/Makefile.in
@@ -10730,7 +10730,7 @@ video_filter_LTLIBRARIES = libadjust_plugin.la libalphamask_plugin.la \
 # macOS / iOS hardware video filters
 libci_filters_plugin_la_SOURCES = video_filter/ci_filters.m codec/vt_utils.c codec/vt_utils.h
 @HAVE_OSX_TRUE@libci_filters_plugin_la_LDFLAGS = $(AM_LDFLAGS) -rpath '$(video_filterdir)' \
-@HAVE_OSX_TRUE@	-Wl,-framework,Foundation -Wl,-framework,CoreGraphics -Wl,-framework,CoreImage -Wl,-framework,CoreVideo
+@HAVE_OSX_TRUE@	-Wl,-framework,Foundation -Wl,-framework,CoreGraphics -Wl,-framework,QuartzCore -Wl,-framework,CoreVideo
 
 libdeinterlace_common_la_SOURCES = video_filter/deinterlace/common.c video_filter/deinterlace/common.h
 libdeinterlace_common_la_LDFLAGS = -static
diff --git modules/video_filter/Makefile.am modules/video_filter/Makefile.am
index af190d1..3f0fc4f 100644
--- modules/video_filter/Makefile.am
+++ modules/video_filter/Makefile.am
@@ -111,7 +111,7 @@ video_filter_LTLIBRARIES = \
 libci_filters_plugin_la_SOURCES = video_filter/ci_filters.m codec/vt_utils.c codec/vt_utils.h
 if HAVE_OSX
 libci_filters_plugin_la_LDFLAGS = $(AM_LDFLAGS) -rpath '$(video_filterdir)' \
-	-Wl,-framework,Foundation -Wl,-framework,CoreGraphics -Wl,-framework,CoreImage -Wl,-framework,CoreVideo
+	-Wl,-framework,Foundation -Wl,-framework,CoreGraphics -Wl,-framework,QuartzCore -Wl,-framework,CoreVideo
 video_filter_LTLIBRARIES += libci_filters_plugin.la
 endif
 
