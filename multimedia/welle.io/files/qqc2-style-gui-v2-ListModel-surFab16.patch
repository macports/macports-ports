diff -Naur welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/gui_helper.cpp
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp	2019-09-29 23:46:38.821964666 +0200
+++ welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/gui_helper.cpp	2019-10-04 18:42:12.722266545 +0200
@@ -29,6 +29,7 @@
 
 #include <QDebug>
 #include <QSettings>
+#include <QQuickStyle>
 
 #include "gui_helper.h"
 #include "debug_output.h"
@@ -54,6 +55,7 @@
     // Add image provider for the MOT slide show
     motImage = new CMOTImageProvider;
 
+    QSettings settings;
     connect(RadioController, &CRadioController::motChanged, this, &CGUIHelper::motUpdate);
     connect(RadioController, &CRadioController::showErrorMessage, this, &CGUIHelper::showErrorMessage);
     connect(RadioController, &CRadioController::showInfoMessage, this, &CGUIHelper::showInfoMessage);
@@ -650,3 +652,153 @@
     }
 }
 #endif
+
+QString CGUIHelper::getQQStyleToLoad(QString styleNameArg)  // Static
+{
+    QSettings settings;
+    QString settingStyle = settings.value("QQStyle","").toString();
+
+    // In case this is a first launch where the setting in the config file is not set
+    if (settingStyle.isEmpty()) {
+        if (styleNameArg.isEmpty()) {
+            settings.setValue("QQStyle", "Default");
+            return "Default";
+        }
+        else {
+            settings.setValue("QQStyle", styleNameArg);
+            return styleNameArg;
+        }
+    }
+
+    QStringList availableStyle = QQuickStyle::availableStyles();
+
+    for ( const QString& curStyle : availableStyle ) {
+         if (settingStyle == curStyle)
+             return settingStyle;
+    }
+    if (settingStyle == "System_Auto")
+        return QString();
+    else
+        return "Default";
+}
+
+const QStringList CGUIHelper::qQStyleComboList()
+{
+    if ( !m_comboList.isEmpty() ) 
+        return m_comboList;
+
+    m_comboList = QQuickStyle::availableStyles();
+    m_comboList.sort();
+    int position = m_comboList.indexOf("Default");
+    m_comboList.move(position, 0);
+    m_comboList.insert(1, "System_Auto");
+
+    QString settingStyle = settings.value("QQStyle","").toString();
+    settingsStyleInAvailableStyles = false;
+
+    for ( const auto& style : m_comboList ) {
+         if (settingStyle == style)
+             settingsStyleInAvailableStyles = true;
+    }
+
+    if ( settingsStyleInAvailableStyles == false ) {
+        m_comboList.append(settingStyle);
+        qDebug() << "Style from the settings " << settingStyle << " not available on system. Adding it to the list of styles and loading 'Default' instead.";
+    }
+
+    return m_comboList;
+}
+
+int CGUIHelper::getIndexOfQQStyle(QString style){
+    //qDebug() << "getIndexOfQQStyle: " << style;
+    return m_comboList.indexOf(style);
+}
+
+QString CGUIHelper::getQQStyle(){
+    return settings.value("QQStyle","").toString();
+}
+
+void CGUIHelper::saveQQStyle(int index) {
+    //qDebug() << "saveQQStyle : " << index;
+    settings.setValue("QQStyle",m_comboList.value(index));
+}
+
+StyleModel::StyleModel(QObject *parent)
+    : QAbstractListModel(parent)
+{
+}
+
+StyleModel* CGUIHelper::qQStyleComboModel()
+{
+    if (m_styleModel != nullptr)
+        m_styleModel = nullptr;
+
+    QString settingStyle = settings.value("QQStyle","").toString();
+
+    QStringList styleList = qQStyleComboList();
+
+    m_styleModel = new StyleModel();
+    for ( const auto& style : styleList  ) {
+        if ( !settingsStyleInAvailableStyles && (settingStyle == style)) {
+            m_styleModel->addStyle(Style(Style(style + tr(" (unavailable, fallback to Default)"), style)));
+        }
+        else {
+            if (style == "System_Auto")
+                m_styleModel->addStyle(Style(tr("Style of system"), style));
+            else if (style == "Default")
+                m_styleModel->addStyle(Style("Default" + tr(" (Recommended)"), style));
+            else
+                m_styleModel->addStyle(Style(style, style));
+        }
+    }
+    return m_styleModel;
+}
+
+QHash<int, QByteArray> StyleModel::roleNames() const
+{
+    QHash<int, QByteArray> roles;
+    roles[LabelRole] = "label";
+    roles[StyleRole] = "style";
+    return roles;
+}
+
+Style::Style(const QString &label, const QString &style)
+    : m_label(label), m_style(style)
+{
+}
+
+QString Style::label() const
+{
+    return m_label;
+}
+
+QString Style::style() const
+{
+    return m_style;
+}
+
+void StyleModel::addStyle(const Style &style)
+{
+    beginInsertRows(QModelIndex(), rowCount(), rowCount());
+    m_styles << style;
+    endInsertRows();
+}
+
+int StyleModel::rowCount(const QModelIndex & parent) const
+{
+    Q_UNUSED(parent);
+    return m_styles.count();
+}
+
+QVariant StyleModel::data(const QModelIndex & index, int role) const
+{
+    if (index.row() < 0 || index.row() >= m_styles.count())
+        return QVariant();
+
+    const Style &style = m_styles[index.row()];
+    if (role == LabelRole)
+        return style.label();
+    else if (role == StyleRole)
+        return style.style();
+    return QVariant();
+}
diff -Naur welle.io-2.0~beta3/src/welle-gui/gui_helper.h welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/gui_helper.h
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.h	2019-09-29 20:19:06.370333896 +0200
+++ welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/gui_helper.h	2019-10-04 18:43:17.626267505 +0200
@@ -30,6 +30,8 @@
 #ifndef GUIHELPER_H
 #define GUIHELPER_H
 
+#include <QAbstractListModel>
+#include <QHash>
 #include <QQmlContext>
 #include <QTimer>
 #include <QQmlApplicationEngine>
@@ -54,6 +56,57 @@
     class FileActivityResultReceiver;
 #endif
 
+    
+/*
+ * The Class that described a Style
+ * for use in the Style List Model
+ * It contains 
+ *  - a label which is displayed to the user
+ *  - the technical name of the style for the 
+ *    QQuickStyle::setStyle call
+ */
+class Style
+{
+public:
+    Style(const QString &label, const QString &style);
+    QString label() const;
+    QString style() const;
+
+private:
+    QString m_label;
+    QString m_style;
+};
+
+/*
+ * The Class that stores the ListModel to used to display
+ * the list of styles in a QML ComboBox
+ */
+class StyleModel : public QAbstractListModel
+{
+    Q_OBJECT
+
+public:
+    enum StyleRoles {
+        LabelRole = Qt::UserRole + 1,
+        StyleRole = Qt::UserRole + 2
+    };
+
+    StyleModel(QObject *parent = 0);
+    
+    void addStyle(const Style &style);
+    
+    int rowCount(const QModelIndex & parent = QModelIndex()) const;
+
+    QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;
+
+protected:
+    QHash<int, QByteArray> roleNames() const;
+
+private:
+    QList<Style> m_styles;
+};
+
+
 /*
  *	GThe main gui object. It inherits from
  *	QDialog and the generated form
@@ -62,6 +115,8 @@
 {
     Q_OBJECT
     Q_PROPERTY(QVariant licenses READ licenses CONSTANT)
+    Q_PROPERTY(StyleModel* qQStyleComboModel READ qQStyleComboModel CONSTANT)
+    Q_PROPERTY(QString getQQStyle READ getQQStyle CONSTANT)
 
 public:
     Q_INVOKABLE void updateTranslator(QString Language, QObject *obj);
@@ -98,6 +153,14 @@
 
     void setNewDebugOutput(QString text);
 
+    // Qt Quick Style Management methods & members
+    static QString getQQStyleToLoad(QString styleNameArg);
+    const QStringList qQStyleComboList();
+    StyleModel* qQStyleComboModel();
+    QString getQQStyle();
+    Q_INVOKABLE int getIndexOfQQStyle(QString);
+    Q_INVOKABLE void saveQQStyle(int);
+
     CMOTImageProvider* motImage; // ToDo: Must be a getter
 
 private:
@@ -119,6 +182,12 @@
 
     const QVariantMap licenses();
 
+    // Qt Quick Style Management methods & members
+    QSettings settings;
+    QStringList m_comboList;
+    StyleModel *m_styleModel = nullptr;
+    bool settingsStyleInAvailableStyles = false;
+
 #ifndef QT_NO_SYSTEMTRAYICON
     QAction *minimizeAction;
     QAction *maximizeAction;
diff -Naur welle.io-2.0~beta3/src/welle-gui/main.cpp welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/main.cpp
--- welle.io-2.0~beta3/src/welle-gui/main.cpp	2019-09-29 20:43:33.878290383 +0200
+++ welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/main.cpp	2019-10-04 18:44:40.786268734 +0200
@@ -107,7 +107,7 @@
     optionParser.addOption(LogFileName);
 
     QCommandLineOption styleName("qqc-style",
-        QCoreApplication::translate("main", "The Qt Quick Controls Style to be used"),
+        QCoreApplication::translate("main", "Qt Quick Controls Style for the 1st launch"),
         QCoreApplication::translate("main", "style_name"));
     optionParser.addOption(styleName);
 
@@ -127,12 +127,13 @@
 
     CRadioController radioController(commandLineOptions);
 
-    QString styleNameValue = optionParser.value(styleName);
-    qDebug() << "styleNameValue::" << styleNameValue ;
-    if (styleNameValue != "")
-        QQuickStyle::setStyle(styleNameValue);
-    else
-        QQuickStyle::setStyle("Default");
+    QString styleNameArg = optionParser.value(styleName);
+    //qDebug() << "Command line style_name: " << styleNameArg ;
+    
+    // Set the Qt Quick Style.
+    QString styleToLoad = CGUIHelper::getQQStyleToLoad(styleNameArg);
+    if (!styleToLoad.isEmpty())
+        QQuickStyle::setStyle(styleToLoad);
 
     QSettings settings;
     settings.setValue("version", QString(CURRENT_VERSION));
diff -Naur welle.io-2.0~beta3/src/welle-gui/QML/settingpages/GlobalSettings.qml welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/QML/settingpages/GlobalSettings.qml
--- welle.io-2.0~beta3/src/welle-gui/QML/settingpages/GlobalSettings.qml	2019-09-29 21:10:28.326242512 +0200
+++ welle.io-2.0~beta3-qqc2-ListModel/src/welle-gui/QML/settingpages/GlobalSettings.qml	2019-10-04 18:39:10.114263845 +0200
@@ -101,6 +101,23 @@
                     Layout.fillWidth: true
                 }
             }
+            RowLayout {
+                Layout.fillWidth: true
+                WComboBoxList {
+                    id: styleBox
+                    implicitWidth: 250
+                    currentIndex: guiHelper.getIndexOfQQStyle(guiHelper.getQQStyle)
+                    textRole: "label"
+                    model: guiHelper.qQStyleComboModel
+                    onActivated: {
+                        guiHelper.saveQQStyle(currentIndex)
+                    }
+                }
+                TextStandart {
+                    text: qsTr("Qt Quick Style. Restart to apply.")
+                    Layout.fillWidth: true
+                }
+            }
         }
 
         SettingSection {
