diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/backend/radio-controller.h welle.io-Vowqy8/welle.io-2.0~beta3/src/backend/radio-controller.h
--- welle.io-2.0~beta3/src/backend/radio-controller.h	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/backend/radio-controller.h	2019-09-29 21:05:58.446250515 +0200
@@ -37,8 +37,16 @@
 #include <vector>
 #include <string>
 #include <complex>
+#include <map>
 #include "dab-constants.h"
 
+#ifndef __CDeviceID
+// Duplication from virtual_input.h. I didn't find how to get it compile without this
+#define __CDeviceID
+enum class CDeviceID {
+    UNKNOWN, NULLDEVICE, AIRSPY, RAWFILE, RTL_SDR, RTL_TCP, SOAPYSDR, ANDROID_RTL_SDR};
+#endif
+
 struct dab_date_time_t {
     int year = 0;
     int month = 0;
@@ -120,6 +128,8 @@
         /* The receiver has shutdown */
         virtual void onShutdown(void) { };
 
+        std::map <CDeviceID, std::string> deviceInitArgs;
+
 };
 
 /* A Programme Hander is associated to each tuned programme in the ensemble.
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/input/input_factory.cpp welle.io-Vowqy8/welle.io-2.0~beta3/src/input/input_factory.cpp
--- welle.io-2.0~beta3/src/input/input_factory.cpp	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/input/input_factory.cpp	2019-09-29 21:02:41.590256352 +0200
@@ -98,7 +98,7 @@
 #endif
         case CDeviceID::RAWFILE: InputDevice = new CRAWFile(radioController); break;
 #ifdef HAVE_SOAPYSDR
-        case CDeviceID::SOAPYSDR: InputDevice = new CSoapySdr(); break;
+        case CDeviceID::SOAPYSDR: InputDevice = new CSoapySdr(radioController); break;
 #endif
 #ifdef __ANDROID__
         case CDeviceID::ANDROID_RTL_SDR: InputDevice = new CAndroid_RTL_SDR(radioController); break;
@@ -138,7 +138,7 @@
             case 1: inputDevice = new CRTL_SDR(radioController); break;
 #endif
 #ifdef HAVE_SOAPYSDR
-            case 2: inputDevice = new CSoapySdr(); break;
+            case 2: inputDevice = new CSoapySdr(radioController); break;
 #endif
 #ifdef __ANDROID__
             case 3: inputDevice = new CAndroid_RTL_SDR(radioController); break;
@@ -178,7 +178,7 @@
 #endif
 #ifdef HAVE_SOAPYSDR
         if (device == "soapysdr")
-            InputDevice = new CSoapySdr();
+            InputDevice = new CSoapySdr(radioController);
         else
 #endif
 #ifdef __ANDROID__
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/input/soapy_sdr.cpp welle.io-Vowqy8/welle.io-2.0~beta3/src/input/soapy_sdr.cpp
--- welle.io-2.0~beta3/src/input/soapy_sdr.cpp	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/input/soapy_sdr.cpp	2019-09-29 23:45:30.269966699 +0200
@@ -33,16 +33,29 @@
 #include "dab-constants.h"
 #include "unistd.h"
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 using namespace std;
 
-CSoapySdr::CSoapySdr() :
+CSoapySdr::CSoapySdr(RadioControllerInterface& radioController) :
+    radioController(radioController),
     m_sampleBuffer(1024 * 1024),
     m_spectrumSampleBuffer(8192)
 {
     m_running = false;
-    std::clog << "SoapySdr" << std::endl;
+    m_driver_args = radioController.deviceInitArgs[CDeviceID::SOAPYSDR];
+    std::clog << "SoapySdr using device argument: \"" << m_driver_args << "\"" << std::endl;
 
-    restart();
+    bool restart_successul = restart();
+    if (!restart_successul) {
+        std::cerr << "Could not init SoapySdr device using device argument \"" << m_driver_args << "\"" << std::endl;
+        throw std::runtime_error("Could not init SoapySdr device using device argument \"" + m_driver_args + "\"");
+    }
 }
 
 CSoapySdr::~CSoapySdr()
@@ -76,7 +89,17 @@
     m_sampleBuffer.FlushRingBuffer();
     m_spectrumSampleBuffer.FlushRingBuffer();
 
-    m_device = SoapySDR::Device::make(m_driver_args);
+    try {
+        m_device = SoapySDR::Device::make(m_driver_args);
+    }
+    catch (std::exception& e) {
+        std::clog << "Exception caught in SoapySDR::Device::make with \"" << m_driver_args << "\" :\n" <<
+            "   " << e.what() << std::endl;
+        stop();
+        radioController.onMessage(message_level_t::Error, 
+                                  QT_TRANSLATE_NOOP("CRadioController", "Could not load SoapySDR with provided device arguments."));
+        return false;
+    }
     stringstream ss;
     ss << "SoapySDR driver=" << m_device->getDriverKey();
     ss << " hardware=" << m_device->getHardwareKey();
@@ -213,7 +236,13 @@
 
 void CSoapySdr::setDriverArgs(const std::string& args)
 {
-    m_driver_args = args;
+    if (m_driver_args != args) {
+        m_driver_args = args;
+        radioController.deviceInitArgs[CDeviceID::SOAPYSDR] = m_driver_args;
+        m_running = false;
+        stop();
+        restart();
+    }
 }
 
 void CSoapySdr::setAntenna(const std::string& antenna)
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/input/soapy_sdr.h welle.io-Vowqy8/welle.io-2.0~beta3/src/input/soapy_sdr.h
--- welle.io-2.0~beta3/src/input/soapy_sdr.h	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/soapy_sdr.h	2019-09-29 21:08:40.898245698 +0200
@@ -40,7 +40,7 @@
 class CSoapySdr : public CVirtualInput
 {
 public:
-    CSoapySdr();
+    CSoapySdr(RadioControllerInterface& radioController);
     ~CSoapySdr();
     CSoapySdr(const CSoapySdr&) = delete;
     CSoapySdr operator=(const CSoapySdr&) = delete;
@@ -62,6 +62,8 @@
     virtual CDeviceID getID(void);
     virtual bool setDeviceParam(DeviceParam param, std::string &value);
 
+    RadioControllerInterface& radioController;
+
 private:
     void setDriverArgs(const std::string& args);
     void setAntenna(const std::string& antenna);
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/input/virtual_input.h welle.io-Vowqy8/welle.io-2.0~beta3/src/input/virtual_input.h
--- welle.io-2.0~beta3/src/input/virtual_input.h	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/virtual_input.h	2019-09-29 21:08:57.010245220 +0200
@@ -38,8 +38,11 @@
 #include "radio-controller.h"
 #include "ringbuffer.h"
 
+#ifndef __CDeviceID
+#define __CDeviceID
 enum class CDeviceID {
     UNKNOWN, NULLDEVICE, AIRSPY, RAWFILE, RTL_SDR, RTL_TCP, SOAPYSDR, ANDROID_RTL_SDR};
+#endif
 
 class CVirtualInput : public InputInterface {
 public:
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp welle.io-Vowqy8/welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp	2019-09-29 23:46:38.821964666 +0200
@@ -513,8 +513,9 @@
     radioController->setDeviceParam("biastee", isOn ? 1 : 0);
 }
 
-void CGUIHelper::openSoapySdr()
+void CGUIHelper::openSoapySdr(QString driverArgs)
 {
+    radioController->deviceInitArgs[CDeviceID::SOAPYSDR] = driverArgs.toStdString();
     radioController->openDevice(CDeviceID::SOAPYSDR);
 }
 
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/welle-gui/gui_helper.h welle.io-Vowqy8/welle.io-2.0~beta3/src/welle-gui/gui_helper.h
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.h	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/gui_helper.h	2019-09-29 20:19:06.370333896 +0200
@@ -88,7 +88,7 @@
     Q_INVOKABLE void setBiasTeeAirspy(bool isOn);
     Q_INVOKABLE void openRtlSdr();
     Q_INVOKABLE void setBiasTeeRtlSdr(bool isOn);
-    Q_INVOKABLE void openSoapySdr();
+    Q_INVOKABLE void openSoapySdr(QString driverArgs);
     Q_INVOKABLE void setAntennaSoapySdr(QString text);
     Q_INVOKABLE void setDriverArgsSoapySdr(QString text);
     Q_INVOKABLE void setClockSourceSoapySdr(QString text);
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/welle-gui/main.cpp welle.io-Vowqy8/welle.io-2.0~beta3/src/welle-gui/main.cpp
--- welle.io-2.0~beta3/src/welle-gui/main.cpp	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/main.cpp	2019-09-29 20:43:33.878290383 +0200
@@ -46,6 +46,7 @@
 #include "gui_helper.h"
 #include "debug_output.h"
 #include "waterfallitem.h"
+#include "virtual_input.h" //for CDeviceID
 
 #ifdef __ANDROID__
     #include <QtAndroid>
@@ -144,6 +145,10 @@
             radioController.setAutoPlay(lastStation[1], lastStation[0]);
     }
 
+    // Load mandatory driver arguments to init input device
+    QString soapyDriverArgs = settings.value("soapyDriverArgs","").toString();
+    radioController.deviceInitArgs[CDeviceID::SOAPYSDR] = soapyDriverArgs.toStdString();
+
     CGUIHelper guiHelper(&radioController);
     guiHelper.setTranslator(translator);
 
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/welle-gui/QML/settingpages/SoapySDRSettings.qml welle.io-Vowqy8/welle.io-2.0~beta3/src/welle-gui/QML/settingpages/SoapySDRSettings.qml
--- welle.io-2.0~beta3/src/welle-gui/QML/settingpages/SoapySDRSettings.qml	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/QML/settingpages/SoapySDRSettings.qml	2019-09-29 22:23:05.378113321 +0200
@@ -67,13 +67,13 @@
 
     function initDevice(isAutoDevice) {
         if(!isAutoDevice)
-            guiHelper.openSoapySdr()
+            guiHelper.openSoapySdr(driverArgs.text)
         __setParams()
     }
 
     function __setParams() {
+        guiHelper.setDriverArgsSoapySdr(driverArgs.text)
         guiHelper.setAntennaSoapySdr(antenna.text)
-        guiHelper.setDriverArgsSoapySdr(clockSource.text)
-        guiHelper.setClockSourceSoapySdr(driverArgs.text)
+        guiHelper.setClockSourceSoapySdr(clockSource.text)
     }
 }
diff -Naur welle.io-mQa5fr/welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp welle.io-Vowqy8/welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp
--- welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp	2019-09-29 20:58:22.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp	2019-09-29 23:37:13.905981417 +0200
@@ -185,7 +185,14 @@
         device->setDeviceParam(DeviceParam::SoapySDRAntenna, value_tmp);
     }
     else if (param == "SoapySDRDriverArgs") {
-        device->setDeviceParam(DeviceParam::SoapySDRDriverArgs, value_tmp);
+        bool valueChanged = (value_tmp != this->deviceInitArgs[CDeviceID::SOAPYSDR]);
+        if (valueChanged) {
+            if (deviceId == CDeviceID::SOAPYSDR)
+                device->setDeviceParam(DeviceParam::SoapySDRDriverArgs, value_tmp);
+            if (deviceId == CDeviceID::NULLDEVICE)
+                this->deviceInitArgs[CDeviceID::SOAPYSDR] = value_tmp; // In case there was an exception loading the device
+            openDevice(CDeviceID::SOAPYSDR,1);
+        }
     }
     else if (param == "SoapySDRClockSource") {
         device->setDeviceParam(DeviceParam::SoapySDRClockSource, value_tmp);
