diff -Naur welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp welle.io-2.0~beta3-trayIconTr/src/welle-gui/gui_helper.cpp
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.cpp	2019-09-28 11:48:20.183143259 +0200
+++ welle.io-2.0~beta3-trayIconTr/src/welle-gui/gui_helper.cpp	2019-09-28 11:56:31.087128704 +0200
@@ -565,15 +565,13 @@
     emit newDebugOutput(text);
 }
 
-void CGUIHelper::addTranslator(QString Language, QObject *obj)
+void CGUIHelper::setTranslator(QTranslator *translator)
 {
-    if(translator) {
-        QCoreApplication::removeTranslator(translator);
-        delete(translator);
-    }
-
-    translator = new QTranslator;
+    this->translator = translator;
+}
 
+QTranslator* CGUIHelper::loadTranslationFile(QTranslator *translator, QString Language)
+{
     if(Language == "auto")
     {
         QString locale = QLocale::system().name();
@@ -597,14 +595,24 @@
     // Set new language
     qDebug() << "main:" <<  "Set language" << Language;
     bool isTranslation = translator->load(QString(":/i18n/") + Language);
-    QCoreApplication::installTranslator(translator);
 
-    if(!isTranslation && Language != "en_GB")
+    if(!isTranslation)
     {
-        qDebug() << "main:" <<  "Error while loading language" << Language << "use English \"en_GB\" instead";
-        Language = "en_GB";
+        qDebug() << "main:" <<  "Error while loading language" << Language << "use untranslated text (ie. English)";
     }
 
+    return translator;  
+}
+
+void CGUIHelper::updateTranslator(QString Language, QObject *obj)
+{
+    translator = loadTranslationFile(translator, Language);
+
+    translateGUI(Language, obj);
+}
+
+void CGUIHelper::translateGUI(QString Language, QObject *obj)
+{
     // Set locale e.g. time formarts
     QLocale curLocale(QLocale((const QString&)Language));
     QLocale::setDefault(curLocale);
@@ -613,6 +621,14 @@
     QQmlContext *currentContext = QQmlEngine::contextForObject(obj);
     QQmlEngine *engine = currentContext->engine();
     engine->retranslate();
+
+    // Start translation of non-QML GUI
+#ifndef QT_NO_SYSTEMTRAYICON
+    minimizeAction->setText(tr("Mi&nimize"));
+    maximizeAction->setText(tr("Ma&ximize"));
+    restoreAction->setText(tr("&Restore"));
+    quitAction->setText(tr("&Quit"));
+#endif
 }
 
 #ifdef __ANDROID__
diff -Naur welle.io-2.0~beta3/src/welle-gui/gui_helper.h welle.io-2.0~beta3-trayIconTr/src/welle-gui/gui_helper.h
--- welle.io-2.0~beta3/src/welle-gui/gui_helper.h	2019-09-27 10:13:48.000000000 +0200
+++ welle.io-2.0~beta3-trayIconTr/src/welle-gui/gui_helper.h	2019-09-28 11:56:56.643127946 +0200
@@ -64,7 +64,9 @@
     Q_PROPERTY(QVariant licenses READ licenses CONSTANT)
 
 public:
-    Q_INVOKABLE void addTranslator(QString Language, QObject *obj);
+    Q_INVOKABLE void updateTranslator(QString Language, QObject *obj);
+    void setTranslator(QTranslator *translator);
+    static QTranslator* loadTranslationFile(QTranslator *translator, QString Language);
 
     CGUIHelper(CRadioController *radioController, QObject* parent = nullptr);
     ~CGUIHelper();
@@ -100,7 +102,7 @@
 
 private:
     QTranslator *translator = nullptr;
-
+    void translateGUI(QString Language, QObject *obj);
     CRadioController *radioController;
 
     QXYSeries* spectrumSeries;
diff -Naur welle.io-2.0~beta3/src/welle-gui/main.cpp welle.io-2.0~beta3-trayIconTr/src/welle-gui/main.cpp
--- welle.io-2.0~beta3/src/welle-gui/main.cpp	2019-09-27 10:13:48.000000000 +0200
+++ welle.io-2.0~beta3-trayIconTr/src/welle-gui/main.cpp	2019-09-28 11:51:16.271138038 +0200
@@ -74,14 +74,7 @@
 
     //Initialise translation
     QTranslator *translator = new QTranslator;
-    QString Language = QLocale::system().name();
-    qDebug() << "main:" <<  "Set language" << Language;
-    bool isTranslation = translator->load(QString(":/i18n/") + Language);
-    if(!isTranslation && Language != "en_GB")
-    {
-        qDebug() << "main:" <<  "Error while loading language" << Language << "use English \"en_GB\" instead";
-        Language = "en_GB";
-    }
+    translator = CGUIHelper::loadTranslationFile(translator, "auto");
     QCoreApplication::installTranslator(translator);
     
     // Register waterfall diagram
@@ -152,6 +145,7 @@
     }
 
     CGUIHelper guiHelper(&radioController);
+    guiHelper.setTranslator(translator);
 
     // Create new QML application, set some requried options and load the QML file
     QQmlApplicationEngine engine;
diff -Naur welle.io-2.0~beta3/src/welle-gui/QML/settingpages/GlobalSettings.qml welle.io-2.0~beta3-trayIconTr/src/welle-gui/QML/settingpages/GlobalSettings.qml
--- welle.io-2.0~beta3/src/welle-gui/QML/settingpages/GlobalSettings.qml	2019-09-27 10:13:48.000000000 +0200
+++ welle.io-2.0~beta3-trayIconTr/src/welle-gui/QML/settingpages/GlobalSettings.qml	2019-09-28 11:56:30.127128732 +0200
@@ -92,7 +92,7 @@
                     }
                     onCurrentIndexChanged: {
                         // Load appropriate settings
-                        guiHelper.addTranslator(listModel.get(currentIndex).langCode, this); 
+                        guiHelper.updateTranslator(listModel.get(currentIndex).langCode, this); 
                     }
                 }
 
