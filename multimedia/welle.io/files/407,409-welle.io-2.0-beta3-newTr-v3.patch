diff -Naur welle.io-2.0~beta3_unpatched/src/backend/radio-controller.h welle.io-2.0~beta3/src/backend/radio-controller.h
--- welle.io-2.0~beta3_unpatched/src/backend/radio-controller.h	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/backend/radio-controller.h	2019-09-21 17:36:04.588753217 +0200
@@ -112,7 +112,7 @@
         virtual void onTIIMeasurement(tii_measurement_t&& m) = 0;
 
         /* When a information or warning message should be printed */
-        virtual void onMessage(message_level_t level, const std::string& text) = 0;
+        virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) = 0;
 
         /* The receiver has shutdown */
         virtual void onShutdown(void) { };
diff -Naur welle.io-2.0~beta3_unpatched/src/input/airspy_sdr.cpp welle.io-2.0~beta3/src/input/airspy_sdr.cpp
--- welle.io-2.0~beta3_unpatched/src/input/airspy_sdr.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/airspy_sdr.cpp	2019-09-21 17:36:03.500753189 +0200
@@ -35,6 +35,13 @@
 #include <iostream>
 #include "airspy_sdr.h"
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 static const int EXTIO_NS = 8192;
 static const int EXTIO_BASE_TYPE_SIZE = sizeof(float);
 
@@ -142,7 +149,7 @@
     airspy_error status =  (airspy_error) airspy_is_streaming(device);
     if(status != AIRSPY_TRUE && running == true) {
         std::clog << "Airspy: airspy is not working. Maybe it is unplugged. Code: " << status <<  "running" << running << std::endl;
-        radioController.onMessage(message_level_t::Error, "airspy is unplugged.");
+        radioController.onMessage(message_level_t::Error, QT_TRANSLATE_NOOP("CRadioController", "airspy is unplugged."));
 
         stop();
     }
diff -Naur welle.io-2.0~beta3_unpatched/src/input/input_factory.cpp welle.io-2.0~beta3/src/input/input_factory.cpp
--- welle.io-2.0~beta3_unpatched/src/input/input_factory.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/input_factory.cpp	2019-09-21 17:36:03.500753189 +0200
@@ -28,6 +28,13 @@
 
 #include <iostream>
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 #include "input_factory.h"
 #include "null_device.h"
 #include "rtl_tcp.h"
@@ -65,9 +72,9 @@
         std::string text;
 
         if (device == "auto")
-            text = "No valid device found use Null device instead.";
+            text = QT_TRANSLATE_NOOP("CRadioController", "No valid device found use Null device instead.");
         else
-            text = "Error while opening device";
+            text = QT_TRANSLATE_NOOP("CRadioController", "Error while opening device");
 
         radioController.onMessage(message_level_t::Error, text);
         InputDevice = new CNullDevice();
@@ -107,7 +114,7 @@
 
     // Fallback if no device is found or an error occured
     if (InputDevice == nullptr) {
-        std::string text = "Error while opening device";
+        std::string text = QT_TRANSLATE_NOOP("CRadioController", "Error while opening device");
         radioController.onMessage(message_level_t::Error, text);
         InputDevice = new CNullDevice();
     }
diff -Naur welle.io-2.0~beta3_unpatched/src/input/raw_file.cpp welle.io-2.0~beta3/src/input/raw_file.cpp
--- welle.io-2.0~beta3_unpatched/src/input/raw_file.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/raw_file.cpp	2019-09-21 17:36:04.588753217 +0200
@@ -41,6 +41,13 @@
 
 #include "raw_file.h"
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 static inline int64_t getMyTime(void)
 {
     struct timeval tv;
@@ -167,7 +174,7 @@
     if (filePointer == nullptr) {
         std::clog << "RAWFile: Cannot open file: " << fileName << std::endl;
         radioController.onMessage(message_level_t::Error,
-                "Cannot open file " + fileName);
+                QT_TRANSLATE_NOOP("CRadioController", "Cannot open file "), fileName);
         return;
     }
 
@@ -187,7 +194,7 @@
     if (filePointer == nullptr) {
         std::clog << "RAWFile: Cannot open file: " << fileName << std::endl;
         radioController.onMessage(message_level_t::Error,
-                "Cannot open file " + fileName);
+                QT_TRANSLATE_NOOP("CRadioController", "Cannot open file "), fileName);
         return;
     }
 
@@ -300,10 +307,10 @@
             fseek(filePointer, 0, SEEK_SET);
             std::clog << "RAWFile:"  << "End of file, restarting" << std::endl;
             radioController.onMessage(message_level_t::Information,
-                    "End of file, restarting");
+                    QT_TRANSLATE_NOOP("CRadioController", "End of file, restarting"));
         }
         else {
-            radioController.onMessage(message_level_t::Information, "End of file");
+            radioController.onMessage(message_level_t::Information, QT_TRANSLATE_NOOP("CRadioController", "End of file"));
             endReached = true;
             return 0;
         }
@@ -391,6 +398,6 @@
         this->fileFormat = CRAWFileFormat::Unknown;
         std::clog << "RAWFile: unknown file format" << std::endl;
         radioController.onMessage(message_level_t::Error,
-                "Unknown RAW file format");
+                QT_TRANSLATE_NOOP("CRadioController", "Unknown RAW file format"));
     }
 }
diff -Naur welle.io-2.0~beta3_unpatched/src/input/rtl_sdr.cpp welle.io-2.0~beta3/src/input/rtl_sdr.cpp
--- welle.io-2.0~beta3_unpatched/src/input/rtl_sdr.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/rtl_sdr.cpp	2019-09-21 17:36:03.500753189 +0200
@@ -35,6 +35,13 @@
 
 #include "rtl_sdr.h"
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 #define READLEN_DEFAULT 8192
 
 // Fallback if function is not defined in shared lib
@@ -287,7 +294,7 @@
         }
         else { // AGC is off
             if (minAmplitude == 0 || maxAmplitude == 255) {
-                std::string Text = "ADC overload. Maybe you are using a to high gain.";
+                std::string Text = QT_TRANSLATE_NOOP("CRadioController", "ADC overload. Maybe you are using a too high gain.");
                 std::clog << "RTL_SDR:" << Text << std::endl;
                 radioController.onMessage(message_level_t::Information, Text);
             }
@@ -383,7 +390,7 @@
                       (void*)this, 0, READLEN_DEFAULT);
 
     if(rtlsdrRunning)
-        radioController.onMessage(message_level_t::Error, "RTL-SDR is unplugged.");
+        radioController.onMessage(message_level_t::Error, QT_TRANSLATE_NOOP("CRadioController", "RTL-SDR is unplugged."));
 
     rtlsdrUnplugged = true;
     rtlsdrRunning = false;
diff -Naur welle.io-2.0~beta3_unpatched/src/input/rtl_tcp.cpp welle.io-2.0~beta3/src/input/rtl_tcp.cpp
--- welle.io-2.0~beta3_unpatched/src/input/rtl_tcp.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/input/rtl_tcp.cpp	2019-09-21 17:36:04.588753217 +0200
@@ -33,6 +33,13 @@
 #include <iostream>
 #include "rtl_tcp.h"
 
+// For Qt translation if Qt is exisiting
+#ifdef QT_CORE_LIB
+    #include <QtGlobal>
+#else
+    #define QT_TRANSLATE_NOOP(x,y) (y)
+#endif
+
 // commands are packed in 5 bytes, one "command byte"
 // and an integer parameter
 struct command
@@ -262,7 +269,7 @@
     connected = false;
     firstData = true;
     radioController.onMessage(message_level_t::Error,
-            "RTL-TCP connection closed.");
+            QT_TRANSLATE_NOOP("CRadioController", "RTL-TCP connection closed."));
     sock.close();
 }
 
@@ -403,7 +410,7 @@
                 lock.unlock();
 
                 radioController.onMessage(message_level_t::Error,
-                        "Connection failed to server " +
+                        QT_TRANSLATE_NOOP("CRadioController", "Connection failed to server "),
                         serverAddress + ":" + std::to_string(serverPort));
             }
         }
@@ -452,8 +459,8 @@
         }
         else { // AGC is off or unknown tuner
             if (minAmplitude == 0 || maxAmplitude == 255) {
-                std::string text = "ADC overload."
-                    " Maybe you are using a to high gain.";
+                std::string text = QT_TRANSLATE_NOOP("CRadioController", "ADC overload."
+                    " Maybe you are using a too high gain.");
                 std::clog << "RTL_TCP_CLIENT:" << text << std::endl;
                 radioController.onMessage(message_level_t::Information, text);
             }
diff -Naur welle.io-2.0~beta3_unpatched/src/tests/backend_tests.cpp welle.io-2.0~beta3/src/tests/backend_tests.cpp
--- welle.io-2.0~beta3_unpatched/src/tests/backend_tests.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/tests/backend_tests.cpp	2019-09-21 18:35:05.000000000 +0200
@@ -52,7 +52,7 @@
 
         virtual void onNewNullSymbol(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
         virtual void onConstellationPoints(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
-        virtual void onMessage(message_level_t level, const std::string& text) override { (void) level; (void)text; }
+        virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) override { (void) level; (void)text; (void)text2;}
 
         virtual void onTIIMeasurement(tii_measurement_t&& m) override { (void)m; }
 };
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-cli/tests.cpp welle.io-2.0~beta3/src/welle-cli/tests.cpp
--- welle.io-2.0~beta3_unpatched/src/welle-cli/tests.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-cli/tests.cpp	2019-09-21 17:49:39.740773915 +0200
@@ -170,14 +170,20 @@
 
         virtual void onNewNullSymbol(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
         virtual void onConstellationPoints(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
-        virtual void onMessage(message_level_t level, const std::string& text) override
+        virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) override
         {
+            std::string fullText;
+            if (text2.empty())
+                fullText = text;
+            else
+                fullText = text + text2;
+
             switch (level) {
                 case message_level_t::Information:
-                    cerr << "Info: " << text << endl;
+                    cerr << "Info: " << fullText << endl;
                     break;
                 case message_level_t::Error:
-                    cerr << "Error: " << text << endl;
+                    cerr << "Error: " << fullText << endl;
                     break;
             }
         }
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-cli/webradiointerface.cpp welle.io-2.0~beta3/src/welle-cli/webradiointerface.cpp
--- welle.io-2.0~beta3_unpatched/src/welle-cli/webradiointerface.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-cli/webradiointerface.cpp	2019-09-21 17:49:39.180773901 +0200
@@ -1434,10 +1434,16 @@
     last_constellation = move(data);
 }
 
-void WebRadioInterface::onMessage(message_level_t level, const std::string& text)
+void WebRadioInterface::onMessage(message_level_t level, const std::string& text, const std::string& text2)
 {
+    std::string fullText;
+    if (text2.empty())
+        fullText = text;
+    else
+        fullText = text + text2;
+    
     lock_guard<mutex> lock(data_mut);
-    pending_messages.emplace_back(level, text);
+    pending_messages.emplace_back(level, fullText);
 }
 
 void WebRadioInterface::onTIIMeasurement(tii_measurement_t&& m)
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-cli/webradiointerface.h welle.io-2.0~beta3/src/welle-cli/webradiointerface.h
--- welle.io-2.0~beta3_unpatched/src/welle-cli/webradiointerface.h	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-cli/webradiointerface.h	2019-09-21 17:36:04.592753217 +0200
@@ -82,7 +82,7 @@
         virtual void onNewImpulseResponse(std::vector<float>&& data) override;
         virtual void onNewNullSymbol(std::vector<DSPCOMPLEX>&& data) override;
         virtual void onConstellationPoints(std::vector<DSPCOMPLEX>&& data) override;
-        virtual void onMessage(message_level_t level, const std::string& text) override;
+        virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) override;
         virtual void onTIIMeasurement(tii_measurement_t&& m) override;
         virtual void onShutdown() override;
 
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-cli/welle-cli.cpp welle.io-2.0~beta3/src/welle-cli/welle-cli.cpp
--- welle.io-2.0~beta3_unpatched/src/welle-cli/welle-cli.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-cli/welle-cli.cpp	2019-09-21 17:49:38.424773881 +0200
@@ -230,14 +230,20 @@
         virtual void onNewImpulseResponse(std::vector<float>&& data) override { (void)data; }
         virtual void onNewNullSymbol(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
         virtual void onConstellationPoints(std::vector<DSPCOMPLEX>&& data) override { (void)data; }
-        virtual void onMessage(message_level_t level, const std::string& text) override
+        virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) override
         {
+            std::string fullText;
+            if (text2.empty())
+                fullText = text;
+            else
+                fullText = text + text2;
+
             switch (level) {
                 case message_level_t::Information:
-                    cerr << "Info: " << text << endl;
+                    cerr << "Info: " << fullText << endl;
                     break;
                 case message_level_t::Error:
-                    cerr << "Error: " << text << endl;
+                    cerr << "Error: " << fullText << endl;
                     break;
             }
         }
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-gui/QML/expertviews/RawRecorder.qml welle.io-2.0~beta3/src/welle-gui/QML/expertviews/RawRecorder.qml
--- welle.io-2.0~beta3_unpatched/src/welle-gui/QML/expertviews/RawRecorder.qml	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/QML/expertviews/RawRecorder.qml	2019-09-21 17:36:04.592753217 +0200
@@ -44,7 +44,7 @@
         }
 
         TextStandart {
-            text: "Ring buffer size (roughly): " + (ringeBufferSize / 1000000 * 2).toFixed(0) + " MB"
+            text: qsTr("Ring buffer size (roughly): ") + (ringeBufferSize / 1000000 * 2).toFixed(0) + " MB"
         }
     }
 }
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-gui/radio_controller.cpp welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp
--- welle.io-2.0~beta3_unpatched/src/welle-gui/radio_controller.cpp	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/radio_controller.cpp	2019-09-21 17:36:04.592753217 +0200
@@ -875,14 +875,20 @@
         " with error " << m.error;
 }
 
-void CRadioController::onMessage(message_level_t level, const std::string& text)
+void CRadioController::onMessage(message_level_t level, const std::string& text, const std::string& text2)
 {
+    QString fullText;
+    if (text2.empty())
+      fullText = tr(text.c_str());
+    else
+      fullText = tr(text.c_str()) + QString::fromStdString(text2);
+    
     switch (level) {
         case message_level_t::Information:
-            emit showInfoMessage(tr(text.c_str()));
+            emit showInfoMessage(fullText);
             break;
         case message_level_t::Error:
-            emit showErrorMessage(tr(text.c_str()));
+            emit showErrorMessage(fullText);
             break;
     }
 }
diff -Naur welle.io-2.0~beta3_unpatched/src/welle-gui/radio_controller.h welle.io-2.0~beta3/src/welle-gui/radio_controller.h
--- welle.io-2.0~beta3_unpatched/src/welle-gui/radio_controller.h	2019-09-08 20:37:15.000000000 +0200
+++ welle.io-2.0~beta3/src/welle-gui/radio_controller.h	2019-09-21 17:36:04.592753217 +0200
@@ -145,7 +145,7 @@
     virtual void onConstellationPoints(std::vector<DSPCOMPLEX>&& data) override;
     virtual void onNewNullSymbol(std::vector<DSPCOMPLEX>&& data) override;
     virtual void onTIIMeasurement(tii_measurement_t&& m) override;
-    virtual void onMessage(message_level_t level, const std::string& text) override;
+    virtual void onMessage(message_level_t level, const std::string& text, const std::string& text2 = std::string()) override;
 
 private:
     void initialise(void);
