# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           boost 1.0

# Please keep the mkvtoolnix and mkvtoolnix-devel ports as similar as
# possible.

# The developer does not accept macOS-specific bug reports, but does
# accept pull requests.

name                mkvtoolnix
conflicts           mkvtoolnix-devel
set my_name         mkvtoolnix

categories          multimedia
maintainers         {ryandesign @ryandesign} openmaintainer
license             GPL-2+ LGPL-2.1+

description         Matroska media files manipulation tools.
long_description    mkvtoolnix will evolve to a set of tools to create, \
                    alter and inspect Matroska files under Linux and other \
                    Unices, just what the OGMtools do for the OGM format.

homepage            https://mkvtoolnix.download
master_sites        ${homepage}/sources/
use_xz              yes

livecheck.type      none
if {${os.platform} ne "darwin" || ${os.major} >= 19} {
    version         76.0
    revision        0
    checksums       rmd160  d0ba9825793ab9501e424308cfca8a0bccf91f29 \
                    sha256  6ace661b61a49d1026b1a97336051d7aa85d56fb34527f2ca97d8933f7efe90d \
                    size    11021180

    livecheck.type  regex
    livecheck.url   [lindex ${master_sites} 0]
    livecheck.regex ${my_name}-(\[0-9.\]+)${extract.suffix}
} elseif {${os.major} >= 17} {
    # mkvtoolnix 54.0.0 and later do not build on macOS 10.14 or earlier
    # (at least not with the versions of libc++ included on those systems) because:
    # The following features of the C++17 standards are not supported by ccache /opt/local/bin/clang++-mp-9.0:
    #   * file system library (C++17)
    version         53.0.0
    revision        5
    checksums       rmd160  5fb3ea63712cbdaf9e61b8fd573ef7e1d9a06540 \
                    sha256  8dfd66278c81e6f1df0fd84aad30ce2b4cf7a2ad4336924f01f1879f9d1e4cd6 \
                    size    7567276

    if {${os.platform} eq "darwin" && ${os.major} == 17} {
        # libc++ on 10.13 supports std::optional but the compilers that
        # shipped with 10.13's Xcode incorrectly believed that it didn't.
        # https://github.com/llvm/llvm-project/commit/7fb40e1569dd66292b647f4501b85517e9247953
        # MacPorts clang 8 and later have applied this fix.
        compiler.blacklist-append clang macports-clang-5.0 macports-clang-6.0 macports-clang-7.0
    }
} else {
    # mkvtoolnix 42.0.0 and later do not build on macOS 10.12 or earlier
    # (at least not with the versions of libc++ included on those systems) because:
    # The following features of the C++11/C++14/C++17 standards are not supported by /usr/bin/clang++:
    #   * std::optional (C++17)
    version         41.0.0
    revision        5
    checksums       rmd160  17b2f3b7d6eb87e9d9d4aac536b66705c18d497f \
                    sha256  7cdd6ad9144324162604172b7e96cb13cdbb7913e07c4ad7633344aac20e4103 \
                    size    7401548
    patchfiles      patch-mm_text_io.diff
}

distname            ${my_name}-${version}
dist_subdir         ${my_name}

set version_ruby    2.7
set version_ruby_mp [join [split $version_ruby "."] ""]

depends_build       port:ruby${version_ruby_mp} \
                    port:docbook-xsl-nons \
                    port:libxslt \
                    port:po4a

depends_lib         port:bzip2 \
                    port:expat \
                    port:flac \
                    port:gettext-runtime \
                    port:libebml \
                    port:libmatroska \
                    port:libogg \
                    port:libvorbis \
                    port:lzo2 \
                    port:zlib \
                    port:pugixml \
                    port:cmark \
                    port:libdvdread

if {[vercmp ${version} 54] >= 0} {
                    # v54+ only needs boost during build
                    boost.depends_type \
                        build
}
if {[vercmp ${version} 59] >= 0} {
                    PortGroup qt5 1.0
                    depends_lib-append \
                        port:gmp
} else {
                    depends_lib-append \
                        port:libmagic \
                        port:pcre \
                        port:pcre2
}

depends_run         port:ruby${version_ruby_mp}

post-patch {
    fs-traverse f ${worksrcpath} {
        set t [file tail ${f}]
        set e [file extension ${f}]
        if {${t} eq "Rakefile" || ${e} eq ".rb"} {
            reinplace -q -E "s|^#!/usr/bin/(env )?ruby|#!${prefix}/bin/ruby${version_ruby}|g" ${f}
        }
    }
}

compiler.cxx_standard 2017
configure.cxxflags-append -std=c++17

set cxx_stdlibflags {}
if {[string match *clang* ${configure.cxx}] && ${configure.cxx_stdlib} ne ""} {
    set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
}

build.cmd           rake${version_ruby}
build.target        default
# disable silent rules
build.args-append   V=1

configure.args      --mandir=${prefix}/share/man \
                    --with-boost=[boost::install_area] \
                    --with-extra-libs=${prefix}/lib \
                    --with-extra-includes=${prefix}/include \
                    --with-xsltproc=${prefix}/bin/xsltproc \
                    --with-docbook-xsl-root=${prefix}/share/xsl/docbook-xsl-nons \
                    --with-po4a=${prefix}/bin/po4a \
                    --with-po4a-translate=${prefix}/bin/po4a-translate \
                    --disable-update-check

if {[vercmp ${version} 59] >= 0} {
        configure.args-append --disable-gui \
                              --with-qmake=${qt_dir}/bin/qmake
} else {
        configure.args-append --disable-qt
}

configure.ldflags-append ${cxx_stdlibflags}

test.run            yes
test.cmd            rake
test.target         tests:unit

variant qtgui description {Build with the qt5 GUI} {
    PortGroup       app 1.0
    if {[vercmp ${version} 59] < 0} {
        PortGroup       qt5 1.0
        configure.args-append --with-qmake=${qt_dir}/bin/qmake
    }

    app.name        MKVToolNix
    app.executable  mkvtoolnix-gui
    app.icon        ${worksrcpath}/share/icons/256x256/mkvtoolnix-gui.png

    depends_build-append port:makeicns
    qt5.depends_component qtmultimedia
    configure.args-append \
                    --with-moc=${qt_dir}/bin/moc \
                    --with-uic=${qt_dir}/bin/uic \
                    --with-rcc=${qt_dir}/bin/rcc
    if {[vercmp ${version} 59] >= 0} {
        configure.args-replace --disable-gui --enable-gui
    } else {
        configure.args-replace --disable-qt --enable-qt
    }
}

if {${os.platform} ne "darwin" || ${os.major} > 13} {
    default_variants +qtgui
} elseif {[variant_isset qtgui]} {
    known_fail      yes
    pre-fetch {
        ui_error "The qtgui variant requires Qt 5.9.0 or later, available on OS X 10.10 and later"
        return -code error "incompatible OS X version"
    }
}
