Patches from upstream:
https://github.com/qgis/QGIS/commit/a220015fc0d390d5f1565c7e84eb7d9adc347100
https://github.com/qgis/QGIS/commit/24519cfea9e33bf6d09f361ef8bdcfeba0eab0eb


diff --git a/python/PyQt6/core/auto_additions/qgstopologicalmesh.py b/python/PyQt6/core/auto_additions/qgstopologicalmesh.py
new file mode 100644
index 000000000000..d9047a90a51e
--- /dev/null
+++ python/PyQt6/core/auto_additions/qgstopologicalmesh.py
@@ -0,0 +1,16 @@
+# The following has been generated automatically from src/core/mesh/qgstopologicalmesh.h
+try:
+    QgsTopologicalMesh.createTopologicalMesh = staticmethod(QgsTopologicalMesh.createTopologicalMesh)
+    QgsTopologicalMesh.counterClockwiseFaces = staticmethod(QgsTopologicalMesh.counterClockwiseFaces)
+    QgsTopologicalMesh.checkTopology = staticmethod(QgsTopologicalMesh.checkTopology)
+    QgsTopologicalMesh.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
+try:
+    QgsTopologicalMesh.TopologicalFaces.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
+try:
+    QgsTopologicalMesh.Changes.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
diff --git a/python/PyQt6/core/auto_generated/mesh/qgstopologicalmesh.sip.in b/python/PyQt6/core/auto_generated/mesh/qgstopologicalmesh.sip.in
new file mode 100644
index 000000000000..eff071f629f7
--- /dev/null
+++ python/PyQt6/core/auto_generated/mesh/qgstopologicalmesh.sip.in
@@ -0,0 +1,360 @@
+/************************************************************************
+ * This file has been generated automatically from                      *
+ *                                                                      *
+ * src/core/mesh/qgstopologicalmesh.h                                   *
+ *                                                                      *
+ * Do not edit manually ! Edit header and run scripts/sipify.py again   *
+ ************************************************************************/
+
+
+
+
+
+class QgsTopologicalMesh
+{
+%Docstring(signature="appended")
+Class that wraps a :py:class:`QgsMesh` to ensure the consistency of the
+mesh during editing and help to access to elements from other elements
+
+A topological face must:
+
+- be convex
+- be oriented counter-clockwise
+- not share a unique vertex with another face
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+  public:
+
+    typedef QVector<int> FaceNeighbors;
+
+    class TopologicalFaces
+{
+%Docstring(signature="appended")
+Class that contains independent faces an topological information about
+this faces
+
+This class supports unique shared vertices between faces.
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+      public:
+
+
+        void clear();
+%Docstring
+Clears all data contained in the instance.
+%End
+
+
+        int vertexToFace( int vertexIndex ) const;
+%Docstring
+Returns a face linked to the vertices with index ``vertexIndex``
+%End
+
+    };
+
+
+    class Changes
+{
+%Docstring(signature="appended")
+Class that contains topological differences between two states of a
+topological mesh, only accessible from the QgsTopologicalMesh class
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+      public:
+
+
+
+        QList<int> removedFaceIndexes() const;
+%Docstring
+Returns the indexes of the faces that are removed with this changes
+%End
+
+        QVector<QgsPoint> addedVertices() const;
+%Docstring
+Returns the added vertices with this changes
+%End
+
+        QList<int> verticesToRemoveIndexes() const;
+%Docstring
+Returns the indexes of vertices to remove
+%End
+
+        QList<int> changedCoordinatesVerticesIndexes() const;
+%Docstring
+Returns the indexes of vertices that have changed coordinates
+%End
+
+        QList<double> newVerticesZValues() const;
+%Docstring
+Returns the new Z values of vertices that have changed their coordinates
+%End
+
+        QList<QgsPointXY> newVerticesXYValues() const;
+%Docstring
+Returns the new (X,Y) values of vertices that have changed their
+coordinates
+%End
+
+        QList<QgsPointXY> oldVerticesXYValues() const;
+%Docstring
+Returns the old (X,Y) values of vertices that have changed their
+coordinates
+%End
+
+        QList<int> nativeFacesIndexesGeometryChanged() const;
+%Docstring
+Returns a list of the native face indexes that have a geometry changed
+%End
+
+        bool isEmpty() const;
+%Docstring
+Returns whether changes are empty, that there is nothing to change
+%End
+
+      protected:
+
+
+
+        void clearChanges();
+%Docstring
+Clears all changes
+%End
+
+    };
+
+    static QgsTopologicalMesh createTopologicalMesh( QgsMesh *mesh, int maxVerticesPerFace, QgsMeshEditingError &error );
+%Docstring
+Creates a topologicaly consistent mesh with ``mesh``, this static method
+modifies ``mesh`` to be topological consistent and return a
+QgsTopologicalMesh instance that contains and handles this mesh (does
+not take ownership).
+%End
+
+
+
+    QVector<int> neighborsOfFace( int faceIndex ) const;
+%Docstring
+Returns the indexes of neighbor faces of the face with index
+``faceIndex``
+%End
+
+    QList<int> facesAroundVertex( int vertexIndex ) const;
+%Docstring
+Returns the indexes of faces that are around the vertex with index
+``vertexIndex``
+%End
+
+    QgsMesh *mesh() const;
+%Docstring
+Returns a pointer to the wrapped mesh
+%End
+
+    int firstFaceLinked( int vertexIndex ) const;
+%Docstring
+Returns the index of the first face linked, returns -1 if it is a free
+vertex or out of range index
+%End
+
+    bool isVertexOnBoundary( int vertexIndex ) const;
+%Docstring
+Returns whether the vertex is on a boundary
+%End
+
+    bool isVertexFree( int vertexIndex ) const;
+%Docstring
+Returns whether the vertex is a free vertex
+%End
+
+    QList<int> freeVerticesIndexes() const;
+%Docstring
+Returns a list of vertices are not linked to any faces
+%End
+
+
+
+    QgsMeshEditingError facesCanBeAdded( const TopologicalFaces &topologicalFaces ) const;
+%Docstring
+Returns whether the faces can be added to the mesh
+%End
+
+    Changes addFaces( const TopologicalFaces &topologicFaces );
+%Docstring
+Adds faces ``topologicFaces`` to the topologic mesh. The method returns
+a instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    QgsMeshEditingError facesCanBeRemoved( const QList<int> &facesIndexes );
+%Docstring
+Returns whether faces with index in ``faceIndexes`` can be removed The
+method an error object with type :py:class:`QgsMeshEditingError`.NoError
+if the faces can be removed, otherwise returns the corresponding error
+%End
+
+    Changes removeFaces( const QList<int> &facesIndexes );
+%Docstring
+Removes faces with index in ``faceIndexes``. The method returns a
+instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    bool edgeCanBeFlipped( int vertexIndex1, int vertexIndex2 ) const;
+%Docstring
+Returns ``True`` if the edge can be flipped (only available for edge
+shared by two faces with 3 vertices)
+%End
+
+    Changes flipEdge( int vertexIndex1, int vertexIndex2 );
+%Docstring
+Flips edge (``vertexIndex1``, ``vertexIndex2``) The method returns a
+instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    bool canBeMerged( int vertexIndex1, int vertexIndex2 ) const;
+%Docstring
+Returns ``True`` if faces separated by vertices with indexes
+``vertexIndex1`` and ``vertexIndex2`` can be merged
+%End
+
+    Changes merge( int vertexIndex1, int vertexIndex2 );
+%Docstring
+Merges faces separated by vertices with indexes ``vertexIndex1`` and
+``vertexIndex2`` The method returns a instance of the class
+QgsTopologicalMesh.Change that can be used to reverse or reapply the
+operation.
+%End
+
+    bool canBeSplit( int faceIndex ) const;
+%Docstring
+Returns ``True`` if face with index ``faceIndex`` can be split
+%End
+
+    Changes splitFace( int faceIndex );
+%Docstring
+Splits face with index ``faceIndex`` The method returns a instance of
+the class QgsTopologicalMesh.Change that can be used to reverse or
+reapply the operation.
+%End
+
+    Changes addVertexInFace( int faceIndex, const QgsMeshVertex &vertex );
+%Docstring
+Adds a ``vertex`` in the face with index ``faceIndex``. The including
+face is removed and new faces surrounding the added vertex are added.
+The method returns a instance of the class QgsTopologicalMesh.Change
+that can be used to reverse or reapply the operation.
+%End
+
+    Changes insertVertexInFacesEdge( int faceIndex, int position, const QgsMeshVertex &vertex );
+%Docstring
+Inserts a ``vertex`` in the edge of face with index ``faceIndex`` at
+``position`` . The faces that are on each side of the edge are removed
+and replaced by new faces constructed by a triangulation.
+%End
+
+    Changes addFreeVertex( const QgsMeshVertex &vertex );
+%Docstring
+Adds a free ``vertex`` in the face, that is a vertex that is not
+included or linked with any faces. The method returns a instance of the
+class QgsTopologicalMesh.Change that can be used to reverse or reapply
+the operation.
+%End
+
+    Changes removeVertexFillHole( int vertexIndex );
+%Docstring
+Removes the vertex with index ``vertexIndex``. If the vertex in linked
+with faces, the operation leads also to remove the faces. In this case,
+the hole is filled by a triangulation. The method returns a instance of
+the class QgsTopologicalMesh.Change that can be used to reverse or
+reapply the operation.
+%End
+
+    Changes removeVertices( const QList<int> &vertices );
+%Docstring
+Removes all the vertices with index in the list ``vertices`` If vertices
+in linked with faces, the operation leads also to remove the faces
+without filling holes. The method returns a instance of the class
+QgsTopologicalMesh.Change that can be used to reverse or reapply the
+operation.
+%End
+
+    Changes changeZValue( const QList<int> &verticesIndexes, const QList<double> &newValues );
+%Docstring
+Changes the Z values of the vertices with indexes in ``vertices``
+indexes with the values in ``newValues``
+%End
+
+    Changes changeXYValue( const QList<int> &verticesIndexes, const QList<QgsPointXY> &newValues );
+%Docstring
+Changes the (X,Y) values of the vertices with indexes in ``vertices``
+indexes with the values in ``newValues``
+%End
+
+
+    void applyChanges( const Changes &changes );
+%Docstring
+Applies the changes
+%End
+
+    void reverseChanges( const Changes &changes );
+%Docstring
+Reverses the changes
+%End
+
+    static QgsMeshEditingError counterClockwiseFaces( QgsMeshFace &face, QgsMesh *mesh );
+%Docstring
+Checks the topology of the face and sets it counter clockwise if
+necessary
+%End
+
+
+    void reindex();
+%Docstring
+Reindexes faces and vertices, after this operation, the topological mesh
+can't be edited anymore and only the method mesh can be used to access
+to the raw mesh.
+%End
+
+    bool renumber();
+%Docstring
+Renumbers the indexes of vertices and faces using the Reverse CutHill
+McKee Algorithm
+%End
+
+    QgsMeshEditingError checkConsistency() const;
+%Docstring
+Checks the consistency of the topological mesh and return ``False`` if
+there is a consistency issue
+%End
+
+    static QgsMeshEditingError checkTopology( const QgsMesh &mesh, int maxVerticesPerFace );
+%Docstring
+Checks the topology of the mesh ``mesh``, if error occurs, this mesh
+can't be edited
+%End
+
+};
+
+
+/************************************************************************
+ * This file has been generated automatically from                      *
+ *                                                                      *
+ * src/core/mesh/qgstopologicalmesh.h                                   *
+ *                                                                      *
+ * Do not edit manually ! Edit header and run scripts/sipify.py again   *
+ ************************************************************************/
diff --git a/python/PyQt6/core/core_auto.sip b/python/PyQt6/core/core_auto.sip
index 5dbf9ad9794b..98e597602472 100644
--- python/PyQt6/core/core_auto.sip
+++ python/PyQt6/core/core_auto.sip
@@ -494,6 +494,7 @@
 %Include auto_generated/mesh/qgsmeshtimesettings.sip
 %Include auto_generated/mesh/qgsmeshtracerenderer.sip
 %Include auto_generated/mesh/qgsmeshcalculator.sip
+%Include auto_generated/mesh/qgstopologicalmesh.sip
 %Include auto_generated/mesh/qgsmeshadvancedediting.sip
 %Include auto_generated/mesh/qgsmeshforcebypolylines.sip
 %Include auto_generated/mesh/qgsmeshlayerlabeling.sip
diff --git a/python/PyQt6/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in b/python/PyQt6/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
index 0fae81a01021..22e9ce496af6 100644
--- python/PyQt6/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
+++ python/PyQt6/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
@@ -9,7 +9,7 @@
 
 
 
-class QgsLayerTreeEmbeddedConfigWidget : QWidget, protected Ui::QgsLayerTreeEmbeddedConfigWidgetBase
+class QgsLayerTreeEmbeddedConfigWidget : QWidget
 {
 %Docstring(signature="appended")
 A widget to configure layer tree embedded widgets for a particular map
diff --git a/python/PyQt6/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in b/python/PyQt6/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
index c6e85dd358b3..c09daf96f49a 100644
--- python/PyQt6/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
+++ python/PyQt6/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
@@ -10,7 +10,7 @@
 
 
 
-class QgsAbstractDbSourceSelect : QgsAbstractDataSourceWidget, protected Ui::QgsDbSourceSelectBase
+class QgsAbstractDbSourceSelect : QgsAbstractDataSourceWidget
 {
 %Docstring(signature="appended")
 The :py:class:`QgsAbstractDbSourceSelect` class is a base class for
diff --git a/python/PyQt6/gui/auto_generated/qgsowssourceselect.sip.in b/python/PyQt6/gui/auto_generated/qgsowssourceselect.sip.in
index c743067a32be..f0bcc01d28cc 100644
--- python/PyQt6/gui/auto_generated/qgsowssourceselect.sip.in
+++ python/PyQt6/gui/auto_generated/qgsowssourceselect.sip.in
@@ -11,7 +11,7 @@
 
 
 
-class QgsOWSSourceSelect : QgsAbstractDataSourceWidget, protected Ui::QgsOWSSourceSelectBase
+class QgsOWSSourceSelect : QgsAbstractDataSourceWidget
 {
 %Docstring(signature="appended")
 Dialog to create connections and add layers WCS etc.
diff --git a/python/PyQt6/gui/auto_generated/qgsrichtexteditor.sip.in b/python/PyQt6/gui/auto_generated/qgsrichtexteditor.sip.in
index c8c446bd5143..74ba66573748 100644
--- python/PyQt6/gui/auto_generated/qgsrichtexteditor.sip.in
+++ python/PyQt6/gui/auto_generated/qgsrichtexteditor.sip.in
@@ -10,7 +10,7 @@
 
 
 
-class QgsRichTextEditor : QWidget, protected Ui::QgsRichTextEditorBase
+class QgsRichTextEditor : QWidget
 {
 %Docstring(signature="appended")
 A widget for editing rich text documents, with support for user
diff --git a/python/PyQt6/gui/auto_generated/qgstablewidgetbase.sip.in b/python/PyQt6/gui/auto_generated/qgstablewidgetbase.sip.in
index 8533ab005713..81a6a8ecbfa7 100644
--- python/PyQt6/gui/auto_generated/qgstablewidgetbase.sip.in
+++ python/PyQt6/gui/auto_generated/qgstablewidgetbase.sip.in
@@ -8,7 +8,7 @@
 
 
 
-class QgsTableWidgetBase : QWidget, protected Ui::QgsTableWidgetUiBase
+class QgsTableWidgetBase : QWidget
 {
 %Docstring(signature="appended")
 Base widget allowing to edit a collection, using a table.
diff --git a/python/PyQt6/gui/auto_generated/qgstextformatwidget.sip.in b/python/PyQt6/gui/auto_generated/qgstextformatwidget.sip.in
index 1bda32779f1f..3e3696869aa0 100644
--- python/PyQt6/gui/auto_generated/qgstextformatwidget.sip.in
+++ python/PyQt6/gui/auto_generated/qgstextformatwidget.sip.in
@@ -12,7 +12,7 @@
 
 
 
-class QgsTextFormatWidget : QWidget, QgsExpressionContextGenerator, protected Ui::QgsTextFormatWidgetBase
+class QgsTextFormatWidget : QWidget, QgsExpressionContextGenerator
 {
 %Docstring(signature="appended")
 A widget for customizing text formatting settings.
diff --git a/python/PyQt6/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in b/python/PyQt6/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
index 441438a8ae0c..705b4743f59b 100644
--- python/PyQt6/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
+++ python/PyQt6/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
@@ -11,7 +11,7 @@
 
 
 
-class QgsColorRampShaderWidget : QWidget, protected Ui::QgsColorRampShaderWidgetBase
+class QgsColorRampShaderWidget : QWidget
 {
 %Docstring(signature="appended")
 It has 2 ways how to use it. For raster layers, raster data provider and
diff --git a/python/PyQt6/gui/auto_generated/symbology/qgs25drendererwidget.sip.in b/python/PyQt6/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
index e22c86198ca1..2d4a4a988d1a 100644
--- python/PyQt6/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
+++ python/PyQt6/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
@@ -8,7 +8,7 @@
 
 
 
-class Qgs25DRendererWidget : QgsRendererWidget, protected Ui::Qgs25DRendererWidgetBase
+class Qgs25DRendererWidget : QgsRendererWidget
 {
 
 %TypeHeaderCode
diff --git a/python/core/auto_additions/qgstopologicalmesh.py b/python/core/auto_additions/qgstopologicalmesh.py
new file mode 100644
index 000000000000..d9047a90a51e
--- /dev/null
+++ python/core/auto_additions/qgstopologicalmesh.py
@@ -0,0 +1,16 @@
+# The following has been generated automatically from src/core/mesh/qgstopologicalmesh.h
+try:
+    QgsTopologicalMesh.createTopologicalMesh = staticmethod(QgsTopologicalMesh.createTopologicalMesh)
+    QgsTopologicalMesh.counterClockwiseFaces = staticmethod(QgsTopologicalMesh.counterClockwiseFaces)
+    QgsTopologicalMesh.checkTopology = staticmethod(QgsTopologicalMesh.checkTopology)
+    QgsTopologicalMesh.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
+try:
+    QgsTopologicalMesh.TopologicalFaces.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
+try:
+    QgsTopologicalMesh.Changes.__group__ = ['mesh']
+except (NameError, AttributeError):
+    pass
diff --git a/python/core/auto_generated/mesh/qgstopologicalmesh.sip.in b/python/core/auto_generated/mesh/qgstopologicalmesh.sip.in
new file mode 100644
index 000000000000..eff071f629f7
--- /dev/null
+++ python/core/auto_generated/mesh/qgstopologicalmesh.sip.in
@@ -0,0 +1,360 @@
+/************************************************************************
+ * This file has been generated automatically from                      *
+ *                                                                      *
+ * src/core/mesh/qgstopologicalmesh.h                                   *
+ *                                                                      *
+ * Do not edit manually ! Edit header and run scripts/sipify.py again   *
+ ************************************************************************/
+
+
+
+
+
+class QgsTopologicalMesh
+{
+%Docstring(signature="appended")
+Class that wraps a :py:class:`QgsMesh` to ensure the consistency of the
+mesh during editing and help to access to elements from other elements
+
+A topological face must:
+
+- be convex
+- be oriented counter-clockwise
+- not share a unique vertex with another face
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+  public:
+
+    typedef QVector<int> FaceNeighbors;
+
+    class TopologicalFaces
+{
+%Docstring(signature="appended")
+Class that contains independent faces an topological information about
+this faces
+
+This class supports unique shared vertices between faces.
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+      public:
+
+
+        void clear();
+%Docstring
+Clears all data contained in the instance.
+%End
+
+
+        int vertexToFace( int vertexIndex ) const;
+%Docstring
+Returns a face linked to the vertices with index ``vertexIndex``
+%End
+
+    };
+
+
+    class Changes
+{
+%Docstring(signature="appended")
+Class that contains topological differences between two states of a
+topological mesh, only accessible from the QgsTopologicalMesh class
+
+.. versionadded:: 3.22
+%End
+
+%TypeHeaderCode
+#include "qgstopologicalmesh.h"
+%End
+      public:
+
+
+
+        QList<int> removedFaceIndexes() const;
+%Docstring
+Returns the indexes of the faces that are removed with this changes
+%End
+
+        QVector<QgsPoint> addedVertices() const;
+%Docstring
+Returns the added vertices with this changes
+%End
+
+        QList<int> verticesToRemoveIndexes() const;
+%Docstring
+Returns the indexes of vertices to remove
+%End
+
+        QList<int> changedCoordinatesVerticesIndexes() const;
+%Docstring
+Returns the indexes of vertices that have changed coordinates
+%End
+
+        QList<double> newVerticesZValues() const;
+%Docstring
+Returns the new Z values of vertices that have changed their coordinates
+%End
+
+        QList<QgsPointXY> newVerticesXYValues() const;
+%Docstring
+Returns the new (X,Y) values of vertices that have changed their
+coordinates
+%End
+
+        QList<QgsPointXY> oldVerticesXYValues() const;
+%Docstring
+Returns the old (X,Y) values of vertices that have changed their
+coordinates
+%End
+
+        QList<int> nativeFacesIndexesGeometryChanged() const;
+%Docstring
+Returns a list of the native face indexes that have a geometry changed
+%End
+
+        bool isEmpty() const;
+%Docstring
+Returns whether changes are empty, that there is nothing to change
+%End
+
+      protected:
+
+
+
+        void clearChanges();
+%Docstring
+Clears all changes
+%End
+
+    };
+
+    static QgsTopologicalMesh createTopologicalMesh( QgsMesh *mesh, int maxVerticesPerFace, QgsMeshEditingError &error );
+%Docstring
+Creates a topologicaly consistent mesh with ``mesh``, this static method
+modifies ``mesh`` to be topological consistent and return a
+QgsTopologicalMesh instance that contains and handles this mesh (does
+not take ownership).
+%End
+
+
+
+    QVector<int> neighborsOfFace( int faceIndex ) const;
+%Docstring
+Returns the indexes of neighbor faces of the face with index
+``faceIndex``
+%End
+
+    QList<int> facesAroundVertex( int vertexIndex ) const;
+%Docstring
+Returns the indexes of faces that are around the vertex with index
+``vertexIndex``
+%End
+
+    QgsMesh *mesh() const;
+%Docstring
+Returns a pointer to the wrapped mesh
+%End
+
+    int firstFaceLinked( int vertexIndex ) const;
+%Docstring
+Returns the index of the first face linked, returns -1 if it is a free
+vertex or out of range index
+%End
+
+    bool isVertexOnBoundary( int vertexIndex ) const;
+%Docstring
+Returns whether the vertex is on a boundary
+%End
+
+    bool isVertexFree( int vertexIndex ) const;
+%Docstring
+Returns whether the vertex is a free vertex
+%End
+
+    QList<int> freeVerticesIndexes() const;
+%Docstring
+Returns a list of vertices are not linked to any faces
+%End
+
+
+
+    QgsMeshEditingError facesCanBeAdded( const TopologicalFaces &topologicalFaces ) const;
+%Docstring
+Returns whether the faces can be added to the mesh
+%End
+
+    Changes addFaces( const TopologicalFaces &topologicFaces );
+%Docstring
+Adds faces ``topologicFaces`` to the topologic mesh. The method returns
+a instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    QgsMeshEditingError facesCanBeRemoved( const QList<int> &facesIndexes );
+%Docstring
+Returns whether faces with index in ``faceIndexes`` can be removed The
+method an error object with type :py:class:`QgsMeshEditingError`.NoError
+if the faces can be removed, otherwise returns the corresponding error
+%End
+
+    Changes removeFaces( const QList<int> &facesIndexes );
+%Docstring
+Removes faces with index in ``faceIndexes``. The method returns a
+instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    bool edgeCanBeFlipped( int vertexIndex1, int vertexIndex2 ) const;
+%Docstring
+Returns ``True`` if the edge can be flipped (only available for edge
+shared by two faces with 3 vertices)
+%End
+
+    Changes flipEdge( int vertexIndex1, int vertexIndex2 );
+%Docstring
+Flips edge (``vertexIndex1``, ``vertexIndex2``) The method returns a
+instance of the class QgsTopologicalMesh.Change that can be used to
+reverse or reapply the operation.
+%End
+
+    bool canBeMerged( int vertexIndex1, int vertexIndex2 ) const;
+%Docstring
+Returns ``True`` if faces separated by vertices with indexes
+``vertexIndex1`` and ``vertexIndex2`` can be merged
+%End
+
+    Changes merge( int vertexIndex1, int vertexIndex2 );
+%Docstring
+Merges faces separated by vertices with indexes ``vertexIndex1`` and
+``vertexIndex2`` The method returns a instance of the class
+QgsTopologicalMesh.Change that can be used to reverse or reapply the
+operation.
+%End
+
+    bool canBeSplit( int faceIndex ) const;
+%Docstring
+Returns ``True`` if face with index ``faceIndex`` can be split
+%End
+
+    Changes splitFace( int faceIndex );
+%Docstring
+Splits face with index ``faceIndex`` The method returns a instance of
+the class QgsTopologicalMesh.Change that can be used to reverse or
+reapply the operation.
+%End
+
+    Changes addVertexInFace( int faceIndex, const QgsMeshVertex &vertex );
+%Docstring
+Adds a ``vertex`` in the face with index ``faceIndex``. The including
+face is removed and new faces surrounding the added vertex are added.
+The method returns a instance of the class QgsTopologicalMesh.Change
+that can be used to reverse or reapply the operation.
+%End
+
+    Changes insertVertexInFacesEdge( int faceIndex, int position, const QgsMeshVertex &vertex );
+%Docstring
+Inserts a ``vertex`` in the edge of face with index ``faceIndex`` at
+``position`` . The faces that are on each side of the edge are removed
+and replaced by new faces constructed by a triangulation.
+%End
+
+    Changes addFreeVertex( const QgsMeshVertex &vertex );
+%Docstring
+Adds a free ``vertex`` in the face, that is a vertex that is not
+included or linked with any faces. The method returns a instance of the
+class QgsTopologicalMesh.Change that can be used to reverse or reapply
+the operation.
+%End
+
+    Changes removeVertexFillHole( int vertexIndex );
+%Docstring
+Removes the vertex with index ``vertexIndex``. If the vertex in linked
+with faces, the operation leads also to remove the faces. In this case,
+the hole is filled by a triangulation. The method returns a instance of
+the class QgsTopologicalMesh.Change that can be used to reverse or
+reapply the operation.
+%End
+
+    Changes removeVertices( const QList<int> &vertices );
+%Docstring
+Removes all the vertices with index in the list ``vertices`` If vertices
+in linked with faces, the operation leads also to remove the faces
+without filling holes. The method returns a instance of the class
+QgsTopologicalMesh.Change that can be used to reverse or reapply the
+operation.
+%End
+
+    Changes changeZValue( const QList<int> &verticesIndexes, const QList<double> &newValues );
+%Docstring
+Changes the Z values of the vertices with indexes in ``vertices``
+indexes with the values in ``newValues``
+%End
+
+    Changes changeXYValue( const QList<int> &verticesIndexes, const QList<QgsPointXY> &newValues );
+%Docstring
+Changes the (X,Y) values of the vertices with indexes in ``vertices``
+indexes with the values in ``newValues``
+%End
+
+
+    void applyChanges( const Changes &changes );
+%Docstring
+Applies the changes
+%End
+
+    void reverseChanges( const Changes &changes );
+%Docstring
+Reverses the changes
+%End
+
+    static QgsMeshEditingError counterClockwiseFaces( QgsMeshFace &face, QgsMesh *mesh );
+%Docstring
+Checks the topology of the face and sets it counter clockwise if
+necessary
+%End
+
+
+    void reindex();
+%Docstring
+Reindexes faces and vertices, after this operation, the topological mesh
+can't be edited anymore and only the method mesh can be used to access
+to the raw mesh.
+%End
+
+    bool renumber();
+%Docstring
+Renumbers the indexes of vertices and faces using the Reverse CutHill
+McKee Algorithm
+%End
+
+    QgsMeshEditingError checkConsistency() const;
+%Docstring
+Checks the consistency of the topological mesh and return ``False`` if
+there is a consistency issue
+%End
+
+    static QgsMeshEditingError checkTopology( const QgsMesh &mesh, int maxVerticesPerFace );
+%Docstring
+Checks the topology of the mesh ``mesh``, if error occurs, this mesh
+can't be edited
+%End
+
+};
+
+
+/************************************************************************
+ * This file has been generated automatically from                      *
+ *                                                                      *
+ * src/core/mesh/qgstopologicalmesh.h                                   *
+ *                                                                      *
+ * Do not edit manually ! Edit header and run scripts/sipify.py again   *
+ ************************************************************************/
diff --git a/python/core/core_auto.sip b/python/core/core_auto.sip
index 5dbf9ad9794b..98e597602472 100644
--- python/core/core_auto.sip
+++ python/core/core_auto.sip
@@ -494,6 +494,7 @@
 %Include auto_generated/mesh/qgsmeshtimesettings.sip
 %Include auto_generated/mesh/qgsmeshtracerenderer.sip
 %Include auto_generated/mesh/qgsmeshcalculator.sip
+%Include auto_generated/mesh/qgstopologicalmesh.sip
 %Include auto_generated/mesh/qgsmeshadvancedediting.sip
 %Include auto_generated/mesh/qgsmeshforcebypolylines.sip
 %Include auto_generated/mesh/qgsmeshlayerlabeling.sip
diff --git a/python/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in b/python/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
index 0fae81a01021..22e9ce496af6 100644
--- python/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
+++ python/gui/auto_generated/layertree/qgslayertreeembeddedconfigwidget.sip.in
@@ -9,7 +9,7 @@
 
 
 
-class QgsLayerTreeEmbeddedConfigWidget : QWidget, protected Ui::QgsLayerTreeEmbeddedConfigWidgetBase
+class QgsLayerTreeEmbeddedConfigWidget : QWidget
 {
 %Docstring(signature="appended")
 A widget to configure layer tree embedded widgets for a particular map
diff --git a/python/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in b/python/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
index c6e85dd358b3..c09daf96f49a 100644
--- python/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
+++ python/gui/auto_generated/providers/qgsabstractdbsourceselect.sip.in
@@ -10,7 +10,7 @@
 
 
 
-class QgsAbstractDbSourceSelect : QgsAbstractDataSourceWidget, protected Ui::QgsDbSourceSelectBase
+class QgsAbstractDbSourceSelect : QgsAbstractDataSourceWidget
 {
 %Docstring(signature="appended")
 The :py:class:`QgsAbstractDbSourceSelect` class is a base class for
diff --git a/python/gui/auto_generated/qgsowssourceselect.sip.in b/python/gui/auto_generated/qgsowssourceselect.sip.in
index c743067a32be..f0bcc01d28cc 100644
--- python/gui/auto_generated/qgsowssourceselect.sip.in
+++ python/gui/auto_generated/qgsowssourceselect.sip.in
@@ -11,7 +11,7 @@
 
 
 
-class QgsOWSSourceSelect : QgsAbstractDataSourceWidget, protected Ui::QgsOWSSourceSelectBase
+class QgsOWSSourceSelect : QgsAbstractDataSourceWidget
 {
 %Docstring(signature="appended")
 Dialog to create connections and add layers WCS etc.
diff --git a/python/gui/auto_generated/qgsrichtexteditor.sip.in b/python/gui/auto_generated/qgsrichtexteditor.sip.in
index c8c446bd5143..74ba66573748 100644
--- python/gui/auto_generated/qgsrichtexteditor.sip.in
+++ python/gui/auto_generated/qgsrichtexteditor.sip.in
@@ -10,7 +10,7 @@
 
 
 
-class QgsRichTextEditor : QWidget, protected Ui::QgsRichTextEditorBase
+class QgsRichTextEditor : QWidget
 {
 %Docstring(signature="appended")
 A widget for editing rich text documents, with support for user
diff --git a/python/gui/auto_generated/qgstablewidgetbase.sip.in b/python/gui/auto_generated/qgstablewidgetbase.sip.in
index 8533ab005713..81a6a8ecbfa7 100644
--- python/gui/auto_generated/qgstablewidgetbase.sip.in
+++ python/gui/auto_generated/qgstablewidgetbase.sip.in
@@ -8,7 +8,7 @@
 
 
 
-class QgsTableWidgetBase : QWidget, protected Ui::QgsTableWidgetUiBase
+class QgsTableWidgetBase : QWidget
 {
 %Docstring(signature="appended")
 Base widget allowing to edit a collection, using a table.
diff --git a/python/gui/auto_generated/qgstextformatwidget.sip.in b/python/gui/auto_generated/qgstextformatwidget.sip.in
index eaeb35659082..ae455b22a28c 100644
--- python/gui/auto_generated/qgstextformatwidget.sip.in
+++ python/gui/auto_generated/qgstextformatwidget.sip.in
@@ -12,7 +12,7 @@
 
 
 
-class QgsTextFormatWidget : QWidget, QgsExpressionContextGenerator, protected Ui::QgsTextFormatWidgetBase
+class QgsTextFormatWidget : QWidget, QgsExpressionContextGenerator
 {
 %Docstring(signature="appended")
 A widget for customizing text formatting settings.
diff --git a/python/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in b/python/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
index 441438a8ae0c..705b4743f59b 100644
--- python/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
+++ python/gui/auto_generated/raster/qgscolorrampshaderwidget.sip.in
@@ -11,7 +11,7 @@
 
 
 
-class QgsColorRampShaderWidget : QWidget, protected Ui::QgsColorRampShaderWidgetBase
+class QgsColorRampShaderWidget : QWidget
 {
 %Docstring(signature="appended")
 It has 2 ways how to use it. For raster layers, raster data provider and
diff --git a/python/gui/auto_generated/symbology/qgs25drendererwidget.sip.in b/python/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
index e22c86198ca1..2d4a4a988d1a 100644
--- python/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
+++ python/gui/auto_generated/symbology/qgs25drendererwidget.sip.in
@@ -8,7 +8,7 @@
 
 
 
-class Qgs25DRendererWidget : QgsRendererWidget, protected Ui::Qgs25DRendererWidgetBase
+class Qgs25DRendererWidget : QgsRendererWidget
 {
 
 %TypeHeaderCode
diff --git a/scripts/sipify.py b/scripts/sipify.py
index aa68b0be526d..20e2e5af2cb4 100755
--- scripts/sipify.py
+++ scripts/sipify.py
@@ -1676,6 +1676,10 @@ def cpp_to_python_signature(cpp_function: str) -> str:
         while not re.match(r"^#endif", CONTEXT.current_line):
             CONTEXT.current_line = read_line()
 
+    using_match = re.match(r"(\s*)using\s+(.*?)\s*=\s*(.*);", CONTEXT.current_line)
+    if using_match:
+        CONTEXT.current_line = f"{using_match.group(1)}typedef {using_match.group(3)} {using_match.group(2)};"
+
     # Do not process SIP code %XXXCode
     if CONTEXT.sip_run and re.match(
         r"^ *[/]*% *(VirtualErrorHandler|MappedType|Type(?:Header)?Code|Module(?:Header)?Code|Convert(?:From|To)(?:Type|SubClass)Code|MethodCode|Docstring)(.*)?$",
@@ -1995,7 +1999,8 @@ def cpp_to_python_signature(cpp_function: str) -> str:
         # Inheritance
         if class_pattern_match.group("domain"):
             m = class_pattern_match.group("domain")
-            m = re.sub(r"public +(\w+, *)*(Ui::\w+,? *)+", "", m)
+            dbg_info(f"class: {CONTEXT.classname[-1]} domain is {m}")
+            m = re.sub(r"(?:(?:,\s*)?public|(?:,\s*)?protected|,)\s+Ui::\w+\s*", "", m)
             m = re.sub(r"public +", "", m)
             m = re.sub(r"[,:]?\s*private +\w+(::\w+)?", "", m)
 
diff --git a/src/core/mesh/qgstopologicalmesh.h b/src/core/mesh/qgstopologicalmesh.h
index 6b91e48b2267..c8a3d2dc1445 100644
--- src/core/mesh/qgstopologicalmesh.h
+++ src/core/mesh/qgstopologicalmesh.h
@@ -26,8 +26,6 @@ template CORE_EXPORT QList<int> SIP_SKIP;
 template CORE_EXPORT QVector<QVector<int>> SIP_SKIP;
 #endif
 
-SIP_NO_FILE
-
 class QgsMeshEditingError;
 class QgsMeshVertexCirculator;
 
@@ -36,11 +34,11 @@ class QgsMeshVertexCirculator;
  *
  * \brief Class that wraps a QgsMesh to ensure the consistency of the mesh during editing and help to access to elements from other elements
  *
- *  A topological face need to:
+ * A topological face must:
  *
  * - be convex
- * - counter clock wise
- * - not share an unique vertex with another face
+ * - be oriented counter-clockwise
+ * - not share a unique vertex with another face
  *
  * \since QGIS 3.22
  */
@@ -55,7 +53,7 @@ class CORE_EXPORT QgsTopologicalMesh
      *
      * \brief Class that contains independent faces an topological information about this faces
      *
-     * This class supports unique shared vertex between faces
+     * This class supports unique shared vertices between faces.
      *
      * \since QGIS 3.22
      */
@@ -63,14 +61,21 @@ class CORE_EXPORT QgsTopologicalMesh
     {
       public:
 
-        //! Returns faces
-        QVector<QgsMeshFace>  meshFaces() const {return mFaces;}
+        /**
+         * Returns faces.
+         * \note Not available in Python bindings.
+         */
+        SIP_SKIP QVector<QgsMeshFace>  meshFaces() const {return mFaces;}
 
         //! Clears all data contained in the instance.
         void clear();
 
-        //! Returns the face neighborhood of the faces, indexing is local
-        QVector<FaceNeighbors> facesNeighborhood() const;
+        /**
+         * Returns the face neighborhood of the faces, indexing is local.
+         *
+         * \note Not available in Python bindings.
+         */
+        SIP_SKIP QVector<FaceNeighbors> facesNeighborhood() const;
 
         //! Returns a face linked to the vertices with index \a vertexIndex
         int vertexToFace( int vertexIndex ) const;
@@ -97,17 +102,29 @@ class CORE_EXPORT QgsTopologicalMesh
     {
       public:
 
-        //! Returns the face that are added with this changes
-        QVector<QgsMeshFace> addedFaces() const;
+        /**
+         * Returns the face that are added with this changes.
+         *
+         * \note Not available in Python bindings.
+         */
+        SIP_SKIP QVector<QgsMeshFace> addedFaces() const;
 
-        //! Returns the faces that are removed with this changes
-        QVector<QgsMeshFace> removedFaces() const;
+        /**
+         * Returns the faces that are removed with this changes.
+         *
+         * \note Not available in Python bindings.
+         */
+        SIP_SKIP QVector<QgsMeshFace> removedFaces() const;
 
         //! Returns the indexes of the faces that are removed with this changes
         QList<int> removedFaceIndexes() const;
 
         //! Returns the added vertices with this changes
+#ifndef SIP_RUN
         QVector<QgsMeshVertex> addedVertices() const;
+#else
+        QVector<QgsPoint> addedVertices() const;
+#endif
 
         //! Returns the indexes of vertices to remove
         QList<int> verticesToRemoveIndexes() const;
@@ -169,8 +186,12 @@ class CORE_EXPORT QgsTopologicalMesh
      */
     static QgsTopologicalMesh createTopologicalMesh( QgsMesh *mesh, int maxVerticesPerFace, QgsMeshEditingError &error );
 
-    //! Creates new topological faces that are not yet included in the mesh
-    static TopologicalFaces  createNewTopologicalFaces( const QVector<QgsMeshFace> &faces, bool uniqueSharedVertexAllowed, QgsMeshEditingError &error );
+    /**
+     * Creates new topological faces that are not yet included in the mesh.
+     *
+     * \note Not available in Python bindings
+     */
+    SIP_SKIP static TopologicalFaces createNewTopologicalFaces( const QVector<QgsMeshFace> &faces, bool uniqueSharedVertexAllowed, QgsMeshEditingError &error );
 
     //----------- access element methods
 
@@ -195,8 +216,12 @@ class CORE_EXPORT QgsTopologicalMesh
     //! Returns a list of vertices are not linked to any faces
     QList<int> freeVerticesIndexes() const;
 
-    //! Returns a vertex circulator linked to this mesh around the vertex with index \a vertexIndex
-    QgsMeshVertexCirculator vertexCirculator( int vertexIndex ) const;
+    /**
+     * Returns a vertex circulator linked to this mesh around the vertex with index \a vertexIndex.
+     *
+     * \note Not available in Python bindings
+     */
+    SIP_SKIP QgsMeshVertexCirculator vertexCirculator( int vertexIndex ) const;
 
     //----------- editing methods
 
@@ -310,9 +335,10 @@ class CORE_EXPORT QgsTopologicalMesh
      * Checks the topology of the \a vertices as they are contained in a face and returns indication on direction.
      * If the face is clockwise, \a clockwise is TRUE
      *
+     * \note Not available in Python bindings
      * \since QGIS 3.30
      */
-    static QgsMeshEditingError checkTopologyOfVerticesAsFace( const QVector<QgsMeshVertex> &vertices, bool &clockwise );
+    SIP_SKIP static QgsMeshEditingError checkTopologyOfVerticesAsFace( const QVector<QgsMeshVertex> &vertices, bool &clockwise );
 
     /**
      * Reindexes faces and vertices, after this operation, the topological
@@ -377,11 +403,15 @@ class CORE_EXPORT QgsTopologicalMesh
 
 };
 
+#ifndef SIP_RUN
+
 /**
  * \ingroup core
  *
  * \brief  Convenient class that turn around a vertex and provide information about faces and vertices
  *
+ * \note Not available in Python bindings
+ *
  * \since QGIS 3.22
  */
 class CORE_EXPORT QgsMeshVertexCirculator
@@ -449,5 +479,6 @@ class CORE_EXPORT QgsMeshVertexCirculator
 
     int positionInCurrentFace() const;
 };
+#endif
 
 #endif // QGSTOPOLOGICALMESH_H


diff --git a/python/PyQt6/core/class_map.yaml b/python/PyQt6/core/class_map.yaml
index f6c819dbe921..55981a833c1f 100644
--- python/PyQt6/core/class_map.yaml
+++ python/PyQt6/core/class_map.yaml
@@ -17940,6 +17940,42 @@ QgsTolerance.toleranceInProjectUnits: src/core/qgstolerance.h#L66
 QgsTolerance.vertexSearchRadius: src/core/qgstolerance.h#L42
 QgsTolerance.vertexSearchRadius: src/core/qgstolerance.h#L49
 QgsTolerance: src/core/qgstolerance.h#L32
+QgsTopologicalMesh.Changes.clearChanges: src/core/mesh/qgstopologicalmesh.h#L174
+QgsTopologicalMesh.Changes.isEmpty: src/core/mesh/qgstopologicalmesh.h#L148
+QgsTopologicalMesh.Changes: src/core/mesh/qgstopologicalmesh.h#L101
+QgsTopologicalMesh.TopologicalFaces.clear: src/core/mesh/qgstopologicalmesh.h#L71
+QgsTopologicalMesh.TopologicalFaces.vertexToFace: src/core/mesh/qgstopologicalmesh.h#L81
+QgsTopologicalMesh.TopologicalFaces: src/core/mesh/qgstopologicalmesh.h#L60
+QgsTopologicalMesh.addFaces: src/core/mesh/qgstopologicalmesh.h#L235
+QgsTopologicalMesh.addFreeVertex: src/core/mesh/qgstopologicalmesh.h#L298
+QgsTopologicalMesh.addVertexInFace: src/core/mesh/qgstopologicalmesh.h#L286
+QgsTopologicalMesh.applyChanges: src/core/mesh/qgstopologicalmesh.h#L326
+QgsTopologicalMesh.canBeMerged: src/core/mesh/qgstopologicalmesh.h#L263
+QgsTopologicalMesh.canBeSplit: src/core/mesh/qgstopologicalmesh.h#L274
+QgsTopologicalMesh.changeXYValue: src/core/mesh/qgstopologicalmesh.h#L322
+QgsTopologicalMesh.changeZValue: src/core/mesh/qgstopologicalmesh.h#L317
+QgsTopologicalMesh.checkConsistency: src/core/mesh/qgstopologicalmesh.h#L355
+QgsTopologicalMesh.checkTopology: src/core/mesh/qgstopologicalmesh.h#L358
+QgsTopologicalMesh.counterClockwiseFaces: src/core/mesh/qgstopologicalmesh.h#L332
+QgsTopologicalMesh.createTopologicalMesh: src/core/mesh/qgstopologicalmesh.h#L187
+QgsTopologicalMesh.edgeCanBeFlipped: src/core/mesh/qgstopologicalmesh.h#L252
+QgsTopologicalMesh.facesCanBeAdded: src/core/mesh/qgstopologicalmesh.h#L229
+QgsTopologicalMesh.facesCanBeRemoved: src/core/mesh/qgstopologicalmesh.h#L241
+QgsTopologicalMesh.firstFaceLinked: src/core/mesh/qgstopologicalmesh.h#L208
+QgsTopologicalMesh.flipEdge: src/core/mesh/qgstopologicalmesh.h#L258
+QgsTopologicalMesh.insertVertexInFacesEdge: src/core/mesh/qgstopologicalmesh.h#L292
+QgsTopologicalMesh.isVertexFree: src/core/mesh/qgstopologicalmesh.h#L214
+QgsTopologicalMesh.isVertexOnBoundary: src/core/mesh/qgstopologicalmesh.h#L211
+QgsTopologicalMesh.merge: src/core/mesh/qgstopologicalmesh.h#L269
+QgsTopologicalMesh.mesh: src/core/mesh/qgstopologicalmesh.h#L205
+QgsTopologicalMesh.reindex: src/core/mesh/qgstopologicalmesh.h#L347
+QgsTopologicalMesh.removeFaces: src/core/mesh/qgstopologicalmesh.h#L247
+QgsTopologicalMesh.removeVertexFillHole: src/core/mesh/qgstopologicalmesh.h#L305
+QgsTopologicalMesh.removeVertices: src/core/mesh/qgstopologicalmesh.h#L312
+QgsTopologicalMesh.renumber: src/core/mesh/qgstopologicalmesh.h#L352
+QgsTopologicalMesh.reverseChanges: src/core/mesh/qgstopologicalmesh.h#L329
+QgsTopologicalMesh.splitFace: src/core/mesh/qgstopologicalmesh.h#L280
+QgsTopologicalMesh: src/core/mesh/qgstopologicalmesh.h#L45
 QgsTopologyPreservingSimplifier.simplify: src/core/qgsgeometrysimplifier.h#L80
 QgsTopologyPreservingSimplifier.simplify: src/core/qgsgeometrysimplifier.h#L81
 QgsTopologyPreservingSimplifier: src/core/qgsgeometrysimplifier.h#L70
diff --git a/python/core/class_map.yaml b/python/core/class_map.yaml
index 720ea9b6def8..10b70750a98f 100644
--- python/core/class_map.yaml
+++ python/core/class_map.yaml
@@ -17940,6 +17940,42 @@ QgsTolerance.toleranceInProjectUnits: src/core/qgstolerance.h#L66
 QgsTolerance.vertexSearchRadius: src/core/qgstolerance.h#L42
 QgsTolerance.vertexSearchRadius: src/core/qgstolerance.h#L49
 QgsTolerance: src/core/qgstolerance.h#L32
+QgsTopologicalMesh.Changes.clearChanges: src/core/mesh/qgstopologicalmesh.h#L174
+QgsTopologicalMesh.Changes.isEmpty: src/core/mesh/qgstopologicalmesh.h#L148
+QgsTopologicalMesh.Changes: src/core/mesh/qgstopologicalmesh.h#L101
+QgsTopologicalMesh.TopologicalFaces.clear: src/core/mesh/qgstopologicalmesh.h#L71
+QgsTopologicalMesh.TopologicalFaces.vertexToFace: src/core/mesh/qgstopologicalmesh.h#L81
+QgsTopologicalMesh.TopologicalFaces: src/core/mesh/qgstopologicalmesh.h#L60
+QgsTopologicalMesh.addFaces: src/core/mesh/qgstopologicalmesh.h#L235
+QgsTopologicalMesh.addFreeVertex: src/core/mesh/qgstopologicalmesh.h#L298
+QgsTopologicalMesh.addVertexInFace: src/core/mesh/qgstopologicalmesh.h#L286
+QgsTopologicalMesh.applyChanges: src/core/mesh/qgstopologicalmesh.h#L326
+QgsTopologicalMesh.canBeMerged: src/core/mesh/qgstopologicalmesh.h#L263
+QgsTopologicalMesh.canBeSplit: src/core/mesh/qgstopologicalmesh.h#L274
+QgsTopologicalMesh.changeXYValue: src/core/mesh/qgstopologicalmesh.h#L322
+QgsTopologicalMesh.changeZValue: src/core/mesh/qgstopologicalmesh.h#L317
+QgsTopologicalMesh.checkConsistency: src/core/mesh/qgstopologicalmesh.h#L355
+QgsTopologicalMesh.checkTopology: src/core/mesh/qgstopologicalmesh.h#L358
+QgsTopologicalMesh.counterClockwiseFaces: src/core/mesh/qgstopologicalmesh.h#L332
+QgsTopologicalMesh.createTopologicalMesh: src/core/mesh/qgstopologicalmesh.h#L187
+QgsTopologicalMesh.edgeCanBeFlipped: src/core/mesh/qgstopologicalmesh.h#L252
+QgsTopologicalMesh.facesCanBeAdded: src/core/mesh/qgstopologicalmesh.h#L229
+QgsTopologicalMesh.facesCanBeRemoved: src/core/mesh/qgstopologicalmesh.h#L241
+QgsTopologicalMesh.firstFaceLinked: src/core/mesh/qgstopologicalmesh.h#L208
+QgsTopologicalMesh.flipEdge: src/core/mesh/qgstopologicalmesh.h#L258
+QgsTopologicalMesh.insertVertexInFacesEdge: src/core/mesh/qgstopologicalmesh.h#L292
+QgsTopologicalMesh.isVertexFree: src/core/mesh/qgstopologicalmesh.h#L214
+QgsTopologicalMesh.isVertexOnBoundary: src/core/mesh/qgstopologicalmesh.h#L211
+QgsTopologicalMesh.merge: src/core/mesh/qgstopologicalmesh.h#L269
+QgsTopologicalMesh.mesh: src/core/mesh/qgstopologicalmesh.h#L205
+QgsTopologicalMesh.reindex: src/core/mesh/qgstopologicalmesh.h#L347
+QgsTopologicalMesh.removeFaces: src/core/mesh/qgstopologicalmesh.h#L247
+QgsTopologicalMesh.removeVertexFillHole: src/core/mesh/qgstopologicalmesh.h#L305
+QgsTopologicalMesh.removeVertices: src/core/mesh/qgstopologicalmesh.h#L312
+QgsTopologicalMesh.renumber: src/core/mesh/qgstopologicalmesh.h#L352
+QgsTopologicalMesh.reverseChanges: src/core/mesh/qgstopologicalmesh.h#L329
+QgsTopologicalMesh.splitFace: src/core/mesh/qgstopologicalmesh.h#L280
+QgsTopologicalMesh: src/core/mesh/qgstopologicalmesh.h#L45
 QgsTopologyPreservingSimplifier.simplify: src/core/qgsgeometrysimplifier.h#L80
 QgsTopologyPreservingSimplifier.simplify: src/core/qgsgeometrysimplifier.h#L81
 QgsTopologyPreservingSimplifier: src/core/qgsgeometrysimplifier.h#L70
