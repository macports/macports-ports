# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                                      1.0
PortGroup           cmake                       1.1
PortGroup           github                      1.0
PortGroup           active_variants             1.1
PortGroup           boost                       1.0

github.setup        pgRouting osm2pgrouting 2.3.7 v
revision            1

categories          gis
maintainers         {vince @Veence} openmaintainer
description         osm2pgrouting is an OSM data injector for PGrouting
long_description    osm2pgrouting is a command line tool to import\
                    Open Street Map (a.k.a OSM) data\
                    into a PostGreSQL/PgRouting spatial database \
                    in order to solve graph problems (shortest path, TSPâ€¦)

platforms           darwin
license             GPL-2+

homepage            https://pgrouting.org

checksums           rmd160  9f912dc56758861b104003acdce96512865868f7 \
                    sha256  69eef32ec72b382b19ef329cd3c123ad595240a5d76409d56b6e1b75e35099dd \
                    size    185895

patchfiles          patch-cmakelists_txt.diff   patch-osm2pgrouting_cpp.diff

compiler.cxx_standard 2017

depends_lib-append  port:expat\
                    port:libpqxx\
                    port:postgis3

# Database variants (from the GDAL port)
set postgresql_suffixes {12 13}

set postgresql_variants {}
foreach suffix ${postgresql_suffixes} {
    lappend postgresql_variants postgresql${suffix}
}

foreach suffix ${postgresql_suffixes} {
    set vrt     postgresql${suffix}
    set index   [lsearch -exact ${postgresql_variants} ${vrt}]
    set conf    [lreplace ${postgresql_variants} ${index} ${index}]

    variant ${vrt} description "Use ${vrt}" conflicts {*}${conf} "
        depends_lib-append      port:${vrt}
        configure.args-append   -DPOSTGRESQL_PG_CONFIG=${prefix}/lib/${vrt}/bin/pg_config
        configure.args-append   -DPOSTGRESQL_LIBRARIES=${prefix}/lib/${vrt}/libpq.dylib
    "

    if {[variant_isset ${vrt}]} {
        if {![catch {set result [active_variants postgis3 ${vrt}]}]} {
            if {!$result} {
                ui_msg "Error: postgis3 isn't installed on the required postgresql version!"
                return -code error "Variant mismatch."
            }   
        } 
    }
}

# postgresql default
set pgdefault "if {"

foreach suffix ${postgresql_suffixes} {
    set pgdefault "${pgdefault}!\[variant_isset postgresql${suffix}\] && "
}

set pgdefault [string range ${pgdefault} 0 end-4]
set pgdefault "${pgdefault}} { default_variants +postgresql${suffix} }"

eval ${pgdefault}
