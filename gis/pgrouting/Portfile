# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake   1.1
PortGroup           github  1.0
PortGroup           boost   1.0

categories          gis
maintainers         {vince @Veence}
description         Routing algorithms for PostgreSQL/PostGIS
long_description    pgRouting is a PostGreSQL/PostGIS extension\
                    that contains a variety of algorithms to solve\
                    traditional network problems such as finding\
                    shortest paths or the Traveling Sales Person (TSP).

license             LGPL-2

homepage            http://www.pgrouting.org/

github.setup        pgRouting pgrouting 3.6.1 v
revision            0

checksums           rmd160  1ebf2d1672bfcbb029d531be8fbbe7ddc8cb059f \
                    sha256  04ec1a5c4840dd2772a4cceeeb010579b36453c0a8986237f73cd7ad4f7ecce7 \
                    size    3872355

depends_lib-append  port:cgal5 \
                    port:postgis3

compiler.cxx_standard   2014
compiler.c_standard     1999
cmake.build_type        Release

variant doc description {install documentation} {
    depends_lib-append      port:sphinx
    configure.args-append   -DWITH_DOC=YES
}

# PostgreSQL variants
set pg_suffixes {12 13 14 15}
set pg_variants {}
foreach suffix ${pg_suffixes} {
    lappend pg_variants postgresql${suffix}
}
foreach suffix ${pg_suffixes} {
    set vrt     postgresql${suffix}
    set index   [lsearch -exact ${pg_variants} ${vrt}]
    set conf    [lreplace ${pg_variants} ${index} ${index}]
    variant ${vrt} description "Use ${vrt}" conflicts {*}${conf} "
        depends_lib-append      port:${vrt}
        configure.args-append   -DPOSTGRESQL_PG_CONFIG=${prefix}/lib/${vrt}/bin/pg_config \
                                -DPOSTGRESQL_EXECUTABLE=${prefix}/lib/${vrt}/bin/postgres
    "
    if {[variant_isset ${vrt}]} {
        if {![catch {set result [active_variants postgis3 ${vrt}]}]} {
            if {!$result} {
                ui_msg "Error: postgis3 isn't installed on the required postgresql version!"
                return -code error "Variant mismatch."
            }
        }
    }
}
set pgdefault "if {"
foreach suffix ${pg_suffixes} {
    set pgdefault "${pgdefault}!\[variant_isset postgresql${suffix}\] && "
}
set pgdefault [string range ${pgdefault} 0 end-4]
set pgdefault "${pgdefault}} { default_variants +postgresql${suffix} }"
eval ${pgdefault}
