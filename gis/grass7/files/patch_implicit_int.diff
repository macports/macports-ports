Addressed upstreams with https://github.com/OSGeo/grass/pull/3097.

--- raster/r.sun/local_proto.h.orig	2023-07-24 11:18:39.000000000 +0200
+++ raster/r.sun/local_proto.h	2023-07-24 13:24:40.000000000 +0200
@@ -44,7 +44,7 @@
 void setAngularLossDenominator();
 
 
-void cube(int, int);
+/* void cube(int, int); */
 
 double com_sol_const(int no_of_day);
 
--- raster/r.sun/main.c.orig	2023-07-24 11:18:39.000000000 +0200
+++ raster/r.sun/main.c	2023-07-24 13:26:13.000000000 +0200
@@ -118,8 +118,8 @@
 int min(int, int);
 int max(int, int);
 
-void cube(int, int);
-void (*func) (int, int);
+/* void cube(int, int);
+void (*func) (int, int); */
 
 void joules2(struct SunGeometryConstDay *sunGeom,
 	     struct SunGeometryVarDay *sunVarGeom,
@@ -1685,9 +1685,9 @@
  * }
  */
 
-void cube(jmin, imin)
+/* void cube(jmin, imin)
 {
-}
+} */
 
 
 /*////////////////////////////////////////////////////////////////////// */
@@ -1837,7 +1837,7 @@
 	}
 	sunVarGeom.zmax = zmax;
         shadowoffset_base = (j % (numRows)) * n * arrayNumInt;
-    #pragma omp parallel firstprivate(q1,tan_lam_l,z1,i,shadowoffset,longitTime,coslat,coslatsq,func,latitude,longitude,sin_phi_l,latid_l,sin_u,cos_u,sin_v,cos_v,lum,gridGeom,elevin,aspin,slopein,civiltime,linkein,albedo,latin,coefbh,coefdh,incidout,longin,horizon,beam_rad,insol_time,diff_rad,refl_rad,glob_rad,mapset,per,decimals,str_step)
+    #pragma omp parallel firstprivate(q1,tan_lam_l,z1,i,shadowoffset,longitTime,coslat,coslatsq,latitude,longitude,sin_phi_l,latid_l,sin_u,cos_u,sin_v,cos_v,lum,gridGeom,elevin,aspin,slopein,civiltime,linkein,albedo,latin,coefbh,coefdh,incidout,longin,horizon,beam_rad,insol_time,diff_rad,refl_rad,glob_rad,mapset,per,decimals,str_step)
     {
       #pragma omp for schedule(dynamic)                                                        \
                       firstprivate(sunGeom,sunVarGeom,sunSlopeGeom,sunRadVar)                  \
@@ -1862,7 +1862,7 @@
 		coslatsq = coslat * coslat;
 	    }
 
-	    func = NULL;
+	    /* func = NULL; */
 
 	    sunVarGeom.z_orig = z1 = sunVarGeom.zp = z[arrayOffset][i];
 
--- raster/r.sun/rsunglobals.h.orig	2023-07-24 11:18:39.000000000 +0200
+++ raster/r.sun/rsunglobals.h	2023-07-24 13:26:47.000000000 +0200
@@ -60,4 +60,4 @@
 extern struct pj_info oproj;
 
 
-extern void (*func) (int, int);
+/* extern void (*func) (int, int); */
--- raster/r.sun/rsunlib.c.orig	2023-07-24 11:18:39.000000000 +0200
+++ raster/r.sun/rsunlib.c	2023-07-24 13:27:38.000000000 +0200
@@ -300,11 +300,11 @@
 
     if (succes == 1) {
 	where_is_point(length, sunVarGeom, gridGeom);
-	if (func == NULL) {
+	/*if (func == NULL) {
 	    gridGeom->xx0 = gridGeom->xg0;
 	    gridGeom->yy0 = gridGeom->yg0;
 	    return (3);
-	}
+	}*/
 	curvature_diff = EARTHRADIUS * (1. - cos(*length / EARTHRADIUS));
 
 	z2 = sunVarGeom->z_orig + curvature_diff +
@@ -338,7 +338,7 @@
     double timeoffset, horizPos;
     double horizonHeight;
 
-    func = cube;
+    /* func = cube; */
     sunVarGeom->isShadow = 0;
 
     if (useShadow()) {
