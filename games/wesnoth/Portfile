# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               github 1.0
PortGroup               xcode 1.0

github.setup            wesnoth wesnoth 1.14.17
revision                2
checksums               rmd160  4a9e64323b0a6fe471f0cb016e6b56d3d9a68a8f \
                        sha256  3646cba604e09c12d6900a733bcb78cbf05f2f75f05346630d6529c220f584e1 \
                        size    462461190

set branch              [join [lrange [split ${version} .] 0 1] .]
categories              games
maintainers             {ryandesign @ryandesign} openmaintainer
license                 GPL-2+
homepage                https://www.wesnoth.org
master_sites            sourceforge:project/wesnoth/wesnoth-${branch}/wesnoth-${version}
use_bzip2               yes

description             a fantasy turn-based strategy game

long_description        Battle for Wesnoth is a fantasy turn-based strategy \
                        game. Battle for control of villages, using variety of \
                        units which have advantages and disadvantages in \
                        different types of terrains and against different \
                        types of attacks. Units gain experience and advance \
                        levels, and are carried over from one scenario to the \
                        next campaign.

# The build process wants to generate src/revision.h but can only do so in a
# git repository. We want to use a source tarball rather than a git repo so
# I generated src/revision.h by building in a git repo and then copying it
# to the files directory. This will need to be regenerated for each version
# update (by building once with generate_revision_h set to yes) until
# upstream includes this file in the source tarball.
set generate_revision_h no

if {!${generate_revision_h}} {
    pre-extract {
        set fp [open ${filespath}/revision.h r]
        set file_data [read ${fp}]
        close ${fp}
        if {![regexp {#define\s+VCS_TAG\s+"([^"]+)"} ${file_data} -> vcs_tag]} {
            ui_error "Cannot find VCS_TAG in files/revision.h. Regenerate it by building in a git repo."
            return -code error "invalid revision.h"
        }
        if {${vcs_tag} ne ${version}} {
            ui_error "Wrong VCS_TAG in files/revision.h. Regenerate it by building in a git repo."
            return -code error "invalid revision.h"
        }
    }
    post-extract {
        if {[file isfile ${worksrcpath}/src/revision.h]} {
            ui_error "revision.h already exists in ${worksrcpath}/src/revision.h"
            return -code error "revision.h already exists"
        }
        copy ${filespath}/revision.h ${worksrcpath}/src
    }
} else {
    fetch.type          git
    git.url-prepend     --depth 1 --branch ${git.branch}
    configure {
        system -W ${worksrcpath} "utils/autorevision.sh -t h > src/revision.h"
        ui_error "Now run:"
        ui_error "    cp ${worksrcpath}/src/revision.h ${filespath}"
        return -code error "copy revision.h to files directory"
    }
}

depends_build-append    port:scons

depends_lib-append      port:boost \
                        port:bzip2 \
                        path:lib/pkgconfig/cairo.pc:cairo \
                        port:expat \
                        port:fontconfig \
                        port:freetype \
                        port:gettext \
                        path:lib/pkgconfig/glib-2.0.pc:glib2 \
                        port:graphite2 \
                        port:harfbuzz \
                        port:libffi \
                        port:libiconv \
                        port:libogg \
                        path:lib/pkgconfig/pixman-1.pc:libpixman \
                        port:libpng \
                        port:readline \
                        port:libsdl2 \
                        port:libsdl2_image \
                        port:libsdl2_mixer \
                        port:libsdl2_net \
                        port:libsdl2_ttf \
                        port:libvorbis \
                        path:lib/pkgconfig/pango.pc:pango \
                        port:pcre \
                        port:zlib

post-extract {
    ln -s ${prefix}/include ${build.dir}/Headers
    ln -s ${prefix}/lib ${build.dir}
}

patchfiles              xcode.patch

compiler.cxx_standard   2011

pre-build {
    system -W ${worksrcpath} "${prefix}/bin/scons -j${build.jobs} translations"
}

build.dir               ${worksrcpath}/projectfiles/Xcode

xcode.configuration     Release
xcode.target            {The Battle for Wesnoth}

xcode.build.settings-append \
                        CODE_SIGN_IDENTITY="" \
                        CODE_SIGNING_REQUIRED=NO

destroot {
    copy "${build.dir}/build/${xcode.configuration}/The Battle for Wesnoth.app" \
        ${destroot}${applications_dir}
}

variant replay_old_saves description {Apply a patch to allow the replay of savefiles from previous versions of Wesnoth} {
    # from here: https://forums.wesnoth.org/viewtopic.php?f=10&t=53824&start=15
    patchfiles-append   BFW1.14.load_1.4_replay_backward_support.diff
}

github.livecheck.regex  {(\d+\.\d*[02468](\.\d+)*)}
