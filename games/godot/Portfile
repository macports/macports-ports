# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           compiler_blacklist_versions 1.0

name                godot
categories          games graphics multimedia
platforms           darwin
license             MIT
maintainers         @jasonliu--

homepage            https://godotengine.org
description         cross-platform 2-D and 3-D game development \
                    environment
long_description    Godot Engine is a cross-platform game engine for \
                    creating 2-D and 3-D games. Godot aims to offer a \
                    fully integrated game development environment. It \
                    provides a comprehensive set of common tools, and \
                    games can be exported to a number of target \
                    platforms, including major desktop platforms \
                    (Linux, macOS, Windows), as well as mobile \
                    (Android, iOS) and web-based (HTML5) platforms.

if {$subport eq ${name}} {
    github.setup    godotengine ${name} 3.3.1 "" -stable

    checksums       rmd160  7b64622072972ff7d5e2fda3bd55980d7add2049 \
                    sha256  ee3bdd6355854957041cdc293d1d58431edfb9b80d6a96c5008b937cd86104e3 \
                    size    29525709

    # Godot fails to build for Xcode Clang < 802,
    # but builds fine using MacPorts Clang
    compiler.blacklist-append {clang < 802}
}

subport ${name}-3.2 {
    github.setup    godotengine ${name} 3.2.3 "" -stable

    checksums       rmd160  4ff4f9c4798d67cf6cf4d63c38bed84d400daa8e \
                    sha256  6cd925cc4c23e2c4b0bf36458a83e03484184d8d5311b8eb2339319df7c0c26c \
                    size    22460848

    long_description-append \
                    \n\n(Note: Godot ${version} is the last version of \
                    Godot that is officially supported on macOS \
                    10.9-10.11.)
}

if {${os.platform} eq "darwin" && ${os.major} <= 11} {
    known_fail      yes
    pre-fetch {
        ui_error "${name} @${version} requires macOS 10.8 or later."
        return -code error "incompatible macOS version"
    }
}

depends_build       port:scons \
                    port:yasm

if {${os.platform} eq "darwin" && ${os.major} <= 15} {
    patchfiles      legacy-osx-defines.diff
}

post-patch {
    reinplace "/yasm_paths =/a\\
\\      \"${prefix}/bin/yasm\",\\
" \
        ${worksrcpath}/modules/webm/libvpx/SCsub
}

use_configure       no
use_xcode           yes

build.cmd           ${prefix}/bin/scons
build.env-append    BUILD_NAME=macports_build
build.target        platform=osx arch=${build_arch} target=release_debug

destroot {
    if {$subport eq "${name}-3.2"} {
        set appname "Godot 3.2"
        set cliname $subport
    } else {
        set appname "Godot"
        set cliname ${name}
    }
    copy ${worksrcpath}/misc/dist/osx_tools.app \
         ${destroot}${applications_dir}/${appname}.app
    xinstall -d ${destroot}${applications_dir}/${appname}.app/Contents/MacOS
    move ${worksrcpath}/bin/godot.osx.opt.tools.${build_arch} \
         ${destroot}${applications_dir}/${appname}.app/Contents/MacOS/Godot
    ln -s ${applications_dir}/${appname}.app/Contents/MacOS/Godot \
       ${destroot}${prefix}/bin/$cliname
}

if {$subport eq ${name}} {
    livecheck.regex releases/tag/(\\d+\\.\\d+(?:\\.\\d+)*)-stable
} else {
    livecheck.type  none
}

### The following code was adapted from the portfiles
### of ports such as openvdb and openimageio

# Get major version from version string
proc get_major {version} { return [lindex [split ${version} .] 0] }

set clang_versions {5.0 6.0 7.0 8.0 9.0 10 11}
set clang_variants {}
foreach v ${clang_versions} {
    lappend clang_variants clang[get_major ${v}]
}

# this default version should stay synchronized with
# the default macports_clang option in the SConstruct
# file that is part of the Godot source code
set sconstruct_default_mp_clang 5

# On older macOS versions, use clang variant by default
if {[string match macports-clang-* ${configure.compiler}] || \
    ${os.platform} eq "darwin" && ${os.major} <= 14} \
{
    if {[regexp {macports-clang-([0-9]+(?:\.[0-9]+)*)} \
         ${configure.compiler} result clang_version]} \
    {
        default_variants-append +clang[get_major $clang_version]
    } else {
        # Unable to determine clang_version, so use most recent clang
        default_variants-append +clang[get_major [
            lindex $clang_versions end
        ]]
    }
}

# Configure the variants
foreach clang_ver $clang_versions {
    set clang_ver_major [get_major $clang_ver]
    
    set i [lsearch -exact $clang_variants clang$clang_ver_major]
    set c [lreplace $clang_variants $i $i]
    
    variant clang$clang_ver_major conflicts {*}${c} \
        description "Build using MacPorts Clang $clang_ver" {}
    if {[variant_isset clang$clang_ver_major]} {
        set selected_clang_v    $clang_ver
        depends_build-append    port:clang-$selected_clang_v
        compiler.whitelist      macports-clang-$selected_clang_v
        build.args-append       macports_clang=$selected_clang_v
        post-configure {
            if {[get_major $selected_clang_v] != \
                $sconstruct_default_mp_clang} \
            {
                if {$subport eq "${name}-3.2"} {
                    set f ${worksrcpath}/SConstruct
                } else {
                    set f ${worksrcpath}/platform/osx/detect.py
                }
                reinplace \
                    s|$sconstruct_default_mp_clang\.0|$selected_clang_v|g \
                    $f
            }
        }
    }
}
