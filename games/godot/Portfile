# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0

github.setup        godotengine godot 3.2.2 "" -stable
revision            0

categories          games graphics multimedia
platforms           darwin
license             MIT

maintainers         @jasonliu-- openmaintainer

homepage            https://godotengine.org

description         cross-platform 2-D and 3-D game development \
                    environment
long_description    Godot Engine is a cross-platform game engine for \
                    creating 2-D and 3-D games. Godot aims to offer a \
                    fully integrated game development environment. It \
                    provides a comprehensive set of common tools, and \
                    games can be exported to a number of target \
                    platforms, including major desktop platforms \
                    (Linux, macOS, Windows), as well as mobile \
                    (Android, iOS) and web-based (HTML5) platforms.


checksums           rmd160  d99096f27ddecdb43126a785f432bccf6eaceb98 \
                    sha256  3a5b5701c001ef81a6d71989508a1e2386418c2475e110ceffc82b37d7a62f18 \
                    size    22301604

depends_build       port:scons \
                    port:yasm

post-patch {
    reinplace "/yasm_paths =/a\\
\\      \"${prefix}/bin/yasm\",\\
" \
        ${worksrcpath}/modules/webm/libvpx/SCsub
}

compiler.cxx_standard  2014

use_configure       no
use_xcode           yes

build.cmd           ${prefix}/bin/scons
build.env-append    BUILD_NAME=macports_build
build.target        platform=osx target=release_debug


destroot {
    copy ${worksrcpath}/misc/dist/osx_tools.app \
         ${destroot}${applications_dir}/Godot.app
    xinstall -d ${destroot}${applications_dir}/Godot.app/Contents/MacOS
    move ${worksrcpath}/bin/godot.osx.opt.tools.64 \
         ${destroot}${applications_dir}/Godot.app/Contents/MacOS/Godot
    ln -s ${applications_dir}/Godot.app/Contents/MacOS/Godot \
       ${destroot}${prefix}/bin/godot
}

livecheck.type      regex
livecheck.url       https://godotengine.org/download/osx
livecheck.regex     Godot <em>(\\d+\\.\\d+(?:\\.\\d+)*)</em>

### The following code was adapted from the portfiles
### of ports such as openvdb and openimageio

# Get major version from version string
proc get_major {version} { return [lindex [split ${version} .] 0] }

set clang_versions {5.0 6.0 7.0 8.0 9.0}
set clang_variants {}
foreach v ${clang_versions} { lappend clang_variants clang[get_major ${v}] }

# this default version should stay synchronized with
# the default macports_clang option in the SConstruct
# file that is part of the Godot source code
set sconstruct_default_mp_clang 5

# error: invalid value 'gnu++14' in '-std=gnu++14'
# On older OSX versions use (latest) clang variant by default
if { ${os.major} <= 13 } {
    set has_clang_variant no
    foreach v ${clang_versions} {
        if { [variant_isset clang[get_major ${v}] ] } {
            set has_clang_variant yes
        }
    }
    if { !${has_clang_variant} } {
        # Use most recent clang by default
        default_variants-append +clang[get_major [lindex ${clang_versions} end] ]
    }
}

# Configure the variants
foreach clang_ver ${clang_versions} {

    set clang_ver_major [get_major ${clang_ver}]
    
    set i [lsearch -exact ${clang_variants} clang${clang_ver_major}]
    set c [lreplace ${clang_variants} ${i} ${i}]
    
    variant clang${clang_ver_major} conflicts {*}${c} description {Build using MacPorts Clang ${clang_ver}} {}
    if { [variant_isset clang${clang_ver_major}] } {
        set selected_clang_v    ${clang_ver}
        depends_build-append    port:clang-${selected_clang_v}
        compiler.whitelist      macports-clang-${selected_clang_v}
        build.args-append       macports_clang=${selected_clang_v}
        post-configure {
            if { [get_major ${selected_clang_v}] != ${sconstruct_default_mp_clang}} {
                reinplace s|${sconstruct_default_mp_clang}\.0|${selected_clang_v}|g \
                    ${worksrcpath}/SConstruct
            }
        }
    }
}
