--- platform/osx/os_osx.mm.orig	2023-09-24 16:26:39.000000000 -0400
+++ platform/osx/os_osx.mm	2023-10-09 15:32:43.000000000 -0400
@@ -41,7 +41,6 @@
 #include "servers/visual/visual_server_raster.h"
 
 #include <mach-o/dyld.h>
-#include <os/log.h>
 #include <sys/sysctl.h>
 
 #include <Carbon/Carbon.h>
@@ -506,11 +505,7 @@
 	trackingArea = nil;
 	imeInputEventInProgress = false;
 	[self updateTrackingAreas];
-#if MAC_OS_X_VERSION_MIN_REQUIRED >= 101400
-	[self registerForDraggedTypes:[NSArray arrayWithObject:NSPasteboardTypeFileURL]];
-#else
 	[self registerForDraggedTypes:[NSArray arrayWithObject:NSFilenamesPboardType]];
-#endif
 	markedText = [[NSMutableAttributedString alloc] init];
 	return self;
 }
@@ -656,18 +651,6 @@
 	Vector<String> files;
 	NSPasteboard *pboard = [sender draggingPasteboard];
 
-#if MAC_OS_X_VERSION_MIN_REQUIRED >= 101400
-	NSArray *items = pboard.pasteboardItems;
-	for (NSPasteboardItem *item in items) {
-		NSString *path = [item stringForType:NSPasteboardTypeFileURL];
-		NSString *ns = [NSURL URLWithString:path].path;
-		char *utfs = strdup([ns UTF8String]);
-		String ret;
-		ret.parse_utf8(utfs);
-		free(utfs);
-		files.push_back(ret);
-	}
-#else
 	NSArray *filenames = [pboard propertyListForType:NSFilenamesPboardType];
 	for (NSString *ns in filenames) {
 		char *utfs = strdup([ns UTF8String]);
@@ -676,7 +659,6 @@
 		free(utfs);
 		files.push_back(ret);
 	}
-#endif
 
 	if (files.size()) {
 		OS_OSX::singleton->main_loop->drop_files(files, 0);
@@ -1855,66 +1837,8 @@
 	return "OSX";
 }
 
-#if MAC_OS_X_VERSION_MAX_ALLOWED >= 101200
-class OSXTerminalLogger : public StdLogger {
-public:
-	virtual void log_error(const char *p_function, const char *p_file, int p_line, const char *p_code, const char *p_rationale, ErrorType p_type = ERR_ERROR) {
-		if (!should_log(true)) {
-			return;
-		}
-
-		const char *err_details;
-		if (p_rationale && p_rationale[0])
-			err_details = p_rationale;
-		else
-			err_details = p_code;
-
-		switch (p_type) {
-			case ERR_WARNING:
-				if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_12) {
-					os_log_info(OS_LOG_DEFAULT,
-							"WARNING: %{public}s\nat: %{public}s (%{public}s:%i)",
-							err_details, p_function, p_file, p_line);
-				}
-				logf_error("\E[1;33mWARNING:\E[0;93m %s\n", err_details);
-				logf_error("\E[0;90m     at: %s (%s:%i)\E[0m\n", p_function, p_file, p_line);
-				break;
-			case ERR_SCRIPT:
-				if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_12) {
-					os_log_error(OS_LOG_DEFAULT,
-							"SCRIPT ERROR: %{public}s\nat: %{public}s (%{public}s:%i)",
-							err_details, p_function, p_file, p_line);
-				}
-				logf_error("\E[1;35mSCRIPT ERROR:\E[0;95m %s\n", err_details);
-				logf_error("\E[0;90m          at: %s (%s:%i)\E[0m\n", p_function, p_file, p_line);
-				break;
-			case ERR_SHADER:
-				if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_12) {
-					os_log_error(OS_LOG_DEFAULT,
-							"SHADER ERROR: %{public}s\nat: %{public}s (%{public}s:%i)",
-							err_details, p_function, p_file, p_line);
-				}
-				logf_error("\E[1;36mSHADER ERROR:\E[0;96m %s\n", err_details);
-				logf_error("\E[0;90m          at: %s (%s:%i)\E[0m\n", p_function, p_file, p_line);
-				break;
-			case ERR_ERROR:
-			default:
-				if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_12) {
-					os_log_error(OS_LOG_DEFAULT,
-							"ERROR: %{public}s\nat: %{public}s (%{public}s:%i)",
-							err_details, p_function, p_file, p_line);
-				}
-				logf_error("\E[1;31mERROR:\E[0;91m %s\n", err_details);
-				logf_error("\E[0;90m   at: %s (%s:%i)\E[0m\n", p_function, p_file, p_line);
-				break;
-		}
-	}
-};
-
-#else
 
 typedef UnixTerminalLogger OSXTerminalLogger;
-#endif
 
 void OS_OSX::alert(const String &p_alert, const String &p_title) {
 	if (is_no_window_mode_enabled()) {
