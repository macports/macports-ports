Fix build with libc++
error: reference to 'move' is ambiguous
https://github.com/logological/cheops/issues/1
--- src/ChessBoard.cpp.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/ChessBoard.cpp	2016-11-29 07:59:09.000000000 -0600
@@ -401,7 +401,7 @@
 //  - returns a list of all squares where the king may move
 // -------------------------------------------------------------------
 move_list ChessBoard::mobility_king(int from) const {
-    move m;
+    cheops_move m;
     move_list ml;
     m.promotion=Empty;
     m.from=from;
@@ -457,7 +457,7 @@
 //  - returns a list of all squares where the knight may move
 // -------------------------------------------------------------------
 move_list ChessBoard::mobility_knight(int from) const {
-    move m;
+    cheops_move m;
     move_list ml;
     m.promotion=Empty;
     m.from=from;
@@ -482,7 +482,7 @@
 //  - returns a list of all squares where the pawn may move
 // -------------------------------------------------------------------
 move_list ChessBoard::mobility_pawn(int from) const {
-    move m;
+    cheops_move m;
     move_list ml;
     m.promotion=Empty;
     m.from=from;
@@ -540,7 +540,7 @@
 //  - returns a list of all squares where the rook may move
 // -------------------------------------------------------------------
 move_list ChessBoard::mobility_rook(int from) const {
-    move m;
+    cheops_move m;
     move_list ml;
     m.promotion=Empty;
     m.from=from;
@@ -568,7 +568,7 @@
 //  - returns a list of all squares where the bishop may move
 // -------------------------------------------------------------------
 move_list ChessBoard::mobility_bishop(int from) const {
-    move m;
+    cheops_move m;
     move_list ml;
     m.promotion=Empty;
     m.from=from;
@@ -681,7 +681,7 @@
 // -------------------------------------------------------------------
 // Determine whether the given move puts one's own king in check
 // -------------------------------------------------------------------
-bool ChessBoard::causes_check(const move& m) const {
+bool ChessBoard::causes_check(const cheops_move& m) const {
     bool w_turn=is_white(square[m.from]);
     ChessBoard c=*this;
     piece_type promotion=m.promotion;
--- src/ChessBoard.h.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/ChessBoard.h	2016-11-29 07:58:37.000000000 -0600
@@ -38,10 +38,10 @@
     virtual ~ChessBoard();
     void print(ostream *os) const;
     bool can_move(int from, int to, piece_type promotion=Empty) const;
-    bool can_move(const move &m) const
+    bool can_move(const cheops_move &m) const
         {return can_move(m.from, m.to, m.promotion);}
     game_status do_move(int from, int to, piece_type promotion=Empty);
-    game_status do_move(const move& m)
+    game_status do_move(const cheops_move& m)
         {return do_move(m.from, m.to, m.promotion);}
     bool white_moves(void) const;
     static bool show_reverse;
@@ -68,7 +68,7 @@
 
     bool triple_occurrence(void) const;
     bool is_attacked(bool by_white, int to) const;
-    bool causes_check(const move& m) const;
+    bool causes_check(const cheops_move& m) const;
     bool is_in_check(bool white) const;
     bool is_black(piece_type p) const;
     bool is_white(piece_type p) const;
--- src/ComputerPlayer.cpp.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/ComputerPlayer.cpp	2016-11-29 07:58:04.000000000 -0600
@@ -141,7 +141,7 @@
 // -------------------------------------------------------------------
 string ComputerPlayer::get_command(const ChessBoard &b) const {
     if (b.in_progress) {
-        move mv;
+        cheops_move mv;
         long v=alphabeta(b, ply,-LONG_MAX,LONG_MAX,mv);
         // To offer draw:
         // if v<DRAW_THRESHOLD && haven't_offered_draw_in_a_while then
@@ -296,7 +296,7 @@
 // Alpha beta game tree search
 // -------------------------------------------------------------------
 long ComputerPlayer::alphabeta(const ChessBoard &b, long depth, long alpha,
-    long beta, move &chosen_move) const {
+    long beta, cheops_move &chosen_move) const {
     if (depth==0)
         return get_score(b);
 
@@ -305,7 +305,7 @@
         return get_score(b);
 
     long best_score=-LONG_MAX;
-    move best_move=*(moves.begin());
+    cheops_move best_move=*(moves.begin());
     for (move_list::iterator i=moves.begin();
         i!=moves.end() && best_score<beta; ++i) {
         ChessBoard c=b;
--- src/ComputerPlayer.h.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/ComputerPlayer.h	2016-11-29 07:57:47.000000000 -0600
@@ -78,7 +78,7 @@
     int manhattan(int from, int to) const;
     move_list get_all_moves(const ChessBoard &b) const;
     long get_score(const ChessBoard &b) const;
-    long alphabeta(const ChessBoard &b, long depth, long alpha, long beta, move &chosen_move) const;
+    long alphabeta(const ChessBoard &b, long depth, long alpha, long beta, cheops_move &chosen_move) const;
     bool adjacent_friendly_pawns(const ChessBoard &b, int sq) const;
     long rook_mobility(const ChessBoard &b, int from) const;
     long bishop_mobility(const ChessBoard &b, int from) const;
--- src/cheops.cpp.orig	2015-02-01 15:14:00.000000000 -0600
+++ src/cheops.cpp	2016-11-29 07:59:57.000000000 -0600
@@ -33,7 +33,7 @@
 #include <cstring>
 
 void show_menu(void);
-move *parse_move(const string& s);
+cheops_move *parse_move(const string& s);
 void who_plays(Player *&w, Player *&b);
 void show_help(void);
 void show_version(void);
@@ -44,7 +44,7 @@
     Player *w_player=NULL, *b_player=NULL, *this_player;
     string cmd, log;
     game_status status=Normal;
-    move *m = NULL;
+    cheops_move *m = NULL;
     int turn=0;
 
     // Process command-line parameters
@@ -123,14 +123,14 @@
             delete m;
             // Kingside castling
             if (cmd=="o-o") {
-                m = new move;
+                m = new cheops_move;
                 m->promotion=Empty;
                 m->from=this_player==w_player?e1:e8;
                 m->to=this_player==w_player?g1:g8;
             }
             // Queenside castling
             else if (cmd=="o-o-o") {
-                m = new move;
+                m = new cheops_move;
                 m->promotion=Empty;
                 m->from=this_player==w_player?e1:e8;
                 m->to=this_player==w_player?c1:c8;
@@ -208,9 +208,9 @@
 
 // -------------------------------------------------------------------
 // Parse move
-//  - returns pointer to a move structure on success, else NULL
+//  - returns pointer to a cheops_move structure on success, else NULL
 // -------------------------------------------------------------------
-move *parse_move(const string& s) {
+cheops_move *parse_move(const string& s) {
 
     // Is this a valid move string?
     int len=s.length();
@@ -221,7 +221,7 @@
         return NULL;
 
     // Determine promotion type
-    move *m = new move;
+    cheops_move *m = new cheops_move;
     if (len==5) {
         switch(s[4]) {
         case 'q':
--- src/move.cpp.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/move.cpp	2016-11-29 07:57:13.000000000 -0600
@@ -1,6 +1,6 @@
 // $Id: move.cpp 40 2015-02-01 20:56:15Z psy $
 //
-// move.cpp: implementation of the move struct.
+// move.cpp: implementation of the cheops_move struct.
 //
 // Copyright (C) 2003 Tristan Miller <psychonaut@nothingisreal.com>
 //  
@@ -27,14 +27,14 @@
 // -------------------------------------------------------------------
 // Print move (<< operator overload)
 // -------------------------------------------------------------------
-ostream &operator<<(ostream &os, const move &m) {
+ostream &operator<<(ostream &os, const cheops_move &m) {
     return os << (string)m;
 }
 
 // -------------------------------------------------------------------
 // Cast move to string
 // -------------------------------------------------------------------
-move::operator string() const {
+cheops_move::operator string() const {
     static char s[6]="\0\0\0\0\0";
     s[0] = (char)(ChessBoard::which_file(this->from)+'a');
     s[1] = (char)(ChessBoard::which_rank(this->from)+'1');
--- src/move.h.orig	2015-02-01 14:56:15.000000000 -0600
+++ src/move.h	2016-11-29 07:57:25.000000000 -0600
@@ -1,6 +1,6 @@
 // $Id: move.h 40 2015-02-01 20:56:15Z psy $
 //
-// move.h: interface for the move struct.
+// move.h: interface for the cheops_move struct.
 //
 // Copyright (C) 2003 Tristan Miller <psychonaut@nothingisreal.com>
 //  
@@ -26,15 +26,15 @@
 
 #include "ChessTypes.h"
 
-struct move {
+struct cheops_move {
     int from;
     int to;
     piece_type promotion;
     operator string() const;
 };
 
-typedef list<move> move_list;
+typedef list<cheops_move> move_list;
 
-ostream &operator<<(ostream &os, const move &m);
+ostream &operator<<(ostream &os, const cheops_move &m);
 
 #endif // !defined(AFX_MOVE_H__EBEFC224_5256_11D3_BC7B_0080C84DB68D__INCLUDED_)
