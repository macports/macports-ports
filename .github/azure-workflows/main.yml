trigger:
  branches:
    include:
      - "update/*"

pr:
  - "*"


resources:
  repositories:
    - repository: mpbb
      type: github
      endpoint: macports
      name: macports/mpbb

jobs:
  - job: build
    displayName: "macOS-10.14"
    timeoutInMinutes: 0
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: self
        fetchDepth: 64
        path: s/ports
      - checkout: mpbb
        path: s/mpbb
      - bash: . ports/.github/azure-workflows/bootstrap.sh
        displayName: Bootstrap MacPorts
      - bash: |
          set -eu
          # Add getopt, mpbb and the MacPorts paths to $PATH for the subsequent
          # steps.
          echo "##vso[task.prependpath]/opt/mports/bin"
          echo "##vso[task.prependpath]${PWD}/mpbb"
          echo "##vso[task.prependpath]/opt/local/bin"
          echo "##vso[task.prependpath]/opt/local/sbin"

          IFS='/' read -r -a portlist <<<$( \
            git -C ports/ diff --name-only --diff-filter=AM macports/master...@ \
              | grep -E '[^\._/][^/]*/[^/]+/(Portfile|files/)' \
              | cut -d/ -f2 \
              | sort -u \
              | tr '\n' '/')

          echo "${portlist[@]}"
          echo "##vso[task.setvariable variable=portlist;isoutput=true]${portlist[@]}"
        displayName: Determine list of changed ports
        name: portlist
      - bash: |
          set -eu

          subportlist=""
          for port in $portlist; do
            echo "##[group]Listing subports for ${port}"
            new_subports=$(mpbb \
                --work-dir /tmp/mpbb \
                list-subports \
                --archive-site= \
                --archive-site-private= \
                --include-deps=no \
                "$port" \
              | tr '\n' ' ')
            for subport in $new_subports; do
              echo "$subport"
              subportlist="$subportlist $subport"
            done
            echo "##[endgroup]"
          done

          echo "##vso[task.setvariable variable=subportlist;isoutput=true]${subportlist}"
        env:
          portlist: $(portlist.portlist)
        displayName: Determine list of subports from portlist
        name: subportlist
      - bash: |
          set -eu

          fail=0
          for subport in $subportlist; do
            echo "##[group]${subport}"
            path=$(port file "$subport")
            messagetype="warning"
            if ! messages=$(port -q lint --nitpick "$subport" 2>&1); then
              messagetype="error"
              fail=1
            fi
            if [ -n "$messages" ]; then
              echo "$messages"
              # See https://github.com/actions/toolkit/issues/193#issuecomment-605394935
              encoded_messages="port lint --nitpick ${subport}:%0A"
              encoded_messages+="$(echo "${messages}" | sed -E 's/$/%0A/g' | tr -d '\n')"
              echo "##vso[task.logissue type=${messagetype};sourcepath=${path#${PWD}/ports/};linenumber=1;columnnumber=1]${encoded_messages}"
            fi
            echo "##[endgroup]"
          done

          exit "$fail"
        env:
          subportlist: $(subportlist.subportlist)
        displayName: Run port lint for all changed subports
      - bash: |
          set -eu

          fail=0
          for subport in $subportlist; do
            workdir="/tmp/mpbb/$subport"
            mkdir -p "$workdir/logs"
            touch "$workdir/logs/dependencies-progress.txt"

            echo "##[group]Cleaning up between ports"
            sudo mpbb --work-dir "$workdir" cleanup
            echo "##[endgroup]"

            echo "##[group]Installing dependencies for ${subport}"
            sudo mpbb \
              --work-dir "$workdir" \
              install-dependencies \
              "$subport" >"$workdir/logs/install-dependencies.log" 2>&1 &
            deps_pid=$!

            tail -f "$workdir/logs/dependencies-progress.txt" 2>/dev/null &
            tail_pid=$!

            set +e
            wait "$deps_pid"
            deps_exit=$?
            set -e

            kill "$tail_pid" || true

            if [ "$deps_exit" -ne 0 ]; then
              echo "##[endgroup]"
              echo "##[error]Failed to install dependencies for ${subport}"
              continue
            fi
            echo "##[endgroup]"

            echo "##[group]Installing ${subport}"

            set +e
            sudo mpbb \
              --work-dir "$workdir" \
              install-port \
              --source \
              "$subport"
            install_exit=$?
            set -e

            if [ "$install_exit" -ne 0 ]; then
              echo "##[endgroup]"
              echo "##[error]Failed to install ${subport}"
              fail=1
              continue
            fi
            echo "##[endgroup]"
          done

          exit "$fail"
        displayName: Build changed subports
        env:
          subportlist: $(subportlist.subportlist)
      - bash: |
          sudo find \
            /tmp/mpbb \
            -maxdepth 1 \
            -mindepth 1 \
            -type d \
            -print \
            -exec chmod -R go+rX {} \;
        condition: always()
        displayName: Make logfiles readable
      - bash: |
          cd /tmp/mpbb
          zip \
            logs.zip \
            */logs/*
        condition: always()
        displayName: Archive build logs
      - publish: /tmp/mpbb/logs.zip
        artifact: logs.zip
        condition: always()
        displayName: Publish build logs archive
