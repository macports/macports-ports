--- src/rfuns.cpp
+++ src/rfuns.cpp	2024-05-03 22:24:42.000000000 +0800
@@ -4,6 +4,7 @@
 
 #include <math.h>
 #include <climits>
+#include <cmath>
 
 namespace duckdb {
 namespace rfuns {
@@ -29,7 +30,7 @@
 
 	BinaryExecutor::ExecuteWithNulls<double, double, double>(
 	    parts.lefts, parts.rights, result, args.size(), [&](double left, double right, ValidityMask &mask, idx_t idx) {
-		    if (isnan(left) || isnan(right)) {
+		    if (std::isnan(left) || std::isnan(right)) {
 			    mask.SetInvalid(idx);
 			    return 0.0;
 		    }
@@ -38,7 +39,7 @@
 }
 
 double ExecuteBaseRPlusFunctionIntDouble(int32_t left, double right, ValidityMask &mask, idx_t idx) {
-	if (isnan(right)) {
+	if (std::isnan(right)) {
 		mask.SetInvalid(idx);
 		return 0.0;
 	}
@@ -108,7 +109,7 @@
 
 template <>
 int32_t cast<double>(double input, ValidityMask &mask, idx_t idx) {
-	if (isnan(input)) {
+	if (std::isnan(input)) {
 		mask.SetInvalid(idx);
 	}
 	return check_range(input, mask, idx);
@@ -228,7 +229,7 @@
 		if (ValidityMask::AllValid(validity_entry)) {
 			// all valid: check with isnan()
 			for (; base_idx < next; base_idx++) {
-				result_data[base_idx] = isnan(data[base_idx]);
+				result_data[base_idx] = std::isnan(data[base_idx]);
 			}
 		} else if (ValidityMask::NoneValid(validity_entry)) {
 			// None valid:
@@ -241,7 +242,7 @@
 			for (; base_idx < next; base_idx++) {
 				if (ValidityMask::RowIsValid(validity_entry, base_idx - start)) {
 					D_ASSERT(mask.RowIsValid(base_idx));
-					result_data[base_idx] = isnan(data[base_idx]);
+					result_data[base_idx] = std::isnan(data[base_idx]);
 				} else {
 					result_data[base_idx] = true;
 				}
@@ -627,7 +628,7 @@
 
 template <>
 bool set_null<double>(double value, ValidityMask &mask, idx_t idx) {
-	if (isnan(value)) {
+	if (std::isnan(value)) {
 		mask.SetInvalid(idx);
 		return true;
 	}
