# https://github.com/sjewo/readstata13/commit/e1142421200e342173dd852194a26eedec627796

--- src/RcppExports.cpp.orig	2021-05-25 18:50:49.000000000 +0800
+++ src/RcppExports.cpp	2023-02-22 06:20:26.000000000 +0800
@@ -5,6 +5,11 @@
 
 using namespace Rcpp;
 
+#ifdef RCPP_USE_GLOBAL_ROSTREAM
+Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
+Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
+#endif
+
 // stata_read
 List stata_read(const char * filePath, const bool missing, const IntegerVector selectrows, const CharacterVector selectcols, const bool strlexport, const CharacterVector strlpath);
 RcppExport SEXP _readstata13_stata_read(SEXP filePathSEXP, SEXP missingSEXP, SEXP selectrowsSEXP, SEXP selectcolsSEXP, SEXP strlexportSEXP, SEXP strlpathSEXP) {

--- src/read_data.cpp.orig	2021-05-25 18:50:49.000000000 +0800
+++ src/read_data.cpp	2023-02-22 06:20:54.000000000 +0800
@@ -207,7 +207,7 @@
 
         // FixMe: works if we read a big-endian file on little-endian
         if (byteorder.compare("MSF")==0) {
-          v = (z >> 48) & ((1 << 24) - 1);
+          v = (z >> 40) & ((1 << 24) - 1);
           o = z & ((1 << 24) - 1);
         }
 
--- src/save_dta.cpp.orig	2021-05-25 18:50:49.000000000 +0800
+++ src/save_dta.cpp	2023-02-22 06:23:10.000000000 +0800
@@ -20,6 +20,16 @@
 using namespace Rcpp;
 using namespace std;
 
+// // create big endian file from little endian
+// #ifdef swapit
+// #undef swapit
+// #undef sbyteorder
+// #undef SBYTEORDER
+// #define swapit TRUE
+// #define sbyteorder "MSF"
+// #define SBYTEORDER 1
+// #endif
+
 // Writes the binary Stata file
 //
 // @param filePath The full systempath to the dta file you want to export.
@@ -483,13 +493,13 @@
             char    z[8];
 
             // push back every v, o and val_strl
-            V.push_back(v);
+            V.push_back(v); if (swapit) v = swap_endian(v);
             O.push_back(o);
 
             // z is 'vv-- ----'
             memcpy(&z[0], &v, sizeof(v));
             if (SBYTEORDER == 1) {
-              o <<= 16;
+              o <<= 16; if (swapit) o = swap_endian(o);
             }
             memcpy(&z[2], &o, 6);
             // z is 'vvoo oooo'
@@ -509,10 +519,13 @@
             V.push_back(v);
             O.push_back(o);
 
-            // z is 'vv-- ----'
-            memcpy(&z[0], &v, sizeof(v));
+            // z is 'vvv- ----'
+            if (SBYTEORDER == 1) {
+              v <<= 8; if (swapit) v = swap_endian(v);
+            }
+            memcpy(&z[0], &v, 3);
             if (SBYTEORDER == 1) {
-              o <<= 24;
+              o <<= 24; if (swapit) o = swap_endian(o);
             }
             memcpy(&z[3], &o, 5);
             // z is 'vvvo oooo'
