--- configure	2023-11-15 11:37:45.000000000 +0800
+++ configure	2023-11-18 15:48:57.000000000 +0800
@@ -64,13 +64,13 @@
 
 # Some env vars that control the build (all logical, case insensitive)
 # Development mode, also increases verbosity in the bundled build
-ARROW_R_DEV=`echo $ARROW_R_DEV | tr '[:upper:]' '[:lower:]'`
+ARROW_R_DEV="true"
 # The bundled build compiles arrow C++ from source; FORCE ensures we don't pick up
 # any other packages that may be found on the system
-FORCE_BUNDLED_BUILD=`echo $FORCE_BUNDLED_BUILD | tr '[:upper:]' '[:lower:]'`
+FORCE_BUNDLED_BUILD="false"
 # If present, `pkg-config` will be used to find libarrow on the system,
 # unless this is set to false
-ARROW_USE_PKG_CONFIG=`echo $ARROW_USE_PKG_CONFIG | tr '[:upper:]' '[:lower:]'`
+ARROW_USE_PKG_CONFIG="true"
 # Just used in testing: whether or not it is ok to download dependencies (in the
 # bundled build)
 TEST_OFFLINE_BUILD=`echo $TEST_OFFLINE_BUILD | tr '[:upper:]' '[:lower:]'`
@@ -130,10 +130,6 @@
 # generally not linked. We can over-ride this and find
 # openssl by setting OPENSSL_ROOT_DIR (which cmake will pick up later in
 # the installation process).
-if [ "${OPENSSL_ROOT_DIR}" = "" ] && brew --prefix openssl >/dev/null 2>&1; then
-  export OPENSSL_ROOT_DIR="`brew --prefix openssl`"
-  export PKG_CONFIG_PATH="${OPENSSL_ROOT_DIR}/lib/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}"
-fi
 # Look for openssl with pkg-config for non-brew sources(e.g. CRAN) and Linux
 if [ "${OPENSSL_ROOT_DIR}" = "" ] && [ "${PKG_CONFIG_AVAILABLE}" = "true" ]; then
   if ${PKG_CONFIG} --exists openssl; then
@@ -190,7 +186,7 @@
     # Error means the versions don't line up and we shouldn't use it.
     # More specific messaging to the user is in the R script
     if ! ${R_HOME}/bin/Rscript tools/check-versions.R $VERSION $PC_LIB_VERSION 2> /dev/null; then
-      _LIBARROW_FOUND="false"
+      echo "*** Warning: versions of apache-arrow and R-arrow do not match."
     fi
   fi
 
