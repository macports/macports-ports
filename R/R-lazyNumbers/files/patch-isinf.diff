--- src/lazyNumbers.cpp.orig	2022-11-19 15:43:41.000000000 +0700
+++ src/lazyNumbers.cpp	2023-03-25 00:41:50.000000000 +0700
@@ -238,10 +238,10 @@
 bool isLazyNaN_or_Inf(lazyNumber x) {
   std::pair<double, double> interval1 = CGAL::to_interval(x);
   bool out = false;
-  if(isinf(interval1.first) && isinf(interval1.second)) {
+  if(std::isinf(interval1.first) && std::isinf(interval1.second)) {
     // lazyNumber invx = lazyNumber(1) / x;
     // std::pair<double, double> interval2 = CGAL::to_interval(invx);
-    // if(isinf(interval2.first) && isinf(interval2.second)) {
+    // if(std::isinf(interval2.first) && std::isinf(interval2.second)) {
       out = true;
     // }
   }
@@ -333,7 +333,7 @@
   const size_t n = nv.size();
   lazyVector lv(n);
   for(size_t i = 0; i < n; i++) {
-    if(isinf(nv(i))) { 
+    if(std::isinf(nv(i))) { 
       if(nv(i) > 0) {
         lazyNumber x(Quotient(1) / Quotient(0));
         lv[i] = lazyScalar(x);
@@ -361,7 +361,7 @@
   for(size_t j = 0; j < ncol; j++) {
     Rcpp::NumericVector colj = nm(Rcpp::_, j);
     for(size_t i = 0; i < nrow; i++) {
-      if(isinf(colj(i))) {
+      if(std::isinf(colj(i))) {
         if(colj(i) > 0) {
           lazyNumber x(Quotient(1) / Quotient(0));
           lm(i, j) = lazyScalar(x);
