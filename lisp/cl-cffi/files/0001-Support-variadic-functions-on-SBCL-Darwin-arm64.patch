From 8b35635b302f72c0b339bdc42cb0c54c4c59eacb Mon Sep 17 00:00:00 2001
From: Stas Boukarev <stassats@gmail.com>
Date: Tue, 1 Feb 2022 01:18:35 +0300
Subject: [PATCH] Support variadic functions on SBCL-Darwin-arm64.

Where variadic arguments are not just passed normally.

Closes #297
---
 src/cffi-sbcl.lisp | 47 ++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 41 insertions(+), 6 deletions(-)

diff --git src/cffi-sbcl.lisp src/cffi-sbcl.lisp
index 906738a..ef939ad 100644
--- src/cffi-sbcl.lisp
+++ src/cffi-sbcl.lisp
@@ -46,6 +46,8 @@
    #:with-foreign-pointer
    #:%foreign-funcall
    #:%foreign-funcall-pointer
+   #:%foreign-funcall-varargs
+   #:%foreign-funcall-pointer-varargs
    #:%foreign-type-alignment
    #:%foreign-type-size
    #:%load-foreign-library
@@ -286,12 +288,21 @@ WITH-POINTER-TO-VECTOR-DATA."
 
 (defun foreign-funcall-type-and-args (args)
   "Return an SB-ALIEN function type for ARGS."
-  (let ((return-type 'void))
-    (loop for (type arg) on args by #'cddr
-          if arg collect (convert-foreign-type type) into types
-          and collect arg into fargs
-          else do (setf return-type (convert-foreign-type type))
-          finally (return (values types fargs return-type)))))
+  (let ((return-type 'void)
+        types
+        fargs)
+    (loop while args
+          do (let ((type (pop args)))
+               (cond ((eq type '&optional)
+                      (push type types))
+                     ((not args)
+                      (setf return-type (convert-foreign-type type)))
+                     (t
+                      (push (convert-foreign-type type) types)
+                      (push (pop args) fargs)))))
+    (values (nreverse types)
+            (nreverse fargs)
+            return-type)))
 
 (defmacro %%foreign-funcall (name types fargs rettype)
   "Internal guts of %FOREIGN-FUNCALL."
@@ -315,6 +326,30 @@ WITH-POINTER-TO-VECTOR-DATA."
       `(with-alien ((,function (* (function ,rettype ,@types)) ,ptr))
          (alien-funcall ,function ,@fargs)))))
 
+(defmacro %foreign-funcall-varargs (name fixed-args varargs
+                                    &rest args &key convention library)
+  (declare (ignore convention library))
+  `(%foreign-funcall ,name ,(append fixed-args (and varargs
+                                                    ;; All SBCL platforms would understand this
+                                                    ;; but this is the only one where it's required.
+                                                    ;; Omitting elsewhere makes it work on older
+                                                    ;; versions of SBCL.
+                                                    (append #+(and darwin arm64)
+                                                            '(&optional)
+                                                            varargs)))
+                     ,@args))
+
+(defmacro %foreign-funcall-pointer-varargs (pointer fixed-args varargs
+                                            &rest args &key convention)
+  (declare (ignore convention))
+  `(%foreign-funcall-pointer ,pointer ,(append fixed-args
+                                               (and varargs
+                                                    (append #+(and darwin arm64)
+                                                            '(&optional)
+                                                            varargs)))
+                             ,@args))
+
+
 ;;;# Callbacks
 
 ;;; The *CALLBACKS* hash table contains a direct mapping of CFFI
-- 
2.40.1

