This patch comprises two upstream patches

https://github.com/GNOME/gtk/commit/828f634 and
https://github.com/GNOME/gtk/commit/bb376222c104aef0ec7e31b40959bc35eecf2253

for the gtk3 3.22.30 release to solve the font rendering
problem for the quartz backend of gtk on HiDPI screens
like the MacBookPro Retina. The 828f634 patch is already
in 3.24.1 and the bb3762 patch will be in 3.24.2. See

https://bugzilla.gnome.org/show_bug.cgi?id=787867

for a detailed discussion.
---
 gdk/quartz/gdkscreen-quartz.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/gdk/quartz/gdkscreen-quartz.c b/gdk/quartz/gdkscreen-quartz.c
index 586f7af02a6..219338832ee 100644
--- gdk/quartz/gdkscreen-quartz.c
+++ gdk/quartz/gdkscreen-quartz.c
@@ -67,7 +67,7 @@ static void  gdk_quartz_screen_calculate_layout (GdkQuartzScreen *screen);
 static void display_reconfiguration_callback (CGDirectDisplayID            display,
                                               CGDisplayChangeSummaryFlags  flags,
                                               void                        *userInfo);
-
+static const double dpi = 72.0;
 static gint get_mm_from_pixels (NSScreen *screen, int pixels);
 
 G_DEFINE_TYPE (GdkQuartzScreen, gdk_quartz_screen, GDK_TYPE_SCREEN);
@@ -76,10 +76,17 @@ static void
 gdk_quartz_screen_init (GdkQuartzScreen *quartz_screen)
 {
   GdkScreen *screen = GDK_SCREEN (quartz_screen);
-  NSDictionary *dd = [[[NSScreen screens] objectAtIndex:0] deviceDescription];
-  NSSize size = [[dd valueForKey:NSDeviceResolution] sizeValue];
+  /* Screen resolution is used exclusively to pass to Pango for font
+   * scaling. There's a long discussion in
+   * https://bugzilla.gnome.org/show_bug.cgi?id=787867 exploring how
+   * screen resolution and pangocairo-coretext interact. The summary
+   * is that MacOS takes care of scaling fonts for Retina screens and
+   * that while the Apple Documentation goes on about "points" they're
+   * CSS points (96/in), not typeography points (72/in) and
+   * pangocairo-coretext needs to default to that scaling factor.
+   */
 
-  _gdk_screen_set_resolution (screen, size.width);
+  _gdk_screen_set_resolution (screen, dpi);
 
   gdk_quartz_screen_calculate_layout (quartz_screen);
 
@@ -335,9 +342,6 @@ static gint
 get_mm_from_pixels (NSScreen *screen, int pixels)
 {
   const float mm_per_inch = 25.4;
-  NSDictionary *dd = [[[NSScreen screens] objectAtIndex:0] deviceDescription];
-  NSSize size = [[dd valueForKey:NSDeviceResolution] sizeValue];
-  float dpi = size.width;
   return (pixels / dpi) * mm_per_inch;
 }
 
