# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0
PortGroup           github 1.0
PortGroup           active_variants 1.1
PortGroup           app 1.0

github.setup        virt-manager virt-manager 3.2.0 v
revision            3
categories          gnome emulators
supported_archs     noarch
maintainers         nomaintainer
license             GPL-2+

homepage            https://virt-manager.org
master_sites        http://releases.pagure.org/virt-manager/

description         Virtual Machine Manager

long_description \
    virt-manager is a graphical tool for managing virtual machines via \
    libvirt. Most usage is with QEMU/KVM virtual machines, but Xen and \
    libvirt LXC containers are well supported. Common operations for \
    any libvirt driver should work. \
    \n\nExpect limited functionality as macOS is not the usual \
    platform for this application\; its primary use on macOS is for \
    remote administration of Linux boxes.

checksums           rmd160  7a7900c1c8521938408653f4a609716c1a561d64 \
                    sha256  2b6fe3d90d89e1130227e4b05c51e6642d89c839d3ea063e0e29475fd9bf7b86 \
                    size    2858909

platforms           darwin

patchfiles-append   patch-no-kvm-warning.diff
patchfiles-append   patch-not-in-usr.diff
patchfiles-append   patch-setup.py-rst2man.diff

python.default_version  39

# Note: 'gettext' only needed at build time. No need for a runtime dep on
# 'gettext-runtime', as this port utilizes Python's built-in 'gettext' support.
depends_build \
    port:gettext \
    port:intltool \
    path:lib/pkgconfig/gtk+-2.0.pc:gtk2 \
    port:python${python.version} \
    port:py${python.version}-docutils \
    path:lib/pkgconfig/glib-2.0.pc:glib2

depends_run \
    port:py${python.version}-gobject3 \
    port:py${python.version}-libvirt \
    port:py${python.version}-libxml2 \
    port:py${python.version}-requests \
    port:libvirt-glib \
    port:vte \
    port:gtk-vnc \
    path:lib/pkgconfig/gtk+-3.0.pc:gtk3 \
    port:gtksourceview4 \
    port:spice-gtk \
    port:libosinfo

app.name            Virtual Machine Manager
app.executable      ${workpath}/virt-manager.sh
app.icon            data/icons/256x256/apps/virt-manager.png
app.use_launch_script  yes

use_configure       yes
configure.cmd       ${build.cmd} configure
configure.args      --prefix ${python.prefix}

set virtmgr_python_replace \
    [list virt-clone virt-install virt-manager virt-xml]

post-patch {
    foreach f ${virtmgr_python_replace} {
        reinplace "s|/usr/bin/env python3|${python.bin}|" \
            ${worksrcpath}/${f}
    }
    unset f

    reinplace "s|@PREFIX@|${prefix}|g" \
        ${worksrcpath}/virtManager/createconn.py
}

pre-configure {
    copy ${filespath}/virt-manager.sh ${workpath}
    reinplace "s|@PREFIX@|${prefix}|g" \
        ${workpath}/virt-manager.sh
}

set virtmgr_deps_validate \
    [list cairo glib2 gtk3 librsvg pango py${python.version}-cairo spice-gtk gtksourceview4]

variant quartz conflicts x11 {
    # Note: Based on testing, this strictness isn't needed. But keep just-in-case

    #foreach dep ${virtmgr_deps_validate} {
    #    require_active_variants $dep quartz x11
    #}
    #unset dep
}

variant x11 conflicts quartz {
    # Note: Based on testing, this strictness isn't needed. But keep just-in-case

    #foreach dep ${virtmgr_deps_validate} {
    #    require_active_variants $dep x11 quartz
    #}
    #unset dep
}

if {![variant_isset quartz] && ![variant_isset x11]} {
    if {![catch {set result [active_variants gtk3 quartz x11]}]} {
        if {$result} {
            default_variants +quartz
        } else {
            default_variants +x11
        }
    } elseif {![variant_isset quartz]} {
        default_variants +x11
    }
}

# stubs for checking dependencies in trace mode
#test.run             yes
#test.cmd             ${python.bin} virt-manager
#test.args
