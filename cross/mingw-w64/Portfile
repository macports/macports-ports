# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0

github.setup        mirror mingw-w64 5.0.0 v
set mingw_name      w64-mingw32

platforms           darwin
license             ZPL-2.1
maintainers         mojca openmaintainer

description         GCC cross-compiler for Windows 64 & 32 bits
long_description    Mingw-w64 is an advancement of the original mingw.org project, \
                    created to support the GCC compiler on Windows systems.

homepage            http://mingw-w64.sourceforge.net/

checksums           rmd160  31f236afc1ea8013e1c0d0d0727daab35f1bccb8 \
                    sha256  e83ddf0466ff584d36ebd3feffa87c1c332002bcb07e39ef796bb820465a1b28

# needs an out-of-source build
configure.dir       ${workpath}/build
build.dir           ${configure.dir}
post-extract {      file mkdir "${build.dir}" }

# create four subports:
# - i686-w64-mingw32-headers
# - i686-w64-mingw32-crt
# - x86_64-w64-mingw32-headers
# - x86_64-w64-mingw32-crt
foreach arch {i686 x86_64} {
    foreach component {crt headers} {
        subport ${arch}-${mingw_name}-${component} {
            set mingw_arch  ${arch}
            set mingw_dir   ${component}
        }
    }
}

if {${subport} ne ${name}} {
    set mingw_target            ${mingw_arch}-${mingw_name}

    configure.cmd               ${worksrcpath}/mingw-w64-${mingw_dir}/configure
    configure.pre_args-replace  --prefix=${prefix} --prefix=${prefix}/${mingw_target}
    configure.args-append       --host=${mingw_target}

    # *-headers subports
    if {${mingw_dir} eq "headers"} {
        supported_archs         noarch
    }

    # *-crt subports
    if {${mingw_dir} eq "crt"} {
        # We only need a dependency on either of the two GCC compilers:
        #   - ${mingw_target}-gcc-bootstrap
        #   - ${mingw_target}-gcc
        # to build. The rest of dependencies (*-headers, *-binutils)
        # are pulled in by either of those two ports.
        #
        # Runtime dependency on GCC is not added to avoid dependency cycles,
        # but in fact it's GCC that needs CRT at runtime, not the other way around.
        depends_build-append    bin:${mingw_target}-gcc:${mingw_target}-gcc-bootstrap
        #depends_run-append     bin:${mingw_target}-gcc:${mingw_target}-gcc-bootstrap
        #depends_lib-append     port:${mingw_target}-binutils
        #depends_lib-append     port:${mingw_target}-headers
        configure.cppflags      "-I${prefix}/${mingw_target}/include"

        # ----- copied from crossgcc (not sure if needed) ----
        # the generated compiler doesn't accept -arch
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.ld_archflags

        # the bootstrap compiler doesn't accept -stdlib
        configure.cxx_stdlib

        # We don't need system includes(this prevents xgcc to include system-wide
        # unwind.h if it is present)!
        compiler.cpath
        # -----

        # is there a more elegant way?
        configure.cc  ${prefix}/bin/${mingw_target}-gcc
        configure.cxx ${prefix}/bin/${mingw_target}-g++
        configure.cpp ${prefix}/bin/${mingw_target}-cpp
        # configure.env-append PATH=...

        # TODO: Is this also noarch? It uses object files, but probably only for windows.
    }

    destroot.violate_mtree  yes
    livecheck.type          none
} else {
    description             "GCC cross-compiler for Windows 64 & 32 bits (meta port)"

    depends_run             port:i686-${mingw_name}-gcc \
                            port:x86_64-${mingw_name}-gcc
    distfiles
    use_configure           no
    build                   {}
    destroot {
        xinstall -d -m 755 "${destroot}${prefix}/share/doc/${name}"
        system "echo $name is a stub port > ${destroot}${prefix}/share/doc/${name}/README"
    }
    supported_archs         noarch
}
