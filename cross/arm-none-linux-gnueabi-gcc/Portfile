PortSystem			1.0

name            	arm-none-linux-gnueabi-gcc
version         	2005q3-2

# Parameters for this port.
set gccversion		2005q3
set scratchboxversion	1.0.5
set crossgcc-target arm-none-linux-gnueabi
set default-languages --enable-languages="c,c++,objc"

description     	gcc 3.x cross-compilers for arm-none-linux-gnueabi.
long_description	gnu compilers collection version 3.x (including c++ and objc) for \
					arm-none-linux-gnueabi, Nokia Internet Tablet version from Code Sourcery
homepage			http://www.codesourcery.com/gnu_toolchains/arm
platforms       	darwin
categories      	cross devel
license         	GPL-2+
maintainers     	nomaintainer
master_sites		macports:pguyot
distfiles			gcc-${version}.tar.bz2
worksrcdir			gcc-${gccversion}
checksums			gcc-${version}.tar.bz2 \
						md5 8fb231e1d8573b9e14e4d518a1c781a2 \
						sha1 99334733b0e0b2befd7f5eb9c6fac407a71f563e \
						rmd160 8d08aa976a84e9058ae95616c25e2c5a00ac9b4c

# All cross ports violate the mtree layout.
destroot.violate_mtree	yes

# Download everything to gcc/
dist_subdir			gcc

depends_lib			port:${crossgcc-target}-binutils \
					port:${crossgcc-target}-runtime
depends_build		bin:msgfmt:gettext

use_bzip2			yes

# Since we don't build gcc and binutils at the same time, gcc's Makefile will try to transform
# program names as gcc's name (add -${version} with ${version} being the version of gcc).
# But it won't work because binutils binaries don't have the ${version} suffix, and even if they
# had, they would actually have the binutils' version suffix (and not gcc's version).
# So let's tell gcc's Makefile not to do that mistake.

set environment [list AR_FOR_TARGET=${crossgcc-target}-ar \
				AS_FOR_TARGET=${crossgcc-target}-as \
				LD_FOR_TARGET=${crossgcc-target}-ld \
				NM_FOR_TARGET=${crossgcc-target}-nm \
				RANLIB_FOR_TARGET=${crossgcc-target}-ranlib]

# fix bad yacc code, ticket #28296
patchfiles      patch-c-parse.in.diff

# Build in a different directory, as advised in the README file.
pre-configure   {
	file mkdir "${workpath}/build"
}
configure.dir   ${workpath}/build
configure.cmd   ${worksrcpath}/configure
configure.env	${environment}
configure.args  --infodir='${prefix}/share/info' \
				--mandir='${prefix}/share/man' \
				--target=${crossgcc-target} \
				--program-prefix=${crossgcc-target}- \
				--program-suffix=-${gccversion} \
				--with-included-gettext \
				--with-headers=${prefix}/${crossgcc-target}/usr/include \
				--with-libs=${prefix}/${crossgcc-target}/usr/lib \
				--enable-shared \
				--enable-threads \
				--disable-checking \
				--enable-symvers=gnu \
				--enable-__cxa_atexit \
				--disable-libssp \
				--disable-libstdcxx-pch \
				--with-cpu= \
				--enable-interwork \
				--with-gxx-include-dir=${prefix}/${crossgcc-target}/include/c++/${version}/ \
				${default-languages}
configure.cc_archflags
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
if {${os.platform} eq "darwin" && (${build_arch} eq "x86_64" || ${build_arch} eq "ppc64")} {
    configure.args-append --build=${build_arch}-apple-darwin${os.version} \
                          --host=${build_arch}-apple-darwin${os.version}
}

configure.asroot yes
build.asroot     yes

build.dir       ${workpath}/build

build.args		${environment}
destroot.args	${environment}

# Variant to include java tools.
# I'm not exactly sure what the interest of this variant is except to measure
# the speed of your Xserve G5 farm. Or your patience if you don't have such
# a farm.
variant java {
	configure.args-delete ${default-languages}
}

post-patch {
	namespace eval crossgcc {}

	# Fix the info pages and related stuff.
	#
	# path: path to the doc directory (e.g. gas/doc/)
	# makefile: path to Makefile.in (e.g. gas/doc/Makefile.in)
	# name: name of the info page (e.g. as)
	# suffix: suffix of the souce page (texinfo or texi)
	proc crossgcc::fixinfo { path makefile name suffix } {
		global crossgcc-target worksrcpath

		# Fix the source
		if { [ file exists ${worksrcpath}/${path}/${name}.${suffix} ] } {
			reinplace "s|setfilename ${name}.info|setfilename ${crossgcc-target}-${name}.info|g" \
				${worksrcpath}/${path}/${name}.${suffix}
			reinplace "s|(${name})|(${crossgcc-target}-${name})|g" \
				${worksrcpath}/${path}/${name}.${suffix}
			reinplace "s|@file{${name}}|@file{${crossgcc-target}-${name}}|g" \
				${worksrcpath}/${path}/${name}.${suffix}
               		# Rename the source
                	file rename ${worksrcpath}/${path}/${name}.${suffix} \
                        	${worksrcpath}/${path}/${crossgcc-target}-${name}.${suffix}
		}
		
		# Fix the Makefile
		reinplace "s| ${name}.info| ${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.info|/${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
                reinplace "s|/${name}.1|/${crossgcc-target}-${name}.1|g" \
                        ${worksrcpath}/${makefile}
		reinplace "s|^${name}.info|${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s| ${name}.pod| ${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.pod|/${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s|^${name}.pod|${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s| ${name}.${suffix}| ${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.${suffix}|/${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		reinplace "s|^${name}.${suffix}|${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		
		# Fix install-info's dir.
		# (note: this may be effectless if there was no info dir to be fixed)
		reinplace "s|--info-dir=\$(DESTDIR)\$(infodir)|--dir-file=\$(DESTDIR)\$(infodir)/${crossgcc-target}-gcc-dir|g" \
			"${worksrcpath}/${makefile}"
	}

	# Fix the gettext files and related stuff.
	#
	# module: name of the module (e.g. gas)
	proc crossgcc::fixgettext { module } {
		global crossgcc-target worksrcpath

		if { [ file exists "${worksrcpath}/${module}/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/doc/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/doc/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/po/Make-in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/po/Make-in"
		}
	}

	# gcc/doc/cpp.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cpp texi

	# gcc/doc/cppinternals.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cppinternals texi

	# gcc/doc/gcc.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gcc texi
        crossgcc::fixinfo gcc/cp/ gcc/cp/Make-lang.in gcc texi
        crossgcc::fixinfo gcc/cp/ gcc/cp/Make-lang.in g++ texi

	# gcc/doc/gccint.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccint texi

	# gcc/f/g77.texi
	crossgcc::fixinfo gcc/f/ gcc/f/Make-lang.in g77 texi

	# gcc/java/gcj.texi
	crossgcc::fixinfo gcc/java/ gcc/java/Make-lang.in gcj texi

	# fastjar/fastjar.texi
	crossgcc::fixinfo fastjar/ fastjar/Makefile.in fastjar texi
	
	# gettext stuff.
	crossgcc::fixgettext gcc
	crossgcc::fixgettext fastjar
}

pre-destroot {
	# gcc needs the cross directory structure to be present
	# in order to fill it during installation.
	file mkdir "${destroot}${prefix}/${crossgcc-target}/bin"
	file mkdir "${destroot}${prefix}/${crossgcc-target}/lib"
}

post-destroot {
	namespace eval crossgcc {}

	# Rename a man page if it exists.
	#
	# section: section of the man page (e.g. 1)
	# manpage: name of the man page (e.g. cpp)
	proc crossgcc::rename_man_page { section manpage } {
		global crossgcc-target destroot prefix

		set manpage_path "${destroot}${prefix}/share/man/man${section}/${manpage}.${section}"
		if { [ file exists ${manpage_path} ] } {
			file rename ${manpage_path} \
				"${destroot}${prefix}/share/man/man${section}/${crossgcc-target}-${manpage}.${section}"
		}
	}

	# Stuff I don't want (either because they're in the system
	# or because they would conflict with other FSF ports)
	# (it's easier for maintainability purposes to fix things here)

	# aliases for locales (should be on the system)
	file delete "${destroot}${prefix}/share/locale/locale.alias"
	
	# FSF propaganda (should already be there or would conflict)
	file delete -force "${destroot}${prefix}/share/man/man7"

	# (host) libiberty
	foreach f [glob -directory "${destroot}${prefix}/lib" libiberty.a */libiberty.a] {
        file delete $f
    }

	# aliases for charsets (should already be there)
	file delete "${destroot}${prefix}/lib/charset.alias"
	
	# Remove man pages for tools that are not built as part of cross-gcc
	file delete "${destroot}${prefix}/share/man/man1/rmic.1"
	file delete "${destroot}${prefix}/share/man/man1/rmiregistry.1"
	file delete "${destroot}${prefix}/share/man/man1/jv-convert.1"
	file delete "${destroot}${prefix}/share/man/man1/gij.1"
	
	# For some reason, some man pages are not prefixed while they should have been
	# (to avoid conflicting).
	crossgcc::rename_man_page 1 cpp
	crossgcc::rename_man_page 1 gcjh
	crossgcc::rename_man_page 1 gcov
	crossgcc::rename_man_page 1 jcf-dump
	crossgcc::rename_man_page 1 jv-scan
	
	# There is a bug in gcc/Makefile::install-driver
	# For cross compilers, $(GCC_INSTALL_NAME) is equal to
	# $(target_noncanonical)-gcc-$(version)
	# and hence the driver isn't installed.
	xinstall -c "${workpath}/build/gcc/xgcc" \
		"${destroot}${prefix}/bin/${crossgcc-target}-gcc-${version}"
}
