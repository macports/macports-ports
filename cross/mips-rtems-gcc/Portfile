PortSystem			1.0

name            	mips-rtems-gcc
version         	4.2.3

# Parameters for this port.
set newlibversion	1.16.0
set crossgcc-target mips-rtems
set rtemsversion	4.9
set default-languages --enable-languages="c,c++,objc"

description     	gcc cross-compilers for mips-rtems, with newlib runtime library.
long_description	gnu compilers collection (c, c++, fortran and objc) for \
					mips-rtems cross development (MIPS ISA Levels 1 and above for 32 \
					and 64 bit CPU models)
homepage			http://gcc.gnu.org/
platforms       	darwin
categories      	cross devel
license         	GPL-3+
maintainers     	nomaintainer
master_sites		gnu:gcc/gcc-${version}/:gcc \
					ftp://sources.redhat.com/pub/newlib/:newlib \
					ftp://ftp.mirror.ac.uk/sites/sources.redhat.com/pub/newlib/:newlib \
					ftp://ftp.rtems.com/pub/rtems/SOURCES/${rtemsversion}/:rtems \
					freebsd::rtems
distfiles			gcc-${version}.tar.bz2:gcc \
					newlib-${newlibversion}.tar.gz:newlib \
					gcc-core-${version}-rtems4.9-20080205.diff:rtems \
					newlib-${newlibversion}-rtems4.9-20080302.diff:rtems
extract.only		gcc-${version}.tar.gz newlib-${newlibversion}.tar.gz
worksrcdir			gcc-${version}
checksums			gcc-${version}.tar.bz2 \
                    md5     ef2a4d9991b3644115456ea05b2b8163 \
                    sha1    80b0df13fc9e311868022a3e86e673177397a917 \
                    rmd160  70b589b79b97967857f2ec70ff8b2017c84c464d \
					newlib-${newlibversion}.tar.gz \
                    md5     bf8f1f9e3ca83d732c00a79a6ef29bc4 \
                    sha1    841edec33d19a9e549984982fb92445ee967e265 \
                    rmd160  fa40ff43e858da3093c9f3b5b203724b9b327696 \
					gcc-core-${version}-rtems4.9-20080205.diff \
                    md5     d5a6a8c5973024476f0df6356b5e0424 \
                    sha1    20d0ada57ad44d9f060e60e26acee57e46137ad6 \
                    rmd160  c87a5703959dc319fad8e8b4804b8d4803cddc99 \
					newlib-${newlibversion}-rtems4.9-20080302.diff \
                    md5     a227456d0850e24a839634096b879c30 \
                    sha1    4f8cd12ada4865b271eb4d4c7d80b520fb8d2bc6 \
                    rmd160  81c76c584a6c76c9ea706bf9f0f2ba149303b289
patchfiles			patch-newlib-libc-configure.diff

# All cross ports violate the mtree layout.
destroot.violate_mtree	yes

# Download everything to gcc/
dist_subdir			gcc

depends_lib			port:${crossgcc-target}-binutils
depends_build		bin:msgfmt:gettext

# gcc is .bz2, newlib is .gz.
# let's extract only gcc with MacPorts infrastructure, we'll do newlib manually.
use_bzip2			yes
extract.only		gcc-${version}.tar.bz2

# Extract newlib and create a symlink of newlib/newlib in gcc directory.
post-extract	{
	system "cd ${workpath} && gzip -dc ${distpath}/newlib-${newlibversion}.tar.gz | tar -xf -"
	system "ln -s ${workpath}/newlib-${newlibversion}/newlib ${workpath}/gcc-${version}/"
}

# Since we don't build gcc and binutils at the same time, gcc's Makefile will try to transform
# program names as gcc's name (add -${version} with ${version} being the version of gcc).
# But it won't work because binutils binaries don't have the ${version} suffix, and even if they
# had, they would actually have the binutils' version suffix (and not gcc's version).
# So let's tell gcc's Makefile not to do that mistake.

set environment [list AR_FOR_TARGET=${crossgcc-target}-ar \
				AS_FOR_TARGET=${crossgcc-target}-as \
				LD_FOR_TARGET=${crossgcc-target}-ld \
				NM_FOR_TARGET=${crossgcc-target}-nm \
				RANLIB_FOR_TARGET=${crossgcc-target}-ranlib]

# Build in a different directory, as advised in the README file.
pre-configure   {
	file mkdir "${workpath}/build"
}
configure.dir   ${workpath}/build
configure.cmd   ${workpath}/gcc-${version}/configure
configure.env	${environment}
configure.cc_archflags
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.args  --infodir='${prefix}/share/info' \
				--mandir='${prefix}/share/man' \
				--target=${crossgcc-target} \
				--program-prefix=${crossgcc-target}- \
				--program-suffix=-${version} \
				--with-included-gettext \
				--enable-obsolete \
				--with-newlib \
				--with-gxx-include-dir=${prefix}/${crossgcc-target}/include/c++/${version}/ \
				${default-languages}

build.dir       ${workpath}/build

build.args		${environment}
destroot.args	${environment}

pre-patch {
	# Additional patches for rtems.
	system "cd ${workpath}/gcc-${version} && \
		patch -p1 < ${distpath}/gcc-core-${version}-rtems4.9-20080205.diff"
	system "cd ${workpath}/newlib-${newlibversion} && \
		patch -p1 < ${distpath}/newlib-${newlibversion}-rtems4.9-20080302.diff"
}

post-patch {
	namespace eval crossgcc {}

	# Fix the info pages and related stuff.
	#
	# path: path to the doc directory (e.g. gas/doc/)
	# makefile: path to Makefile.in (e.g. gas/doc/Makefile.in)
	# name: name of the info page (e.g. as)
	# suffix: suffix of the souce page (texinfo or texi)
	proc crossgcc::fixinfo { path makefile name suffix } {
		global crossgcc-target worksrcpath

		# Fix the source
		reinplace "s|setfilename ${name}.info|setfilename ${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${path}/${name}.${suffix}
		reinplace "s|(${name})|(${crossgcc-target}-${name})|g" \
			${worksrcpath}/${path}/${name}.${suffix}
		reinplace "s|@file{${name}}|@file{${crossgcc-target}-${name}}|g" \
			${worksrcpath}/${path}/${name}.${suffix}

		# Fix the Makefile
		reinplace "s| ${name}.info| ${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.info|/${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s|^${name}.info|${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s| ${name}.pod| ${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.pod|/${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s|^${name}.pod|${crossgcc-target}-${name}.pod|g" \
			${worksrcpath}/${makefile}
		reinplace "s| ${name}.${suffix}| ${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		reinplace "s|/${name}.${suffix}|/${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		reinplace "s|^${name}.${suffix}|${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}

		# Rename the source
		file rename ${worksrcpath}/${path}/${name}.${suffix} \
			${worksrcpath}/${path}/${crossgcc-target}-${name}.${suffix}

		# Fix install-info's dir.
		# (note: this may be effectless if there was no info dir to be fixed)
		reinplace "s|--info-dir=\$(DESTDIR)\$(infodir)|--dir-file=\$(DESTDIR)\$(infodir)/${crossgcc-target}-gcc-dir|g" \
			"${worksrcpath}/${makefile}"
	}

	# Fix the gettext files and related stuff.
	#
	# module: name of the module (e.g. gas)
	proc crossgcc::fixgettext { module } {
		global crossgcc-target worksrcpath

		if { [ file exists "${worksrcpath}/${module}/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/doc/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/doc/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/po/Make-in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/po/Make-in"
		}
	}

	# gcc/doc/cpp.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cpp texi

	# gcc/doc/cppinternals.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cppinternals texi

	# gcc/doc/gcc.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gcc texi

	# gcc/doc/gccint.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccint texi

	# gcc/f/g77.texi
	crossgcc::fixinfo gcc/fortran/ gcc/fortran/Make-lang.in gfortran texi

	# gcc/java/gcj.texi
	crossgcc::fixinfo gcc/java/ gcc/java/Make-lang.in gcj texi

	# gcc/doc/gccinstall.info
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccinstall info

	# gettext stuff.
	crossgcc::fixgettext gcc
	crossgcc::fixgettext libcpp
}

pre-destroot {
	# gcc needs the cross directory structure to be present
	# in order to fill it during installation.
	file mkdir "${destroot}${prefix}/${crossgcc-target}/bin"
	file mkdir "${destroot}${prefix}/${crossgcc-target}/lib"
}

post-destroot {
	namespace eval crossgcc {}

	# Rename a man page if it exists.
	#
	# section: section of the man page (e.g. 1)
	# manpage: name of the man page (e.g. cpp)
	proc crossgcc::rename_man_page { section manpage } {
		global crossgcc-target destroot prefix

		set manpage_path "${destroot}${prefix}/share/man/man${section}/${manpage}.${section}"
		if { [ file exists ${manpage_path} ] } {
			file rename ${manpage_path} \
				"${destroot}${prefix}/share/man/man${section}/${crossgcc-target}-${manpage}.${section}"
		}
	}

	# Stuff I don't want (either because they're in the system
	# or because they would conflict with other FSF ports)
	# (it's easier for maintainability purposes to fix things here)

	# aliases for locales (should be on the system)
	file delete "${destroot}${prefix}/share/locale/locale.alias"

	# FSF propaganda (should already be there or would conflict)
	file delete -force "${destroot}${prefix}/share/man/man7"

	# (host) libiberty
	foreach f [glob -directory "${destroot}${prefix}/lib" libiberty.a */libiberty.a] {
        file delete $f
    }

	# aliases for charsets (should already be there)
	file delete "${destroot}${prefix}/lib/charset.alias"

	# Remove man pages for tools that are not built as part of cross-gcc
	file delete "${destroot}${prefix}/share/man/man1/rmic.1"
	file delete "${destroot}${prefix}/share/man/man1/rmiregistry.1"
	file delete "${destroot}${prefix}/share/man/man1/jv-convert.1"
	file delete "${destroot}${prefix}/share/man/man1/gij.1"

	# For some reason, some man pages are not prefixed while they should have been
	# (to avoid conflicting).
	crossgcc::rename_man_page 1 cpp
	crossgcc::rename_man_page 1 gcjh
	crossgcc::rename_man_page 1 gcov
	crossgcc::rename_man_page 1 jcf-dump
	crossgcc::rename_man_page 1 jv-scan

	# There is a bug in gcc/Makefile::install-driver
	# For cross compilers, $(GCC_INSTALL_NAME) is equal to
	# $(target_noncanonical)-gcc-$(version)
	# and hence the driver isn't installed.
	xinstall -c "${workpath}/build/gcc/xgcc" \
		"${destroot}${prefix}/bin/${crossgcc-target}-gcc-${version}"
}

livecheck.type	regex
livecheck.url	http://gcc.gnu.org/releases.html
livecheck.regex	{<tr><td><a href="gcc-.*/">GCC (.*)</a></td>   <td>.*</td></tr>}
