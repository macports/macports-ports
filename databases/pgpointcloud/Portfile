# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github  1.0

github.setup        pgpointcloud pointcloud 1.2.5 v
revision            0
github.tarball_from archive

name                pgpointcloud
license             BSD
categories          databases gis
maintainers         {yahoo.com:n_larsson @nilason} openmaintainer

description         pgPointcloud is a PostgreSQL extension for storing point cloud (LIDAR) data
long_description    {*}${description}

homepage            https://pgpointcloud.github.io/pointcloud/

checksums           rmd160  54e0784994a458e9591ea416caf7ae106c0d7007 \
                    sha256  f3924f283345f2da46a971e65f0c6ce602640ecf88a2057293443ec2a7a56774 \
                    size    348678

configure.cmd       autoupdate && ./autogen.sh && ./configure

depends_build-append \
                    port:autoconf \
                    port:automake \
                    port:pkgconfig

depends_lib-append  port:libxml2 \
                    port:lzma \
                    port:icu \
                    port:libiconv \
                    port:zlib

configure.args-append \
                    --with-xml2config=${prefix}/bin/xml2-config \
                    --without-lazperf \
                    --without-cunit

# PostgreSQL database variants
set postgresql_suffixes {12 13 14 15}

set portsgresql_variants {}
set postgresql_default_variant "if {"
foreach s ${postgresql_suffixes} {
    lappend portsgresql_variants postgresql${s}
    set postgresql_default_variant "${postgresql_default_variant}!\[variant_isset postgresql${s}] && "
}
set postgresql_default_variant [string range ${postgresql_default_variant} 0 end-4]
set postgresql_default_variant "${postgresql_default_variant}} {default_variants +postgresql${s}}"
eval $postgresql_default_variant

foreach s ${postgresql_suffixes} {
    set p postgresql${s}
    set v [string index ${s} 0].[string index ${s} 1]
    set i [lsearch -exact ${portsgresql_variants} ${p}]
    set c [lreplace ${portsgresql_variants} ${i} ${i}]
    variant ${p} description "Use PostgreSQL ${s}" conflicts {*}${c} "
        depends_lib-append      port:${p}
        configure.args-append   --with-pgconfig=${prefix}/lib/${p}/bin/pg_config
    "
}

variant tests description {Enable tests} {
    depends_test-append     port:cunit
    configure.args-replace  --without-cunit --with-cunit=${prefix}
    test.run        yes
    test.target     check
}
