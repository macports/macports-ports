PHP Upstream

commit f809f2811964f216018f2ff7623d779991854252
Author: Nikita Popov <nikic@php.net>
Date:   Sat Jul 18 21:24:28 2015 +0200

    Check mbfl_filt_put_invalid_char return value
    
    And fix some libmbfl warnings

diff --git ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c
index a5260807d4..e0d5543882 100644
--- ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c
+++ ext/mbstring/libmbfl/filters/mbfilter_iso2022jp_mobile.c
@@ -48,7 +48,7 @@ const mbfl_encoding mbfl_encoding_2022jp_kddi = {
 	mbfl_no_encoding_2022jp_kddi,
 	"ISO-2022-JP-MOBILE#KDDI",
 	"ISO-2022-JP",
-	mbfl_encoding_2022jp_kddi_aliases,
+	&mbfl_encoding_2022jp_kddi_aliases,
 	NULL,
 	MBFL_ENCTYPE_MBCS | MBFL_ENCTYPE_SHFTCODE | MBFL_ENCTYPE_GL_UNSAFE
 };
diff --git ext/mbstring/libmbfl/filters/mbfilter_utf8.c ext/mbstring/libmbfl/filters/mbfilter_utf8.c
index a9c141bbfe..e81e0860d2 100644
--- ext/mbstring/libmbfl/filters/mbfilter_utf8.c
+++ ext/mbstring/libmbfl/filters/mbfilter_utf8.c
@@ -101,6 +101,7 @@
 	filter->status = 0;
 	filter->cache = 0;
 	CK((*filter->output_function)(w, filter->data));
+	return 0;
 }
 
 
@@ -109,7 +110,7 @@
  */
 int mbfl_filt_conv_utf8_wchar(int c, mbfl_convert_filter *filter)
 {
-	int s, c1, w = 0, flag = 0;
+	int s, c1;
 
 retry:
 	switch (filter->status & 0xff) {
@@ -126,7 +127,7 @@
 			filter->status = 0x30;
 			filter->cache = c & 0x7;
 		} else {
-			mbfl_filt_put_invalid_char(c, filter);
+			CK(mbfl_filt_put_invalid_char(c, filter));
 		}
 		break;
 	case 0x10: /* 2byte code 2nd char: 0x80-0xbf */
@@ -138,8 +139,8 @@
 			filter->cache = 0;
 			CK((*filter->output_function)(s, filter->data));			
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;			
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x20: /* 3byte code 2nd char: 0:0xa0-0xbf,D:0x80-9F,1-C,E-F:0x80-0x9f */
@@ -153,8 +154,8 @@
 			filter->cache = s;
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x30: /* 4byte code 2nd char: 0:0x90-0xbf,1-3:0x80-0xbf,4:0x80-0x8f */
@@ -168,8 +169,8 @@
 			filter->cache = s;
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x31: /* 4byte code 3rd char: 0x80-0xbf */
@@ -177,8 +178,8 @@
 			filter->cache = (filter->cache<<6) | (c & 0x3f);
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	default:
@@ -200,7 +201,7 @@
 	filter->cache = 0;
 
 	if (status != 0) {
-		mbfl_filt_put_invalid_char(cache, filter);
+		CK(mbfl_filt_put_invalid_char(cache, filter));
 	}
 
 	if (filter->flush_function != NULL) {
diff --git ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c
index c449d3132a..41e02bf314 100644
--- ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c
+++ ext/mbstring/libmbfl/filters/mbfilter_utf8_mobile.c
@@ -183,14 +183,14 @@
 };
 
 #define CK(statement)	do { if ((statement) < 0) return (-1); } while (0)
+int mbfl_filt_put_invalid_char(int c, mbfl_convert_filter *filter);
 
 /*
  * UTF-8 => wchar
  */
 int mbfl_filt_conv_utf8_mobile_wchar(int c, mbfl_convert_filter *filter)
 {
-	int s, w = 0, flag = 0;
-	int s1 = 0, c1 = 0, snd = 0;
+	int s, s1 = 0, c1 = 0, snd = 0;
 
 retry:
 	switch (filter->status & 0xff) {
@@ -207,7 +207,7 @@
 			filter->status = 0x30;
 			filter->cache = c & 0x7;
 		} else {
-			mbfl_filt_put_invalid_char(c, filter);
+			CK(mbfl_filt_put_invalid_char(c, filter));
 		}
 		break;
 	case 0x10: /* 2byte code 2nd char: 0x80-0xbf */
@@ -237,8 +237,8 @@
 			}
 			CK((*filter->output_function)(s, filter->data));
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;			
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x20: /* 3byte code 2nd char: 0:0xa0-0xbf,D:0x80-9F,1-C,E-F:0x80-0x9f */
@@ -252,8 +252,8 @@
 			filter->cache = s;
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x30: /* 4byte code 2nd char: 0:0x90-0xbf,1-3:0x80-0xbf,4:0x80-0x8f */
@@ -267,8 +267,8 @@
 			filter->cache = s;
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	case 0x31: /* 4byte code 3rd char: 0x80-0xbf */
@@ -276,8 +276,8 @@
 			filter->cache = (filter->cache<<6) | (c & 0x3f);
 			filter->status++;
 		} else {
-			mbfl_filt_put_invalid_char(filter->cache, filter);
-			goto retry;						
+			CK(mbfl_filt_put_invalid_char(filter->cache, filter));
+			goto retry;
 		}
 		break;
 	default:
