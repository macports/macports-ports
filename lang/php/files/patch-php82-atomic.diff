See https://github.com/php/php-src/issues/8881
Based on https://github.com/php/php-src/commit/f33d6cfb98790c7e38d8cdd5b343f42180064698.patch
--- a/Zend/zend_atomic.c.orig	2022-11-22 12:07:40.000000000 -0600
+++ b/Zend/zend_atomic.c	2022-12-06 14:46:36.000000000 -0600
@@ -35,13 +35,6 @@
 	zend_atomic_bool_store_ex(obj, desired);
 }
 
-#if defined(ZEND_WIN32) || defined(HAVE_SYNC_ATOMICS)
-/* On these platforms it is non-const due to underlying APIs. */
-ZEND_API bool zend_atomic_bool_load(zend_atomic_bool *obj) {
-	return zend_atomic_bool_load_ex(obj);
-}
-#else
 ZEND_API bool zend_atomic_bool_load(const zend_atomic_bool *obj) {
 	return zend_atomic_bool_load_ex(obj);
 }
-#endif
--- a/Zend/zend_atomic.h.orig	2022-11-22 12:07:40.000000000 -0600
+++ b/Zend/zend_atomic.h	2022-12-06 14:48:09.000000000 -0600
@@ -70,10 +70,9 @@
 	return InterlockedExchange8(&obj->value, desired);
 }
 
-/* On this platform it is non-const due to Iterlocked API*/
-static zend_always_inline bool zend_atomic_bool_load_ex(zend_atomic_bool *obj) {
+static zend_always_inline bool zend_atomic_bool_load_ex(const zend_atomic_bool *obj) {
 	/* Or'ing with false won't change the value. */
-	return InterlockedOr8(&obj->value, false);
+	return InterlockedOr8(&((zend_atomic_bool *) obj)->value, false);
 }
 
 static zend_always_inline void zend_atomic_bool_store_ex(zend_atomic_bool *obj, bool desired) {
@@ -89,7 +88,7 @@
 }
 
 static zend_always_inline bool zend_atomic_bool_load_ex(const zend_atomic_bool *obj) {
-	return __c11_atomic_load(&obj->value, __ATOMIC_SEQ_CST);
+	return __c11_atomic_load(&((zend_atomic_bool *) obj)->value, __ATOMIC_SEQ_CST);
 }
 
 static zend_always_inline void zend_atomic_bool_store_ex(zend_atomic_bool *obj, bool desired) {
@@ -108,7 +107,7 @@
 
 static zend_always_inline bool zend_atomic_bool_load_ex(const zend_atomic_bool *obj) {
 	bool prev = false;
-	__atomic_load(&obj->value, &prev, __ATOMIC_SEQ_CST);
+	__atomic_load(&((zend_atomic_bool *) obj)->value, &prev, __ATOMIC_SEQ_CST);
 	return prev;
 }
 
@@ -130,9 +129,9 @@
 	return prev;
 }
 
-static zend_always_inline bool zend_atomic_bool_load_ex(zend_atomic_bool *obj) {
+static zend_always_inline bool zend_atomic_bool_load_ex(const zend_atomic_bool *obj) {
 	/* Or'ing false won't change the value */
-	return __sync_fetch_and_or(&obj->value, false);
+	return __sync_fetch_and_or(&((zend_atomic_bool *) obj)->value, false);
 }
 
 static zend_always_inline void zend_atomic_bool_store_ex(zend_atomic_bool *obj, bool desired) {
@@ -167,12 +166,7 @@
 ZEND_API bool zend_atomic_bool_exchange(zend_atomic_bool *obj, bool desired);
 ZEND_API void zend_atomic_bool_store(zend_atomic_bool *obj, bool desired);
 
-#if defined(ZEND_WIN32) || defined(HAVE_SYNC_ATOMICS)
-/* On these platforms it is non-const due to underlying APIs. */
-ZEND_API bool zend_atomic_bool_load(zend_atomic_bool *obj);
-#else
 ZEND_API bool zend_atomic_bool_load(const zend_atomic_bool *obj);
-#endif
 
 END_EXTERN_C()
 
