# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           legacysupport 1.1

legacysupport.newest_darwin_requires_legacy 15

name                go
epoch               2

version             1.17.3
revision            0

homepage            https://golang.org

categories          lang
platforms           darwin freebsd linux
license             BSD
description         compiled, garbage-collected, concurrent programming \
                    language developed by Google Inc.

long_description    \
    The Go programming language is an open source project to make programmers \
    more productive. Go is expressive, concise, clean, and efficient. Its \
    concurrency mechanisms make it easy to write programs that get the most \
    out of multicore and networked machines, while its novel type system \
    enables flexible and modular program construction. Go compiles quickly \
    to machine code yet has the convenience of garbage collection and the \
    power of run-time reflection. It's a fast, statically typed, compiled \
    language that feels like a dynamically typed, interpreted language. Go \
    is developed by Google Inc.

set go_src_dist     ${name}${version}.src${extract.suffix}
set go_armbin_dist  ${name}${version}.darwin-arm64${extract.suffix}
set go_amdbin_dist  ${name}${version}.darwin-amd64${extract.suffix}

checksums           ${go_src_dist} \
                    rmd160  6bceaa01422be6db58eafafb0e13c81f4b3ca0bf \
                    sha256  705c64251e5b25d5d55ede1039c6aa22bea40a7a931d14c370339853643c3df0 \
                    size    22183309 \
                    ${go_armbin_dist} \
                    rmd160  ae796783ccd55a179dc021380a626123919f5b07 \
                    sha256  ffe45ef267271b9681ca96ca9b0eb9b8598dd82f7bb95b27af3eef2461dc3d2c \
                    size    130225529 \
                    ${go_amdbin_dist} \
                    rmd160  70bec0c19af9f25f5a2d7374083b8bbb21d2f954 \
                    sha256  765c021e372a87ce0bc58d3670ab143008dae9305a79e9fa83440425529bb636 \
                    size    136757743

master_sites        https://storage.googleapis.com/golang/
distfiles           ${go_src_dist}
worksrcdir          ${name}

maintainers         {ciserlohn @ci42} \
                    {gmail.com:herby.gillot @herbygillot} \
                    openmaintainer

extract.only        ${go_src_dist}

set GOROOT          ${worksrcpath}
set GOROOT_FINAL    ${prefix}/lib/${name}

supported_archs     arm64 i386 x86_64

switch ${configure.build_arch} {
    arm64 {
        set GOARCH arm64
    }
    i386 {
        set GOARCH 386
    }
    x86_64 {
        set GOARCH amd64
    }
    default {
        set GOARCH {}
    }
}

use_configure       no

build.dir           ${worksrcpath}/src
build.cmd           ./make.bash
build.target
build.env           GOROOT=${GOROOT} \
                    GOARCH=${GOARCH} \
                    GOOS=darwin \
                    GOROOT_FINAL=${GOROOT_FINAL} \
                    CC=${configure.cc}
# Set build.jobs to -1 to disable MacPorts from adding the -j flag for
# parallel builds, since the build.cmd contains "make".
build.jobs          -1

if {${os.platform} eq "darwin" && ${os.major} <= ${legacysupport.newest_darwin_requires_legacy}} {
    # The legacy support PG will not actually change anything in this port directly,
    # since go doesn't use the standard CFLAGS/CXXFLAGS.
    # We need to patch the build system and set up env variables manually.

    # Older compilers don't support the -Wno-nullability-completeness flag and if
    # that's the case, they won't need it anyway, so just patch it out.
    patchfiles-append   patch-cgo-drop-no-nullability-completeness.diff

    # Fix building with the -x flag ("show all commands as they are executed"),
    # useful for debugging of the bootstrapping process.
    # Only needed for debugging the build/bootstrapping process.
    # FIXME: report this as a bug and have it or a better version of it upstreamed.
    #patchfiles-append   patch-go-internal-buildid-and-gc-fix-debug.diff

    # Show all commands while building packages and only build one package at a time in
    # the last bootstrapping step.
    # Only needed for debugging the build/bootstrapping process.
    #patchfiles-append   patch-build-show-commands.diff

    build.env-append    "GO_EXTLINK_ENABLED=1" \
                        "GO_LDFLAGS=\"-extldflags=${configure.ldflags}\"" \
                        "BOOT_GO_LDFLAGS=-extldflags=${configure.ldflags}" \
                        "CGO_LDFLAGS=-g -O2 ${configure.ldflags}"

    # Might be useful while debugging issues.
    #build.args          "-v=3"

    notes-append [subst {
                    go had to be specially patched and built to work on your platform.

                    It likely won't work out of the box when building other projects,\
                    so make sure change your environment to use the following variables:
                      * GO_EXTLINK_ENABLED="1"
                    to always force go to use the external gcc or clang linker and
                      * GO_LDFLAGS="\\\"-extldflags=\${configure.ldflags}\\\""
                      * CGO_LDFLAGS="-g -O2 \${configure.ldflags}"
                    to force-link any binary against the legacy support library.\
                    Use exactly the quoting provided here, even if it may look odd,\
                    or compilation will fail.

                    Failure to do so will leave you unable to create binaries that use\
                    features not natively available on your system, either directly\
                    or through a go core dependency.
    }]
}

if {${os.platform} eq "darwin" && ${os.major} eq 10} {
    # The branch https://github.com/catap/go/tree/macos-10.6
    patchfiles-append   patch-macOS-10.6.diff
}

use_parallel_build  no

if {${configure.build_arch} eq "arm64"} {

    # Use a temporary installation of the binary ARM64 Go distribution to
    # build Go for ARM64
    set go_bin_path         ${workpath}/go_prebuilt

    build.env-append        GOROOT_BOOTSTRAP=${go_bin_path}/go

    distfiles-append        ${go_armbin_dist}

    post-extract {
        xinstall -d ${go_bin_path}
        system -W ${go_bin_path} \
            "${extract.cmd} ${extract.pre_args} ${distpath}/${go_armbin_dist} ${extract.post_args}"
    }

} elseif {${configure.build_arch} eq "x86_64" && ${os.major} >= 21} {

    # Use a temporary installation of the binary AMD64 Go distribution to
    # build Go for AMD64 on macOS 12 since go-1.4 fails to build
    set go_bin_path         ${workpath}/go_prebuilt

    build.env-append        GOROOT_BOOTSTRAP=${go_bin_path}/go

    distfiles-append        ${go_amdbin_dist}

    post-extract {
        xinstall -d ${go_bin_path}
        system -W ${go_bin_path} \
            "${extract.cmd} ${extract.pre_args} ${distpath}/${go_amdbin_dist} ${extract.post_args}"
    }

} else {

    build.env-append        GOROOT_BOOTSTRAP=${prefix}/lib/go-1.4

    depends_build-append    port:go-1.4
}

post-build {
    system "find ${worksrcpath} -type d -name .hg* -print0 | xargs -0 rm -rf"
    delete ${worksrcpath}/pkg/bootstrap
}

destroot {

    delete ${worksrcpath}/src/cmd/vendor/github.com/google/pprof/internal/binutils/testdata/malformed_macho

    set grfdir ${destroot}${GOROOT_FINAL}
    set docdir ${destroot}${prefix}/share/doc/${name}

    xinstall -d ${grfdir}
    xinstall -d ${docdir}

    foreach f {api bin lib misc pkg src test} {
        copy ${worksrcpath}/${f} ${grfdir}
    }

    foreach f {go gofmt} {
        system -W ${destroot}${prefix}/bin/ "ln -s ../lib/${name}/bin/$f ./$f"
    }

    xinstall -m 0644 -W ${worksrcpath} \
        AUTHORS \
        CONTRIBUTING.md \
        CONTRIBUTORS \
        LICENSE \
        README.md \
        PATENTS \
        VERSION \
        ${docdir}

    copy {*}[glob -directory ${worksrcpath}/doc *] ${docdir}
}

if {${os.platform} eq "darwin" && ${os.major} < 10} {
    known_fail yes
    pre-fetch {
        ui_error "${name} @${version} requires OS X 10.6 or greater."
        return -code error "incompatible Mac OS X version"
    }
}

livecheck.type      regex
livecheck.url       ${homepage}/dl/
livecheck.regex     {go([0-9.]+)\.src\.tar\.gz}
