--- src/colstr.c.orig	2017-10-24 19:11:59.000000000 +0800
+++ src/colstr.c	2023-02-02 19:44:09.000000000 +0800
@@ -179,6 +179,9 @@
 	const char* prefix, char quote,
 	const char* base, unsigned size)
 {
+	if (!base)
+		return false;
+
 	if (size < 2)
 	{
 		return ofc_colstr_atomic_writef(

--- src/file.c.orig	2017-10-24 19:11:59.000000000 +0800
+++ src/file.c	2023-02-02 19:45:17.000000000 +0800
@@ -286,6 +286,7 @@
 			case '\r':
 				/* Support Windows line endings when running on cygwin. */
 				if (file->strz[i + 1] == '\n') i++;
+				__attribute__ ((fallthrough));
 			case '\n':
 				r += 1;
 				c = 0;

--- src/sema/typeval.c.orig	2017-10-24 19:11:59.000000000 +0800
+++ src/sema/typeval.c	2023-02-02 19:46:31.000000000 +0800
@@ -1116,6 +1116,7 @@
 	ofc_sema_typeval_t tv;
 	tv.type = type;
 	tv.src  = typeval->src;
+	tv.integer = 0;
 
 	unsigned tsize, csize;
 	if (!ofc_sema_type_base_size(typeval->type, &tsize)
@@ -1158,7 +1159,6 @@
 		ofc_sparse_ref_warning(typeval->src,
 			"Casting CHARACTER to INTEGER");
 
-		tv.integer = 0;
 		memcpy(&tv.integer, typeval->character, csize);
 		return ofc_sema_typeval__alloc(tv);
 	}

--- src/parse/lhs.c.orig	2017-10-24 19:11:59.000000000 +0800
+++ src/parse/lhs.c	2023-02-02 19:48:52.000000000 +0800
@@ -65,7 +65,7 @@
 	if (!src || !dst)
 		return NULL;
 
-	ofc_parse_lhs_t clone;
+	ofc_parse_lhs_t clone = {0};
 	clone.type = src->type;
 	clone.src  = src->src;
 
@@ -456,7 +456,7 @@
 			return NULL;
 		}
 
-		lhs->type = OFC_PARSE_EXPR_IMPLICIT_DO;
+		lhs->type = OFC_PARSE_LHS_IMPLICIT_DO;
 		lhs->src  = ofc_sparse_ref(src, ptr, l);
 		lhs->implicit_do = id;
 
--- src/sema/expr.c.orig	2017-10-24 19:11:59.000000000 +0800
+++ src/sema/expr.c	2023-02-02 19:48:20.000000000 +0800
@@ -2405,7 +2405,7 @@
 	for (i = 0; i < list->count; i++)
 	{
 		ofc_sema_expr_t* expr;
-		if ((list->expr[i]->type == OFC_PARSE_EXPR_IMPLICIT_DO))
+		if (list->expr[i]->type == OFC_PARSE_EXPR_IMPLICIT_DO)
 		{
 			if (!allow_implicit_do)
 			{
