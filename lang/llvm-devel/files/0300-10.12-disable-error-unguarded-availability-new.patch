--- a/llvm/cmake/config-ix.cmake	2023-03-27 16:52:12.000000000 +0100
+++ b/llvm/cmake/config-ix.cmake	2023-03-27 16:52:39.000000000 +0100
@@ -259,10 +259,10 @@
 
 # Prevent check_symbol_exists from using API that is not supported for a given
 # deployment target.
-check_c_compiler_flag("-Werror=unguarded-availability-new" "C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW")
-if(C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW)
-  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror=unguarded-availability-new")
-endif()
+#check_c_compiler_flag("-Werror=unguarded-availability-new" "C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW")
+#if(C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW)
+#  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror=unguarded-availability-new")
+#endif()
 
 # Determine whether we can register EH tables.
 check_symbol_exists(__register_frame "${CMAKE_CURRENT_LIST_DIR}/unwind.h" HAVE_REGISTER_FRAME)

--- a/llvm/cmake/modules/HandleLLVMOptions.cmake	2023-03-27 17:23:22.000000000 +0100
+++ b/llvm/cmake/modules/HandleLLVMOptions.cmake	2023-03-27 17:24:09.000000000 +0100
@@ -591,7 +591,7 @@
 # Specific default warnings-as-errors for compilers accepting GCC-compatible warning flags:
 if ( LLVM_COMPILER_IS_GCC_COMPATIBLE OR CMAKE_CXX_COMPILER_ID MATCHES "XL" )
   add_flag_if_supported("-Werror=date-time" WERROR_DATE_TIME)
-  add_flag_if_supported("-Werror=unguarded-availability-new" WERROR_UNGUARDED_AVAILABILITY_NEW)
+#  add_flag_if_supported("-Werror=unguarded-availability-new" WERROR_UNGUARDED_AVAILABILITY_NEW)
 endif( LLVM_COMPILER_IS_GCC_COMPATIBLE OR CMAKE_CXX_COMPILER_ID MATCHES "XL" )
 
 # Modules enablement for GCC-compatible compilers:
