--- orig/tools/clang/include/clang/Lex/HeaderSearchOptions.h
+++ new/tools/clang/include/clang/Lex/HeaderSearchOptions.h
@@ -189,6 +189,9 @@ public:
   /// Use libc++ instead of the default libstdc++.
   unsigned UseLibcxx : 1;
 
+  /// Use MacPorts libstdc++ instead of default system libstdc++.
+  unsigned UseMacPortsLibstdcxx : 1;
+
   /// Whether header search information should be output as for -v.
   unsigned Verbose : 1;
 
--- llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp.orig	2020-05-06 08:57:03.000000000 -0700
+++ llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp	2020-05-07 12:51:38.000000000 -0700
@@ -2939,8 +2939,10 @@
 #include "clang/Driver/Options.inc"
 #undef HEADER_SEARCH_OPTION_WITH_MARSHALLING
 
-  if (const Arg *A = Args.getLastArg(OPT_stdlib_EQ))
+  if (const Arg *A = Args.getLastArg(OPT_stdlib_EQ)) {
     Opts.UseLibcxx = (strcmp(A->getValue(), "libc++") == 0);
+    Opts.UseMacPortsLibstdcxx = (strcmp(A->getValue(), "macports-libstdc++") == 0);
+  }
 
   // Canonicalize -fmodules-cache-path before storing it.
   SmallString<128> P(Args.getLastArgValue(OPT_fmodules_cache_path));
--- orig/tools/clang/lib/Frontend/InitHeaderSearch.cpp
+++ new/tools/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -108,7 +108,7 @@ static bool CanPrefixSysroot(StringRef Path) {
 #if defined(_WIN32)
   return !Path.empty() && llvm::sys::path::is_separator(Path[0]);
 #else
-  return llvm::sys::path::is_absolute(Path);
+  return llvm::sys::path::is_absolute(Path) && Path.find("@@MACPORTS_GCC_INCLUDE_DIR@@")!=0;
 #endif
 }
 
--- orig/tools/clang/include/clang/Driver/ToolChain.h
+++ new/tools/clang/include/clang/Driver/ToolChain.h
@@ -94,7 +94,8 @@ public:
 
   enum CXXStdlibType {
     CST_Libcxx,
-    CST_Libstdcxx
+    CST_Libstdcxx,
+    CST_MacPortsLibstdcxx
   };
 
   enum RuntimeLibType {
--- orig/tools/clang/lib/Driver/ToolChains/Darwin.cpp
+++ new/tools/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -2045,8 +2045,9 @@ void DarwinClang::AddClangCXXStdlibInclu
     return;
 
   llvm::StringRef Sysroot = GetHeaderSysroot(DriverArgs);
+  CXXStdlibType Type = GetCXXStdlibType(DriverArgs);
 
-  switch (GetCXXStdlibType(DriverArgs)) {
+  switch (Type) {
   case ToolChain::CST_Libcxx: {
     // On Darwin, libc++ can be installed in one of the following two places:
     // 1. Alongside the compiler in         <install>/include/c++/v1
@@ -2088,6 +2089,7 @@ void DarwinClang::AddClangCXXStdlibInclu
   }
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
     llvm::SmallString<128> UsrIncludeCxx = Sysroot;
     llvm::sys::path::append(UsrIncludeCxx, "usr", "include", "c++");
 
@@ -2098,10 +2100,17 @@ void DarwinClang::AddClangCXXStdlibInclu
 
     case llvm::Triple::ppc:
     case llvm::Triple::ppc64:
-      IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
-                                                "4.2.1",
-                                                "powerpc-apple-darwin10",
-                                                arch == llvm::Triple::ppc64 ? "ppc64" : "");
+      IsBaseFound = false;
+      if (Type==ToolChain::CST_MacPortsLibstdcxx) {
+        IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, llvm::StringRef("@@MACPORTS_GCC_INCLUDE_DIR@@"),
+                                                  "",
+                                                  "@@MACPORTS_HOST_NAME@@",
+                                                  arch == llvm::Triple::ppc64 ? "@@MACPORTS_GCC_SUBDIRECTORY_ppc64@@" : "@@MACPORTS_GCC_SUBDIRECTORY_ppc@@");
+      }
+      IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
+                                                 "4.2.1",
+                                                 "powerpc-apple-darwin10",
+                                                 arch == llvm::Triple::ppc64 ? "ppc64" : "");
       IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
                                                 "4.0.0", "powerpc-apple-darwin8",
                                                  arch == llvm::Triple::ppc64 ? "ppc64" : "");
@@ -2109,10 +2118,17 @@ void DarwinClang::AddClangCXXStdlibInclu
 
     case llvm::Triple::x86:
     case llvm::Triple::x86_64:
-      IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
-                                                "4.2.1",
-                                                "i686-apple-darwin10",
-                                                arch == llvm::Triple::x86_64 ? "x86_64" : "");
+      IsBaseFound = false;
+      if (Type==ToolChain::CST_MacPortsLibstdcxx) {
+        IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, llvm::StringRef("@@MACPORTS_GCC_INCLUDE_DIR@@"),
+                                                  "",
+                                                  "@@MACPORTS_HOST_NAME@@",
+                                                  arch == llvm::Triple::x86_64 ? "@@MACPORTS_GCC_SUBDIRECTORY_x86_64@@" : "@@MACPORTS_GCC_SUBDIRECTORY_i386@@");
+      }
+      IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
+                                                 "4.2.1",
+                                                 "i686-apple-darwin10",
+                                                 arch == llvm::Triple::x86_64 ? "x86_64" : "");
       IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
                                                 "4.0.0", "i686-apple-darwin8",
                                                  arch == llvm::Triple::x86_64 ? "x86_64" : "");
@@ -2155,6 +2171,12 @@ void DarwinClang::AddCXXStdlibLibArgs(co
     break;
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
+    if (Type==ToolChain::CST_MacPortsLibstdcxx && getVFS().exists("@@MACPORTS_libstdc++@@")) {
+      CmdArgs.push_back("@@MACPORTS_libstdc++@@");
+      return;
+      }
+
     // Unfortunately, -lstdc++ doesn't always exist in the standard search path;
     // it was previously found in the gcc lib dir. However, for all the Darwin
     // platforms we care about it was -lstdc++.6, so we search for that
--- orig/tools/clang/lib/Driver/ToolChains/Hexagon.cpp.orig	2020-05-06 08:57:03.000000000 -0700
+++ new/tools/clang/lib/Driver/ToolChains/Hexagon.cpp	2020-05-07 12:43:10.000000000 -0700
@@ -643,6 +643,8 @@
       return ToolChain::CST_Libstdcxx;
   }
   StringRef Value = A->getValue();
+  if (Value == "macports-libstdc++")
+    return ToolChain::CST_MacPortsLibstdcxx;
   if (Value != "libstdc++" && Value != "libc++")
     getDriver().Diag(diag::err_drv_invalid_stdlib_name) << A->getAsString(Args);
 
--- orig/tools/clang/lib/Driver/ToolChain.cpp
+++ new/tools/clang/lib/Driver/ToolChain.cpp
@@ -965,6 +965,8 @@
     cxxStdlibType = ToolChain::CST_Libcxx;
   else if (LibName == "libstdc++")
     cxxStdlibType = ToolChain::CST_Libstdcxx;
+  else if (LibName == "macports-libstdc++")
+    cxxStdlibType = ToolChain::CST_MacPortsLibstdcxx;
   else if (LibName == "platform")
     cxxStdlibType = GetDefaultCXXStdlibType();
   else {
@@ -1060,6 +1062,7 @@
     break;
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
     CmdArgs.push_back("-lstdc++");
     break;
   }
