# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
PortSystem              1.0
PortGroup select        1.0
PortGroup compiler_blacklist_versions 1.0
PortGroup active_variants 1.1
PortGroup cmake         1.0
PortGroup legacysupport 1.0

# link legacysupport statically for compilers
legacysupport.use_static yes

# limit legacysupport to 10.9 for now
# test on 10.10 to see what happens there
# on 10.11 there is a collision with getattrlistat (that has been fixed in legacysupportdevel)
legacysupport.newest_darwin_requires_legacy 13

# for devel
PortGroup github        1.0
set llvm-commit         77e1181df446b54391acad08512b540e174cf6e6
set date                20200531
set llvm_version        devel

# for release
# set llvm_version 11

set llvm_version_no_dot 11
set clang_executable_version 11
set lldb_executable_version 11

github.setup            llvm llvm-project ${llvm-commit}

checksums               rmd160  de9bc39195c5525b85c891ccc83b7dce3cbc28fd \
                        sha256  409d5fa4236a738bf4297a75ba09b9561766cdf2e75ee93d7d17d3ecedd2814d \
                        size    119507490

# for release, use      ${llvm_version}
# version                 ${llvm_version}
version                 ${date}-[string range ${llvm-commit} 0 7]


name                    llvm-${llvm_version}
revision                0
subport                 clang-${llvm_version} { revision 0 }
subport                 lldb-${llvm_version} { revision 0 }
set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
dist_subdir             llvm
categories              lang
platforms               darwin
license                 NCSA
maintainers             {jeremyhu @jeremyhu} {kencu @kencu}

if {${subport} eq "llvm-${llvm_version}"} {
    homepage            https://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib         port:libedit port:libffi port:ncurses path:lib/libxar.dylib:xar port:zlib
    depends_run         bin:perl:perl5 port:llvm_select

    default_variants-append    +polly

} elseif {${subport} eq "clang-${llvm_version}"} {
    homepage            https://clang.llvm.org/
    description         C, C++, Objective C and Objective C++ compiler
    long_description    Clang is an "LLVM native" C/C++/Objective-C compiler, \
                        which aims to deliver amazingly fast compiles (e.g. \
                        about 3x faster than GCC when compiling Objective-C \
                        code in a debug configuration), extremely useful error \
                        and warning messages and to provide a platform for \
                        building great source level tools. The included Clang \
                        Static Analyzer is a tool that automatically finds bugs in \
                        your code, and is a great example of the sort of tool \
                        that can be built using the Clang frontend as a \
                        library to parse C/C++ code.

    depends_lib         port:libxml2 port:libomp port:llvm-${llvm_version}
    depends_run         port:clang_select port:ld64
    depends_skip_archcheck-append ld64 subversion

    default_variants-append +analyzer

} elseif {${subport} eq "lldb-${llvm_version}"} {
    homepage            https://lldb.llvm.org/
    description         the LLVM debugger
    long_description    Lldb is the "LLVM native" debugger.

    depends_lib         port:libxml2 port:libomp port:llvm-${llvm_version} port:ncurses
    depends_build-append port:swig-python port:doxygen
}

# for devel version only
default_variants-append +assertions

# the backtik pkgconfig setting in the ffi config line requires pkg-config
depends_build-append    port:pkgconfig

worksrcdir              llvm-project/llvm
patch.dir               ${workpath}/llvm-project/llvm

post-extract {
    move ${workpath}/llvm-project-${llvm-commit} ${workpath}/llvm-project

    if {${subport} eq "llvm-${llvm_version}"} {
        if {[variant_isset polly]} {
            file rename ${workpath}/llvm-project/polly                        ${worksrcpath}/tools/polly
        }
    } elseif {${subport} eq "clang-${llvm_version}"} {
        file rename ${workpath}/llvm-project/clang                            ${worksrcpath}/tools/clang
        file rename ${workpath}/llvm-project/compiler-rt                      ${worksrcpath}/projects/compiler-rt
        file rename ${workpath}/llvm-project/libcxx                           ${worksrcpath}/projects/libcxx
        file rename ${workpath}/llvm-project/libcxxabi                        ${worksrcpath}/projects/libcxxabi
        file rename ${workpath}/llvm-project/clang-tools-extra                ${worksrcpath}/tools/clang/tools/extra
    } elseif {${subport} eq "lldb-${llvm_version}"} {
        file rename ${workpath}/llvm-project/clang                            ${worksrcpath}/tools/clang
        file rename ${workpath}/llvm-project/lldb                             ${worksrcpath}/tools/lldb
    }
}

patch.pre_args  -p1
patchfiles \
    0002-Define-EXC_MASK_CRASH-and-MACH_EXCEPTION_CODES-if-th.patch \
    0003-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
    0005-Threading-Only-call-pthread_setname_np-on-SnowLeopar.patch \
    0006-Only-call-setpriority-PRIO_DARWIN_THREAD-0-PRIO_DARW.patch \
    0007-patch-llvm8-tools-dsymutil-symbolmap-use-older-cfname-and-fix-uuid-on-leopard.diff \
    0008-patch-lib-support-unix-path-copyfileclone-on-older-systems.diff

if {${subport} eq "clang-${llvm_version}"} {
    patchfiles-append \
        1001-MacPorts-Only-Prepare-clang-format-for-replacement-w.patch \
        1002-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
        1003-Default-to-ppc7400-for-OSX-10.5.patch \
        1004-Default-to-fragile-ObjC-runtime-when-targeting-darwi.patch \
        1005-Fixup-libstdc-header-search-paths-for-older-versions.patch \
        1007-Fix-float.h-to-work-on-Snow-Leopard-and-earlier.patch \
        1008-compilerrt-fuzzer-missingdefs.diff \
        1009-compilerrt-sanitizer-missingdefs.diff \
        2002-Work-around-no-libdispatch-on-10.6.patch \
        3001-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        3002-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
        openmp-locations.patch \
        leopard-no-asan.patch \
        5000-patch-compilerrtdarwinutils-find-macosxsdkversion.diff \
        5002-patch-toolchains-darwin-add-back-pre-10.6-link-libs.diff

    # fix incorrect disabling of bad_optional/variant/any_access on 10.13
    # https://github.com/macports/macports-base/pull/179
    patchfiles-append patch-libcxx-includes-config-optional-1013.diff

}

if {${subport} eq "lldb-${llvm_version}"} {
    # lldb needs the clang sources present, so we apply the applicable patches.
    patchfiles-append \
        1001-MacPorts-Only-Prepare-clang-format-for-replacement-w.patch \
        1002-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
        1003-Default-to-ppc7400-for-OSX-10.5.patch \
        1004-Default-to-fragile-ObjC-runtime-when-targeting-darwi.patch \
        1005-Fixup-libstdc-header-search-paths-for-older-versions.patch \
        1007-Fix-float.h-to-work-on-Snow-Leopard-and-earlier.patch \
        openmp-locations.patch
}

configure.post_args         ../${worksrcdir}
default configure.dir       {${workpath}/build}
default build.dir           {${workpath}/build}

cmake.install_prefix ${sub_prefix}

# clang shared libraries are not all installed in ${cmake.install_prefix}/lib
# so we have to let the llvm/clang cmake scripts handle the @rpath setting
# See:
#     https://llvm.org/bugs/show_bug.cgi?id=31425
#     https://trac.macports.org/ticket/53299
configure.args-delete \
    -DCMAKE_INSTALL_NAME_DIR=${cmake.install_prefix}/lib \
    -DCMAKE_INSTALL_RPATH=${cmake.install_prefix}/lib

configure.args-replace \
    -DCMAKE_SYSTEM_PREFIX_PATH="${prefix}\;/usr" \
    -DCMAKE_SYSTEM_PREFIX_PATH="${cmake.install_prefix}\;${prefix}\;/usr"

configure.args-append \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_BINDINGS_LIST=none \
    -DFFI_INCLUDE_DIR=`pkg-config --cflags-only-I libffi | sed 's/-I//'` \
    -DFFI_LIBRARY_DIR=${prefix}/lib

if {${subport} eq "llvm-${llvm_version}"} {
    select.group        llvm
    select.file         ${filespath}/mp-${subport}
} elseif {${subport} eq "clang-${llvm_version}"} {
    select.group        clang
    select.file         ${filespath}/mp-${subport}

    # CMAKE_LINKER is used to determine the value for HOST_LINK_VERSION
    configure.args-append \
        -DCMAKE_LINKER=${prefix}/bin/ld \
        -DLD64_EXECUTABLE=${prefix}/bin/ld \
        -DCLANG_INCLUDE_TESTS=OFF \
        -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
        -DCLANG_ENABLE_ARCMT=OFF \
        -DDARWIN_PREFER_PUBLIC_SDK=ON \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLIBCXX_ENABLE_SHARED=OFF \
        -DLIBCXX_INSTALL_LIBRARY=OFF

} elseif {${subport} eq "lldb-${llvm_version}"} {
    #select.group        lldb
    #select.file         ${filespath}/mp-${subport}

    configure.args-append \
        -DLLDB_CODESIGN_IDENTITY=- \
        -DLLDB_ENABLE_LUA=OFF \
        -DCLANG_INCLUDE_TESTS=OFF \
        -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
        -DCLANG_ENABLE_ARCMT=OFF \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLIBCXX_ENABLE_SHARED=OFF \
        -DLIBCXX_INSTALL_LIBRARY=OFF
}

# not building with macports-clang up to 3.7
# error: no type named 'type' in 'std::__1::enable_if<false, void>'; 'enable_if' cannot be used to disable this declaration
#                 ,typename enable_if<is_convertible<const _U1&, _T1>::value &&
#                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# clang-1000.11.45.5 gives missing symbols for ZTIDu and others during libcxxabi build
compiler.blacklist *gcc* {clang < 1001} macports-clang-3.*

# Override the normal compiler fallback list entirely since we have
# such specific requirements.
compiler.fallback   clang

# fall back to clang-9.0 when system clang is too old
# clang-9.0 was that last one that built with clang-3.7
compiler.fallback-append macports-clang-9.0

# cctools is needed to handle objects from newer clang toolchains
if {[string match macports-clang-* ${configure.compiler}]} {
    depends_build-append port:cctools
    depends_skip_archcheck-append cctools
}

# Set CMAKE_LIBTOOL if we're using MacPorts-provided cctools
if {[lsearch -exact $PortInfo(depends_build) port:cctools] != -1} {
    configure.args-append \
        -DCMAKE_LIBTOOL=${prefix}/bin/libtool
}

depends_lib-append      port:python38
set pythonfullpath      ${prefix}/bin/python3.8
configure.args-append   -D_Python3_EXECUTABLE=${pythonfullpath}

platform darwin {
    configure.cxx_stdlib libc++
    depends_lib-append port:libcxx
    supported_archs i386 x86_64
}

variant assertions description "Enable assertions for error detection (has performance impacts, especially on JIT)" {
    configure.args-delete -DLLVM_ENABLE_ASSERTIONS=OFF
    configure.args-append -DLLVM_ENABLE_ASSERTIONS=ON
}

platform darwin {

    if {${subport} eq "clang-${llvm_version}"} {

        if {${os.major} == 14} {
            # Building Xray forces build of sanitizer_common, even if
            # COMPILER_RT_BUILD_SANITIZERS=OFF, and this fails on 10.10
            # TODO: See why sanitizer_common fails on 10.10
            configure.args-append    -DCOMPILER_RT_BUILD_XRAY=OFF
        }

        if {${os.major} <= 14} {
            # We unfortunately don't have an option to just turn off tsan
            # https://llvm.org/bugs/show_bug.cgi?id=27715
            configure.args-append    -DCOMPILER_RT_BUILD_SANITIZERS=OFF
        }

        if {${os.major} <= 10} {
            # needs thread_local_storage enabled
            require_active_variants port:libcxx emulated_tls
        }

        if {${os.major} <= 11} {
            # xpc.h available 10.7 but doesn't support nullable features
            # xpc.h works currently on 10.8+
            # toggle enabled in https://reviews.llvm.org/D59808
            configure.args-append    -DCLANGD_BUILD_XPC=OFF
        }

        if {${os.major} <= 10} {
            # the directorywatcher code is currently 10.7+
            patchfiles-append 5003-patch-no-directory-watcher-on-snowleopard.diff

            # the libcxx installed by MacPorts on darwin 10 and less does not correspond to Apple's builtin libcxx
            patchfiles-append 5005-MacPorts-only-patch-libcxx-includes-disable-availability-tests.diff
        }

        if {${os.major} <= 9} {
            # TO DO: the blocks functionality can be replaced by libblocksruntime
            # this might be integrated into clang on < 10.6
            patchfiles-append leopard-no-blocks.patch
        }
    }
}

pre-fetch {
    if {${subport} eq "lldb-${llvm_version}"} {
        if {${os.platform} eq "darwin" && ${os.major} < 15} {
            depends_build
            depends_lib
            depends_run
            archive_sites
            known_fail yes
            ui_error "${subport} is not supported on this os version at present."
            return -code error {unsupported platform}
        }
    }
}

if {${subport} eq "clang-${llvm_version}"} {
    destroot {
        system "cd ${destroot.dir}/tools/clang && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
        system "cd ${destroot.dir}/projects/compiler-rt && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
        system "cd ${destroot.dir}/projects/libcxx && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"

        delete ${destroot}${sub_prefix}/bin/clang
        file rename ${destroot}${sub_prefix}/bin/clang-${clang_executable_version} ${destroot}${sub_prefix}/bin/clang
        reinplace "s|/bin/clang-${clang_executable_version}|/bin/clang|g" \
            "${destroot}${sub_prefix}/lib/cmake/clang/ClangTargets-release.cmake"
    }
}

if {${subport} eq "lldb-${llvm_version}"} {
    post-patch {
        reinplace "s|@@PREFIX@@|${prefix}|" \
            ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Clang.cpp \
            ${worksrcpath}/tools/clang/lib/Driver/ToolChains/CommonArgs.cpp

        reinplace "s|@CLANG_FORMAT_PATH@|${prefix}/bin/clang-format-${suffix}|g" \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-bbedit.applescript \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-diff.py            \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-sublime.py         \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.el                 \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.py
    }

    build.dir   ${build.dir}/tools/lldb

    post-activate {
        ui_msg "Please follow the instructions at  https://lldb.llvm.org/resources/build.html#code-signing-on-macos and then codesign lldb-server with:"
        if {${os.major} >= 13} {
            ui_msg "   sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements,flags,team-identifier --sign <identity> ${sub_prefix}/bin/lldb-server"
        } else {
           ui_msg "   sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements --sign <identity> ${sub_prefix}/bin/lldb-server"
        }
    }
}

post-destroot {
    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        # see https://trac.macports.org/ticket/54985
        if {${os.platform} eq "darwin" && [vercmp ${xcodeversion} 4.6] < 0} {
             xinstall -m 755 "${filespath}/llvm-bin-compat" "${bin_filename}"
        } else {
             xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        }

        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }

    if {${subport} eq "llvm-${llvm_version}"} {
        # r156389 (a5d2435409858728970202226d0bbbee508fe408) temporarilary removed llvm man pages
        #foreach man [glob ${destroot}${sub_prefix}/share/man/man1/*.1] {
        #    set basename [string map "${destroot}${sub_prefix}/share/man/man1/ {}" ${man}]
        #    file rename ${man} ${destroot}${prefix}/share/man/man1/[string map ".1 -${suffix}.1" ${basename}]
        #}

        # https://llvm.org/bugs/show_bug.cgi?id=19465
        if {[variant_isset polly]} {
            ln -s LLVMPolly.so ${destroot}${sub_prefix}/lib/LLVMPolly.dylib
        }
    } elseif {${subport} eq "clang-${llvm_version}"} {
        system "ditto ${worksrcpath}/projects/libcxx/include ${destroot}${sub_prefix}/lib/c++/v1"

        # http://trac.macports.org/ticket/33207
        ln -s ${prefix}/libexec/ld64/ld ${destroot}${sub_prefix}/bin/ld
    } elseif {${subport} eq "lldb-${llvm_version}"} {
        delete ${destroot}${prefix}/bin/debugserver-${suffix}
    }
}

if {${os.major} < 11} {
    variant emulated_tls description { enable c11/c++11 thread_local_storage support on older systems using emulated-tls } {
        # use emulated-tls to support thread_local on systems prior to 10.7
        patchfiles-append      9000-patch-llvm-7.0-support-emulated-tls.diff
        if {${subport} eq "clang-${llvm_version}"} {
            patchfiles-append  9000-patch-clang-7.0-support-emulated-tls.diff
        }
    }
    default_variants-append +emulated_tls
}

if {${subport} eq "llvm-${llvm_version}"} {
    variant polly description {Provide the polly polyhedral optimizer} {}

    # Unless upstream reverts to their old OCaml detection mechanism,
    # this variant will be broken until #46161 is resolved.
    variant ocaml description {Enable generation of OCaml binding} {
        depends_lib-append   port:ocaml

        configure.args-delete -DLLVM_BINDINGS_LIST=none
        configure.args-append -DLLVM_BINDINGS_LIST=ocaml

        destroot.args-append  OVERRIDE_libdir=${sub_prefix}/lib
    }
} elseif {${subport} eq "clang-${llvm_version}"} {
    if {[variant_isset assertions]} {
        # Need to match llvm +-assertions
        require_active_variants port:llvm-${llvm_version} assertions
    } else {
        # Need to match llvm +-assertions
        require_active_variants port:llvm-${llvm_version} {} assertions
    }

    variant analyzer description {Install clang static analyzer} {
        # these have to be switched on or off together
        configure.args-replace -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
                               -DCLANG_ENABLE_STATIC_ANALYZER=ON
        configure.args-replace -DCLANG_ENABLE_ARCMT=OFF \
                               -DCLANG_ENABLE_ARCMT=ON

        depends_run-append port:perl5

        post-patch {
            reinplace "s|/usr/bin/env perl|${prefix}/bin/perl5|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/libexec/ccc-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/libexec/c++-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/bin/scan-build

            # pythonfullpath is set above, depending on presence of system python2.7
            reinplace "s|/usr/bin/env python|${pythonfullpath}|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/bin/set-xcode-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-view/bin/scan-view
        }
    }

    if { ${cxx_stdlib} eq "libc++" && ${os.major} < 13 } {
        variant defaultlibcxx description {default to -stdlib=libc++ if not otherwise specified}  {
            # on systems older than darwin 13, if macports.conf is configured to stdlib=libc++
            # then make that the default if not otherwise specified. This matches the behaviour of newer systems.
            patchfiles-append 9003-patch-clang-7.0-default-to-libcxx-on-all-systems.diff
        }
        default_variants-append +defaultlibcxx
    }

    variant libstdcxx description {-stdlib=macports-libstdc++ searches for MacPorts libstdc++} {

        patchfiles-append 9001-macports-libstdcxx.diff

        post-patch {
            reinplace "s|@@MACPORTS_GCC_INCLUDE_DIR@@|${prefix}/include/gcc/c++|g" \
                ${worksrcpath}/tools/clang/lib/Frontend/InitHeaderSearch.cpp \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_HOST_NAME@@|${build_arch}-apple-darwin${os.major}|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_libstdc++@@|${prefix}/lib/libgcc/libstdc++.6.dylib|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp

            # GCC was built for ${build_arch}-apple-darwin${os.major}
            # if GCC was also built universal, it has an extra include directory
            # if ${build_arch} is 32-bit, there is an extra 64-bit subdirectory
            # if ${build_arch} is 64-bit, there is an extra 32-bit subdirectory
            # MacPorts GCC can not compile across platforms
            switch ${build_arch} {
                x86_64 {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   "i386"
                    set gcc_subdirectory_x86_64 ""
                }
                i386 {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
                ppc64 {
                    set gcc_subdirectory_ppc    "ppc"
                    set gcc_subdirectory_ppc64  ""
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
                ppc {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
            }

            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_x86_64@@|${gcc_subdirectory_x86_64}|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_i386@@|${gcc_subdirectory_i386}|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_ppc64@@|${gcc_subdirectory_ppc64}|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_ppc@@|${gcc_subdirectory_ppc}|g" \
                ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Darwin.cpp
        }
    }
    default_variants-append +libstdcxx

    post-patch {
        reinplace "s|@@PREFIX@@|${prefix}|" \
            ${worksrcpath}/tools/clang/lib/Driver/ToolChains/Clang.cpp \
            ${worksrcpath}/tools/clang/lib/Driver/ToolChains/CommonArgs.cpp

        reinplace "s|@CLANG_FORMAT_PATH@|${prefix}/bin/clang-format-${suffix}|g" \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-bbedit.applescript \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-diff.py            \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-sublime.py         \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.el                 \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.py
    }

    post-destroot {
        file mkdir ${destroot}${sub_prefix}/libexec
        file copy ${worksrcpath}/tools/clang/tools/clang-format ${destroot}${sub_prefix}/libexec/clang-format

        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/.svn
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/Makefile
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/Release+Debug+Asserts
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/CMakeLists.txt
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/ClangFormat.cpp
    }
}

livecheck.type          none
