See https://github.com/rust-lang/rust/pull/95375

--- library/std/src/sys/unix/fs.rs.orig	2022-04-04 02:41:05.000000000 -0700
+++ library/std/src/sys/unix/fs.rs	2022-04-10 09:06:24.000000000 -0700
@@ -1483,7 +1483,7 @@
 }
 
 // Dynamically choose implementation Macos x86-64: modern for 10.10+, fallback for older versions
-#[cfg(all(target_os = "macos", target_arch = "x86_64"))]
+#[cfg(all(target_os = "macos", not(target_arch = "aarch64")))]
 mod remove_dir_impl {
     use super::{cstr, lstat, Dir, InnerReadDir, ReadDir};
     use crate::ffi::CStr;
@@ -1509,6 +1509,9 @@
     }
 
     fn fdreaddir(dir_fd: OwnedFd) -> io::Result<(ReadDir, RawFd)> {
+        #[cfg(all(target_os = "macos", target_arch = "x86"))]
+        weak!(fn fdopendir(c_int) -> *mut DIR, "fdopendir$INODE64$UNIX2003");
+        #[cfg(all(target_os = "macos", target_arch = "x86_64"))]
         weak!(fn fdopendir(c_int) -> *mut DIR, "fdopendir$INODE64");
         let ptr = unsafe { fdopendir.get().unwrap()(dir_fd.as_raw_fd()) };
         if ptr.is_null() {
@@ -1602,7 +1605,7 @@
 
 // Modern implementation using openat(), unlinkat() and fdopendir()
 #[cfg(not(any(
-    all(target_os = "macos", target_arch = "x86_64"),
+    all(target_os = "macos", not(target_arch = "aarch64")),
     target_os = "redox",
     target_os = "espidf"
 )))]
