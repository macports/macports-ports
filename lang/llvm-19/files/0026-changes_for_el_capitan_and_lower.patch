diff -ur ./clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp ./clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp
--- ./clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp	2025-07-04 20:35:42.000000000 -0600
+++ ./clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp	2025-07-05 07:40:22.000000000 -0600
@@ -98,6 +98,7 @@
 };
 } // namespace
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
 constexpr const FSEventStreamEventFlags StreamInvalidatingFlags =
     kFSEventStreamEventFlagUserDropped | kFSEventStreamEventFlagKernelDropped |
     kFSEventStreamEventFlagMustScanSubDirs;
@@ -105,6 +106,7 @@
 constexpr const FSEventStreamEventFlags ModifyingFileEvents =
     kFSEventStreamEventFlagItemCreated | kFSEventStreamEventFlagItemRenamed |
     kFSEventStreamEventFlagItemModified;
+#endif
 
 static void eventStreamCallback(ConstFSEventStreamRef Stream,
                                 void *ClientCallBackInfo, size_t NumEvents,
@@ -118,14 +120,26 @@
     StringRef Path = ((const char **)EventPaths)[i];
     const FSEventStreamEventFlags Flags = EventFlags[i];
 
-    if (Flags & StreamInvalidatingFlags) {
+    if (Flags
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070 
+        & StreamInvalidatingFlags
+#endif 
+        ) {
       Events.emplace_back(DirectoryWatcher::Event{
           DirectoryWatcher::Event::EventKind::WatcherGotInvalidated, ""});
       break;
-    } else if (!(Flags & kFSEventStreamEventFlagItemIsFile)) {
+    } else if (!(Flags
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+          & kFSEventStreamEventFlagItemIsFile
+#endif 
+          )) {
       // Subdirectories aren't supported - if some directory got removed it
       // must've been the watched directory itself.
-      if ((Flags & kFSEventStreamEventFlagItemRemoved) &&
+      if ((Flags
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+            & kFSEventStreamEventFlagItemRemoved
+#endif 
+            ) &&
           Path == ctx->WatchedPath) {
         Events.emplace_back(DirectoryWatcher::Event{
             DirectoryWatcher::Event::EventKind::WatchedDirRemoved, ""});
@@ -135,11 +149,19 @@
       }
       // No support for subdirectories - just ignore everything.
       continue;
-    } else if (Flags & kFSEventStreamEventFlagItemRemoved) {
+    } else if (Flags
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+        & kFSEventStreamEventFlagItemRemoved
+#endif
+        ) {
       Events.emplace_back(DirectoryWatcher::Event::EventKind::Removed,
                           llvm::sys::path::filename(Path));
       continue;
-    } else if (Flags & ModifyingFileEvents) {
+    } else if (Flags
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+        & ModifyingFileEvents
+#endif
+        ) {
       if (!getFileStatus(Path).has_value()) {
         Events.emplace_back(DirectoryWatcher::Event::EventKind::Removed,
                             llvm::sys::path::filename(Path));
@@ -203,7 +225,10 @@
   FSEventStreamRef Result = FSEventStreamCreate(
       nullptr, eventStreamCallback, &Context, PathsToWatch,
       kFSEventStreamEventIdSinceNow, /* latency in seconds */ 0.0,
-      kFSEventStreamCreateFlagFileEvents | kFSEventStreamCreateFlagNoDefer);
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+      kFSEventStreamCreateFlagFileEvents | 
+#endif 
+      kFSEventStreamCreateFlagNoDefer);
   CFRelease(PathsToWatch);
 
   return Result;
@@ -222,7 +247,13 @@
     std::function<void(llvm::ArrayRef<DirectoryWatcher::Event>, bool)> Receiver,
     bool WaitForInitialSync) {
   dispatch_queue_t Queue =
-      dispatch_queue_create("DirectoryWatcher", DISPATCH_QUEUE_SERIAL);
+      dispatch_queue_create("DirectoryWatcher", 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+          DISPATCH_QUEUE_SERIAL
+#else
+          NULL
+#endif
+          );
 
   if (Path.empty())
     llvm::report_fatal_error(
diff -ur ./compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp ./compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp
--- ./compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp	2025-01-14 02:41:02.000000000 -0700
+++ ./compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp	2025-07-08 11:35:06.000000000 -0600
@@ -71,9 +71,11 @@
 #  include <mach/mach_time.h>
 #  include <mach/vm_statistics.h>
 #  include <malloc/malloc.h>
-#  include <os/log.h>
 #  include <pthread.h>
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 101200
+#  include <os/log.h>
 #  include <pthread/introspection.h>
+#endif
 #  include <sched.h>
 #  include <signal.h>
 #  include <spawn.h>
@@ -790,9 +792,13 @@
 void WriteOneLineToSyslog(const char *s) {
 #if !SANITIZER_GO
   syslog_lock.CheckLocked();
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 101200
   if (GetMacosAlignedVersion() >= MacosVersion(10, 12)) {
     os_log_error(OS_LOG_DEFAULT, "%{public}s", s);
   } else {
+#else
+  {
+#endif
     asl_log(nullptr, nullptr, ASL_LEVEL_ERR, "%s", s);
   }
 #endif
@@ -1400,6 +1406,7 @@
   return (u32)sysconf(_SC_NPROCESSORS_ONLN);
 }
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 101200
 void InitializePlatformCommonFlags(CommonFlags *cf) {}
 
 // Pthread introspection hook
@@ -1456,6 +1463,7 @@
   prev_pthread_introspection_hook =
       pthread_introspection_hook_install(&sanitizer_pthread_introspection_hook);
 }
+#endif
 
 }  // namespace __sanitizer
 
diff -ur ./compiler-rt/lib/sanitizer_common/sanitizer_platform.h ./compiler-rt/lib/sanitizer_common/sanitizer_platform.h
--- ./compiler-rt/lib/sanitizer_common/sanitizer_platform.h	2025-01-14 02:41:02.000000000 -0700
+++ ./compiler-rt/lib/sanitizer_common/sanitizer_platform.h	2025-07-05 09:13:03.000000000 -0600
@@ -63,6 +63,9 @@
 //   - SANITIZER_IOSSIM: simulators (iOS and iOS-like)
 //   - SANITIZER_DRIVERKIT
 #if defined(__APPLE__)
+#if MAC_OS_X_VERSION_MIN_REQUIRED <= 101000
+#include <uuid/uuid.h>
+#endif
 #  define SANITIZER_APPLE 1
 #  include <TargetConditionals.h>
 #  if TARGET_OS_OSX
