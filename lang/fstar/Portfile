# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               github  1.0
PortGroup               ocaml   1.1
PortGroup               select  1.0

name                    fstar
categories              lang devel
maintainers             {landonf @landonf}

homepage                https://fstar-lang.org
platforms               darwin

github.author           FStarLang

depends_build           port:ocaml-ocamlbuild

depends_lib             port:ocaml-batteries \
                        port:ocaml-stdint \
                        port:ocaml-zarith \
                        port:ocaml-ppx_deriving \
                        port:ocaml-ppx_deriving_yojson \
                        port:ocaml-process \
                        port:ocaml-yojson \
                        port:ocaml-fileutils \
                        port:ocaml-menhir \
                        port:ocaml-pprint

use_configure           no

ocaml.use_findlib       yes

# Basic configuration options that vary based on the subport (fstar vs kremlin)
# and its release type (stable vs devel).
default fstar.stable        {[expr {![string match {*-devel} $subport]}]}
default fstar.project       {[regsub {(.*?)(-devel)?$} ${subport} {\1}]}
default fstar.port_suffix   {[expr {${fstar.stable} ? "" : "-devel"}]}

options fstar.release \
        fstar.version

if {${fstar.stable}} {
    fstar.version       0.9.7.0-alpha1
    # Strip everything but <major>.<minor>
    fstar.release       [regsub {^([^\.]+\.[^\.]+).*} ${fstar.version} {\1}]
} else {
    fstar.version       20200623
    fstar.release       devel
}

foreach fname {fstar kremlin} {
    set S [list subst -novariables]

    options ${fname}.home \
            ${fname}.bin \
            ${fname}.port \
            ${fname}.select_name \
            ${fname}.doc_dirs

    default ${fname}.home        [{*}$S {${prefix}/libexec/[set fname]-${fstar.release}}]
    default ${fname}.bin         [{*}$S {[set fname]}]
    default ${fname}.port        [{*}$S {[set fname]${fstar.port_suffix}}]
    default ${fname}.select_name {${fstar.project}-${fstar.release}}
}

# Provide generic alias options for the current subport
foreach key {home doc_dirs bin port select_name} {
    set var "${fstar.project}.${key}"
    default fstar.subport.${key}    [subst -nocommands {[set ${var}]}]
}

# Common fstar/fstar-devel configuration
if {${fstar.project} eq "fstar"} {
    github.project          FStar
    license                 MIT
    description             General-purpose functional language aimed at program verification
    long_description        F* (pronounced F star) is a general-purpose \
                            functional programming language with effects aimed at \
                            program verification. It puts together the automation \
                            of an SMT-backed deductive verification tool with the \
                            expressive power of a proof assistant based on \
                            dependent types. After verification, F* programs can \
                            be extracted to efficient OCaml, F#, C, WASM, or ASM \
                            code.

    patchfiles              patch-z3-path \
                            patch-fix-get_exec_dir

    post-patch {
        # Fix up the z3 path in the generated code, too.
        #
        # A patch file would be more of a headache here, as the autogenerated variable names
        # result in the patches not applying cleanly across updates.
        reinplace {s|FStar_Platform.exe "z3"|FStar_String.op_Hat fstar_bin_directory (FStar_Platform.exe "/z3")|g} \
            src/ocaml-output/FStar_Options.ml

        # Provide required link to z3 binary
        ln -shf ${prefix}/libexec/z3-fstar/bin/z3 \
            ${worksrcpath}/bin/z3

        # Fix-up paths to MacPorts' binaries
        reinplace -E "s|@PREFIX@|${prefix}|g" \
            src/basic/ml/FStar_Util.ml
    }

    # destroot requires ginstall from coreutils
    depends_build-append    port:coreutils
    depends_lib-append      port:z3-fstar \
                            port:gmp \
                            port:ocaml-ulex \
                            port:ocaml-migrate-parsetree \
                            port:realpath
    depends_run-append      port:fstar_select

    fstar.doc_dirs          examples \
                            contrib \
                            tutorial

# Common kremlin/kremlin-devel configuration
} elseif {${fstar.project} eq "kremlin"} {
    github.project          kremlin
    license                 Apache-2
    description             A tool for extracting low-level F* programs to readable C code
    long_description        KreMLin is a tool that extracts an F* program to readable C code.

    compiler.c_standard     2011

    depends_run-append      port:kremlin_select

    depends_build-append    port:gsed

    depends_lib-append      port:${fstar.port} \
                            port:coreutils \
                            port:ocaml-fix \
                            port:ocaml-wasm \
                            port:ocaml-visitors

    kremlin.bin             krml
    kremlin.doc_dirs        examples
} else {
    ui_error "Unsupported project: ${fstar.project}"
}

# Subport-specific configuration
subport fstar {
    github.setup        ${github.author} ${github.project} ${fstar.version} V
    revision            7

    distname            V${version}
    checksums           rmd160  bec45d793880ecf815bdc3d79cdb58f7f6ba7414 \
                        sha256  baa60f5f8a6c0dd5237a4fc7de5b8e940a3c620d680d255ae0057cf765163618 \
                        size    7173479

    patchfiles-append   fstar-stable/patch-ocaml4.08 \
                        fstar-stable/patch-examples-fix-tests
}

subport fstar-devel {
    github.setup        ${github.author} ${github.project} 4559e1b4ffdac20e581a7cc69a3d324e2f29cda8
    version             ${fstar.version}-[string range ${github.version} 0 6]
    revision            0

    checksums           rmd160  f0cdde0a007465c6f4ec8bbfd7f9bf8f2edc9a67 \
                        sha256  2fac89ceef9164bbb486fafbe68592a60028b12733285d024b02a258f6e87b70 \
                        size    7647899
    github.tarball_from tarball

    patchfiles-append   fstar-devel/patch-tests_machine__integers_Makefile
}

subport kremlin {
    github.setup        ${github.author} ${fstar.project} 0.9.6.0 v
    revision            10

    distname            v${version}
    worksrcdir          kremlin-${version}

    # Updated z3 hints; can be generated after a valid test run via:
    #   tar -Jcf files/kremlin-0.9.6.0-test-hints.tar.xz -C work kremlin-0.9.6.0/test/.hints
    distfiles-append    kremlin-stable/kremlin-${version}-test-hints.tar.xz
    patchfiles-append   kremlin-stable/patch-clang-driver-options \
                        kremlin-stable/patch-fstar-0.9.7.0 \
                        kremlin-stable/patch-fstar-discover-path \
                        kremlin-stable/patch-fix-make-command

    github.tarball_from archive

    checksums           rmd160  b806353b0dbc89ad4e398e14d332b36d9ea2f69a \
                        sha256  547d3374e347d4e0b50bda2ed17a78719aa2265a91a2e1828a0e492e82dfb558 \
                        size    660454

    depends_lib-append  port:ocaml-ulex

    # Disable known-broken test paths
    if {${version} ne "0.9.6.0"} {
        ui_error "Please verify that full test execution is still broken" 
    } else {
        patchfiles-append kremlin-stable/patch-disable-broken-tests
    }

    post-patch {
        # Fix path to the fstar executable
        reinplace {s|fstar\.exe|$(FSTAR_HOME)/bin/fstar|g} \
             test/Makefile
    }
}

subport kremlin-devel {
    github.setup        ${github.author} ${fstar.project} 0f08f1243331ffc62ba3f1b8d8b06e4de8479943
    version             ${fstar.version}-[string range ${github.version} 0 6]
    revision            0

    checksums           rmd160  78eecc0f9ab7c6905a87a478d688233ab692b37b \
                        sha256  7a8dbfe0f25f94cfa8ed41ab380cb9c9ab6fdfebec93081fdcc6dd485e50aecb \
                        size    829817

    patchfiles-append   kremlin-devel/patch-clang-driver-options \
                        kremlin-devel/patch-fix-make-command \
                        kremlin-devel/patch-fstar-discover-path \
                        kremlin-devel/patch-test_system_system.h

    depends_lib-append  port:ocaml-sedlex
    depends_test-append port:ocaml-ctypes
}

# Apply shared fstar/fstar-devel subport configuration
if {${fstar.project} eq "fstar"} {
    ocaml.package_dir   ${fstar.home}/bin

    build.args          PREFIX=${fstar.home}
    build.target        ocaml-fstar-ocaml

    test.run            yes
    test.env            KREMLIN_HOME=${kremlin.home}/home
    test.dir            ${worksrcpath}
    test.target         all
    test.args           -C examples \
                        -j ${build.jobs}

    #
    # XXX TODO:
    #
    # A number of F* test cases actually depend on KreMLin (while KreMLin depends
    # on F*).
    #
    # We need to find a way to break this circular dependency, either by disabling
    # the given tests (and running them in KreMLin's test target?), or actually
    # building KreMLin as part of F*, or ... (?).
    #
    # Current (as of this writing) list of examples in fstar-devel that depend on KreMLin:
    #   - csl
    #   - kv_parsing
    #   - low-level
    #   - miniparse
    #   - tactics
    #   - typeclasses
    #
    depends_test        port:${kremlin.port}

    destroot.dir        ${worksrcpath}/src/ocaml-output
    destroot.args       PREFIX=${destroot}${fstar.home}

    build {
        foreach {dir ftargets} {
            src     {ocaml-fstar-ocaml}
            ulib    {install-fstarlib install-fstar-tactics all}
        } {
            build.dir       ${worksrcpath}/${dir}
            build.target    {*}${ftargets}
            do-build
        }
    }

    post-destroot {
        # Remove intermediate build directories
        foreach dir {ml tactics_ml} {
            delete ${destroot}${fstar.home}/lib/fstar/${dir}/_build
        }

        # Drop the '.exe' file extension inserted by the build system
        move \
            ${destroot}${fstar.home}/bin/${fstar.bin}.exe \
            ${destroot}${fstar.home}/bin/${fstar.bin}

        # Provide an fstar.exe -> fstar compatibility symlink
        ln -shf fstar ${destroot}${fstar.home}/bin/${fstar.bin}.exe

        # Provide a link to our z3 binary
        ln -shf ../../z3-fstar/bin/z3 ${destroot}${fstar.home}/bin/z3

        # Provide compatibility symlinks for projects that expect F*'s
        # source layout
        set fstar_compat_home ${destroot}${fstar.home}/home
        xinstall -d -m 755 ${fstar_compat_home}
        foreach {fstar_src fstar_dest} {
            lib/fstar               ulib
            bin                     bin
            share/fstar/examples    examples
            share/fstar/contrib     ucontrib
        } {
            ln -shf \
                ../${fstar_src} \
                ${fstar_compat_home}/${fstar_dest}
        }
    }

    notes "
    To select fstar-${fstar.release} as your default F* toolchain, please run:

      sudo port select fstar ${subport}

    To use your default F* toolchain with most standard Makefile-based F* projects,
    pass FSTAR_HOME to the build as either an environmental variable,
    or make(1) parameter:

      FSTAR_HOME=\"${prefix}/libexec/fstar/home\"

    Alternatively, you may use fstar-${fstar.release} explicitly:

      FSTAR_HOME=\"${fstar.home}/home\"

    "

# Apply shared kremlin/kremlin-devel subport configuration
} elseif {${fstar.project} eq "kremlin"} {
    # If we specify PREFIX=${kremlin.home} in our build.args, a fixed path to
    # kremlin.home is hard-coded by kremlin's build system in AutoConfig.ml.
    #
    # If we exclude it, we can rely on auto-detection of kremlin.home, which
    # allows us to run krml in-place (e.g. for tests)
    build.args              FSTAR_HOME=${fstar.home}/home \
                            KREMLIN_HOME=${worksrcpath}

    test.run                yes
    test.args               {*}${build.args} \
                            -j ${build.jobs}

    destroot.args           PREFIX=${destroot}${kremlin.home} \
                            FSTAR_HOME=${fstar.home}/home \
                            KREMLIN_HOME=${worksrcpath}

    post-destroot {
        # KreMLin-specific cleanup up the installed files.
        fs-traverse {f} ${destroot}${fstar.subport.home} {
            switch -glob -- "[file tail $f] [file type $f]" {
                {*.d file} {
                    # Delete KreMLin's GCC dependency (-MD) files; these contain the build's
                    # worksrcpath, and even with the correct paths, would not be useful to
                    # library consumers
                    delete $f
                }
            }
        }

        # Provide a link to our fstar binary
        ln -shf ${fstar.home}/bin/${fstar.bin} ${destroot}${kremlin.home}/bin/${fstar.bin}

        # Provide compatibility symlinks for projects that expect KreMLin's
        # source layout
        set kremlin_compat_home ${destroot}${kremlin.home}/home
        xinstall -d -m 755 ${kremlin_compat_home}
        foreach {kremlin_src kremlin_dest} {
            lib/kremlin             kremlib
            lib/kremlin/runtime     runtime
            include                 include
            bin/krml                krml
            share/kremlin/misc      misc
        } {
            ln -shf \
                ../${kremlin_src} \
                ${kremlin_compat_home}/${kremlin_dest}
        }
    }

    notes "
    To select kremlin-${fstar.release} as your default KreMLin toolchain, please run:

      sudo port select kremlin ${subport}

    To use your default KreMLin toolchain with most standard Makefile-based F*/KreMLin projects,
    pass KREMLIN_HOME to the build as either an environmental variable,
    or make(1) parameter:

      KREMLIN_HOME=\"${prefix}/libexec/kremlin/home\"

    Alternatively, you may use kremlin-${fstar.release} explicitly:

      KREMLIN_HOME=\"${kremlin.home}/home\"

    "
}

#
# Configure and register the subport's select file
#
select.group    ${fstar.project}
select.file     ${workpath}/${fstar.project}-macports-select/${fstar.subport.select_name}
post-patch {
    file mkdir [file dirname ${select.file}]

    copy -- ${filespath}/fstar-select.in \
        ${select.file}

    foreach {fstar_key fstar_var} {
        @FSTAR_PROJECT@     fstar.project
        @FSTAR_RELEASE@     fstar.release
        @FSTAR_BIN@         fstar.subport.bin
    } {
        reinplace "s|${fstar_key}|[set ${fstar_var}]|g" \
            ${select.file}
    }

}

#
# Common destroot cleanup
#
post-destroot {
    # Clean up the installed files.
    fs-traverse {f} ${destroot}${fstar.subport.home} {
        switch -glob -- "[file tail $f] [file type $f]" {
            {*.checked file} {
                # Bump the mtime of all *.checked files by 1 second.
                #
                # This ensures that fstar/kremlin GNU make dependencies
                # don't try to regenerate read-only *.checked files if they
                # have an mtime identical to their corresponding fst/fsti
                # input (yes, that happens)
                set mtime [file mtime $f]
                file mtime $f [expr {$mtime + 1}]
            }
            {.gitignore file} {
                # Delete .gitignore files
                delete $f
            }
        }
    }

    # Add versioned documentation symlinks to share/doc/
    xinstall -d -m 755 ${destroot}${prefix}/share/doc/${fstar.project}-${fstar.release}
    foreach doc_dir ${fstar.subport.doc_dirs} {
        ln -sf \
            ${fstar.subport.home}/share/${fstar.project}/${doc_dir} \
            ${destroot}${prefix}/share/doc/${fstar.project}-${fstar.release}/${doc_dir}
    }

    # Add a versioned symlink to bin/
    ln -sf \
        ${fstar.subport.home}/bin/${fstar.subport.bin} \
        ${destroot}${prefix}/bin/${fstar.subport.bin}-${fstar.release} \
}
