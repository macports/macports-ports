diff -ru include/kremlin/fstar_bytes.h.orig include/kremlin/fstar_bytes.h
--- include/kremlin/fstar_bytes.h	2019-08-30 16:45:01.000000000 -0600
+++ include/kremlin/fstar_bytes.h	2019-08-30 16:47:20.000000000 -0600
@@ -76,6 +76,13 @@
   return b;
 }
 
+typedef struct K___uint8_t_uint8_t_s
+{
+  uint8_t fst;
+  uint8_t snd;
+}
+K___uint8_t_uint8_t;
+
 static inline FStar_Bytes_bytes FStar_Bytes_twobytes_(K___uint8_t_uint8_t *v) {
   char *data = KRML_HOST_MALLOC(2);
   CHECK(data);
@@ -145,6 +152,13 @@
   return FStar_Bytes_utf8_encode(str);
 }
 
+typedef struct K___FStar_Bytes_bytes_FStar_Bytes_bytes_s
+{
+  FStar_Bytes_bytes fst;
+  FStar_Bytes_bytes snd;
+}
+K___FStar_Bytes_bytes_FStar_Bytes_bytes;
+
 static inline void
 FStar_Bytes_split_(FStar_Bytes_bytes bs, FStar_UInt32_t i, K___FStar_Bytes_bytes_FStar_Bytes_bytes *dst) {
   dst->fst = FStar_Bytes_slice(bs, 0, i);
@@ -371,6 +385,18 @@
   return NULL;
 }
 
+#define FStar_Pervasives_Native_None 0
+#define FStar_Pervasives_Native_Some 1
+
+typedef uint8_t FStar_Pervasives_Native_option__Prims_string_tags;
+
+typedef struct FStar_Pervasives_Native_option__Prims_string_s
+{
+  FStar_Pervasives_Native_option__Prims_string_tags tag;
+  Prims_string v;
+}
+FStar_Pervasives_Native_option__Prims_string;
+
 static inline void
 FStar_Bytes_iutf8_opt_(FStar_Bytes_bytes b, FStar_Pervasives_Native_option__Prims_string *ret) {
   char *str = KRML_HOST_MALLOC(b.length + 1);
diff -ru kremlib/TestLib.fsti.orig kremlib/TestLib.fsti
--- kremlib/TestLib.fsti.orig	2019-08-30 17:29:18.000000000 -0600
+++ kremlib/TestLib.fsti	2019-08-30 17:29:21.000000000 -0600
@@ -43,7 +43,7 @@
       /\ is_eternal_region (frameOf b)
       /\ HyperStack.modifies (Set.singleton (frameOf b)) h0 h1
       /\ HyperStack.modifies_ref (frameOf b) (Set.empty) h0 h1
-      /\ (FStar.HyperStack.(Map.domain h0.h == Map.domain h1.h)))
+      /\ (FStar.HyperStack.(Map.domain (FStar.HyperStack.get_hmap h0) == Map.domain (FStar.HyperStack.get_hmap h1))))
 
 (** Prints: "got error code %d" where %d is the first argument *)
 val perr: FStar.UInt32.t -> Stack unit
--- book/LowStar.fst.orig	2019-08-30 17:41:49.000000000 -0600
+++ book/LowStar.fst	2019-08-30 17:55:20.000000000 -0600
@@ -602,8 +602,8 @@
 /// ``ST.equal_domains`` predicate.
 
 let equal_domains (m0 m1: HS.mem) =
-  m0.HS.tip == m1.HS.tip /\
-  Set.equal (Map.domain m0.HS.h) (Map.domain m1.HS.h) /\
+  (HS.get_tip m0) == (HS.get_tip m1) /\
+  Set.equal (Map.domain (HS.get_hmap m0)) (Map.domain (HS.get_hmap m1)) /\
   ST.same_refs_in_all_regions m0 m1
 
 /// The ``equal_domains`` predicate states that a function in the ``Stack`` effect:
@@ -625,14 +625,14 @@
 
 /// .. note::
 ///
-///    The following examples use the ``[@ fail ]`` F* attribute. Remember that
+///    The following examples use the ``[@ expect_failure ]`` F* attribute. Remember that
 ///    this tutorial is a valid F* file, which we put under continuous
 ///    integration and version control. This attribute merely indicates to F*
 ///    that the failure is intentional.
 ///
 /// Based on the knowledge above, consider the following failing function.
 
-[@ fail ]
+[@ expect_failure ]
 let g (): Stack unit (fun _ -> True) (fun _ _ _ -> True) =
   let b = Buffer.create 0ul 8ul in
   ()
@@ -653,7 +653,7 @@
 ///
 /// We can attempt to fix ``g`` by adding a call to ``push_frame``.
 
-[@ fail ]
+[@ expect_failure ]
 let g2 (): Stack unit (fun _ -> True) (fun _ _ _ -> True) =
   push_frame ();
   let b = Buffer.create 0ul 8ul in
@@ -702,7 +702,7 @@
 let test_st_get (): St unit =
   push_frame ();
   let m = ST.get () in
-  assert (Monotonic.HyperStack.is_stack_region m.HS.tip);
+  assert (Monotonic.HyperStack.is_stack_region (HS.get_tip m));
   pop_frame ()
 
 /// These are the basic building blocks of our memory model. Verifying on top of
@@ -867,7 +867,7 @@
 
 /// Just like in C, one can only free the base pointer, i.e. this is an error:
 
-[@ fail ]
+[@ expect_failure ]
 let test_sub_error (): St unit =
   let b = Buffer.rcreate_mm HS.root 0UL 8ul in
   let b_l = Buffer.sub b 0ul 4ul in // idx = 0; length = 4
--- test/ML16.fst.orig	2019-08-30 17:57:28.000000000 -0600
+++ test/ML16.fst	2019-08-30 17:57:47.000000000 -0600
@@ -20,7 +20,7 @@
 
 let test2 (_: unit):
   StackInline (Buffer.buffer Int32.t)
-  (requires (fun h0 -> is_stack_region h0.tip))
+  (requires (fun h0 -> is_stack_region (FStar.HyperStack.get_tip h0)))
   (ensures (fun h0 b h1 -> live h1 b /\ Buffer.length b = 2))
 =
   let b = Buffer.create 0l 2ul in
--- test/StringLit.fst.orig	2019-08-30 17:58:58.000000000 -0600
+++ test/StringLit.fst	2019-08-30 17:59:36.000000000 -0600
@@ -5,10 +5,10 @@
 open FStar.HyperStack.ST
 
 let test (x:string): Stack string (fun _ -> true) (fun _ _ _ -> true) =
-  FStar.String.strcat "hello " x
+  strcat "hello " x
 
 let cat (x y:string): Stack string (fun _ -> true) (fun _ _ _ -> true) =
-  FStar.String.strcat x y
+  strcat x y
 
 let main () =
   // C strings, modeled as zero-terminated, not relying on GC
--- runtime/WasmSupport.fst.orig	2019-08-30 18:12:21.000000000 -0600
+++ runtime/WasmSupport.fst	2019-08-30 18:13:19.000000000 -0600
@@ -30,6 +30,7 @@
 
 (* TODO: all of these functions are copy-pastes from whatever is written in
  * kremlib.h. They OUGHT TO BE implement in F*! *)
+#set-options "--lax"
 let eq_mask64 (x y: U64.t) =
   let open FStar.UInt64 in
   let x = lognot (logxor x y) in
--- test/Inline.fst.orig	2019-08-30 18:13:52.000000000 -0600
+++ test/Inline.fst	2019-08-30 18:14:16.000000000 -0600
@@ -8,7 +8,7 @@
 module I32 = FStar.Int32
 
 let alloc_and_init (i: Int32.t): StackInline (Buffer.buffer Int32.t)
-  (requires (fun h0 -> FStar.Int.size (I32.v i) 16 /\ is_stack_region h0.tip))
+  (requires (fun h0 -> FStar.Int.size (I32.v i) 16 /\ is_stack_region (FStar.HyperStack.get_tip h0)))
     // JP: why do I have to manually write the hypothesis above?
   (ensures (fun h0 b h1 ->
     let open FStar.Buffer in
--- test/DataTypes.fst.orig	2019-08-30 18:18:21.000000000 -0600
+++ test/DataTypes.fst	2019-08-30 18:18:38.000000000 -0600
@@ -4,10 +4,12 @@
 open FStar.HyperStack.ST
 open FStar.Ghost
 
+noeq
 type t =
   | A: a:UInt32.t -> b:UInt64.t -> t
   | B: c:UInt8.t -> d:UInt8.t -> e:erased UInt8.t -> t
 
+noeq
 type u =
   | C: f:UInt32.t -> g:UInt64.t -> u
   | D: h:t -> i:unit -> u
--- test/Makefile	2019-08-30 22:09:45.000000000 -0600
+++ test/Makefile	2019-08-30 22:42:02.000000000 -0600
@@ -62,8 +62,10 @@
 $(HINTS_DIR):
 	mkdir -p $@
 
+$(CACHE_DIR)/FStar.ModifiesGen.fst.checked: FSTAR+=--z3rlimit_factor 4
+
 $(CACHE_DIR)/%.checked: | .depend $(HINTS_DIR)
-	$(FSTAR) --hint_file $(HINTS_DIR)/$*.hints $<
+	$(FSTAR) --z3cliopt 'timeout=600000' --smtencoding.valid_intro true --smtencoding.valid_elim true --hint_file $(HINTS_DIR)/$*.hints $< && \
 	touch $@
 
 $(OUTPUT_DIR)/%.krml: | .depend
@@ -72,9 +74,9 @@
 	  $(notdir $(subst .checked,,$<))
 	touch $@
 
-$(OUTPUT_DIR)/%.exe: $(OUTPUT_DIR)/FStar_UInt128.krml | $(KRML_BIN)
+$(OUTPUT_DIR)/%.exe: $(ALL_KRML_FILES) | $(KRML_BIN)
 	$(KRML) $(EXTRA) -tmpdir $(subst .exe,.out,$@) -no-prefix $(notdir $*) \
-	  -o $@ $^
+	  -o $@ $(filter %.krml,$^) -bundle $(subst _,.,$*)=WindowsHack,\*
 
 .SECONDEXPANSION:
 %.test: $(OUTPUT_DIR)/$$(notdir $$(subst .,_,$$*)).exe
