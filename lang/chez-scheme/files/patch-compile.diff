From e3d12a3f97841c807418a58b670dc3da6654e167 Mon Sep 17 00:00:00 2001
From: ur4t <46435411+ur4t@users.noreply.github.com>
Date: Mon, 27 Feb 2023 01:43:20 +0800
Subject: [PATCH] Update remaining K&R function declarations to modern style
 (#683)

---
 c/fasl.c    | 3 +--
 c/foreign.c | 2 +-
 c/number.c  | 3 +--
 c/prim5.c   | 3 +--
 c/scheme.c  | 2 +-
 c/segment.c | 2 +-
 c/thread.c  | 2 +-
 7 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/c/fasl.c b/c/fasl.c
index b0f51fa56..765ee9806 100644
--- a/c/fasl.c
+++ b/c/fasl.c
@@ -1553,8 +1553,7 @@ static uptr sparc64_get_literal(void *address) {
   return item;
 }
 
-static U32 adjust_delay_inst(delay_inst, old_call_addr, new_call_addr)
-      U32 delay_inst; U32 *old_call_addr, *new_call_addr; {
+static U32 adjust_delay_inst(U32 delay_inst, U32 *old_call_addr, U32 *new_call_addr) {
   INT offset;
 
   offset = sizeof(U32) * (old_call_addr - new_call_addr);
diff --git a/c/foreign.c b/c/foreign.c
index fbe9a12a2..48a253bc7 100644
--- a/c/foreign.c
+++ b/c/foreign.c
@@ -270,7 +270,7 @@ void S_foreign_entry(void) {
     AC0(tc) = x;
 }
 
-static void *lookup_foreign_entry(s) const char *s; {
+static void *lookup_foreign_entry(const char *s) {
   return ptr_to_addr(lookup(s));
 }
 
diff --git a/c/number.c b/c/number.c
index 105e94cec..61c0cf29d 100644
--- a/c/number.c
+++ b/c/number.c
@@ -778,8 +778,7 @@ static void big_short_trunc(ptr tc, ptr x, bigit s, iptr xl, IBOOL qs, IBOOL rs,
   if (r != (ptr *)NULL) *r = copy_normalize(tc, &k,1,rs);
 }
 
-static void big_trunc(tc, x, y, xl, yl, qs, rs, q, r)
-              ptr tc, x, y; iptr xl, yl; IBOOL qs, rs; ptr *q, *r; {
+static void big_trunc(ptr tc, ptr x, ptr y, iptr xl, iptr yl, IBOOL qs, IBOOL rs, ptr *q, ptr *r) {
   iptr i;
   bigit *p, *xp, *yp;
   iptr m = xl-yl+1;
diff --git a/c/prim5.c b/c/prim5.c
index f552e74da..3f413e488 100644
--- a/c/prim5.c
+++ b/c/prim5.c
@@ -872,8 +872,7 @@ static ptr s_flush_instruction_cache(void) {
     return Svoid;
 }
 
-static ptr s_make_code(flags, free, name, arity_mark, n, info, pinfos)
-                       iptr flags, free, n; ptr name, arity_mark, info, pinfos; {
+static ptr s_make_code(iptr flags, iptr free, ptr name, ptr arity_mark, iptr n, ptr info, ptr pinfos) {
     ptr co;
 
     tc_mutex_acquire()
diff --git a/c/scheme.c b/c/scheme.c
index 04f4c03a2..f4b2e42aa 100644
--- a/c/scheme.c
+++ b/c/scheme.c
@@ -420,7 +420,7 @@ static IBOOL next_path(char *path, const char *name, const char *ext, const char
 static const char *path_last(const char *path);
 static char *get_defaultheapdirs(void);
 
-static const char *path_last(p) const char *p; {
+static const char *path_last(const char *p) {
   const char *s;
 #ifdef WIN32
   char c;
diff --git a/c/segment.c b/c/segment.c
index 24fb3773a..0c7e73bce 100644
--- a/c/segment.c
+++ b/c/segment.c
@@ -325,7 +325,7 @@ iptr S_find_segments(ISPC s, IGEN g, iptr n) {
  * allocates a group of n contiguous fresh segments, returning the
  * segment number of the first segment of the group.
  */
-static seginfo *allocate_segments(nreq) uptr nreq; {
+static seginfo *allocate_segments(uptr nreq) {
   uptr nact, bytes, base; void *addr;
   iptr i;
   chunkinfo *chunk; seginfo *si;
diff --git a/c/thread.c b/c/thread.c
index e836aee56..b4be8e320 100644
--- a/c/thread.c
+++ b/c/thread.c
@@ -259,7 +259,7 @@ ptr S_fork_thread(ptr thunk) {
   return thread;
 }
 
-static s_thread_rv_t start_thread(p) void *p; {
+static s_thread_rv_t start_thread(void *p) {
   ptr tc = (ptr)p; ptr cp;
 
   s_thread_setspecific(S_tc_key, tc);
