# -*- mode: tcl; coding: utf-8; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- # vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0

name            sbcl

# Note to maintainers:
#
# Please bump the revision of math/maxima (and when it exists
# math/maxima-devel) when this port changes.
version         2.2.10
revision        0

categories      lang
license         BSD
maintainers     {easieste @easye} openmaintainer
platforms       darwin
supported_archs x86_64 arm64
description     The Steel Bank Common Lisp system

long_description \
    Steel Bank Common Lisp (SBCL) is a Open Source implementation of ANSI \
    Common Lisp. It provides an interactive environment including an \
    integrated native compiler, interpreter, and debugger. SBCL is quite \
    suitable for the creation of long running system services, as the compiler \
    trades the time for a long initial compilation for blazingly fast loading \
    of its binary runtime fasl representation.


homepage        http://www.sbcl.org
master_sites    sourceforge:project/sbcl/sbcl/${version}:sbcl

use_bzip2       yes

patchfiles \
    patch-contrib-sb-posix-posix-tests.lisp.diff \
    patch-macports-xdg-data-dir.diff \
    patch-sbcl-realtime.diff

distfiles       ${name}-${version}-source${extract.suffix}:sbcl
worksrcdir      ${name}-${version}

checksums       ${name}-${version}-source${extract.suffix} \
    rmd160  2d47809e97b137cba637b25e0bfe2c1aca0683e7 \
    sha256  8cc3c3a8761223adef144a88730b2675083a3b26fa155d70cf91abb935e90833 \
    size    7269005

# Since SBCL is written in lisp, it requires a running lisp binary to
# bootstrap from.
# In theory, support for powerpc can be added by putting in
# an appropriate stanza here pointing at an appropriate binary for the
# architecture.
# In practice, no suitable binaries currently exist, and the port
# maintainer does not have systems on which to test such things.
# However, if someone does come up with a way to support powerpc,
# duplicating the "if" here would be the way to do it.
if {${build_arch} eq "x86_64"} {
    set bootversion 2.2.9
    set conf_prefix x86-64
    master_sites-append sourceforge:project/sbcl/sbcl/${bootversion}:sbcl_amd64
    distfiles-append    ${name}-${bootversion}-x86-64-darwin-binary${extract.suffix}:sbcl_amd64
    checksums-append    ${name}-${bootversion}-x86-64-darwin-binary${extract.suffix} \
        rmd160  3c7656d617269a0dd30f783e305f62b8d0da303f \
        sha256  6f504b9282c83842c0601600f5e0663209b53b133125ec3334ff7a0bd0037ca6 \
        size    10944221
    global host_lisp
    set host_lisp "\"${workpath}/${name}-${bootversion}-x86-64-darwin/src/runtime/sbcl --core ${workpath}/${name}-${bootversion}-x86-64-darwin/output/sbcl.core --disable-debugger --sysinit /dev/null --userinit /dev/null\" "
}
if {${build_arch} eq "arm64"} {
    set bootversion 2.1.2
    set conf_prefix arm64
    master_sites-append sourceforge:project/sbcl/sbcl/${bootversion}:sbcl_arm64
    distfiles-append    ${name}-${bootversion}-arm64-darwin-binary${extract.suffix}:sbcl_arm64
    checksums-append    ${name}-${bootversion}-arm64-darwin-binary${extract.suffix} \
        rmd160  ce5856a0e1f0040e95c9d79ef0a6199a0f932ab3 \
        sha256  1f400b8a05dc588ca9740f9f4dfee3111b1cc1b6fb40801f728c42b460e1d115 \
        size    9204605
    global host_lisp
    set host_lisp "\"${workpath}/${name}-${bootversion}-arm64-darwin/src/runtime/sbcl --core ${workpath}/${name}-${bootversion}-arm64-darwin/output/sbcl.core --disable-debugger --sysinit /dev/null --userinit /dev/null\" "
}

post-patch {
    reinplace "s|@@PREFIX@@|${prefix}|g" \
        ${worksrcpath}/contrib/asdf/uiop.lisp

    reinplace "s|/usr/local/lib/${name}|${prefix}/lib/${name}|g" \
        ${worksrcpath}/doc/sbcl.1
    # <https://trac.macports.org/attachment/ticket/51733/>
    # This change is required as the Xcode 8 linker now defaults to
    # PIE binaries regardless of the deployment target so an explicit
    # '-Wl,-no_pie' is now required. The sbcl program is incompatible
    # with ASLR and the previous upstream hack of setting the
    # deployment target to less than 10.7 doesn't prevent the PIE
    # executables from being created against the Xcode 8
    # linker. Tested on 10.11 with Xcode 8 beta.
    if {[vercmp "8.0" ${xcodeversion}] >= 0} {
        reinplace "s|0x100000|0x100000 -Wl,-no_pie|g" ${worksrcpath}/src/runtime/Config.x86-64-darwin
    }
    if {[variant_isset fancy]} {
        reinplace -W ${worksrcpath} "s|@@PREFIX@@|${prefix}|g" \
            src/runtime/Config.${conf_prefix}-darwin
    }
}

use_configure   no

build {
    system -W ${worksrcpath} "SBCL_MACOSX_VERSION_MIN=${macosx_deployment_target} CC=${configure.cc} CXX=${configure.cxx} CPP=${configure.cpp} sh ./make.sh ${make_sh_options} --prefix=${prefix} --xc-host=${host_lisp}"
}

post-build {
    if {[variant_isset html] || [variant_isset pdf]} {
        system -W ${worksrcpath}/doc "INSTALL_ROOT=${destroot}${prefix} sh ${worksrcpath}/doc/make-doc.sh"
    }
}

if {![variant_isset threads]} {
    default_variants +fancy
}

variant html conflicts pdf description {Installs documentation in HTML and Info formats.} {
    patchfiles-append patch-make-doc.diff
    depends_build-append bin:texi2dvi:texinfo
    depends_build-append bin:makeinfo:texinfo
}

variant pdf conflicts html description {Installs documentation in PDF, HTML and Info formats.  Involves the installation of a TexLive dependency chain, which can dramatically slow down the installation of the SBCL port.} {
    depends_build-append bin:dvips:texlive
    depends_build-append bin:texi2dvi:texinfo
    depends_build-append bin:makeinfo:texinfo
}

global make_sh_options
set make_sh_options ""

variant threads description {Enable multi-threaded runtime using the Mach pthreads interface.} {
    set make_sh_options --with-sb-thread
}

variant fancy conflicts threads description {Configure SBCL compilation with all available compatible options (including threading).} {
    set make_sh_options --fancy
    # As of version 2.2.6, zstd is used for core compression.
    depends_lib-append  port:zstd
    patchfiles-append   patch-config-darwin-${build_arch}.diff
}

test.run        yes
test.dir        ${worksrcpath}/tests
test.cmd        CC=${configure.cc} CXX=${configure.cxx} CPP=${configure.cpp} sh
test.target     run-tests.sh

destroot {
    system -W ${worksrcpath} "INSTALL_ROOT=${destroot}${prefix} sh ${worksrcpath}/install.sh"
}

livecheck.url   http://sourceforge.net/api/file/index/project-id/1373/rss?path=%2F${name}
livecheck.regex guid.*${name}-(\\d+(\\.\\d+)+)-source
