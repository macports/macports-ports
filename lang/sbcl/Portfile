# -*- mode: tcl; coding: utf-8; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- # vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0

PortGroup       legacysupport 1.1
PortGroup       compiler_blacklist_versions 1.0

name            sbcl

# Note to maintainers:
#
# Please bump the revision of math/maxima (and when it exists
# math/maxima-devel) and fricas when this port changes.
version         2.3.5
revision        2

categories      lang
license         BSD
maintainers     {easieste @easye} {@catap korins.ky:kirill} openmaintainer

description     The Steel Bank Common Lisp system

long_description \
    Steel Bank Common Lisp (SBCL) is a Open Source implementation of ANSI \
    Common Lisp. It provides an interactive environment including an \
    integrated native compiler, interpreter, and debugger. SBCL is quite \
    suitable for the creation of long running system services, as the compiler \
    trades the time for a long initial compilation for blazingly fast loading \
    of its binary runtime fasl representation.


homepage        http://www.sbcl.org
master_sites    sourceforge

use_bzip2       yes

# See: https://github.com/catap/sbcl/tree/macports
patchfiles      0001-fix-building-when-root-directory-contain-non-ASCII-c.patch \
                0002-add-MacPorts-XDG_DATA_DIRS.patch

checksums       rmd160  95a02d7a489137602ebba333b83bfc1d9eb794be \
                sha256  89c90720cf9d05dbcd90d690e381a2514c0f1807159e0d7222220c5a8c2d5186 \
                size    7474392

# NOTE: Historically, the last version to support x86/Darwin and ppc/Darwin was
# 2.2.5 and 2.2.2. Here, we have backported it to nearly the latest version. On
# such platforms, we have a different epoch and versioning.
#
# Please do not update it without testing.
if {${os.platform} eq "darwin" && ${configure.build_arch} in [list ppc i386]} {
    version     2.3.5
    revision    1
    epoch       [ expr ${epoch} + 1 ]

    checksums   rmd160  95a02d7a489137602ebba333b83bfc1d9eb794be \
                sha256  89c90720cf9d05dbcd90d690e381a2514c0f1807159e0d7222220c5a8c2d5186 \
                size    7474392

    # See: https://github.com/catap/sbcl/tree/macports-legacy
    patchfiles-append \
                1001-x86-Darwin-Revert-x86-darwin-files.patch \
                1002-x86-Darwin-Revert-Perform-darwin-related-housekeepin.patch \
                1003-x86-Darwin-Remove-mach-exception-handler.patch \
                1004-Darwin-use-libc-nanosleep-before-10.6-and-on-PPC.patch \
                1005-Darwin-recovery-support-non-dispatch-semaphores.patch \
                1006-x86-Darwin-mask-out-O_LARGEFILE-in-fcntl.1-test.patch \
                1007-x86-Darwin-revert-OS_THREAD_STACK.patch \
                1008-x86-Darwin-fix-build-by-old-preprocessor.patch \
                1009-x86-Darwin-disable-failing-stat-mode-tests.patch \
                1010-x86-Darwin-add-missed-OS_CONTEXT_PC.patch \
                1011-x86-Darwin-fix-syntax-typos.patch \
                1012-ppc-Darwin-Revert-Delete-support-for-and-darwin-ppc.patch \
                1013-ppc-Darwin-Config.ppc-follow-up-changes.patch \
                1014-ppc-Darwin-ppc-assem.S-fix-wrong-assembler-code-chun.patch \
                1015-ppc-Darwin-Misc-fixes-for-PPC.patch \
                1016-ppc-Darwin-ppc-assem-a-minor-fix-to-assembler-syntax.patch \
                1017-Fix-building-by-lisp-without-endian-features.patch \
                1018-Darwin-implement-os_tsd_get_direct-for-macOS-before-.patch \
                1019-ppc-Darwin-fix-threads-support.patch
}

distfiles       ${name}-${version}-source${extract.suffix}
worksrcdir      ${name}-${version}

depends_build-append \
                port:sbcl-bootstrap
depends_skip_archcheck-append \
                sbcl-bootstrap

# clock_gettime
legacysupport.newest_darwin_requires_legacy 15
# NOTE: check that it can be removed
patchfiles-append \
                0003-Use-CLOCK_MONOTONIC-when-CLOCK_PROCESS_CPUTIME_ID-un.patch

# Uses: __attribute__((aligned(8)))
# See: https://bugs.launchpad.net/sbcl/+bug/1991485
compiler.blacklist-append \
                *gcc-3.* *gcc-4.*

post-patch {
    reinplace "s|@@PREFIX@@|${prefix}|g" \
                ${worksrcpath}/contrib/asdf/uiop.lisp

    reinplace "s|/usr/local/lib/${name}|${prefix}/lib/${name}|g" \
                ${worksrcpath}/doc/sbcl.1

    # This is the way to bypass path to MacPorts includes into sbcl.mk
    set config_path ${worksrcpath}/src/runtime
    foreach f [glob -tails -directory ${config_path} Config.*-darwin] {
        ui_debug "Adding MacPorts paths into ${f}"
        set config [open ${config_path}/$f a]
        puts ${config} "CFLAGS += -I${prefix}/include [legacysupport::get_cpp_flags]"
        puts ${config} "DEPEND_FLAGS += -I${prefix}/include [legacysupport::get_cpp_flags]"
        puts ${config} "OS_LIBS += -L${prefix}/lib [legacysupport::get_library_link_flags]"
        close ${config}
    }
}

use_configure   no

pre-build {
    # disable all warning
    set sbclrc [open $env(HOME)/.sbclrc w+]
    puts ${sbclrc} "(declaim (sb-ext:muffle-conditions cl:warning))"
    close ${sbclrc}
}

build.env-append \
                CC=${configure.cc} \
                CXX=${configure.cxx} \
                CPP=${configure.cpp} \
                SBCL_MACOSX_VERSION_MIN=${macosx_deployment_target}

use_parallel_build  no

build.cmd       sh
build.target    make.sh
build.args-append \
                --prefix=${prefix} \
                --xc-host=${prefix}/libexec/sbcl-bootstrap/bin/sbcl

if {${configure.build_arch} eq "i386"} {
    build.args-append \
                --arch=x86
} elseif {${configure.build_arch} eq "x86_64"} {
    build.args-append \
                --arch=x86-64
} else {
    build.args-append \
                --arch=${configure.build_arch}
}

platform darwin arm 20 {
    patchfiles-append \
                0004-arm-Darwin-disable-futex-on-BigSur.patch
}

# SBCL enables SIMD only when host CPU supports AVX2 which may not be true for buildbot.
# To make build consistent, let disable it by default and enable via variant.
# See: https://trac.macports.org/ticket/67437
build.args-append \
                --without-sb-simd
variant simd description {Enable build of SIMD extention, that fails on CPU without AVX2 support.} {
    build.args-replace --without-sb-simd --with-sb-simd
}

post-build {
    if {[variant_isset html] || [variant_isset pdf]} {
        system -W ${worksrcpath}/doc "INSTALL_ROOT=${destroot}${prefix} sh ${worksrcpath}/doc/make-doc.sh"
    }
}

if {![variant_isset threads]} {
    default_variants +fancy
}

variant html conflicts pdf description {Installs documentation in HTML and Info formats.} {
    depends_build-append bin:texi2dvi:texinfo
    depends_build-append bin:makeinfo:texinfo
    post-patch {
        reinplace -W ${worksrcpath} \
            {s|$GNUMAKE html pdf info|$GNUMAKE html info|g} \
            doc/make-doc.sh
    }
}

variant pdf conflicts html description {Installs documentation in PDF, HTML and Info formats.  Involves the installation of a TexLive dependency chain, which can dramatically slow down the installation of the SBCL port.} {
    depends_build-append bin:dvips:texlive
    depends_build-append bin:texi2dvi:texinfo
    depends_build-append bin:makeinfo:texinfo
}

variant threads description {Enable multi-threaded runtime using the Mach pthreads interface.} {
    build.args-append   --with-sb-thread
}

variant fancy conflicts threads description {Configure SBCL compilation with all available compatible options (including threading).} {
    build.args-append   --fancy
    # As of version 2.2.6, zstd is used for core compression.
    depends_lib-append  port:zstd
}

test.run        yes
test.dir        ${worksrcpath}/tests
test.env        CC=${configure.cc} \
                CXX=${configure.cxx} \
                CPP=${configure.cpp}
test.target     run-tests.sh

destroot.env    INSTALL_ROOT=${destroot}${prefix}
destroot.target install.sh
destroot.destdir

livecheck.url   http://sourceforge.net/api/file/index/project-id/1373/rss?path=%2F${name}
livecheck.regex guid.*${name}-(\\d+(\\.\\d+)+)-source
