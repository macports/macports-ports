From 075983a0dc8a5345c7a97fe5e9606474787a4c93 Mon Sep 17 00:00:00 2001
From: "Kirill A. Korinsky" <kirill@korins.ky>
Date: Tue, 6 Jun 2023 10:28:45 +0200
Subject: [PATCH] Darwin: recovery support non dispatch semaphores

See: https://github.com/sbcl/sbcl/commit/160448fd0485daf69e81f9fe9eeb8515ed01db49
---
 src/runtime/darwin-os.c | 56 ++++++++++++++++++++++++++++++++++++++++-
 src/runtime/darwin-os.h |  6 ++++-
 src/runtime/os-common.c |  2 +-
 src/runtime/os.h        |  2 +-
 4 files changed, 62 insertions(+), 4 deletions(-)

diff --git src/runtime/darwin-os.c src/runtime/darwin-os.c
index c3be53e05..d5d4e1d8a 100644
--- src/runtime/darwin-os.c
+++ src/runtime/darwin-os.c
@@ -77,7 +77,7 @@ void darwin_init(void)
 }
 
 
-#ifdef LISP_FEATURE_SB_THREAD
+#if defined LISP_FEATURE_SB_THREAD && defined USE_DARWIN_GCD_SEMAPHORES
 
 inline void
 os_sem_init(os_sem_t *sem, unsigned int value)
@@ -163,6 +163,60 @@ futex_wake(int *lock_word, int n)
     return 0;
 }
 #endif
+
+#elif defined LISP_FEATURE_SB_THREAD && defined CANNOT_USE_POSIX_SEM_T
+
+inline void
+os_sem_init(os_sem_t *sem, unsigned int value)
+{
+    if (KERN_SUCCESS!=semaphore_create(mach_task_self(), sem, SYNC_POLICY_FIFO, (int)value))
+        lose("os_sem_init(%p): %s", sem, strerror(errno));
+}
+
+inline void
+os_sem_wait(os_sem_t *sem, char *what)
+{
+    kern_return_t ret;
+  restart:
+    FSHOW((stderr, "%s: os_sem_wait(%p)\n", what, sem));
+    ret = semaphore_wait(*sem);
+    FSHOW((stderr, "%s: os_sem_wait(%p) => %s\n", what, sem,
+           KERN_SUCCESS==ret ? "ok" : strerror(errno)));
+    switch (ret) {
+    case KERN_SUCCESS:
+        return;
+        /* It is unclear just when we can get this, but a sufficiently
+         * long wait seems to do that, at least sometimes.
+         *
+         * However, a wait that long is definitely abnormal for the
+         * GC, so we complain before retrying.
+         */
+    case KERN_OPERATION_TIMED_OUT:
+        fprintf(stderr, "%s: os_sem_wait(%p): %s", what, sem, strerror(errno));
+        /* This is analogous to POSIX EINTR. */
+    case KERN_ABORTED:
+        goto restart;
+    default:
+        lose("%s: os_sem_wait(%p): %lu, %s",
+             what, sem, (long unsigned)ret, strerror(errno));
+    }
+}
+
+void
+os_sem_post(os_sem_t *sem, char *what)
+{
+    if (KERN_SUCCESS!=semaphore_signal(*sem))
+        lose("%s: os_sem_post(%p): %s", what, sem, strerror(errno));
+    FSHOW((stderr, "%s: os_sem_post(%p) ok\n", what, sem));
+}
+
+void
+os_sem_destroy(os_sem_t *sem)
+{
+    if (-1==semaphore_destroy(mach_task_self(), *sem))
+        lose("os_sem_destroy(%p): %s", sem, strerror(errno));
+}
+
 #endif
 
 #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060
diff --git src/runtime/darwin-os.h src/runtime/darwin-os.h
index f13669fb0..e4257e0ee 100644
--- src/runtime/darwin-os.h
+++ src/runtime/darwin-os.h
@@ -36,10 +36,14 @@ typedef ucontext_t os_context_t;
 
 void darwin_init(void);
 
-#ifdef LISP_FEATURE_SB_THREAD
+#if defined(LISP_FEATURE_SB_THREAD) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060) && !defined(__ppc__)
 #define USE_DARWIN_GCD_SEMAPHORES
 #include <dispatch/dispatch.h>
 typedef dispatch_semaphore_t os_sem_t;
+#elif defined LISP_FEATURE_SB_THREAD
+#define CANNOT_USE_POSIX_SEM_T
+#include <mach/semaphore.h>
+typedef semaphore_t os_sem_t;
 #endif
 
 #endif /* _DARWIN_OS_H */
diff --git src/runtime/os-common.c src/runtime/os-common.c
index afc3ede69..36fe6406b 100644
--- src/runtime/os-common.c
+++ src/runtime/os-common.c
@@ -117,7 +117,7 @@ os_get_errno(void)
     return errno;
 }
 
-#if defined LISP_FEATURE_SB_THREAD && defined LISP_FEATURE_UNIX && !defined USE_DARWIN_GCD_SEMAPHORES
+#if defined LISP_FEATURE_SB_THREAD && defined LISP_FEATURE_UNIX && !defined USE_DARWIN_GCD_SEMAPHORES && !defined CANNOT_USE_POSIX_SEM_T
 void
 os_sem_init(os_sem_t *sem, unsigned int value)
 {
diff --git src/runtime/os.h src/runtime/os.h
index e29222d11..649f90256 100644
--- src/runtime/os.h
+++ src/runtime/os.h
@@ -221,7 +221,7 @@ extern char *os_get_runtime_executable_path();
 #define OS_VM_SIZE_FMTX PRIxPTR
 
 #if defined LISP_FEATURE_SB_THREAD && defined LISP_FEATURE_UNIX
-#  ifndef USE_DARWIN_GCD_SEMAPHORES
+#  if !defined USE_DARWIN_GCD_SEMAPHORES && !defined CANNOT_USE_POSIX_SEM_T
 #    include <semaphore.h>
      typedef sem_t os_sem_t;
 #  endif
-- 
2.41.0

