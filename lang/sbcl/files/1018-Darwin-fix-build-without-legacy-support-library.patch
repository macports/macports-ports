From 833b9d33bcf33b1ef4575ebc50448757feae7d6b Mon Sep 17 00:00:00 2001
From: "Kirill A. Korinsky" <kirill@korins.ky>
Date: Sun, 30 Jul 2023 11:47:32 +0200
Subject: [PATCH] Darwin: fix build without legacy support library

SBCL can be build on macOS 10.5 by avoiding two things:
`pthread_setname_np` which is useless, and `clock_gettime` which
requires some works to be emulated on the right way.
---
 make-config.sh                   |  5 ++++-
 src/code/sunos-os.lisp           | 17 -----------------
 src/code/unix.lisp               | 26 ++++++++++++++++++++++++--
 src/cold/exports.lisp            |  4 ++++
 src/runtime/runtime.c            |  7 +++++++
 src/runtime/thread.c             |  2 +-
 tests/brothertree.impure.lisp    |  4 ++--
 tools-for-build/grovel-headers.c |  2 ++
 8 files changed, 44 insertions(+), 23 deletions(-)

diff --git make-config.sh make-config.sh
index 0d177b93a..6bf2c7ed9 100755
--- make-config.sh
+++ make-config.sh
@@ -632,7 +632,10 @@ case "$sbcl_os" in
         darwin_version=`uname -r`
         darwin_version_major=${DARWIN_VERSION_MAJOR:-${darwin_version%%.*}}
         if (( 10 > $darwin_version_major )) || [ $sbcl_arch = "ppc" ]; then
-            printf ' :use-darwin-posix-semaphores' >> $ltf
+            printf ' :use-darwin-posix-semaphores :avoid-pthread-setname-np' >> $ltf
+        fi
+        if (( 15 > $darwin_version_major )); then
+            printf ' :avoid-clock-gettime' >> $ltf
         fi
         if [ $sbcl_arch = "x86-64" ]; then
             if (( 8 < $darwin_version_major )); then
diff --git src/code/sunos-os.lisp src/code/sunos-os.lisp
index bc096c0e6..96e0b4044 100644
--- src/code/sunos-os.lisp
+++ src/code/sunos-os.lisp
@@ -32,20 +32,3 @@
 ;;; support for CL:MACHINE-VERSION defined OAOO elsewhere
 (defun get-machine-version ()
   nil)
-
-(in-package "SB-UNIX")
-
-;; SunOS defines CLOCK_PROCESS_CPUTIME_ID but you get EINVAL if you try to use it.
-(defun system-internal-run-time ()
-  (multiple-value-bind (utime-sec utime-usec stime-sec stime-usec)
-      (with-alien ((usage (struct sb-unix::rusage)))
-        (syscall* ("sb_getrusage" int (* (struct sb-unix::rusage)))
-                  (values (slot (slot usage 'sb-unix::ru-utime) 'sb-unix::tv-sec)
-                          (slot (slot usage 'sb-unix::ru-utime) 'sb-unix::tv-usec)
-                          (slot (slot usage 'sb-unix::ru-stime) 'sb-unix::tv-sec)
-                          (slot (slot usage 'sb-unix::ru-stime) 'sb-unix::tv-usec))
-                  rusage_self (addr usage)))
-    (+ (* (+ utime-sec stime-sec) internal-time-units-per-second)
-       (floor (+ utime-usec stime-usec
-                 (floor microseconds-per-internal-time-unit 2))
-              microseconds-per-internal-time-unit))))
diff --git src/code/unix.lisp src/code/unix.lisp
index 49777b896..3bbcd213f 100644
--- src/code/unix.lisp
+++ src/code/unix.lisp
@@ -987,7 +987,9 @@ avoiding atexit(3) hooks, etc. Otherwise exit(2) is called."
 #-win32
 (progn
 
+  #-avoid-clock-gettime
   (declaim (inline clock-gettime))
+  #-avoid-clock-gettime
   (defun clock-gettime (clockid)
     (declare (type (signed-byte 32) clockid))
     (with-alien ((ts (struct timespec)))
@@ -1022,7 +1024,10 @@ the UNIX epoch (January 1st 1970.)"
           ;; By scaling down we end up with far less resolution than clock-realtime
           ;; offers, and COARSE is about twice as fast, so use that, but only for linux.
           ;; BSD has something similar.
+          #-avoid-clock-gettime
           (clock-gettime #+linux clock-monotonic-coarse #-linux clock-monotonic)
+          #+avoid-clock-gettime
+          (multiple-value-bind (c-sec c-usec) (get-time-of-day) (values c-sec (* c-usec 1000)))
 
         #+64-bit ;; I know that my math is valid for 64-bit.
         (declare (optimize (sb-c::type-check 0)))
@@ -1071,12 +1076,29 @@ the UNIX epoch (January 1st 1970.)"
                   current)))))))
 
   (declaim (inline system-internal-run-time))
-  #-sunos ; defined in sunos-os
+
+  ;; SunOS defines CLOCK_PROCESS_CPUTIME_ID but you get EINVAL if you try to use it,
+  ;; also use the same trick when clock_gettime should be avoided.
+  #-(or sunos avoid-clock-gettime)
   (defun system-internal-run-time ()
     (multiple-value-bind (sec nsec) (clock-gettime clock-process-cputime-id)
       (+ (* sec internal-time-units-per-second)
          (floor (+ nsec (floor nanoseconds-per-internal-time-unit 2))
-                nanoseconds-per-internal-time-unit)))))
+                nanoseconds-per-internal-time-unit))))
+  #+(or sunos avoid-clock-gettime)
+  (defun system-internal-run-time ()
+    (multiple-value-bind (utime-sec utime-usec stime-sec stime-usec)
+        (with-alien ((usage (struct sb-unix::rusage)))
+          (syscall* ("sb_getrusage" int (* (struct sb-unix::rusage)))
+                    (values (slot (slot usage 'sb-unix::ru-utime) 'sb-unix::tv-sec)
+                            (slot (slot usage 'sb-unix::ru-utime) 'sb-unix::tv-usec)
+                            (slot (slot usage 'sb-unix::ru-stime) 'sb-unix::tv-sec)
+                            (slot (slot usage 'sb-unix::ru-stime) 'sb-unix::tv-usec))
+                    rusage_self (addr usage)))
+      (+ (* (+ utime-sec stime-sec) internal-time-units-per-second)
+         (floor (+ utime-usec stime-usec
+                   (floor microseconds-per-internal-time-unit 2))
+                microseconds-per-internal-time-unit)))))
 
 ;;; FIXME, KLUDGE: GET-TIME-OF-DAY used to be UNIX-GETTIMEOFDAY, and had a
 ;;; primary return value indicating sucess, and also returned timezone
diff --git src/cold/exports.lisp src/cold/exports.lisp
index efc5e9c70..906fb5710 100644
--- src/cold/exports.lisp
+++ src/cold/exports.lisp
@@ -86,6 +86,7 @@ interface stability.")
    "ST-RDEV" "ST-SIZE" "ST-UID" "STAT" "TIME-T"
    "TIMEVAL" "TIMEZONE"
    "TIOCGPGRP"
+   #-avoid-clock-gettime
    "CLOCK-GETTIME" "TV-SEC" "TV-USEC"
    "TZ-DSTTIME" "TZ-MINUTESWEST" "UID-T" "UNIX-CLOSE"
    "UNIX-CLOSEDIR" "UNIX-DIRENT-NAME" "UNIX-DUP"
@@ -104,8 +105,11 @@ interface stability.")
    "W_OK" "X_OK"
    "SC-NPROCESSORS-ONLN"
    "VOID-SYSCALL"
+   #-avoid-clock-gettime
    "CLOCK-THREAD-CPUTIME-ID"
+   #-avoid-clock-gettime
    "CLOCK-PROCESS-CPUTIME-ID"
+   #-avoid-clock-gettime
    "CLOCK-REALTIME"
 
    ;; signals
diff --git src/runtime/runtime.c src/runtime/runtime.c
index 83cc284ee..e462a5aef 100644
--- src/runtime/runtime.c
+++ src/runtime/runtime.c
@@ -613,6 +613,12 @@ initialize_lisp(int argc, char *argv[], char *envp[])
     struct lisp_exception_frame exception_frame;
 #endif
 #ifdef LISP_FEATURE_UNIX
+#ifdef LISP_FEATURE_AVOID_CLOCK_GETTIME
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+    lisp_init_time.tv_sec = tv.tv_sec;
+    lisp_init_time.tv_nsec = tv.tv_usec * 1000;
+#else
     clock_gettime(
 #ifdef LISP_FEATURE_LINUX
         CLOCK_MONOTONIC_COARSE
@@ -620,6 +626,7 @@ initialize_lisp(int argc, char *argv[], char *envp[])
         CLOCK_MONOTONIC
 #endif
         , &lisp_init_time);
+#endif
 #endif
 
     /* the name of the core file we're to execute. Note that this is
diff --git src/runtime/thread.c src/runtime/thread.c
index d262656a8..f99022600 100644
--- src/runtime/thread.c
+++ src/runtime/thread.c
@@ -608,7 +608,7 @@ void sb_set_os_thread_name(char* name)
      * but my testing showed that 12.1 seems to accept any length */
     pthread_set_name_np(pthread_self(), name);
 #endif
-#ifdef LISP_FEATURE_DARWIN
+#if defined LISP_FEATURE_DARWIN && !defined LISP_FEATURE_AVOID_PTHREAD_SETNAME_NP
     if (vector_len(v) < 64) pthread_setname_np(name);
 #endif
 }
diff --git tests/brothertree.impure.lisp tests/brothertree.impure.lisp
index e163b7b13..13946a908 100644
--- tests/brothertree.impure.lisp
+++ tests/brothertree.impure.lisp
@@ -158,9 +158,9 @@
         (assert (zerop n-unary-nodes)))))
 
 (defmacro microseconds-elapsed (form)
-  #+win32
+  #+(or win32 avoid-clock-gettime)
   `(values 0 ,form)
-  #-win32
+  #-(or win32 avoid-clock-gettime)
   `(multiple-value-bind (sec0 nsec0) (sb-unix:clock-gettime sb-unix:clock-realtime)
      (let ((result ,form))
        (multiple-value-bind (sec1 nsec1) (sb-unix:clock-gettime sb-unix:clock-realtime)
diff --git tools-for-build/grovel-headers.c tools-for-build/grovel-headers.c
index 472a5bc88..bacc90dc7 100644
--- tools-for-build/grovel-headers.c
+++ tools-for-build/grovel-headers.c
@@ -351,6 +351,7 @@ main(int argc, char __attribute__((unused)) *argv[])
 #endif // !WIN32
     printf("\n");
 
+#if !defined(LISP_FEATURE_AVOID_CLOCK_GETTIME)
 #ifdef LISP_FEATURE_UNIX
     DEFCONSTANT("clock-realtime", CLOCK_REALTIME);
     DEFCONSTANT("clock-monotonic", CLOCK_MONOTONIC);
@@ -373,6 +374,7 @@ main(int argc, char __attribute__((unused)) *argv[])
     defconstant("clock-boottime-alarn", CLOCK_BOOTTIME_ALARM);
 #endif
     DEFCONSTANT("clock-thread-cputime-id", CLOCK_THREAD_CPUTIME_ID);
+#endif
 #endif
     printf(";;; structures\n");
     DEFSTRUCT(timeval, struct timeval,
-- 
2.42.0

