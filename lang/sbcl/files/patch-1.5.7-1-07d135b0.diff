diff --git a/src/runtime/bsd-os.c b/src/runtime/bsd-os.c
index 03dd40840..317124f23 100644
--- src/runtime/bsd-os.c
+++ src/runtime/bsd-os.c
@@ -125,8 +125,10 @@ os_context_sigmask_addr(os_context_t *context)
 }
 
 os_vm_address_t
-os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
+os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
+    int protection = attributes & IS_GUARD_PAGE ? OS_VM_PROT_NONE : OS_VM_PROT_ALL;
+    attributes &= ~IS_GUARD_PAGE;
     int flags = 0;
 
     /* FIXME: use of MAP_FIXED here looks decidedly wrong! (and not what we do
@@ -144,7 +146,7 @@ os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
      * OpenBSD says:
        Except for MAP_FIXED mappings, the system will never replace existing mappings. */
 
-    switch (movable) {
+    switch (attributes) {
     case MOVABLE_LOW:
 #ifdef MAP_32BIT
         flags = MAP_32BIT;
@@ -180,7 +182,7 @@ os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
             os_vm_address_t resaddr;
             os_vm_size_t curlen = MIN(max_allocation_size, len);
 
-            resaddr = mmap(curaddr, curlen, OS_VM_PROT_ALL, flags, -1, 0);
+            resaddr = mmap(curaddr, curlen, protection, flags, -1, 0);
 
             if (resaddr == (os_vm_address_t) - 1) {
                 perror("mmap");
@@ -199,7 +201,7 @@ os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
     } else
 #endif
     {
-        addr = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
+        addr = mmap(addr, len, protection, flags, -1, 0);
     }
 
     /* FIXME: if MAP_FIXED and MOVABLE_LOW, probe for other possible addresses,
diff --git a/src/runtime/haiku-os.c b/src/runtime/haiku-os.c
index 14f222498..72c8150b8 100644
--- src/runtime/haiku-os.c
+++ src/runtime/haiku-os.c
@@ -11,6 +11,8 @@ size_t os_vm_page_size;
 os_vm_address_t
 os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
+    int protection = attributes & IS_GUARD_PAGE ? OS_VM_PROT_NONE : OS_VM_PROT_ALL;
+    attributes &= ~IS_GUARD_PAGE;
     // There's no MAP_NORESERVE flag? How do we inform the OS not to commit
     // the whole range to swap?
     int flags =  MAP_PRIVATE | MAP_ANONYMOUS;
@@ -20,7 +22,7 @@ os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
     if (attributes & ALLOCATE_LOW)
         flags |= MAP_32BIT;
 #endif
-    actual = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
+    actual = mmap(addr, len, protection, flags, -1, 0);
     if (actual == MAP_FAILED) {
         perror("mmap");
         return 0;               /* caller should check this */
diff --git a/src/runtime/hpux-os.c b/src/runtime/hpux-os.c
index aaa59658e..ed420d64a 100644
--- src/runtime/hpux-os.c
+++ src/runtime/hpux-os.c
@@ -34,13 +34,15 @@ os_init(char *argv[], char *envp[])
 }
 
 os_vm_address_t
-os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
+os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
+    int protection = attributes & IS_GUARD_PAGE ? OS_VM_PROT_NONE : OS_VM_PROT_ALL;
+    attributes &= ~IS_GUARD_PAGE;
     os_vm_address_t actual;
     int flags = MAP_PRIVATE | MAP_ANONYMOUS;
     if (addr) flags |= MAP_FIXED;
 
-    actual = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
+    actual = mmap(addr, len, protection, flags, -1, 0);
 
     if (actual == MAP_FAILED) {
         perror("mmap");
diff --git a/src/runtime/linux-mman.c b/src/runtime/linux-mman.c
index ddb51731c..b8e3ec807 100644
--- src/runtime/linux-mman.c
+++ src/runtime/linux-mman.c
@@ -27,6 +27,8 @@ os_set_cheneygc_spaces(uword_t space0_start, uword_t space1_start)
 os_vm_address_t
 os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
+    int protection = attributes & IS_GUARD_PAGE ? OS_VM_PROT_NONE : OS_VM_PROT_ALL;
+    attributes &= ~IS_GUARD_PAGE;
     int flags =  MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE;
     os_vm_address_t actual;
 
@@ -39,7 +41,7 @@ os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
     if (attributes & ALLOCATE_LOW)
         flags |= MAP_32BIT;
 #endif
-    actual = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
+    actual = mmap(addr, len, protection, flags, -1, 0);
     if (actual == MAP_FAILED) {
         perror("mmap");
         return 0;               /* caller should check this */
diff --git a/src/runtime/os.h b/src/runtime/os.h
index 64bfbcc9d..85c334f8c 100644
--- src/runtime/os.h
+++ src/runtime/os.h
@@ -104,6 +104,7 @@ extern void os_zero(os_vm_address_t addr, os_vm_size_t length);
 #define ALLOCATE_LOW     2
 #define IS_THREAD_STRUCT 4
 #define MOVABLE_LOW      (MOVABLE|ALLOCATE_LOW)
+#define IS_GUARD_PAGE    8
 extern os_vm_address_t os_validate(int movable,
                                    os_vm_address_t addr,
                                    os_vm_size_t len);
diff --git a/src/runtime/sunos-os.c b/src/runtime/sunos-os.c
index 412b09650..dc3b1a756 100644
--- src/runtime/sunos-os.c
+++ src/runtime/sunos-os.c
@@ -47,13 +47,15 @@ os_init(char *argv[], char *envp[])
     os_vm_page_size = BACKEND_PAGE_BYTES;
 }
 
-os_vm_address_t os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
+os_vm_address_t os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
+    int protection = attributes & IS_GUARD_PAGE ? OS_VM_PROT_NONE : OS_VM_PROT_ALL;
+    attributes &= ~IS_GUARD_PAGE;
     int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANON;
     if (addr)
         flags |= MAP_FIXED;
 
-    addr = mmap(addr, len, OS_VM_PROT_ALL, flags, -1, 0);
+    addr = mmap(addr, len, protection, flags, -1, 0);
 
     if (addr == MAP_FAILED) {
         perror("mmap");
diff --git a/src/runtime/validate.c b/src/runtime/validate.c
index 5fc00b5cc..725c2333a 100644
--- src/runtime/validate.c
+++ src/runtime/validate.c
@@ -68,9 +68,21 @@ os_vm_address_t undefined_alien_address = 0;
 
 static void
 ensure_undefined_alien(void) {
-    os_vm_address_t start = os_allocate(os_vm_page_size);
+    os_vm_address_t start = os_validate(MOVABLE|IS_GUARD_PAGE, NULL,
+#ifndef LISP_FEATURE_WIN32
+    /* We can/should disregard our 'os_vm_page_size' constant which tends to be
+     * larger than the granularity that the OS will allow you to manipulate via
+     * mprotect(). e.g. on x86-64-linux we use a page size of 32K but in reality
+     * the protection granularity is 4K.
+     * Moreover, since the memory protection is not changed after allocation,
+     * the granuarity that mprotect() operates on is immaterial. As such, it
+     * probably would work to put N_WORD_BYTES here since that's all we need. */
+                                        getpagesize()
+#else // Use the same value as does contrib/sb-posix/interface.lisp
+                                        4096
+#endif
+                                        );
     if (start) {
-        os_protect(start, os_vm_page_size, OS_VM_PROT_NONE);
         undefined_alien_address = start;
     } else {
         lose("could not allocate guard page for undefined alien\n");
diff --git a/src/runtime/win32-os.c b/src/runtime/win32-os.c
index 8260fcb78..f82b7ba6e 100644
--- src/runtime/win32-os.c
+++ src/runtime/win32-os.c
@@ -814,14 +814,15 @@ static inline boolean local_thread_stack_address_p(os_vm_address_t address)
  */
 
 os_vm_address_t
-os_validate(int movable, os_vm_address_t addr, os_vm_size_t len)
+os_validate(int attributes, os_vm_address_t addr, os_vm_size_t len)
 {
     MEMORY_BASIC_INFORMATION mem_info;
 
     if (!addr) {
         /* the simple case first */
+        int protection = attributes & IS_GUARD_PAGE ? PAGE_NOACCESS : PAGE_EXECUTE_READWRITE;
         return
-            AVERLAX(VirtualAlloc(addr, len, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE));
+            AVERLAX(VirtualAlloc(addr, len, MEM_RESERVE|MEM_COMMIT, protection));
     }
 
     if (!AVERLAX(VirtualQuery(addr, &mem_info, sizeof mem_info)))
