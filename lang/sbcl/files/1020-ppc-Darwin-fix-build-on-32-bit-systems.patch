From 4c8282d82278a06fcb5ae8616c47120683dabbfe Mon Sep 17 00:00:00 2001
From: "Kirill A. Korinsky" <kirill@korins.ky>
Date: Tue, 29 Aug 2023 12:28:38 +0200
Subject: [PATCH] ppc/Darwin: fix build on 32 bit systems

Commit 2d4525a334c09a68fa1ba2202f280fdae685bff1 makes call
`gcbarrier_patch_code` mandatory and defines dummy version for
unsupported architectures.

PPC contains `lose()` for 32 bit version which simple leads to double
symbols which may prevent linking with strict linker which doesn't allow
such behaviour like which is used at Darwin.
---
 src/runtime/ppc-arch.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git src/runtime/ppc-arch.c src/runtime/ppc-arch.c
index b0b48bb48..d87149508 100644
--- src/runtime/ppc-arch.c
+++ src/runtime/ppc-arch.c
@@ -737,9 +737,9 @@ arch_write_linkage_table_entry(int index, void *target_addr, int datap)
   os_flush_icache((os_vm_address_t) reloc_addr, (char*) inst_ptr - reloc_addr);
 }
 
+#ifdef LISP_FEATURE_64_BIT
 void gcbarrier_patch_code(void* where, int nbits)
 {
-#ifdef LISP_FEATURE_64_BIT
     int m_operand = 64 - nbits;
     // the M field has a kooky encoding
     int m_encoded = ((m_operand & 0x1F) << 1) | (m_operand >> 5);
@@ -748,7 +748,5 @@ void gcbarrier_patch_code(void* where, int nbits)
     // .... ____ _xxx xxx_ ____ = 0x7E0;
     //                  ^ deposit it here, in (BYTE 6 5) of the instruction.
     *pc = (inst & ~0x7E0) | (m_encoded << 5);
-#else
-    lose("can't patch rldicl in 32-bit"); // illegal instruction
-#endif
 }
+#endif
-- 
2.42.0

