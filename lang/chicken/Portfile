# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
# from the README:
#    For 10.6 and later, universal builds are not supported.
PortGroup               muniversal 1.0

name                    chicken
version                 4.13.0
categories              lang scheme
license                 BSD public-domain
maintainers             nomaintainer
description             Compiler for the Scheme programming language
long_description        Chicken produces portable, efficient C, supports \
                        almost all of the current Scheme language standard, \
                        the Revised5 Report on the Algorithmic Language \
                        Scheme (R5RS), and includes many enhancements and \
                        extensions.
homepage                http://www.call-cc.org/
platforms               darwin

set branch [join [lrange [split ${version} .] 0 2] .]
master_sites            http://code.call-cc.org/releases/${branch}

checksums               rmd160  aff50d0949bb753002c01fbe50906735f4330abf \
                        sha256  add549619a31363d6608b39e0cf0e68b9d5e6ff2a719b5691ddeba57229c6c43

patchfiles              patch-Makefile.macosx.diff

use_configure           no

# Upstream explicitly requires GNU make.
build.type              gnu
build.args              C_COMPILER=${configure.cc} \
                        CXX_COMPILER=${configure.cxx} \
                        PLATFORM=macosx \
                        PREFIX=${prefix}
# Upstream does not support parallel builds.
use_parallel_build      no

# Correctly identify selected arch(s) to build system.
array set archs {ppc ppc.darwin ppc64 ppc.darwin i386 x86 x86_64 x86-64}
if {[variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_args(${arch}) \
            ARCH=$archs(${configure.build_arch})
    }
} else {
    build.args-append \
        ARCH=$archs(${configure.build_arch})
}

# Pass in correct arch and SDK flags.
set cflags ""
set ldflags ""
if {${configure.sdkroot} != ""} {
    set cflags  "${cflags}  -isysroot ${configure.sdkroot}"
    set ldflags "${ldflags} -Wl,-syslibroot,${configure.sdkroot}"
}
if {[variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_args(${arch}) \
            CFLAGS='${cflags}   -arch ${arch}' \
            LDFLAGS='${ldflags} -arch ${arch}'
    }
} else {
    build.args-append \
        CFLAGS="${cflags}   -arch ${configure.build_arch}" \
        LDFLAGS="${ldflags} -arch ${configure.build_arch}"
}

destroot.args           PLATFORM=macosx \
                        PREFIX=${prefix}

test.run                yes
test.target             PLATFORM=macosx check

livecheck.type          regex
livecheck.url           http://code.call-cc.org/releases/current/
livecheck.regex         {chicken-([0-9.]+)\.tar\.gz}
