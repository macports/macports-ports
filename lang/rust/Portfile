# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           active_variants 1.1

name                rust
version             1.28.0
categories          lang devel
platforms           darwin
supported_archs     i386 x86_64
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         {g5pw @g5pw} openmaintainer

description         A safe, concurrent, practical language

long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of \"programming in the large\", that is, of \
                    creating and maintaining boundaries -- both abstract \
                    and operational -- that preserve large-system \
                    integrity, availability and concurrency.

homepage            https://www.rust-lang.org/

set ruststd_version 1.27.2
set rustc_version   1.27.2
set cargo_version   0.28.0
set llvm_version    6.0

# can use cmake or cmake-devel; default to cmake.
depends_build       path:bin/cmake:cmake \
                    bin:python2.7:python27

depends_lib         port:llvm-${llvm_version}

master_sites        https://static.rust-lang.org/dist

distname            ${name}c-${version}-src

patchfiles          patch-src-librustc-llvm-lib.diff

if {![variant_isset universal]} {
    if {${build_arch} eq "i386"} {
        set architectures i686
    } else {
        set architectures ${build_arch}
    }
} else {
    set architectures {}
    foreach arch ${universal_archs} {
        if {${arch} eq "i386"} {
            lappend architectures i686
        } else {
            lappend architectures ${arch}
        }
    }
}

foreach arch ${architectures} {
    distfiles-append rust-std-${ruststd_version}-${arch}-apple-${os.platform}${extract.suffix} \
                     rustc-${rustc_version}-${arch}-apple-${os.platform}${extract.suffix} \
                     cargo-${cargo_version}-${arch}-apple-${os.platform}${extract.suffix}
}

checksums           ${distname}${extract.suffix} \
                    rmd160  97497baad42d04cb4157e02dc6a2d1b065117065 \
                    sha256  1d5a81729c6f23a0a23b584dd249e35abe9c6f7569cee967cc42b1758ecd6486 \
                    size    97756918

checksums-append \
                    rust-std-${ruststd_version}-i686-apple-${os.platform}${extract.suffix} \
                    rmd160  5b9995ee10e44e07216e4116fe0f9f6a8bbc153f \
                    sha256  1e8847756a5763c3bf62a10f3eb1bc261c0772c368c9130026619de18ac0e39c \
                    size    58461164 \
                    rustc-${rustc_version}-i686-apple-${os.platform}${extract.suffix} \
                    rmd160  81a5d67dafe18b20807e002ec967a946f02202d3 \
                    sha256  73c51682a9f9f96c912732f620da68b7da518c934f8d38698fa13199ac06062e \
                    size    77222330 \
                    cargo-${cargo_version}-i686-apple-${os.platform}${extract.suffix} \
                    rmd160  59c78d58a14dd94ee1724556c39cfa82dbce05c2 \
                    sha256  85cd2a56cc14108030128dcf71c4fc112389a9bf9bffae132203ea1399b4d449 \
                    size    4392358

checksums-append \
                    rust-std-${ruststd_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  b53c9da47baa5ac68cc21b938b32da19cb2e4762 \
                    sha256  eed3688d9f551066593b34f07e4d28846caa99624c2168387993acc6bddd003d \
                    size    59590803 \
                    rustc-${rustc_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  49c15a56004405fb96906262db915beefdbd2e03 \
                    sha256  b5c5edd2094afd0a92ad776dbd12cb6ee37800b940437dece10229ccacd1f561 \
                    size    78393055 \
                    cargo-${cargo_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  9ae2e1b691da6d2ffd39deb36544e82ac02988e6 \
                    sha256  bc995c0710913b21ac979aa911669fbb1a11fbdda52eb0b4bb5e72fbcbb82085 \
                    size    4688178

pre-fetch {
    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        ui_error "${name} is only supported on OS X 10.7 Lion or later."
        return -code error "unsupported platform version"
    }
}

post-extract {
    foreach arch ${architectures} {
        set rust_root     ${worksrcpath}/build/stage0-${arch}
        set rust_platform ${arch}-apple-${os.platform}
        file mkdir ${rust_root}
        system "cp -r ${workpath}/rust-std-${ruststd_version}-${rust_platform}/rust-std-${rust_platform}/* ${rust_root}"
        system "cp -r ${workpath}/rustc-${rustc_version}-${rust_platform}/rustc/* ${rust_root}"
        system "cp -r ${workpath}/cargo-${cargo_version}-${rust_platform}/cargo/* ${rust_root}"
    }
}

configure.args      --enable-vendor \
                    --default-linker=${configure.cc} \
                    --disable-codegen-tests \
                    --disable-docs \
                    --release-channel=stable

# see https://trac.macports.org/ticket/56351
# see https://github.com/rust-lang/rust/issues/50220
if {[variant_isset universal]} {
    # LLVM is or will need to be universal
    set copy_llvm 1
} else {
    if {![catch {set result [active_variants llvm-${llvm_version} "universal" ""]}] && $result} {
        # LLVM was installed with universal variant
        set copy_llvm 1
    } else {
        set copy_llvm 0
    }
}

if {!${copy_llvm}} {
    # LLVM is NOT universal, so use installed version
    configure.args-append \
        --llvm-root=${prefix}/libexec/llvm-${llvm_version}
} else {
    # copy LLVM and thin static libraries
    # see https://trac.macports.org/ticket/56351
    # see https://github.com/rust-lang/rust/issues/50220
    if {[variant_isset universal]} {
        set archs ${universal_archs}
        foreach arch ${universal_archs} {
            lappend merger_configure_args(${arch}) \
                --llvm-root=${workpath}/llvm-${llvm_version}-${arch}
        }
    } else {
        set archs ${build_arch}
        configure.args-append \
            --llvm-root=${workpath}/llvm-${llvm_version}-${build_arch}
    }

    depends_extract-append  port:llvm-${llvm_version}

    post-extract {
        foreach arch ${archs} {
            system -W ${workpath} "cp -R ${prefix}/libexec/llvm-${llvm_version} ${workpath}/llvm-${llvm_version}-${arch}"
            fs-traverse f ${workpath}/llvm-${llvm_version}-${arch} {
                if {[file isfile $f] && [file type $f]!="link" && [file extension $f]==".a"} {
                    catch {system "lipo -thin ${arch} ${f} -o ${f}"}
                }
            }
        }
    }
}

if {![variant_isset universal]} {
    if {${build_arch} eq "i386"} {
        set arch_name i686
    } else {
        set arch_name ${build_arch}
    }
    set rust_platform ${arch_name}-apple-${os.platform}
    set rust_root     ${worksrcpath}/build/stage0-${arch_name}
    configure.args-append \
                   --build=${rust_platform} \
                   --local-rust-root=${rust_root}
} else {
    foreach arch ${universal_archs} {
        if {${arch} eq "i386"} {
            set arch_name i686
        } else {
            set arch_name ${build_arch}
        }
        set rust_platform ${arch_name}-apple-${os.platform}
        set rust_root     ${worksrcpath}/build/stage0-${arch_name}
        lappend merger_configure_args(${arch}) \
                  --build=${rust_platform} \
                  --local-rust-root=${rust_root}
    }
}

foreach arch ${architectures} {
    set rust_platform ${arch}-apple-${os.platform}
    configure.args-append \
                    --set=target.${rust_platform}.cc=${configure.cc} \
                    --set=target.${rust_platform}.cxx=${configure.cxx} \
                    --set=target.${rust_platform}.linker=${configure.cc}
}

configure.universal_args-delete --disable-dependency-tracking

post-configure {
    # the bootstrap call to rustc uses cc for the linker
    # place config file in the HOME directory
    # see https://trac.macports.org/wiki/UsingTheRightCompiler
    xinstall -d -m 0755 ${workpath}/.home/.cargo
    set config [open ${workpath}/.home/.cargo/config w]
    foreach arch ${architectures} {
        set rust_platform ${arch}-apple-${os.platform}
        puts ${config} "\[target.${rust_platform}\]"
        puts ${config} "linker = \"${configure.cc}\""
    }
    close ${config}
}

build.env           RUSTC_SAVE_ANALYSIS=api
build.args          VERBOSE=1 BOOTSTRAP_ARGS="-v -j${build.jobs}"

test.run            yes
test.target         check
test.args           VERBOSE=1

destroot.args       VERBOSE=1
if {${subport} eq ${name}} {
    if {![variant_isset universal]} {
        post-destroot {
            if {${build_arch} eq "i386"} {
                set arch_name i686
            } else {
                set arch_name ${build_arch}
            }
            set rust_platform ${arch_name}-apple-${os.platform}
        file copy \
            ${worksrcpath}/build/${rust_platform}/stage1-std/${rust_platform}/release/deps/save-analysis \
            ${destroot}${prefix}/lib/rustlib/${rust_platform}/analysis

        xinstall -d ${destroot}${prefix}/share/${name}
        xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
            ${destroot}${prefix}/share/${name}
    }
    } else {
        merger-post-destroot {
            foreach arch ${universal_archs} {
                if {${arch} eq "i386"} {
                    set arch_name i686
                } else {
                    set arch_name ${arch}
                }
                set rust_platform ${arch_name}-apple-${os.platform}
                file copy \
                    ${worksrcpath}-${arch}/build/${rust_platform}/stage1-std/${rust_platform}/release/deps/save-analysis \
                    ${destroot}-${arch}${prefix}/lib/rustlib/${rust_platform}/analysis

                xinstall -d ${destroot}-${arch}${prefix}/share/${name}
                xinstall -m 644 ${worksrcpath}-${arch}/src/etc/ctags.rust \
                    ${destroot}-${arch}${prefix}/share/${name}
            }
        }
    }
}

livecheck.type      regex
livecheck.url       https://github.com/rust-lang/rust/tags
livecheck.regex     archive/(\[\\d\\.\]+).zip

subport rust-src {
    # remove dependencies
    depends_build
    depends_lib

    description     Source code for the rust programming language
    long_description ${description}

    use_configure no

    build {}

    destroot {
        xinstall -d ${destroot}${prefix}/share/rust
        move ${worksrcpath}/src ${destroot}${prefix}/share/rust/src

        # correct the permissions
        system -W ${destroot}${prefix}/share/rust "find . -type d -exec chmod 755 {} \\;"
        system -W ${destroot}${prefix}/share/rust "find . -type f -exec chmod 644 {} \\;"

        # delete the test directories (which for some god awful reason contains binaries)
        system -W ${destroot}${prefix}/share/rust "find . -type d -name test -print0 | xargs -0 rm -rf"
    }
}
