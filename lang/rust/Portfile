# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           compiler_blacklist_versions 1.0
PortGroup           legacysupport 1.1

legacysupport.use_static                    yes
legacysupport.newest_darwin_requires_legacy 15

name                rust
version             1.51.0
revision            2
categories          lang devel
platforms           darwin
supported_archs     x86_64 arm64
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         {g5pw @g5pw} \
                    {gmail.com:herby.gillot @herbygillot} \
                    openmaintainer

description         A safe, concurrent, practical language

long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of \"programming in the large\", that is, of \
                    creating and maintaining boundaries -- both abstract \
                    and operational -- that preserve large-system \
                    integrity, availability and concurrency.

homepage            https://www.rust-lang.org

# Get from src/stage0.txt
# Rust stable 1.x usually requires `set rustc_version 1.(x-1)`
set rustc_version   1.50.0

set py_ver          3.9
set py_ver_nodot    [string map {. {}} ${py_ver}]

# Make sure the chosen python is found via PATH
post-extract {
    xinstall -d ${workpath}/bin
    ln -s ${prefix}/bin/python${py_ver} ${workpath}/bin/python
    ln -s ${prefix}/bin/python${py_ver} ${workpath}/bin/python3
}

# Collect paths to add to PATH env var
set NewPath         "${workpath}/bin:$env(PATH)"

set arch ${configure.build_arch}
if {${configure.build_arch} eq "arm64"} {
    set arch "aarch64"
}
set binTag ${rustc_version}-${arch}-apple-${os.platform}

# Rust 1.49.0 and newer has issues on macOS 10.9 and older.
# See  https://trac.macports.org/ticket/62656
#      https://github.com/rust-lang/rust/issues/80804
# If upstream eventually address the issue these workarounds can be removed.
# For now patch the bootstrap binaries and compiler commands to use legacysupport library
set ccwrap ${name}-compiler-wrap
if { ${os.major} <= [option legacysupport.newest_darwin_requires_legacy] && ${subport} ne ${ccwrap} } {
    # Force use of MP clang
    compiler.blacklist-append clang
    # Relink downloaded binaries
    post-extract {
        ui_debug "Relinking rust/cargo bootstrap binaries"
        # Re-link binaries to force loading of MacPorts LegacySupport lib instead of libSystem
        proc relink_binary { exe } {
            global prefix
            if {[string match "application/*" [lindex [exec /usr/bin/file --mime-type ${exe}] end]]} {
                set sLib /usr/lib/libSystem.B.dylib
                set lLib ${prefix}/lib/libMacportsLegacySystem.B.dylib
                system "install_name_tool -change ${sLib} ${lLib} ${exe} > /dev/null 2>&1 ; true"
            }
        }
        proc relink_binaries { binaries } {
            foreach binary $binaries {
                relink_binary ${binary}
            }
        }
        proc search_dirs_relink { dirs } {
            foreach dir $dirs {
                relink_binaries [ glob -nocomplain ${dir}/* ]
            }
        }
        relink_binaries    [ exec find ${workpath}/ -name "*.dylib" ]
        search_dirs_relink [ exec find ${workpath}/ -type d -and -name bin -or -name libexec ]
    }
    # Need a newer set of coreutils (e.g. mktemp)
    depends_build-append port:coreutils
    set NewPath "${prefix}/libexec/gnubin:${NewPath}"
}

if { ${subport} ne ${ccwrap} } {
    depends_build-append \
                    bin:git:git \
                    path:bin/cmake:cmake \
                    port:cctools \
                    port:python${py_ver_nodot} \
                    port:openssl \
                    port:pkgconfig \
                    port:ninja \
                    port:gmake
    depends_lib-append \
                    port:libffi \
                    path:lib/libssl.dylib:openssl
}

master_sites        https://static.rust-lang.org/dist

distname            ${name}c-${version}-src

distfiles-append    rust-std-${binTag}${extract.suffix} \
                    rustc-${binTag}${extract.suffix} \
                    cargo-${binTag}${extract.suffix}

checksums           ${distname}${extract.suffix} \
                    rmd160  86012fa02e52e4a06e5c76aaa482face78b38ef5 \
                    sha256  7a6b9bafc8b3d81bbc566e7c0d1f17c9f499fd22b95142f7ea3a8e4d1f9eb847 \
                    size    160954811

checksums-append    rust-std-${rustc_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  2234575725d792e24fe53e0fbae1c786a31e55d0 \
                    sha256  a291354e78e8147b22e92c817a0dfee8d3342e07bfafa73a2904a1c99d22c5b8 \
                    size    40793121 \
                    rustc-${rustc_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  a823d7becd0341ced56663056626ee211096201c \
                    sha256  3637ee8d8bc0f8e922b1f9ec7b6fc00b6efcceae97c337d205a3bc472be7b936 \
                    size    97361498 \
                    cargo-${rustc_version}-x86_64-apple-${os.platform}${extract.suffix} \
                    rmd160  1f821ec26255f891e403ced7278a281b294c80ff \
                    sha256  45640bb1cef40f25ecb4bd2a3bb34fdf884c418e625d4f9c9595d2aca84fad78 \
                    size    6412639 \
                    rust-std-${rustc_version}-aarch64-apple-${os.platform}${extract.suffix} \
                    rmd160  26bf61d3106d1ef827707aafd9348d3475b20679 \
                    sha256  8a1cda91afd3a732d3737b6f933b0b6065949dd8fbc820245a7e2a97ae9a7711 \
                    size    28059579 \
                    rustc-${rustc_version}-aarch64-apple-${os.platform}${extract.suffix} \
                    rmd160  bc5c28821124b8a2ba09312730f91e75d113193c \
                    sha256  3abc090591fb7fd0a292eeff4cc6a029841d39b0a768eaf1f0b9e4e06cba8ed7 \
                    size    87219407 \
                    cargo-${rustc_version}-aarch64-apple-${os.platform}${extract.suffix} \
                    rmd160  de7cb695c1ebc5e7483ecf7d353d67dba351432a \
                    sha256  19d526ef3518fb0322f809deddbd4208a27d08efa41d2188348f1be8d3bcfe5e \
                    size    5820420

set min_darwin 13
if {${os.platform} eq "darwin" && ${os.major} < ${min_darwin}} {
    known_fail yes
    pre-fetch {
        ui_error "${name} is only supported on macOS 10.[expr ${min_darwin} - 4] or later."
        return -code error "unsupported platform version"
    }
}

set rust_platform       ${arch}-apple-${os.platform}
set rust_root           ${worksrcpath}/build/stage0-${arch}

if { ${subport} ne ${ccwrap} } {
    post-extract {
        file mkdir ${rust_root}
        system "cp -r ${workpath}/rust-std-${rustc_version}-${rust_platform}/rust-std-${rust_platform}/* ${rust_root}"
        system "cp -r ${workpath}/rustc-${rustc_version}-${rust_platform}/rustc/* ${rust_root}"
        system "cp -r ${workpath}/cargo-${rustc_version}-${rust_platform}/cargo/* ${rust_root}"
    }
}

# Rust claims to only need c++14 but uses some c++17 features relating to std::unique_ptr
compiler.cxx_standard  2017
# Use recent macports clang
compiler.blacklist-append {macports-clang-[4-9].0}

# Compiler used needed at runtime with rust, so if a MacPorts clang compiler used needs to be a dep
if { [string match macports-clang-* ${configure.compiler}] } {
    depends_lib-append port:[string map {"macports-" ""} ${configure.compiler}]
}

# Max Darwin version to create wrapper scripts. Should be equal to the highest
# Darwin version that downstream ports could possible need legacy support for.
set max_wrap_darwin [legacysupport::get_newest_darwin_with_missing_symbols]

# Adds given entry to the environment of various phases
proc envs_append { value } {
    foreach stage {extract configure build destroot} {
        ${stage}.env-delete ${value}
        ${stage}.env-append ${value}
    }
}

# In order to enforce use of legacy support, both when building rust and subsequently
# when using it, the underlying compiler commands need to be wrapped to make sure
# they use the correct flags. Do this in a sub-port which then is added as a dep
# to rust to ensure they are available when rust is both built and installed.
set wrapdir ${prefix}/libexec/${ccwrap}/bin
subport ${ccwrap} {
    # Remove after next rust version update
    if { ${version} eq "1.51.0" } {
        revision [expr ${revision} + 3]
    }
    # Enable support in scripts for all neccessary versions
    legacysupport.newest_darwin_requires_legacy ${max_wrap_darwin}
    description      Wrapped compiler commands for ${name}
    long_description {*}${description}
    license          BSD
    supported_archs  noarch
    patchfiles
    distfiles
    depends_build
    # Always build from source to ensure we use user's compiler selection
    archive_sites
    if { ${os.major} <= [option legacysupport.newest_darwin_requires_legacy] } {
        depends_lib-append [legacysupport::get_dependency]
    }
    use_configure    no
    build            {}
    depends_lib-append port:cctools
    destroot {
        xinstall -d ${destroot}${prefix}/share/doc/${ccwrap}
        system "echo '${description}' > ${destroot}${prefix}/share/doc/${ccwrap}/README"
        if { ${os.major} <= ${max_wrap_darwin} } {
            # Try and deduce MacPorts LLVM version from configured compiler
            # If this fails just use exact settings for cc and cxx
            set sel_cc  ${configure.cc}
            set sel_cxx ${configure.cxx}
            set sel_ld  ld
            if {[regexp {macports-clang-(.*)} ${configure.compiler} -> llvm_ver]} {
                set llvm_path ${prefix}/libexec/llvm-${llvm_ver}
                set sel_cc    ${llvm_path}/bin/clang
                set sel_cxx   ${llvm_path}/bin/clang++
                set sel_ld    ${llvm_path}/bin/ld
            }
            xinstall -m 755 -d ${destroot}${wrapdir}
            proc create_wrapper { fname comp flags } {
                set f [ open ${fname} w 0755 ]
                puts  ${f} "#!/bin/bash"
                puts  ${f} "exec ${comp} ${flags} \"\$\{\@\}\""
                close ${f}
            }
            create_wrapper ${destroot}${wrapdir}/clang   \
                "\$\{MACPORTS_RUST_CC\:\-${sel_cc}\}" \
                "\$\{MACPORTS_LEGACY_SUPPORT_CPPFLAGS\}"
            create_wrapper ${destroot}${wrapdir}/clang++ \
                "\$\{MACPORTS_RUST_CXX\:\-${sel_cxx}\}" \
                "\$\{MACPORTS_LEGACY_SUPPORT_CPPFLAGS\}"
            create_wrapper ${destroot}${wrapdir}/ld-rust \
                "\$\{MACPORTS_RUST_CC\:\-${sel_cc}\}" \
                "\$\{MACPORTS_LEGACY_SUPPORT_CPPFLAGS\} \$\{MACPORTS_LEGACY_SUPPORT_LDFLAGS\}"
            create_wrapper ${destroot}${wrapdir}/ld \
                "\$\{MACPORTS_RUST_LD\:\-${sel_ld}\}" \
                "\$\{MACPORTS_LEGACY_SUPPORT_LDFLAGS\}"
            foreach cmd { ar as nm nm-classic libtool lipo objdump otool ranlib \
                          size size-classic strip strings bitcode-strip segedit } {
                ln -s ${prefix}/bin/${cmd} ${destroot}${wrapdir}/${cmd}
            }
        }
    }
}
set ld ${configure.cc}
if { ${subport} ne ${ccwrap} } {
    if { ${os.major} <= ${max_wrap_darwin} } {
        depends_lib-append port:${ccwrap}
        configure.cc     ${wrapdir}/clang
        configure.cxx    ${wrapdir}/clang++
        configure.objc   ${wrapdir}/clang
        configure.objcxx ${wrapdir}/clang++
        set ld           ${wrapdir}/ld-rust
        set NewPath     "${wrapdir}:${NewPath}"
    }
    envs_append   "PATH=${NewPath}"
}
envs_append       LD=${ld}

configure.args    --enable-vendor \
                  --default-linker=${ld} \
                  --disable-codegen-tests \
                  --disable-docs \
                  --release-channel=stable \
                  --build=${rust_platform} \
                  --local-rust-root=${rust_root} \
                  --set=target.${rust_platform}.cc=${configure.cc} \
                  --set=target.${rust_platform}.cxx=${configure.cxx} \
                  --set=target.${rust_platform}.linker=${ld} \
                  --enable-extended \
                  --tools=rustfmt,clippy,rls \
                  --llvm-cflags="${configure.cflags}" \
                  --llvm-cxxflags="${configure.cxxflags}" \
                  --llvm-ldflags="${configure.ldflags}" \
                  --python=${prefix}/bin/python${py_ver}

# Cache support
if {[tbool configure.ccache]} {
    depends_build-append   port:ccache
    configure.args-append  --enable-ccache
}

post-configure {
    # the bootstrap call to rustc uses cc for the linker
    # place config file in the HOME directory
    # see https://trac.macports.org/wiki/UsingTheRightCompiler
    xinstall -d -m 0755 ${workpath}/.home/.cargo
    set config [open ${workpath}/.home/.cargo/config w]

    puts ${config} "\[target.${rust_platform}\]"
    puts ${config} "linker = \"${ld}\""

    close ${config}
}

build.args          VERBOSE=1 BOOTSTRAP_ARGS="-vv -j${build.jobs}"

envs_append         OPENSSL_DIR=${prefix}
envs_append         RUST_BACKTRACE=1

test.run            yes
test.target         check
test.args           VERBOSE=1

destroot.args       VERBOSE=1

if {${subport} eq ${name}} {
    post-destroot {
        delete ${destroot}${prefix}/lib/rustlib/install.log
        delete ${destroot}${prefix}/lib/rustlib/uninstall.sh
        xinstall -d ${destroot}${prefix}/share/${name}
        xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
            ${destroot}${prefix}/share/${name}
    }
}

livecheck.type      regex
livecheck.url       https://github.com/rust-lang/rust/tags
livecheck.regex     refs/tags/(\[\\d\\.\]+).zip

subport rust-src {
    # remove dependencies
    depends_build
    depends_lib

    # Remove after next rust version update
    if { ${version} eq "1.51.0" } {
        revision [expr ${revision} + 1]
    }

    set rust_source_dir ${destroot}${prefix}/lib/rustlib/src/rust

    description     Source code for the rust programming language
    long_description {*}${description}

    use_configure no

    build {}

    destroot {
        xinstall -d ${rust_source_dir}
        move ${worksrcpath}/src ${rust_source_dir}/src
        move ${worksrcpath}/library ${rust_source_dir}/library

        # correct the permissions
        system -W ${rust_source_dir} "find . -type d -exec chmod 755 {} \\;"
        system -W ${rust_source_dir} "find . -type f -exec chmod 644 {} \\;"

        # delete the test directories (which for some god awful reason contains binaries)
        system -W ${rust_source_dir} "find . -type d -name test -print0 | xargs -0 rm -rf"
    }
}
