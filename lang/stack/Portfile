# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0

github.setup        commercialhaskell stack 2.1.3 v

name                stack
categories          lang haskell
maintainers         {ieee.org:s.t.smith @essandess} openmaintainer
license             BSD
platforms           darwin

description The Haskell Tool Stack
long_description    ${description}. \
        Stack is a cross-platform command line interface for developing Haskell projects. \
        It features: installing GHC automatically, installing packages needed for your project, \
        building your project, testing your project, benchmarking your project. \
        It is intended for Haskellers both new and experienced.

homepage            https://haskellstack.org

variant bootstrap \
	    description {Bootstrap a build of stack.} {}

# make bootstrapping the default
default_variants    +bootstrap

master_sites        ${github.homepage}/releases/download/v${github.version}

distname            ${name}-${github.version}-osx-x86_64

checksums           ${distfiles} \
                    rmd160  241f94e06add584b0b5883d7f68b7cc26a866749 \
                    sha256  84b05b9cdb280fbc4b3d5fe23d1fc82a468956c917e16af7eeeabec5e5815d9f \
                    size    8329540

extract.only        ${distfiles}

set verify_gpg_signature false

if {${verify_gpg_signature} == "true"} {
    distfiles-append \
                    ${distfiles}.asc
    checksums-append \
                    [lindex ${distfiles} end] \
                    size    488
}

if {[variant_isset "bootstrap"]} {
    master_sites-append \
                    ${github.homepage}/archive
    distfiles-append \
                    v${github.version}${extract.suffix}
    checksums-append \
                    [lindex ${distfiles} end] \
                    rmd160  cee14c9989a7b4225ddf5f58408c4399e4b2f36a \
                    sha256  6a5b07e06585133bd385632c610f38d0c225a887e1ccb697ab09fec387838976 \
                    size    820569
    extract.only-append \
                    [lindex ${distfiles} end]
}

supported_archs     x86_64

if {${verify_gpg_signature} == "true"} {
    depends_fetch-append \
                    port:gnupg2

    proc verify_gpg_signature \
        {gpg_homedir keyid_file signature_file test_file} {
        # pre-load public key to avoid keyserver downtime issues
        # https://pgp.mit.edu/pks/lookup?op=get&search=0x${gpg_keyid}
        # note: tcl exec will return error if error messages not directed to /dev/null
        system "/bin/sh -c \
            'gpg --homedir ${gpg_homedir} --import ${keyid_file} \
            2>/dev/null || /usr/bin/true'"
        set gpg_verification [exec /bin/sh -c \
            "if gpg --homedir ${gpg_homedir} --verify \
                    ${signature_file} ${test_file} 2>/dev/null; \
                then echo 'VERIFIED'; else echo 'UNVERIFIED'; fi"]
        if {[string trim ${gpg_verification}] != "VERIFIED"} {
            ui_error \
                "GPG signature verification failed on ${test_file} with keyid file ${keyid_file}."
            exit 1
        }
    }

    pre-extract {
        # check GPG signature: https://docs.haskellstack.org/en/stable/SIGNING_KEY/
        set gpg_keyid 1c5c154d

        verify_gpg_signature \
            ${workpath}/.gnupg \
            ${filespath}/keyid-${gpg_keyid}.txt \
            ${distpath}/[lindex ${distfiles} 0].asc \
            ${distpath}/[lindex ${distfiles} 0]
    }
}

set system_gcc      /usr/bin/gcc

use_configure       no

# the PATH environment must provide /usr/bin/gcc, not ${prefix}/bin/gcc
# note: this command does not change the destroot PATH environment, so export
# PATH explicitly in the necessary system command below
build.env \
    PATH=/usr/bin:$env(PATH) \
    PREFIX=${prefix} \
    CC=${system_gcc}

# stack must bootstrap itself
# See: https://docs.haskellstack.org,
#      https://github.com/commercialhaskell/stack/blob/master/doc/README.md
pre-build {
    # standard stack install with 'curl | sh'; don't use
    # system -W ${worksrcpath} "/bin/mkdir ./bin && /usr/bin/curl -sSL https://get.haskellstack.org/ | /bin/sh -s - -d ./bin"
    # copy the pre-built ./stack binary to ./bin, then write over if bootstrapping
    xinstall -W ${worksrcpath} -d ./bin
    xinstall -m 0755 -W ${worksrcpath} ./${name} ./bin
}

if {[variant_isset "bootstrap"]} {
    build {
        # build stack and overwrite ${worksrcpath}/bin/${name}
        xinstall -m 0755 -d ${workpath}/.${name}
        system -W ${worksrcpath}/../${name}-${github.version} "\
            export PATH=/usr/bin:$env(PATH) \
                PREFIX=${prefix} \
                CC=${system_gcc} ; \
            ${worksrcpath}/bin/${name} setup \
                --stack-root ${workpath}/.${name} --with-gcc ${system_gcc} \
                --allow-different-user \
            && ${worksrcpath}/bin/${name} build \
                --stack-root ${workpath}/.${name} --with-gcc ${system_gcc} \
                --allow-different-user \
            "
        delete ${worksrcpath}/${name}
        system -W ${worksrcpath}/../${name}-${github.version} "\
            export PATH=/usr/bin:$env(PATH) \
                PREFIX=${prefix} \
                CC=${system_gcc} ; \
            ${worksrcpath}/bin/${name} install \
                --stack-root ${workpath}/.${name} --with-gcc ${system_gcc} \
                --local-bin-path ${worksrcpath} --allow-different-user \
            "
        delete ${worksrcpath}/bin/${name}
        copy ${worksrcpath}/${name} ${worksrcpath}/bin/${name}
    }
} else {
    build {}
}

destroot {
    xinstall -m 0755 -W ${worksrcpath} ./bin/${name} ${destroot}${prefix}/bin
}
