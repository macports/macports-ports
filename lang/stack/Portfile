# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           gpg_verify 1.0
PortGroup           haskell_stack 1.0
PortGroup           legacysupport 1.1

github.setup        commercialhaskell stack 2.11.1 v
revision            0

name                stack
categories          lang haskell
maintainers         {ieee.org:s.t.smith @essandess} openmaintainer
license             BSD
platforms           darwin

description         The Haskell Tool Stack
long_description    Stack is a cross-platform command line interface \
                    for developing Haskell projects. It features: \
                    installing GHC automatically, installing packages \
                    needed for your project, building your project, \
                    testing your project, benchmarking your project. \
                    It is intended for Haskellers both new and experienced.

homepage            https://haskellstack.org

variant prebuilt \
	    description {Do not bootstrap stack; install the pre-built binary.} {}

if {${build_arch} eq "x86_64"} {
    distname        ${name}-${github.version}-osx-x86_64
} elseif {${build_arch} eq "arm64"} {
    distname        ${name}-${github.version}-osx-aarch64
}

worksrcdir          ${name}-${github.version}

master_sites        ${github.homepage}/releases/download/${github.tag_prefix}${github.version}/:release \
                    https://downloads.haskell.org/ghcup/unofficial-bindists/stack/${github.version}/:release_arm \
                    ${github.homepage}/archive/refs/tags/:archive

distfiles           ${github.tag_prefix}${github.version}${extract.suffix}:archive
if {${build_arch} eq "x86_64"} {
    distfiles-append    ${distname}-bin:release
} elseif {${build_arch} eq "arm64"} {
    distfiles-append    ${distname}${extract.suffix}:release_arm
}

extract.only        ${github.tag_prefix}${github.version}${extract.suffix}
if {${build_arch} eq "arm64"} {
    extract.only-append \
                    ${distname}${extract.suffix}
}

checksums           ${github.tag_prefix}${github.version}${extract.suffix} \
                    rmd160  bc09152bfc711cd2839b2395976ebfaaaff0b6bd \
                    sha256  7a3a7e4aca8aef9ab6c081ea553a681844e6dad901c6b36b5e4cacae2fef6d23 \
                    size    839729
if {${build_arch} eq "x86_64"} {
    checksums-append \
                    ${distname}-bin \
                    rmd160  cc7b03e0312c6bb0a2994a674962c0200bbf86e3 \
                    sha256  5b76cf79c84ba3718730afedd86f85a1170046bb8768e20fb119dcfe25f2a5f2 \
                    size    32657688 \
} elseif {${build_arch} eq "arm64"} {
    checksums-append \
                    ${distname}${extract.suffix} \
                    rmd160  208c1e26e3c51d07b830dbf052a16d353bd245b1 \
                    sha256  3ea56c5885c9c6d7e2dce927e44f48f6024a4a5a039f7acad79b19654a6f95b5 \
                    size    24192614
}

post-extract {
    xinstall -W ${workpath} -d ./bin
    if {${build_arch} eq "x86_64"} {
        xinstall -m 0755 ${distpath}/${distname}-bin ${workpath}/bin
    } elseif {${build_arch} eq "arm64"} {
        xinstall -m 0755 ${workpath}/${distname}/${name} ${workpath}/bin
    }
}

# bootstrap binaries seg fault on 10.7 and older
set max_darwin 12
if { ${os.platform} eq "darwin" && ${os.major} < ${max_darwin} } {
    known_fail yes
    pre-fetch {
        ui_error "${name} @${version} requires OS X 10.[expr ${max_darwin} - 4] or later"
        return -code error "unsupported Mac OS X version"
    }
}

# Darwin 16 and older fails to build from source, e.g.
# Undefined symbols for architecture x86_64:
#  "_utimensat", referenced from:
#      _Lc6xB_info in libHSdirectory-1.3.6.0.a(Posix.o)
if { ${os.platform} eq "darwin" && ${os.major} <= 16 } {
    default_variants-append +prebuilt
}

if { [variant_isset "prebuilt"] } {
    use_configure   no

    build {}

    if { ${os.major} <= [option legacysupport.newest_darwin_requires_legacy] } {
        depends_build-append port:cctools
    }

    destroot {
        copy        ${workpath}/bin/${distname}-bin \
                    ${destroot}${prefix}/bin/${name}
        legacysupport::relink_libSystem ${destroot}${prefix}/bin/${name}
    }
} else {
    post-extract {
        xinstall -m 0755 -d "[option haskell_stack.stack_root]"

        # standard stack install with 'curl | sh'; don't use
        # system -W ${worksrcpath} "/bin/mkdir ./bin && /usr/bin/curl -sSL https://get.haskellstack.org/ | /bin/sh -s - -d ./bin"
        # bootstrap using the pre-built ./stack binary
        if {${build_arch} eq "x86_64"} {
            ln -s   ${workpath}/bin/${distname}-bin \
                    ${workpath}/bin/${name}
        }
    }

    set haskell_stack.bin ${workpath}/bin/stack
}
