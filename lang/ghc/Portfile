# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           gpg_verify 1.0

name                ghc
version             8.6.5
revision            1
categories          lang haskell
maintainers         {ieee.org:s.t.smith @essandess} openmaintainer
license             BSD
platforms           darwin

description The Glorious Glasgow Haskell Compilation System
long_description    \
        The Glasgow Haskell Compiler is a robust,       \
        fully-featured, optimising compiler and interactive \
        environment for Haskell 98, GHC compiles Haskell to \
        either native code or C.  It implements numerous    \
        experimental language extensions to Haskell 98,     \
        for example: concurrency, a foreign language interface, \
        multi-parameter type classes, scoped type variables,    \
        existential and universal quantification, unboxed   \
        types, exceptions, weak pointers, and so on.        \
        GHC comes with a generational garbage collector,    \
        and a space and time profiler.

homepage        http://haskell.org/${name}

# Bootstrapped ghc is the default build
variant prebuilt \
    description {Do not bootstrap ghc; install the pre-built binary.} {}

# https://www.haskell.org/ghcup/
# https://gitlab.haskell.org/haskell/ghcup/blob/master/README.md#manual-install
use_xz              yes
master_sites        https://downloads.haskell.org/~${name}/${version}
distfiles           ${distname}-x86_64-apple-darwin${extract.suffix} \
                    ${distname}-testsuite${extract.suffix}
checksums           ${distname}-x86_64-apple-darwin${extract.suffix} \
                    rmd160  618664b03640f58ebe28999c1c3bd3fc56c8ff7c \
                    sha256  dfc1bdb1d303a87a8552aa17f5b080e61351f2823c2b99071ec23d0837422169 \
                    size    159042284 \
                    ${distname}-testsuite${extract.suffix} \
                    rmd160  9e4cb087bc8163feab7793f835916bdfd277868b \
                    sha256  21391cb63a8a6b327f6c9519217a3dad39493e72c48967008ae35af142ca895f \
                    size    1910060

supported_archs     x86_64

gpg_verify.use_gpg_verification \
                    yes

if {[option gpg_verify.use_gpg_verification]} {
    distfiles-append \
                    ${distname}-x86_64-apple-darwin${extract.suffix}.sig \
                    ${distname}-testsuite${extract.suffix}.sig
    checksums-append \
                    ${distname}-x86_64-apple-darwin${extract.suffix}.sig \
                    size    586 \
                    ${distname}-testsuite${extract.suffix}.sig \
                    size    586

    post-checksum {
        # check GPG signature: https://www.haskell.org/ghc/download_ghc_8_6_5.html
        set gpg_keyid 97db64ad

        gpg_verify.verify_gpg_signature \
            ${filespath}/keyid-${gpg_keyid}.txt \
            ${distpath}/${distname}-x86_64-apple-darwin${extract.suffix}.sig \
            ${distpath}/${distname}-x86_64-apple-darwin${extract.suffix}

        gpg_verify.verify_gpg_signature \
            ${filespath}/keyid-${gpg_keyid}.txt \
            ${distpath}/${distname}-testsuite${extract.suffix}.sig \
            ${distpath}/${distname}-testsuite${extract.suffix}
    }
}

extract.only        ${distname}-x86_64-apple-darwin${extract.suffix} \
                    ${distname}-testsuite${extract.suffix}

# use these to specify python versions, python3 required
set python3_version 3.7
set python3_version_nickname \
                    [join [lrange [split ${python3_version} .] 0 1] {}]

set srcpath ${workpath}/src

# Note: ghc has DESTDIR; however, specifying --prefix=${prefix} installs
# binaries into ${prefix}, not DESTDIR.  Work around this by setting
# --prefix=${destroot}${prefix} and not setting DESTDIR

if { [variant_isset "prebuilt"] } {
    set bootstrap_dir ${destroot}${prefix}
} else {
    set bootstrap_dir ${workpath}/bootstrap

    distfiles-append \
                    ${distname}-src${extract.suffix}
    checksums-append \
                    ${distname}-src${extract.suffix} \
                    rmd160  2640736ab93348a6f9550d914d811c0e62b77e50 \
                    sha256  4d4aa1e96f4001b934ac6193ab09af5d6172f41f5a5d39d8e43393b9aafee361 \
                    size    19092168

    depends_build-append \
                    port:alex \
                    port:autoconf \
                    port:automake \
                    port:happy \
                    port:HsColour \
                    port:python${python3_version_nickname} \
                    port:py${python3_version_nickname}-sphinx \
                    port:texlive \
                    port:texlive-fonts-extra \
                    port:texlive-fonts-recommended \
                    port:texlive-latex-extra

    pre-configure {
        xinstall -m 0755 -d ${bootstrap_dir}
    }

    # add the bootstrap binary and the sphinx-build binary to PATH
    configure.env-append \
        PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin

    # overwrite `build.env`
    build.env \
        PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin

    pre-build {
        # test: move extracted testsuite directory to src
        xinstall -m 0755 -d ${srcpath}/${distname}
        move        ${test.dir} ${srcpath}/${distname}/testsuite
        test.dir    ${srcpath}/${distname}/testsuite
    }

    post-build {
        # bootstrap build/destroot from ${distname}-src${extract.suffix}

        use_parallel_build yes

        # extract
        extract.dir  ${srcpath}
        extract.only ${distname}-src${extract.suffix}
        portextract::extract_main

        # fix DejaVu texlive fonts names, e.g. "\setmonofont{DejaVu Sans Mono}"
        foreach f "\
            ${srcpath}/${distname}/libraries/Cabal/Cabal/doc/conf.py \
            ${srcpath}/${distname}/docs/users_guide/conf.py \
            " {
            reinplace -E "s|(\{DejaVu\[\[:alnum:\]_\]*)\[\[:space:\]\]+|\\1|g" \
                ${f}
            reinplace -E "s|(\{DejaVu\[\[:alnum:\]_\]*)\[\[:space:\]\]+|\\1|g" \
                ${f}
            reinplace -E "s|\{(DejaVu\[\[:alnum:\]_\]*)\}|\{\\1.ttf\}|g" \
                ${f}
        }
        # fix python3 executable name
        foreach f "\
            ${srcpath}/${distname}/boot \
            ${srcpath}/${distname}/utils/checkUniques/check-uniques.py \
            " {
            reinplace -E "s|^(#!/usr/bin/env python)3|\\1${python3_version}|" \
                ${f}
        }

        system -W ${srcpath}/${distname} "\
            export \
                PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin ; \
            ./boot \
            "

        # configure
        # install the final compiler to destroot
        configure.pre_args \
            --prefix=${destroot}${prefix}
        set configure_args \
            --with-ghc=${bootstrap_dir}/bin/ghc
        configure.dir ${srcpath}/${distname}
        system -W ${srcpath}/${distname} "\
            export \
                PATH=/usr/bin:$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin ; \
            ${configure.cmd} ${configure.pre_args} ${configure_args} \
            "

        # build and destroot the second stage: `make && make install`
        system -W ${srcpath}/${distname} "\
            export \
                PATH=/usr/bin:$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin ; \
            ${build.cmd} [portbuild::build_getjobsarg] \
            "
        system -W ${srcpath}/${distname} "\
            export \
                PATH=/usr/bin:$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_version}/bin ; \
            ${build.cmd} ${destroot.pre_args} \
            "
    }
}

# install the initial bootstrap compiler to destroot
configure.pre_args  --prefix=${bootstrap_dir}

# the PATH environment must provide the bootstrap path
# note: this command does not change the destroot PATH environment, so export
# PATH explicitly in the necessary system command below
build.env-append \
    PATH=$env(PATH):${bootstrap_dir}/bin

# Note: `make install` in bootstrap build cannot use a parallel build
use_parallel_build  no

build.target        install

destroot {
    xinstall -W ${filespath} -m 0644 ./ghci.conf ${destroot}${prefix}/etc
}

post-destroot {
    # delete any destroot path appearing in text files
    fs-traverse f ${destroot}${prefix} {
        if {[file isfile ${f}]} {
            if {[string match "text/*" [lindex [exec /usr/bin/file --mime-type ${f}] end]]} {
                reinplace -q "s|${destroot}||g" ${f}
            }
        }
    }
}

post-activate {
    system "${prefix}/bin/ghc-pkg recache"
}

test.dir            ${worksrcpath}/testsuite
test.target         test
test.run            yes

notes "The GHC User Manual is available at:

    file://${prefix}/share/doc/${distname}/html/index.html
    ${prefix}/share/doc/${distname}/users_guide.pdf

Copy/edit ${prefix}/etc/ghci.conf to your directory ~/.ghc
for a user-specific startup configuration."
