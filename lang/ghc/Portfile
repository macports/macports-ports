# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           gpg_verify 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           legacysupport 1.1

# Disable on all systems, we just need the libraries for the binary patching
legacysupport.newest_darwin_requires_legacy 5

name                ghc
version             8.10.7
revision            0
categories          lang haskell
maintainers         {ieee.org:s.t.smith @essandess} openmaintainer
license             BSD
platforms           darwin
supported_archs     x86_64

description         The Glorious Glasgow Haskell Compilation System
long_description    The Glasgow Haskell Compiler is a robust, \
                    fully-featured, optimising compiler and \
                    interactive environment for Haskell 98, GHC \
                    compiles Haskell to either native code or C.  It \
                    implements numerous experimental language \
                    extensions to Haskell 98, for example: \
                    concurrency, a foreign language interface, \
                    multi-parameter type classes, scoped type \
                    variables, existential and universal \
                    quantification, unboxed types, exceptions, weak \
                    pointers, and so on.  GHC comes with a \
                    generational garbage collector, and a space and \
                    time profiler.

homepage            http://haskell.org/${name}

# Bootstrapped ghc is the default build
variant prebuilt \
    description {Do not bootstrap ghc; install the pre-built binary.} {
    # https://gitlab.haskell.org/ghc/ghc/-/issues/19646
    set workpath_destdir_pattern /Users/builder/Desktop/builds
}

# https://www.haskell.org/ghcup/
# https://gitlab.haskell.org/haskell/ghcup/blob/master/README.md#manual-install
use_xz              yes
master_sites        https://downloads.haskell.org/~${name}/${version}
distfiles           ${distname}-x86_64-apple-darwin${extract.suffix} \
                    ${distname}-testsuite${extract.suffix}

checksums           ${distname}-x86_64-apple-darwin${extract.suffix} \
                    rmd160  0869c97fa384e1ffe414792c805050b64b0fe314 \
                    sha256  287db0f9c338c9f53123bfa8731b0996803ee50f6ee847fe388092e5e5132047 \
                    size    189784784 \
                    ${distname}-testsuite${extract.suffix} \
                    rmd160  ea29da92a5c6d6abb6ccb2128b615cf04e0a78a3 \
                    sha256  df8627dc50b9182dec96085afeb005ccf5a0adc56c40340330a5df65de2b82fe \
                    size    2266208

gpg_verify.use_gpg_verification \
                    yes

if {[option gpg_verify.use_gpg_verification]} {
    distfiles-append \
                    ${distname}-x86_64-apple-darwin${extract.suffix}.sig \
                    ${distname}-testsuite${extract.suffix}.sig
    checksums-append \
                    ${distname}-x86_64-apple-darwin${extract.suffix}.sig \
                    size    438 \
                    ${distname}-testsuite${extract.suffix}.sig \
                    size    438

    post-checksum {
        # check GPG signature: https://www.haskell.org/ghc/download_ghc_8_6_5.html
        set gpg_keyid 588764fbe22d19c4

        gpg_verify.verify_gpg_signature \
            ${filespath}/keyid-${gpg_keyid}.txt \
            ${distpath}/${distname}-x86_64-apple-darwin${extract.suffix}.sig \
            ${distpath}/${distname}-x86_64-apple-darwin${extract.suffix}

        gpg_verify.verify_gpg_signature \
            ${filespath}/keyid-${gpg_keyid}.txt \
            ${distpath}/${distname}-testsuite${extract.suffix}.sig \
            ${distpath}/${distname}-testsuite${extract.suffix}
    }
}

extract.only        ${distname}-x86_64-apple-darwin${extract.suffix} \
                    ${distname}-testsuite${extract.suffix}

# If legacy support is active, patch the bootstrap binaries to redirect libSystem.B.dylib
# to MacPorts wrapped implementation which reexports the system library, adding
# each missing in each OS.
if {${os.platform} eq "darwin" && ${os.major} <= [legacysupport::get_newest_darwin_with_missing_symbols]} {
    depends_lib-append [legacysupport::get_dependency]
    post-extract {
        foreach f [ exec find ${workpath}/ -type f -and -name "*.dylib" -or -name "*ghc*" -and -not -name "*stderr"] {
            if {[string match "application/*" [lindex [exec /usr/bin/file --mime-type ${f}] end]]} {
                set sLib /usr/lib/libSystem.B.dylib
                set lLib ${prefix}/lib/libMacportsLegacySystem.B.dylib
                system "install_name_tool -change ${sLib} ${lLib} ${f} > /dev/null 2>&1 ; true"
            }
        }
    }
}

# Build requires C11
compiler.c_standard 2011
# On OSX 10.{8,9} with clang 503, 600
#   :info:build dtrace: failed to open td=gnu11/usr/bin/clang -std=gnu11 -E ...
compiler.blacklist-append {clang < 700}

# use these to specify python versions, python3 required
# use ${prefix}/var/macports/sources/rsync.macports.org/macports/release/tarballs/ports/_resources/port1.0/group/python-1.0.tcl
set python3_version 39
set python3_branch [string index ${python3_version} 0].[string range ${python3_version} 1 end]

set srcpath ${workpath}/src

# get the objdump rpath names that match ${workpath} in the binary
proc get_workpath_list { binname workpath_destdir_pattern } {
    return [exec bash -c "otool -l \"${binname}\" 2>/dev/null \
        | grep -E -A 2 -e '\[\[:space:]]+cmd\[\[:space:]]+LC_RPATH' \
        | grep -E -e '\[\[:space:]]+path\[\[:space:]]+' \
        | grep -E -o -e '(${workpath_destdir_pattern}\[^ ]+)' || true"]
}

# fix ${workpath} rpath dirs
proc fix_workpath_rpath { binname workpath_destdir_pattern libdir_glob rpath_re } {
    global destroot
    set workpath_list \
        [get_workpath_list ${binname} ${workpath_destdir_pattern}]
    foreach path [lreverse ${workpath_list}] {
        system "install_name_tool -delete_rpath \"${path}\" \"${binname}\" || true"
    }
    foreach rpath [exec bash -c \
        "otool -L \"${binname}\" | grep -E -o -e '${rpath_re}' || true"] {
        set libname [strsed ${rpath} "s|^@rpath/||"]
        set libpath [glob -nocomplain "${destroot}${libdir_glob}/${libname}"]
        if { ${libpath} ne "" } {
            set libprefixpath \
                [strsed [file dirname ${libpath}] "s|${destroot}||"]
            system "install_name_tool -add_rpath \"${libprefixpath}\" \"${binname}\" || true"
        }
    }
}

# `make install` in bootstrap build cannot use a parallel build.
# Also during the main build the 'ghc-stage1' processes can use huge amounts
# of memory, leading to build failures (particularly on the buildbots or VMs
# with limited resources). So disable parallel builds there as well, at the
# expense of a longer build time (mitigated by fact most users will then get
# the binary installation).
use_parallel_build  no

# Note: ghc has DESTDIR; however, specifying --prefix=${prefix} installs
# binaries into ${prefix}, not DESTDIR.  Work around this by setting
# --prefix=${destroot}${prefix} and not setting DESTDIR

if { [variant_isset "prebuilt"] } {
    set bootstrap_dir ${destroot}${prefix}

    # install the initial bootstrap compiler to destroot
    configure.pre_args \
                    --prefix=${bootstrap_dir}

    # the PATH environment must provide the bootstrap path
    build.env-append \
                    "PATH=$env(PATH):${bootstrap_dir}/bin"
} else {
    set bootstrap_dir ${workpath}/bootstrap

    distfiles-append \
                    ${distname}-src${extract.suffix}
    checksums-append \
                    ${distname}-src${extract.suffix} \
                    rmd160  c8ce8ca9d952511438d5e8af25c689fd38f11fed \
                    sha256  e3eef6229ce9908dfe1ea41436befb0455fefb1932559e860ad4c606b0d03c9d \
                    size    19932668

    depends_build-append \
                    port:alex \
                    port:autoconf \
                    port:automake \
                    port:bash \
                    port:bzip2 \
                    port:cctools \
                    port:gzip \
                    port:happy \
                    port:HsColour \
                    port:python${python3_version} \
                    port:py${python3_version}-sphinx \
                    port:texlive \
                    port:texlive-fonts-extra \
                    port:texlive-fonts-recommended \
                    port:texlive-latex-extra \
                    port:xz

    # Add these MacPorts dependencies after this issue is fixed:
    # https://gitlab.haskell.org/ghc/ghc/-/issues/18752
    # depends_lib-append \
    #                 port:gmp \
    #                 port:libffi \
    #                 port:libiconv

    post-extract {
        # test: move extracted testsuite directory to src
        xinstall -m 0755 -d ${srcpath}/${distname}
        move        ${worksrcpath}/testsuite ${srcpath}/${distname}/testsuite
    }

    # libHSbase shipped with GHC links against system libiconv, which provides the
    # 'iconv' symbol, but not the 'libiconv' symbol. Because the compilation
    # process statically links libHSbase.a, we must have /usr/lib in the library
    # search path first :/
    compiler.library_path
    compiler.cpath

    # install the initial bootstrap compiler to destroot
    configure.pre_args \
                    --prefix=${bootstrap_dir}

    # Add these MacPorts dependencies after this issue is fixed:
    # https://gitlab.haskell.org/ghc/ghc/-/issues/18752
    #                 --with-ffi-includes=${prefix}/include \
    #                 --with-ffi-libraries=${prefix}/lib \
    #                 --with-gmp-includes=${prefix}/include \
    #                 --with-gmp-libraries=${prefix}/lib \
    #                 --with-iconv-includes=${prefix}/include \
    #                 --with-iconv-libraries=${prefix}/lib

    # add the bootstrap binary and the sphinx-build binary to PATH
    configure.env-append \
        GHC=${bootstrap_dir}/bin/ghc \
        "PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_branch}/bin"

    pre-configure {
        xinstall -m 0755 -d ${bootstrap_dir}
    }

    # the PATH environment must provide the bootstrap path
    build.env \
        "PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_branch}/bin"

    post-build {
        # bootstrap build/destroot from ${distname}-src${extract.suffix}

        # extract
        extract.dir     ${srcpath}
        extract.only    ${distname}-src${extract.suffix}
        portextract::extract_main

        # fix DejaVu texlive fonts names, e.g. "\setmonofont{DejaVu Sans Mono}"
        foreach f "\
            ${srcpath}/${distname}/libraries/Cabal/Cabal/doc/conf.py \
            ${srcpath}/${distname}/docs/users_guide/conf.py \
            " {
            reinplace -E "s|(\{DejaVu\[\[:alnum:]_]*)\[\[:space:]]+|\\1|g" \
                ${f}
            reinplace -E "s|(\{DejaVu\[\[:alnum:]_]*)\[\[:space:]]+|\\1|g" \
                ${f}
            reinplace -E "s|\{(DejaVu\[\[:alnum:]_]*)\}|\{\\1.ttf\}|g" \
                ${f}
        }
        # fix python3 executable name
        foreach f "\
            ${srcpath}/${distname}/boot \
            ${srcpath}/${distname}/utils/checkUniques/check-uniques.py \
            " {
            reinplace -E "s|^(#!/usr/bin/env python)3|\\1${python3_branch}|" \
                ${f}
        }

        # see https://trac.macports.org/wiki/UsingTheRightCompiler
        configure.env-append    CC=${configure.cc} \
                                CXX=${configure.cxx}
        build.env-append        CC=${configure.cc} \
                                CXX=${configure.cxx}
        # diff -Naur ghc ghc-patched | sed -E -e 's/ghc(-patched)?\//.\//g' > patch-gmp-ghc.mk.diff
        system -W ${srcpath}/${distname} "patch -p0 < ${filespath}/patch-gmp-ghc.mk.diff"

        system -W ${srcpath}/${distname} \
                    "export ${configure.env} ;\
                    ./boot"

        # configure
        # install the final compiler to destroot
        configure.pre_args-replace \
                    --prefix=${bootstrap_dir} \
                    --prefix=${destroot}${prefix}
        configure.dir   ${srcpath}/${distname}
        system -W ${srcpath}/${distname} \
            "export ${configure.env};\
            ${configure.cmd} ${configure.pre_args}"

        # build and destroot the second stage: `make && make install`
        system -W ${srcpath}/${distname} \
            "export ${build.env};\
            ${build.cmd} [portbuild::build_getjobsarg]"
        system -W ${srcpath}/${distname} \
            "export ${build.env};\
            ${build.cmd} ${destroot.pre_args}"
    }
}

build.target        install

destroot {
    xinstall -W ${filespath} -m 0644 ./ghci.conf ${destroot}${prefix}/etc
}

# https://gitlab.haskell.org/ghc/ghc/-/issues/19646
set workpath_destdir_pattern ${workpath}
post-destroot {
    # fix rpath searches
    foreach f [concat \
        [glob -type f ${destroot}${prefix}/lib/${name}-${version}/bin/*] \
        [glob -type f ${destroot}${prefix}/lib/${name}-${version}/*/*.dylib]] {
        if {[file executable ${f}]
            || [string match *.dylib ${f}]} {
            fix_workpath_rpath ${f} \
                ${workpath_destdir_pattern} \
                ${prefix}/lib/${name}-${version}/* \
                {@rpath/lib.+\.dylib}
        }
    }
}

post-destroot {
    # delete any destroot path appearing in text files
    fs-traverse f ${destroot}${prefix} {
        if {[file isfile ${f}]} {
            if {[string match "text/*" [lindex [exec /usr/bin/file --mime-type ${f}] end]]} {
                reinplace -q "s|${destroot}||g" ${f}
            }
        }
    }
}

post-activate {
    system "${prefix}/bin/ghc-pkg recache"
}

pre-test {
    test.env-append \
        "PATH=$env(PATH):${bootstrap_dir}/bin:${frameworks_dir}/Python.framework/Versions/${python3_branch}/bin"
}

test.run            yes
test.dir            ${srcpath}/${distname}/testsuite
test.target         test

notes "The GHC User Manual is available at:

    file://${prefix}/share/doc/${distname}/html/index.html
    ${prefix}/share/doc/${distname}/users_guide.pdf

Copy/edit ${prefix}/etc/ghci.conf to your directory ~/.ghc
for a user-specific startup configuration."

# livecheck broken on downloads.haskell.org
# See: https://lists.macports.org/pipermail/macports-dev/2019-December/041581.html
#livecheck.type      regex
#livecheck.url       https://downloads.haskell.org/~${name}
#livecheck.regex     (\\d+(?:\\.\\d+){1,3})
