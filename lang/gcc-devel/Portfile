# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                                       1.0
PortGroup           select                       1.0
PortGroup           compiler_blacklist_versions  1.0
PortGroup           active_variants              1.1
PortGroup           conflicts_build              1.0
PortGroup           cltversion                   1.0

epoch               5
name                gcc-devel

homepage            https://gcc.gnu.org/

platforms           darwin
categories          lang
maintainers         nomaintainer
# an exception in the license allows dependents to not be GPL
license             {GPL-3+ Permissive}

description         The GNU compiler collection, prerelease BETA snapshot.
long_description    The GNU compiler collection, including front ends for \
                    C, C++, Objective-C, Objective-C++ and Fortran. \
                    This is an !experimental!, !BETA! version \
                    built from GCC snapshots.

if {${os.arch} eq "arm"} {
    # Use lead Darwin developer branch for now
    # Eventually Darwin Arm support will be merged with upstream at which point
    # Arm machines can use same snapshots as Intel.
    PortGroup       github 1.0

    github.setup    iains gcc-12-branch a613c586b5461d7fb99fa076ef7e59eca4227fae

    # Version must follow same scheme as with GCC snapshots below <version>-<commit-date>
    version         12-20220615
    revision        0
    subport         libgcc-devel { revision 0 }

    checksums       rmd160  49d5ea553c6a8e38eec8f2c4c3ce0706bd971cf8 \
                    sha256  bcf82d6120b3be42fbdae7f31da0c653c3a8f55a4b686516f9793ccd6753a10a \
                    size    131005938

    configure.args-append --with-darwin-extra-rpath=${prefix}/lib/libgcc

} else {
    # Use regular GCC releases and snapshsots

    version         13-20220612
    revision        0
    subport         libgcc-devel { revision 0 }

    checksums       rmd160  3ec04e972ed1dfa6e1c028e2576e1791eebde562 \
                    sha256  7687484cc62b3b212fff150f74b6b539cab38172b6ea7a2b4e20271e28453470 \
                    size    79358800

    # Primary releases
    master_sites    https://ftpmirror.gnu.org/gcc/gcc-${version}/ \
                    https://mirror.its.dal.ca/gnu/gcc/gcc-${version}/ \
                    https://mirrors.kernel.org/gnu/gcc/gcc-${version}/ \
                    https://www.mirrorservice.org/sites/ftp.gnu.org/gnu/gcc/gcc-${version}/ \
                    https://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.gnu.org/gcc/gcc-${version}/ \
                    https://mirror.yongbok.net/gnu/gcc/gcc-${version}/ \
                    http://mirror.koddos.net/gcc/releases/gcc-${version}/ \
                    ftp://ftp.gwdg.de/pub/linux/gcc/releases/gcc-${version}/ \
                    ftp://gcc.ftp.nluug.nl/mirror/languages/gcc/releases/gcc-${version}/ \
                    ftp://gcc.gnu.org/pub/gcc/releases/gcc-${version}/ \
                    gnu:gcc/gcc-${version}
    # snapshots and RC candidates
    master_sites-append \
                    https://mirror.koddos.net/gcc/snapshots/${version}/ \
                    https://bigsearcher.com/mirrors/gcc/snapshots/${version}/ \
                    ftp://ftp.funet.fi/pub/mirrors/sources.redhat.com/pub/gcc/snapshots/${version}/ \
                    ftp://gcc.gnu.org/pub/gcc/snapshots/${version}/

    distname        gcc-${version}
    use_xz          yes

}

depends_build-append \
                    port:texinfo
depends_lib-append  port:cctools \
                    port:gmp \
                    path:lib/pkgconfig/isl.pc:isl \
                    port:ld64 \
                    port:libiconv \
                    port:libmpc \
                    port:mpfr \
                    port:zlib \
                    port:zstd
depends_run-append  port:gcc_select \
                    port:libgcc-devel

depends_skip_archcheck-append gcc_select ld64 cctools
license_noconflict  gmp mpfr ppl libmpc zlib

set major           [lindex [split ${version} .-] 0]

platform darwin {
    if { ${build_arch} eq "arm64" } {
        configure.pre_args-append --build=aarch64-apple-darwin${os.major}
    } else {
        configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
    }
}

set gcc_configure_langs {c c++ objc obj-c++ lto fortran}
if {${subport} eq ${name} && ${build_arch} ne "i386"} {
    # jit compiler is not building on i386 systems
    # https://trac.macports.org/ticket/61130
    lappend gcc_configure_langs jit
}

proc get_clean_sysroot {} {
    global configure.sdkroot
    # if the sdkroot is one of the current, rapidly changing SDKS, use the generic one
    return [regsub {MacOSX1[1-9]\.[0-9]+\.sdk} ${configure.sdkroot} {MacOSX.sdk}]
}

configure.dir       ${workpath}/build
configure.cmd       ${worksrcpath}/configure
configure.args      --enable-languages=[join ${gcc_configure_langs} ","] \
                    --libdir=${prefix}/lib/${name} \
                    --includedir=${prefix}/include/${name} \
                    --infodir=${prefix}/share/info \
                    --mandir=${prefix}/share/man \
                    --datarootdir=${prefix}/share/gcc-devel \
                    --with-local-prefix=${prefix} \
                    --with-system-zlib \
                    --disable-nls \
                    --program-suffix=-mp-devel \
                    --with-gxx-include-dir=${prefix}/include/${name}/c++/ \
                    --with-gmp=${prefix} \
                    --with-mpfr=${prefix} \
                    --with-mpc=${prefix} \
                    --with-isl=${prefix} \
                    --with-zstd=${prefix} \
                    --enable-stage1-checking \
                    --disable-multilib \
                    --enable-lto \
                    --enable-libstdcxx-time \
                    --with-build-config=bootstrap-debug \
                    --with-as=${prefix}/bin/as \
                    --with-ld=${prefix}/bin/ld \
                    --with-ar=${prefix}/bin/ar \
                    --with-bugurl=https://trac.macports.org/newticket \
                    --enable-host-shared

if { ${os.major} < 15 } {
    # see https://lists.macports.org/pipermail/macports-dev/2017-August/036209.html
    # --disable-tls does not limit functionality
    # it only determines how std::call_once works
    configure.args-append  --disable-tls
}

# Disable ccache
configure.ccache    no

if { ${os.platform} eq "darwin" } {
    # gcc has build issues on macOS 11.3 with the use of Xcode 12.5 clang via cctools for ld
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
    # https://trac.macports.org/ticket/62775
    if { ([vercmp ${xcodeversion} 12.5] >= 0 && [vercmp ${xcodeversion} 13] < 0) || \
         ([vercmp ${cltversion} 12.5] >= 0 && [vercmp ${cltversion} 13] < 0) } \
    {
        # Skip bootstrap comparison entirely
        post-patch {
            reinplace {s|^do-compare =|do-compare = /usr/bin/true|g} \
                ${worksrcpath}/Makefile.in \
                ${worksrcpath}/config/bootstrap-debug.mk \
                ${worksrcpath}/config/bootstrap-debug-lean.mk \
                ${worksrcpath}/config/bootstrap-debug-lib.mk
        }
    }
}

configure.env-append \
                    AR_FOR_TARGET=${prefix}/bin/ar \
                    AS_FOR_TARGET=${prefix}/bin/as \
                    LD_FOR_TARGET=${prefix}/bin/ld \
                    NM_FOR_TARGET=${prefix}/bin/nm \
                    OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
                    RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
                    STRIP_FOR_TARGET=${prefix}/bin/strip \
                    OTOOL=${prefix}/bin/otool \
                    OTOOL64=${prefix}/bin/otool

pre-configure {

    # Set package info
    configure.args-append --with-pkgversion="MacPorts ${name} ${version}_${revision}${portvariants}"

    if {${configure.sdkroot} ne ""} {
        # We should be using --with-build-sysroot here.  Using --with-sysroot
        # changes the behavior of the installed gcc to look in that sysroot
        # by default instead of /.  Using --with-build-sysroot is supposed
        # to be used during the build but not impact the installed product.
        # Unfortunately, the build fails because the value doesn't get
        # plumbed everywhere it is supposed to.
        #
        # https://trac.macports.org/ticket/53726
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79885
        configure.args-append --with-sysroot="[get_clean_sysroot]"
    }

}

variant enable_stdlib_flag description {Enable stdlib command line flag to select c++ runtime} {
    # Enables support for specifying the c++ runtime via `-stdlib=` in a similar
    # way to clang. For more details see the later comments in
    #   https://www.mail-archive.com/gcc-patches@gcc.gnu.org/msg257385.html
    # Note : This 'bakes' the libc++ include directory into gcc,
    # which is then used as the default search location when `-stdlib=libc++`
    # is given. Therefore to have consistency across various OS versions, and to enable
    # modern c++ standards, use a recent macports clang port to provide this.
    set mp_clang_ver       13
    if {${subport} eq ${name}} {
        depends_run-append port:clang-${mp_clang_ver}
    }
    configure.args-append  --with-gxx-libcxx-include-dir="${prefix}/libexec/llvm-${mp_clang_ver}/include/c++/v1"
}
default_variants-append +enable_stdlib_flag

# https://trac.macports.org/ticket/29067
# https://trac.macports.org/ticket/29104
# https://trac.macports.org/ticket/47996
# https://trac.macports.org/ticket/58493
compiler.blacklist-append {clang < 800} gcc-4.0 *gcc-4.2 {llvm-gcc-4.2 < 2336.1} {macports-clang-3.[4-7]}

# https://build.macports.org/builders/ports-10.13_x86_64-builder/builds/105513/steps/install-port/logs/stdio
# c++/v1/functional:1408:2: error: no member named 'fancy_abort' in namespace 'std::__1'; did you mean simply 'fancy_abort'?
compiler.blacklist-append {clang < 1000}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

build.dir           ${configure.dir}
build.target        bootstrap-lean

destroot.target     install install-info-host

# Is this gcc release supported here.
if { ${os.major} < 11 } {
    known_fail      yes
    pre-fetch {
        ui_error "${name} ${version} is not supported on Darwin ${os.major}"
        return -code error "incompatible OS X version"
    }
}

# gcc cannot build if libunwind-headers is active
conflicts_build-append libunwind-headers

# List of dylibs to be installed
# Note that we really don't want to include libgcc_ext.10.[45].dylib here, but install_name_tool
# doesn't know how to change the id of stubs, and it's easier than recreating them for each
# gcc port.
set dylibs {libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib libgcc_s.1.dylib libgcc_s.1.1.dylib \
                libgcc_s.2.dylib libgfortran.5.dylib libquadmath.0.dylib libstdc++.6.dylib \
                libobjc-gnu.4.dylib libgomp.1.dylib libitm.1.dylib libssp.0.dylib libasan.6.dylib \
                libubsan.1.dylib libatomic.1.dylib libgcc_ehs.1.1.dylib}


if {${subport} ne ${name}} {

    # Set conflict against port providing primary runtime
    if { ${os.major} < 10 } {
        conflicts libgcc libgcc7
    } else {
        conflicts libgcc libgcc10
    }

    # http://trac.macports.org/ticket/35770
    # http://trac.macports.org/ticket/38814
    # While there can be multiple versions of these runtimes in a single
    # process, it is not possible to pass objects between different versions,
    # so we simplify this by having the libgcc port provide the newest version
    # of these runtimes for all versions of gcc to use.
    #
    # If there is a binary incompatible change to the runtime in a future
    # version of gcc, then the latest version of gcc to provide a given ABI
    # version should continue to provide a subport for that and older gcc
    # versions.

    depends_run
    depends_lib-delete   port:zlib
    depends_build-append {*}${depends_lib}
    depends_lib          port:zlib

    configure.args-replace \
        --libdir=${prefix}/lib/${name} \
        --libdir=${prefix}/lib/libgcc

    # see https://trac.macports.org/ticket/54766
    configure.args-replace \
        --includedir=${prefix}/include/${name} \
        --includedir=${prefix}/include/gcc

    configure.args-replace \
        --with-gxx-include-dir=${prefix}/include/${name}/c++/ \
        --with-gxx-include-dir=${prefix}/include/gcc/c++/

    # TODO: Possibly disable bootstrap with appropriate configure flags.
    #       the problem is that libstdc++'s configure script tests for tls support
    #       using the running compiler (not gcc for which libstdc++ is being built).
    #       Thus when we build with clang, we get a mismatch
    # http://trac.macports.org/ticket/36116
    #compiler.blacklist-append {clang < 425}
    #configure.args-append --disable-bootstrap
    #build.target        all

    post-destroot {

        # Temporary working dir for dylibs
        file mkdir ${destroot}${prefix}/lib/libgcc.merged

        # loop over libs to install
        foreach dylib ${dylibs} {

            # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
            # https://trac.macports.org/ticket/40098
            # https://trac.macports.org/ticket/40100
            if {! [file exists ${destroot}${prefix}/lib/libgcc/${dylib}]} {
                continue
            }

            move ${destroot}${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/libgcc.merged
            if {[variant_exists universal] && [variant_isset universal]} {
                foreach archdir [glob ${destroot}${prefix}/lib/libgcc/*/] {
                    set archdir_nodestroot [string map "${destroot}/ /" ${archdir}]
                    if {[file exists ${archdir}/${dylib}]} {
                        system "install_name_tool -id ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}"
                        foreach link [glob -tails -directory ${archdir} *.dylib] {
                            system "install_name_tool -change ${archdir_nodestroot}${link} ${prefix}/lib/libgcc/${link} ${archdir}/${dylib}"
                        }
                        system "lipo -create -output ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib} ${archdir}/${dylib} && mv ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
                    }
                }
            }

            # strip debug symbols to supress debugger warnings:
            # http://trac.macports.org/attachment/ticket/34831
            if {! [string match *libgcc_ext* ${dylib}]} {
                system "strip -x ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
            }
        }

        file delete -force ${destroot}${prefix}/bin
        file delete -force ${destroot}${prefix}/share
        file delete -force ${destroot}${prefix}/lib/libgcc
        file delete -force ${destroot}${prefix}/libexec

        move ${destroot}${prefix}/lib/libgcc.merged ${destroot}${prefix}/lib/libgcc

        # For binary compatibility with binaries that linked against the old libstdcxx port
        ln -s libgcc/libstdc++.6.dylib ${destroot}${prefix}/lib/libstdc++.6.dylib

        # Create README detailing runtime installed.
        # Also used as file checked for path-like port dependency for libgcc/libgcc-devel deps.
        xinstall -d ${destroot}${prefix}/share/doc/libgcc
        system "echo 'libgcc runtime is provided by ${subport}' > ${destroot}${prefix}/share/doc/libgcc/README"

    }

} else {

    post-destroot {

        file delete ${destroot}${prefix}/share/info/dir

        foreach file [glob ${destroot}${prefix}/share/{info,man/man7}/*] {
            set extension [file extension ${file}]
            set newfile [regsub "${extension}$" ${file} "-mp-devel${extension}"]
            file rename ${file} ${newfile}
        }

        # loop over libs to install
        foreach dylib ${dylibs} {
            # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
            # https://trac.macports.org/ticket/40098
            # https://trac.macports.org/ticket/40100
            if {[file exists ${destroot}${prefix}/lib/${name}/${dylib}]} {
                delete ${destroot}${prefix}/lib/${name}/${dylib}
                ln -s ${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/${name}/${dylib}
            }
            if {[variant_exists universal] && [variant_isset universal]} {
                foreach archdir [glob ${destroot}${prefix}/lib/${name}/*/] {
                    if {[file exists ${archdir}/${dylib}]} {
                        delete ${archdir}/${dylib}
                        ln -s ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}
                    }
                }
            }
        }

    }

    select.group        gcc
    select.file         ${filespath}/mp-${name}

}

platform powerpc {
    configure.universal_archs ppc ppc64
}
if { ${os.platform} eq "darwin" && ${os.major} >= 20 } {
    platform i386 {
        configure.universal_archs x86_64 arm64
    }
    platform arm {
        configure.universal_archs x86_64 arm64
    }
} else {
    platform i386 {
        configure.universal_archs i386 x86_64
    }
}
variant universal {
    configure.args-delete --disable-multilib
}
# the generated compiler doesn't accept -arch
configure.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
build.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx-append ${configure.cxx_archflags}
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args

livecheck.type      regex
livecheck.url       ftp://gcc.gnu.org/pub/gcc/snapshots/
livecheck.regex     LATEST-${major} -> (${major}-\[0-9\]+)
