PortSystem              1.0
PortGroup select        1.0
PortGroup compiler_blacklist_versions 1.0

set llvm_version        3.5
set llvm_version_no_dot 35
name                    llvm-${llvm_version}
revision                8
subport                 clang-${llvm_version} { revision 9 }
set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
dist_subdir             llvm
categories              lang
platforms               darwin
license                 NCSA
maintainers             jeremyhu larryv

if {${subport} eq "llvm-${llvm_version}"} {
    homepage            http://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib         port:libedit port:libffi port:ncurses port:zlib
    depends_run         bin:perl:perl5 port:llvm_select

    # 3.2.6's install_name_tool doesn't support load commands we might see with newer clang+ld64
    # 4.3 is just a guess here and should be updated if there are additional reports with other Xcode versions
    if {[vercmp $xcodeversion 4.3] < 0 && [string match "*macports*" ${configure.compiler}]} {
        depends_build-append port:cctools
        depends_skip_archcheck-append cctools
    }
} elseif {${subport} eq "clang-${llvm_version}"} {
    homepage            http://clang.llvm.org/
    description         C, C++, Objective C and Objective C++ compiler
    long_description    Clang is an "LLVM native" C/C++/Objective-C compiler, \
                        which aims to deliver amazingly fast compiles (e.g. \
                        about 3x faster than GCC when compiling Objective-C \
                        code in a debug configuration), extremely useful error \
                        and warning messages and to provide a platform for \
                        building great source level tools. The included Clang \
                        Static Analyzer is a tool that automatically finds bugs in \
                        your code, and is a great example of the sort of tool \
                        that can be built using the Clang frontend as a \
                        library to parse C/C++ code.

    depends_lib         port:libxml2 port:llvm-${llvm_version} port:python27
    depends_run         port:clang_select port:ld64
    depends_build       port:cctools
    depends_skip_archcheck-append cctools ld64

    # Clang doesn't actually use any of these, but the LLVM makefile
    # system overlinks its binaries. Remove (or convert to build deps?)
    # after #46040 is resolved.
    depends_lib-append  port:libedit port:libffi port:ncurses port:zlib

    default_variants    +analyzer
}

#fetch.type              svn
#svn.revision            216817

#set compiler_rt_rev     ${svn.revision}
#set libcxx_rev          ${svn.revision}
#set clang-modernize_rev ${svn.revision}
#version                 ${llvm_version}-r${svn.revision}
#worksrcdir              trunk
#svn.url                 https://llvm.org/svn/llvm-project/llvm/trunk
#worksrcdir              release_${llvm_version_no_dot}
#svn.url                 https://llvm.org/svn/llvm-project/llvm/branches/release_${llvm_version_no_dot}
#default_variants-append +assertions

version                 ${llvm_version}.2
epoch                   1
master_sites            http://llvm.org/releases/${version}
use_xz                  yes
extract.suffix          .tar.xz
distfiles               llvm-${version}.src${extract.suffix}
worksrcdir              llvm-${version}.src

if {${distfiles} ne ""} {
    if {${subport} eq "llvm-${llvm_version}"} {
        if {[variant_isset polly]} {
            distfiles-append     polly-${version}.src${extract.suffix}
        }
    } elseif {${subport} eq "clang-${llvm_version}"} {
        distfiles-append     cfe-${version}.src${extract.suffix} compiler-rt-${version}.src${extract.suffix} libcxx-${version}.src${extract.suffix} clang-tools-extra-${version}.src${extract.suffix}
    }
}

checksums           llvm-3.5.2.src.tar.xz \
                    rmd160  a6117b21f7f6ffe694ed152fba492015450b63f8 \
                    sha256  44196156d5749eb4b4224fe471a29cc3984df92570a4a89fa859f7394fc0c575 \
                    cfe-3.5.2.src.tar.xz \
                    rmd160  72b746b57dbcdc4b1464de150148c2c0af99a750 \
                    sha256  4feb575f74fb3a74b6245400460230141bf610f235ef3a25008cfe6137828620 \
                    compiler-rt-3.5.2.src.tar.xz \
                    rmd160  ce3a3efa32eb9a095c5e00708d3641f8ee15610b \
                    sha256  542d7aadd21e7fe35bea0a7912bc965f08a1a566746cebcca76f96dcfeb74dc3 \
                    libcxx-3.5.2.src.tar.xz \
                    rmd160  0aab9e8ef62dd6a9e9f7d4ca620553fab40b00f8 \
                    sha256  bbf1269de11f43fe766c7ff108ec076d16ec9ddd4e929eec87027eee48a13647 \
                    clang-tools-extra-3.5.2.src.tar.xz \
                    rmd160  8b8dc7835393863e5c22e8f7c35a61330e0ad425 \
                    sha256  f21a374d74b194d8c984546266491b518859b5f12ed9abd49337b8060d3fc004 \
                    polly-3.5.2.src.tar.xz \
                    rmd160  ba98b905524b33a2489164e5fd8739b163eb0b19 \
                    sha256  9d2a4bb8607e0879a0537165b9c2af7cfe4cc998627a62951106bffa1929dbe8

patch.pre_args  -p1
patchfiles    \
        0001-MacPorts-Only-Update-install-targets-for-clang-subpo.patch \
        0002-MacPorts-Only-Use-full-path-for-the-dylib-id-instead.patch \
        0003-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
        0004-MacPorts-Only-Skip-checking-for-python-in-configure.patch \
        0005-Set-the-Mach-O-CPU-Subtype-to-ppc7400-when-targeting.patch \
        llvm-skip-unittests.patch

if {${subport} eq "clang-${llvm_version}"} {
    patchfiles-append \
        1001-MacPorts-Only-Prepare-clang-format-for-replacement-w.patch \
        1002-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
        1003-MacPorts-Only-Fix-libclang_rt-dylib-ids.patch \
        1004-MacPorts-Only-Relocate-clang-resources-using-llvm-ve.patch \
        1005-Call-powerpc-darwin-external-tools-with-arch-ppc.patch \
        1006-Default-to-ppc7400-for-OSX-10.5.patch \
        1007-Only-call-setpriority-PRIO_DARWIN_THREAD-0-PRIO_DARW.patch \
        1008-Default-to-fragile-ObjC-runtime-when-targeting-darwi.patch \
        1009-Fixup-libstdc-header-search-paths-for-older-versions.patch \
        2001-MacPorts-Only-Comment-out-SL-cctools-workaround.patch \
        2002-Do-not-build-a-separate-x86_64h-Haswell-slice-for-th.patch \
        2003-Build-Darwin-libclang_rt-libraries-against-real-SDKs.patch \
        2004-Clean-up-indentation-after-previous-change.patch \
        2005-Update-CheckArches-to-fallback-on-Intel-ppc-if-ld-v-.patch \
        2006-Fall-back-on-xcodebuild-sdk-when-xcrun-sdk-is-not-su.patch \
        2007-On-darwin-build-ppc-slices-of-the-compiler-runtime-i.patch \
        3001-buildit-build-fix-for-Leopard.patch \
        3002-buildit-Set-compatibility-version-to-RC_ProjectSourc.patch \
        3003-Fix-local-and-iterator-when-building-with-Lion-and-n.patch \
        3004-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        3005-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
        compiler_rt-toolchain.patch

    # I'm not sure if we need to delete this.  It seems to build fine with it
    # present, but we used to explicitly only use this patch for the llvm subport.
    patchfiles-delete \
        0004-MacPorts-Only-Skip-checking-for-python-in-configure.patch

    # Introduces a failure during build (-arch ?? passed to ld), to be investigated:
    patchfiles-delete \
        1005-Call-powerpc-darwin-external-tools-with-arch-ppc.patch

    if {![variant_isset arm_runtime]} {
        # Alternate fix for #33272.
        patchfiles-append   disable-arm-runtime.patch
    }

    build.target        clang-only
    destroot.target     install-clang
}

build.env-append        VERBOSE=1 \
                        REQUIRES_RTTI=1 \
                        LLVM_SUBMIT_VERSION=3 \
                        LLVM_SUBMIT_SUBVERSION=7.1
destroot.env-append     VERBOSE=1 \
                        REQUIRES_RTTI=1 \
                        LLVM_SUBMIT_VERSION=3 \
                        LLVM_SUBMIT_SUBVERSION=7.1

configure.dir           ${workpath}/build
build.dir               ${configure.dir}

configure.cmd           ${worksrcpath}/configure
configure.pre_args-delete --prefix=${prefix}
configure.args          --enable-bindings=none --enable-libffi --enable-shared --enable-jit \
                        --enable-optimized --disable-profiling --enable-pic \
                        --enable-debug-symbols --disable-debug-runtime \
                        --prefix="${sub_prefix}" --disable-assertions

if {${subport} eq "llvm-${llvm_version}"} {
    select.group        llvm
    select.file         ${filespath}/mp-${subport}
} elseif {${subport} eq "clang-${llvm_version}"} {
    select.group        clang
    select.file         ${filespath}/mp-${subport}

    configure.args-append --with-python=${prefix}/bin/python2.7
}

# llvm-3.5 and later requires a C++11 runtime
# XCode 4.3's clang (318.x) fails per https://trac.macports.org/ticket/44161
# XCode 4.5's clang (421.11.66) fails due to http://llvm.org/bugs/show_bug.cgi?id=20184
# Xcode 4.6.x's clang (425.0.28) works, assuming 425.0.24 from 4.6.0 works too
compiler.blacklist *gcc* {clang < 425.0.24}

# blacklist current and future versions if they're not available in order to
# help break potential dependency cycles.
foreach ver {3.5 3.6 3.7 3.8 3.9 4.0 devel} {
    if {![file exists ${prefix}/bin/clang-mp-${ver}]} {
        compiler.blacklist-append macports-clang-${ver}
    }
}

platform darwin {
    # Note that we are forcing this choice.  This means that anything linking
    # against llvm-3.5 needs to also be using libc++.  This is possibly
    # problematic, but luckily there is just a limited set of such dependents.

    configure.cxx_stdlib libc++
    depends_lib-append port:libcxx
    supported_archs i386 x86_64

    pre-fetch {
        if {![file exists /usr/lib/libc++.dylib]} {
            ui_error "$name requires a C++11 runtime, which your configuration does not allow"
            error "unsupported configuration"
        }
    }
}

variant universal {
    build.env-append \
        UNIVERSAL=1 \
        UNIVERSAL_ARCH="[get_canonical_archs]"
    destroot.env-append \
        UNIVERSAL=1 \
        UNIVERSAL_ARCH="[get_canonical_archs]"

    post-extract {
        # workaround a bug in Apple's shipped gcc driver-driver, patched in
        # ours with driverdriver-num_infiles.patch
        if {${configure.compiler} eq "gcc-4.0" ||
            ${configure.compiler} eq "gcc-4.2" ||
            ${configure.compiler} eq "llvm-gcc-4.2"} {
            system "echo \"static int ___ignoreme;\" > ${worksrcpath}/tools/llvm-shlib/ignore.c"
        }
    }
}

variant assertions description "Enable assertions for error detection (has performance impacts, especially on JIT)" {
    configure.args-delete --disable-assertions
    configure.args-append --enable-assertions
}

platform darwin {
    if {${build_arch} eq "i386"} {
        configure.pre_args-append --build=i686-apple-darwin${os.major}
    } elseif {${build_arch} eq "ppc"} {
        configure.pre_args-append --build=powerpc-apple-darwin${os.major}
    } elseif {${build_arch} eq "ppc64"} {
        configure.pre_args-append --build=powerpc64-apple-darwin${os.major}
    } else {
        configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
    }

    if {[string match "*ppc*" [get_canonical_archs]]} {
        # http://trac.macports.org/ticket/33987
        configure.args-append --with-optimize-option=-Os
        configure.optflags    -Os
    }

    if {${subport} eq "clang-${llvm_version}" && ${os.major} <= 9} {
        patchfiles-append leopard-no-asan.patch leopard-no-blocks.patch
    }

    # TODO: The llvm build system sets a 10.1 deployment target on Yosemite
    if {[vercmp ${macosx_deployment_target} 10.10] >= 0} {
        macosx_deployment_target 10.9
    }
}

post-extract {
    if {${subport} eq "llvm-${llvm_version}"} {
        if {[variant_isset polly]} {
            if {${worksrcdir} eq "trunk"} {
                system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/polly/trunk polly"
            } elseif {${worksrcdir} eq "release_${llvm_version_no_dot}" } {
                system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/polly/branches/release_${llvm_version_no_dot} polly"
            } else {
                file rename ${workpath}/polly-${version}.src ${worksrcpath}/tools/polly
            }
        }
    } elseif {${subport} eq "clang-${llvm_version}"} {
        if {${worksrcdir} eq "trunk"} {
            system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/cfe/trunk clang"
            system "cd ${worksrcpath}/projects && svn co -r ${compiler_rt_rev} http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt"
            system "cd ${worksrcpath}/projects && svn co -r ${libcxx_rev} http://llvm.org/svn/llvm-project/libcxx/trunk libcxx"
            system "cd ${worksrcpath}/tools/clang/tools && svn co -r ${clang-modernize_rev} http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra"
        } elseif {${worksrcdir} eq "release_${llvm_version_no_dot}" } {
            system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/cfe/branches/release_${llvm_version_no_dot} clang"
            system "cd ${worksrcpath}/projects && svn co -r ${compiler_rt_rev} http://llvm.org/svn/llvm-project/compiler-rt/branches/release_${llvm_version_no_dot} compiler-rt"
            system "cd ${worksrcpath}/projects && svn co -r ${libcxx_rev} http://llvm.org/svn/llvm-project/libcxx/branches/release_${llvm_version_no_dot} libcxx"
            system "cd ${worksrcpath}/tools/clang/tools && svn co -r ${clang-modernize_rev} http://llvm.org/svn/llvm-project/clang-tools-extra/branches/release_${llvm_version_no_dot} extra"
        } else {
            file rename ${workpath}/cfe-${version}.src ${worksrcpath}/tools/clang
            file rename ${workpath}/compiler-rt-${version}.src ${worksrcpath}/projects/compiler-rt
            file rename ${workpath}/libcxx-${version}.src ${worksrcpath}/projects/libcxx
            file rename ${workpath}/clang-tools-extra-${version}.src ${worksrcpath}/tools/clang/tools/extra
        }
    }
}

post-patch {
    if {${subport} eq "clang-${llvm_version}"} {
        reinplace "s|@@PREFIX@@|${prefix}|g" \
            ${worksrcpath}/projects/compiler-rt/make/platform/clang_darwin.mk \
            ${worksrcpath}/projects/compiler-rt/make/platform/clang_macho_embedded.mk
    }
}

post-destroot {
    file mkdir ${destroot}${prefix}/share/doc
    file rename ${destroot}${sub_prefix}/docs/llvm ${destroot}${prefix}/share/doc/${subport}

    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }

    if {${subport} eq "llvm-${llvm_version}"} {
        # r156389 (a5d2435409858728970202226d0bbbee508fe408) temporarilary removed llvm man pages
        #foreach man [glob ${destroot}${sub_prefix}/share/man/man1/*.1] {
        #    set basename [string map "${destroot}${sub_prefix}/share/man/man1/ {}" ${man}]
        #    file rename ${man} ${destroot}${prefix}/share/man/man1/[string map ".1 -${suffix}.1" ${basename}]
        #}
    } elseif {${subport} eq "clang-${llvm_version}"} {
        system "ditto ${worksrcpath}/projects/libcxx/include ${destroot}${sub_prefix}/lib/c++/v1"

        # http://trac.macports.org/ticket/33207
        ln -s ${prefix}/libexec/ld64/ld ${destroot}${sub_prefix}/bin/ld
    }
}

if {${subport} eq "llvm-${llvm_version}"} {
    variant polly description {Provide the polly polyhedral optimizer} {
        depends_lib-append \
            port:gmp \
            path:lib/pkgconfig/isl.pc:isl \
            path:lib/pkgconfig/cloog-isl.pc:cloog
    }

    variant ocaml description {Enable generation of OCaml binding} {
        depends_lib-append   port:ocaml

        configure.args-delete --enable-bindings=none
        configure.args-append --enable-bindings=ocaml

        destroot.args-append  OVERRIDE_libdir=${sub_prefix}/lib
    }
} elseif {${subport} eq "clang-${llvm_version}"} {
    variant arm_runtime description {Build and install the arm runtime for iOS development (requires iOS SDK)} {}

    # The iOS SDK was shipped with all Xcode releases after 4.0
    if {[info exists xcodeversion] && [vercmp "4.0" ${xcodeversion}] <= 0} {
       default_variants-append +arm_runtime
    }

    variant analyzer description {Install clang static analyzer} {
        depends_run-append port:perl5

        post-patch {
            reinplace "s|/usr/bin/env perl|${prefix}/bin/perl5|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/ccc-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/c++-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/scan-build
            reinplace "s|/usr/bin/env python|${prefix}/bin/python2.7|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/set-xcode-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-view/scan-view
        }

        post-destroot {
            file mkdir ${destroot}${sub_prefix}/libexec
            file copy ${worksrcpath}/tools/clang/tools/scan-build ${destroot}${sub_prefix}/libexec/scan-build
            file copy ${worksrcpath}/tools/clang/tools/scan-view ${destroot}${sub_prefix}/libexec/scan-view

            file delete -force ${destroot}${sub_prefix}/libexec/scan-build/.svn
            file delete -force ${destroot}${sub_prefix}/libexec/scan-view/.svn
            file delete -force ${destroot}${sub_prefix}/libexec/scan-view/Resources/.svn

            ln -s ${sub_prefix}/libexec/scan-build/scan-build ${destroot}${sub_prefix}/bin/scan-build
            ln -s ${sub_prefix}/libexec/scan-view/scan-view ${destroot}${sub_prefix}/bin/scan-view
            ln -s ${sub_prefix}/bin ${destroot}${sub_prefix}/libexec/scan-build/bin

            xinstall -m 755 "${filespath}/llvm-bin" "${destroot}${prefix}/bin/scan-build-${suffix}"
            reinplace "s:EXEC_PATH:${sub_prefix}/bin/scan-build:" "${destroot}${prefix}/bin/scan-build-${suffix}"

            xinstall -m 755 "${filespath}/llvm-bin" "${destroot}${prefix}/bin/scan-view-${suffix}"
            reinplace "s:EXEC_PATH:${sub_prefix}/bin/scan-view:" "${destroot}${prefix}/bin/scan-view-${suffix}"
        }
    }


    post-patch {
        reinplace "s|@CLANG_FORMAT_PATH@|${prefix}/bin/clang-format-${suffix}|g" \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-bbedit.applescript \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-diff.py            \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format-sublime.py         \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.el                 \
            ${worksrcpath}/tools/clang/tools/clang-format/clang-format.py
    }

    post-destroot {
        file mkdir ${destroot}${sub_prefix}/libexec
        file copy ${worksrcpath}/tools/clang/tools/clang-format ${destroot}${sub_prefix}/libexec/clang-format

        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/.svn
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/Makefile
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/Release+Debug+Asserts
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/CMakeLists.txt
        file delete -force ${destroot}${sub_prefix}/libexec/clang-format/ClangFormat.cpp
    }

    if {${os.platform} eq "darwin" && ${os.major} > 15} {
        depends_build
        depends_lib
        depends_run
        archive_sites
        pre-fetch {
            ui_error "${subport} is not supported on macOS Sierra or newer."
            return -code error {unsupported platform}
        }
    }
}

livecheck.type          none
