# This version of llvm is only supported for use by the ghc port.
# There should be no other usage of llvm-3.5

PortSystem              1.0
PortGroup select        1.0
PortGroup compiler_blacklist_versions 1.0

set llvm_version        3.5
set llvm_version_no_dot 35
name                    llvm-${llvm_version}
revision                9

subport                 clang-${llvm_version} {
    version             ${llvm_version}.2
    epoch               1
    revision            10
    replaced_by         clang-5.0
    PortGroup           obsolete 1.0    
}

set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
dist_subdir             llvm
categories              lang
platforms               darwin
license                 NCSA
maintainers             {jeremyhu @jeremyhu} larryv

if {${subport} eq "llvm-${llvm_version}"} {
    homepage            http://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib         port:libedit port:libffi port:ncurses port:zlib
    depends_run         bin:perl:perl5 port:llvm_select

    # 3.2.6's install_name_tool doesn't support load commands we might see with newer clang+ld64
    # 4.3 is just a guess here and should be updated if there are additional reports with other Xcode versions
    if {[vercmp $xcodeversion 4.3] < 0 && [string match "*macports*" ${configure.compiler}]} {
        depends_build-append port:cctools
        depends_skip_archcheck-append cctools
    }

version                 ${llvm_version}.2
epoch                   1
master_sites            http://llvm.org/releases/${version}
use_xz                  yes
extract.suffix          .tar.xz
distfiles               llvm-${version}.src${extract.suffix}
worksrcdir              llvm-${version}.src

checksums           llvm-3.5.2.src.tar.xz \
                    rmd160  a6117b21f7f6ffe694ed152fba492015450b63f8 \
                    sha256  44196156d5749eb4b4224fe471a29cc3984df92570a4a89fa859f7394fc0c575

patch.pre_args  -p1
patchfiles    \
        0001-MacPorts-Only-Update-install-targets-for-clang-subpo.patch \
        0002-MacPorts-Only-Use-full-path-for-the-dylib-id-instead.patch \
        0003-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
        0004-MacPorts-Only-Skip-checking-for-python-in-configure.patch \
        0005-Set-the-Mach-O-CPU-Subtype-to-ppc7400-when-targeting.patch \
        llvm-skip-unittests.patch

build.env-append        VERBOSE=1 \
                        REQUIRES_RTTI=1 \
                        LLVM_SUBMIT_VERSION=3 \
                        LLVM_SUBMIT_SUBVERSION=7.1
destroot.env-append     VERBOSE=1 \
                        REQUIRES_RTTI=1 \
                        LLVM_SUBMIT_VERSION=3 \
                        LLVM_SUBMIT_SUBVERSION=7.1

configure.dir           ${workpath}/build
build.dir               ${configure.dir}

configure.cmd           ${worksrcpath}/configure
configure.pre_args-delete --prefix=${prefix}
configure.args          --enable-bindings=none --enable-libffi --enable-shared --enable-jit \
                        --enable-optimized --disable-profiling --enable-pic \
                        --enable-debug-symbols --disable-debug-runtime \
                        --prefix="${sub_prefix}" --disable-assertions

select.group        llvm
select.file         ${filespath}/mp-${subport}

# llvm-3.5 and later requires a C++11 runtime
# XCode 4.3's clang (318.x) fails per https://trac.macports.org/ticket/44161
# XCode 4.5's clang (421.11.66) fails due to http://llvm.org/bugs/show_bug.cgi?id=20184
# Xcode 4.6.x's clang (425.0.28) works, assuming 425.0.24 from 4.6.0 works too
compiler.blacklist *gcc* {clang < 425.0.24}

# blacklist current and future versions if they're not available in order to
# help break potential dependency cycles.
foreach ver {3.5 3.6 3.7 3.8 3.9 4.0 5.0 devel} {
    if {![file exists ${prefix}/bin/clang-mp-${ver}]} {
        compiler.blacklist-append macports-clang-${ver}
    }
}

platform darwin {
    # Note that we are forcing this choice.  This means that anything linking
    # against llvm-3.5 needs to also be using libc++.  This is possibly
    # problematic, but luckily there is just a limited set of such dependents.

    configure.cxx_stdlib libc++
    depends_lib-append port:libcxx
    supported_archs i386 x86_64

    pre-fetch {
        if {![file exists /usr/lib/libc++.dylib]} {
            ui_error "$name requires a C++11 runtime, which your configuration does not allow"
            error "unsupported configuration"
        }
    }
}

variant universal {
    build.env-append \
        UNIVERSAL=1 \
        UNIVERSAL_ARCH="[get_canonical_archs]"
    destroot.env-append \
        UNIVERSAL=1 \
        UNIVERSAL_ARCH="[get_canonical_archs]"

    post-extract {
        # workaround a bug in Apple's shipped gcc driver-driver, patched in
        # ours with driverdriver-num_infiles.patch
        if {${configure.compiler} eq "gcc-4.0" ||
            ${configure.compiler} eq "gcc-4.2" ||
            ${configure.compiler} eq "llvm-gcc-4.2"} {
            system "echo \"static int ___ignoreme;\" > ${worksrcpath}/tools/llvm-shlib/ignore.c"
        }
    }
}

variant assertions description "Enable assertions for error detection (has performance impacts, especially on JIT)" {
    configure.args-delete --disable-assertions
    configure.args-append --enable-assertions
}

platform darwin {
    if {${build_arch} eq "i386"} {
        configure.pre_args-append --build=i686-apple-darwin${os.major}
    } elseif {${build_arch} eq "ppc"} {
        configure.pre_args-append --build=powerpc-apple-darwin${os.major}
    } elseif {${build_arch} eq "ppc64"} {
        configure.pre_args-append --build=powerpc64-apple-darwin${os.major}
    } else {
        configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
    }

    if {[string match "*ppc*" [get_canonical_archs]]} {
        # http://trac.macports.org/ticket/33987
        configure.args-append --with-optimize-option=-Os
        configure.optflags    -Os
    }

    # TODO: The llvm build system sets a 10.1 deployment target on Yosemite
    if {[vercmp ${macosx_deployment_target} 10.10] >= 0} {
        macosx_deployment_target 10.9
    }
}

post-destroot {
    file mkdir ${destroot}${prefix}/share/doc
    file rename ${destroot}${sub_prefix}/docs/llvm ${destroot}${prefix}/share/doc/${subport}

    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }
}

}

livecheck.type          none
