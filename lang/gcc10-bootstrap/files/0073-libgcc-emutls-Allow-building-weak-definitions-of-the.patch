From c31fb96d118a255516f2d3842277e0b73531bfbc Mon Sep 17 00:00:00 2001
From: Iain Sandoe <iain@sandoe.co.uk>
Date: Sun, 19 Sep 2021 12:35:46 +0100
Subject: [PATCH] libgcc, emutls: Allow building weak definitions of the emutls
 functions.

In order to better support use of the emulated TLS between objects with
DSO dependencies and static-linked libgcc, allow a target to make weak
definitions.

Signed-off-by: Iain Sandoe <iain@sandoe.co.uk>

libgcc/ChangeLog:

	* config/t-darwin: Build weak-defined emutls objects.
	* emutls.c (__emutls_get_address): Add optional attributes.
	(__emutls_register_common): Likewise.
	(EMUTLS_ATTR): New.

(cherry picked from commit b9873b4e2c9a9955789318f4d550147ef9405b07)
---
 libgcc/config/t-darwin | 15 ++++++++++-----
 libgcc/emutls.c        | 15 ++++++++++-----
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git libgcc/config/t-darwin libgcc/config/t-darwin
index 8601c5522d5..70bf2d1dea7 100644
--- libgcc/config/t-darwin
+++ libgcc/config/t-darwin
@@ -15,11 +15,16 @@ crttme.o: $(srcdir)/config/darwin-crt-tm.c
 LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/config/unwind-dw2-fde-darwin.c \
   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c
 
-# Make a weak version to use in static lib and as a crt.
-emutls.o: HOST_LIBGCC2_CFLAGS += -DEMUTLS_ATTR='__attribute__((__weak__))'
-
-# Make it a convenience lib so that it can be linked optionally.
-libemutls_w.a: emutls.o
+# Make emutls weak so that we can deal with -static-libgcc, override the
+# hidden visibility when this is present in libgcc_eh.
+emutls.o: HOST_LIBGCC2_CFLAGS += \
+  -DEMUTLS_ATTR='__attribute__((__weak__,__visibility__("default")))'
+emutls_s.o: HOST_LIBGCC2_CFLAGS += \
+  -DEMUTLS_ATTR='__attribute__((__weak__,__visibility__("default")))'
+
+# Make the emutls crt as a convenience lib so that it can be linked
+# optionally, use the shared version so that we can link with DSO.
+libemutls_w.a: emutls_s.o
 	$(AR_CREATE_FOR_TARGET) $@ $<
 	$(RANLIB_FOR_TARGET) $@
 
diff --git libgcc/emutls.c libgcc/emutls.c
index 95fbb0d65b5..968b689013e 100644
--- libgcc/emutls.c
+++ libgcc/emutls.c
@@ -57,9 +57,10 @@ struct __emutls_array
 #  define EMUTLS_ATTR
 #endif
 
-void *__emutls_get_address (struct __emutls_object *) EMUTLS_ATTR;
-void __emutls_register_common (struct __emutls_object *,
-			       word, word, void *) EMUTLS_ATTR;
+EMUTLS_ATTR
+void *__emutls_get_address (struct __emutls_object *);
+EMUTLS_ATTR
+void __emutls_register_common (struct __emutls_object *, word, word, void *);
 
 #ifdef __GTHREADS
 #ifdef __GTHREAD_MUTEX_INIT
@@ -131,7 +132,11 @@ emutls_alloc (struct __emutls_object *obj)
   return ret;
 }
 
-void *
+/* Despite applying the attribute to the declaration, in this case the mis-
+   match between the builtin's declaration [void * (*)(void *)] and the
+   implementation here, causes the decl. attributes to be discarded.  */
+
+EMUTLS_ATTR void *
 __emutls_get_address (struct __emutls_object *obj)
 {
   if (! __gthread_active_p ())
@@ -195,7 +200,7 @@ __emutls_get_address (struct __emutls_object *obj)
 #endif
 }
 
-void
+EMUTLS_ATTR void
 __emutls_register_common (struct __emutls_object *obj,
 			  word size, word align, void *templ)
 {
-- 
2.40.1

