--- build0.sh.orig	2023-09-23 05:11:47.000000000 +0800
+++ build0.sh	2024-01-10 12:37:53.000000000 +0800
@@ -6,19 +6,19 @@
 ci/version.sh
 
 # Generate a Python AST from Python.asdl (Python)
-python grammar/asdl_py.py
+@PYTHON@ grammar/asdl_py.py
 # Generate a Python AST from Python.asdl (C++)
-python src/libasr/asdl_cpp.py grammar/Python.asdl src/lpython/python_ast.h
+@PYTHON@ src/libasr/asdl_cpp.py grammar/Python.asdl src/lpython/python_ast.h
 # Generate a Fortran ASR from ASR.asdl (C++)
-python src/libasr/asdl_cpp.py src/libasr/ASR.asdl src/libasr/asr.h
+@PYTHON@ src/libasr/asdl_cpp.py src/libasr/ASR.asdl src/libasr/asr.h
 # Generate a wasm_visitor.h from src/libasr/wasm_instructions.txt (C++)
-python src/libasr/wasm_instructions_visitor.py
+@PYTHON@ src/libasr/wasm_instructions_visitor.py
 
 # Generate the tokenizer and parser
 (cd src/lpython/parser && re2c -W -b tokenizer.re -o tokenizer.cpp)
 (cd src/lpython/parser && bison -Wall -d -r all parser.yy)
 
-python -c "file = 'src/lpython/parser/parser.tab.cc'
+@PYTHON@ -c "file = 'src/lpython/parser/parser.tab.cc'
 with open(file, 'r') as f: text = f.read()
 with open(file, 'w') as f:
     f.write('[[maybe_unused]] int yynerrs'.join(text.split('int yynerrs')))"
