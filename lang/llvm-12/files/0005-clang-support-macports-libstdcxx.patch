From 4e850191efa6659de85a4ff9be7c896cfb0bb1ec Mon Sep 17 00:00:00 2001
From: Ken Cunningham <kencu@macports.org>
Date: Mon, 17 May 2021 21:28:40 -0700
Subject: [PATCH 05/24] clang: support macports-libstdcxx

requires reinplace of search paths
---
 clang/include/clang/Driver/ToolChain.h        |  3 +-
 clang/include/clang/Lex/HeaderSearchOptions.h |  3 ++
 clang/lib/Driver/ToolChain.cpp                |  3 ++
 clang/lib/Driver/ToolChains/Darwin.cpp        | 40 ++++++++++++++-----
 clang/lib/Driver/ToolChains/Hexagon.cpp       |  2 +
 clang/lib/Frontend/CompilerInvocation.cpp.rej | 21 ++++++++++
 clang/lib/Frontend/InitHeaderSearch.cpp       |  2 +-
 7 files changed, 63 insertions(+), 11 deletions(-)
 create mode 100644 clang/lib/Frontend/CompilerInvocation.cpp.rej

diff --git a/clang/include/clang/Driver/ToolChain.h b/clang/include/clang/Driver/ToolChain.h
index 28c37a44e1eb..78fcaec7bfb0 100644
--- a/clang/include/clang/Driver/ToolChain.h
+++ b/clang/include/clang/Driver/ToolChain.h
@@ -94,7 +94,8 @@ public:
 
   enum CXXStdlibType {
     CST_Libcxx,
-    CST_Libstdcxx
+    CST_Libstdcxx,
+    CST_MacPortsLibstdcxx
   };
 
   enum RuntimeLibType {
diff --git a/clang/include/clang/Lex/HeaderSearchOptions.h b/clang/include/clang/Lex/HeaderSearchOptions.h
index 42f3cff8c57a..97a01793c12c 100644
--- a/clang/include/clang/Lex/HeaderSearchOptions.h
+++ b/clang/include/clang/Lex/HeaderSearchOptions.h
@@ -189,6 +189,9 @@ public:
   /// Use libc++ instead of the default libstdc++.
   unsigned UseLibcxx : 1;
 
+  /// Use MacPorts libstdc++ instead of default system libstdc++.
+  unsigned UseMacPortsLibstdcxx : 1;
+
   /// Whether header search information should be output as for -v.
   unsigned Verbose : 1;
 
diff --git a/clang/lib/Driver/ToolChain.cpp b/clang/lib/Driver/ToolChain.cpp
index b2ddef141a75..6160843b6885 100644
--- a/clang/lib/Driver/ToolChain.cpp
+++ b/clang/lib/Driver/ToolChain.cpp
@@ -926,6 +926,8 @@ ToolChain::CXXStdlibType ToolChain::GetCXXStdlibType(const ArgList &Args) const{
     return ToolChain::CST_Libcxx;
   else if (LibName == "libstdc++")
     return ToolChain::CST_Libstdcxx;
+  else if (LibName == "macports-libstdc++")
+    return ToolChain::CST_MacPortsLibstdcxx;
   else if (LibName == "platform")
     return GetDefaultCXXStdlibType();
 
@@ -1017,6 +1019,7 @@ void ToolChain::AddCXXStdlibLibArgs(const ArgList &Args,
     break;
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
     CmdArgs.push_back("-lstdc++");
     break;
   }
diff --git a/clang/lib/Driver/ToolChains/Darwin.cpp b/clang/lib/Driver/ToolChains/Darwin.cpp
index eb7bd4aec898..daa8e520e404 100644
--- a/clang/lib/Driver/ToolChains/Darwin.cpp
+++ b/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -2039,8 +2039,9 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
     return;
 
   llvm::StringRef Sysroot = GetHeaderSysroot(DriverArgs);
+  CXXStdlibType Type = GetCXXStdlibType(DriverArgs);
 
-  switch (GetCXXStdlibType(DriverArgs)) {
+  switch (Type) {
   case ToolChain::CST_Libcxx: {
     // On Darwin, libc++ can be installed in one of the following two places:
     // 1. Alongside the compiler in         <install>/include/c++/v1
@@ -2082,6 +2083,7 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
   }
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
     llvm::SmallString<128> UsrIncludeCxx = Sysroot;
     llvm::sys::path::append(UsrIncludeCxx, "usr", "include", "c++");
 
@@ -2092,10 +2094,17 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
 
     case llvm::Triple::ppc:
     case llvm::Triple::ppc64:
-      IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
-                                                "4.2.1",
-                                                "powerpc-apple-darwin10",
-                                                arch == llvm::Triple::ppc64 ? "ppc64" : "");
+      IsBaseFound = false;
+      if (Type==ToolChain::CST_MacPortsLibstdcxx) {
+        IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, llvm::StringRef("@@MACPORTS_GCC_INCLUDE_DIR@@"),
+                                                  "",
+                                                  "@@MACPORTS_HOST_NAME@@",
+                                                  arch == llvm::Triple::ppc64 ? "@@MACPORTS_GCC_SUBDIRECTORY_ppc64@@" : "@@MACPORTS_GCC_SUBDIRECTORY_ppc@@");
+      }
+      IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
+                                                 "4.2.1",
+                                                 "powerpc-apple-darwin10",
+                                                 arch == llvm::Triple::ppc64 ? "ppc64" : "");
       IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
                                                 "4.0.0", "powerpc-apple-darwin10",
                                                  arch == llvm::Triple::ppc64 ? "ppc64" : "");
@@ -2103,10 +2112,17 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
 
     case llvm::Triple::x86:
     case llvm::Triple::x86_64:
-      IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
-                                                "4.2.1",
-                                                "i686-apple-darwin10",
-                                                arch == llvm::Triple::x86_64 ? "x86_64" : "");
+      IsBaseFound = false;
+      if (Type==ToolChain::CST_MacPortsLibstdcxx) {
+        IsBaseFound = AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, llvm::StringRef("@@MACPORTS_GCC_INCLUDE_DIR@@"),
+                                                  "",
+                                                  "@@MACPORTS_HOST_NAME@@",
+                                                  arch == llvm::Triple::x86_64 ? "@@MACPORTS_GCC_SUBDIRECTORY_x86_64@@" : "@@MACPORTS_GCC_SUBDIRECTORY_i386@@");
+      }
+      IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
+                                                 "4.2.1",
+                                                 "i686-apple-darwin10",
+                                                 arch == llvm::Triple::x86_64 ? "x86_64" : "");
       IsBaseFound |= AddGnuCPlusPlusIncludePaths(DriverArgs, CC1Args, UsrIncludeCxx,
                                                 "4.0.0", "i686-apple-darwin8",
                                                  "");
@@ -2149,6 +2165,12 @@ void DarwinClang::AddCXXStdlibLibArgs(const ArgList &Args,
     break;
 
   case ToolChain::CST_Libstdcxx:
+  case ToolChain::CST_MacPortsLibstdcxx:
+    if (Type==ToolChain::CST_MacPortsLibstdcxx && getVFS().exists("@@MACPORTS_libstdc++@@")) {
+      CmdArgs.push_back("@@MACPORTS_libstdc++@@");
+      return;
+      }
+
     // Unfortunately, -lstdc++ doesn't always exist in the standard search path;
     // it was previously found in the gcc lib dir. However, for all the Darwin
     // platforms we care about it was -lstdc++.6, so we search for that
diff --git a/clang/lib/Driver/ToolChains/Hexagon.cpp b/clang/lib/Driver/ToolChains/Hexagon.cpp
index fb54f73bcd4c..0260a32096af 100644
--- a/clang/lib/Driver/ToolChains/Hexagon.cpp
+++ b/clang/lib/Driver/ToolChains/Hexagon.cpp
@@ -643,6 +643,8 @@ HexagonToolChain::GetCXXStdlibType(const ArgList &Args) const {
       return ToolChain::CST_Libstdcxx;
   }
   StringRef Value = A->getValue();
+  if (Value == "macports-libstdc++")
+    return ToolChain::CST_MacPortsLibstdcxx;
   if (Value != "libstdc++" && Value != "libc++")
     getDriver().Diag(diag::err_drv_invalid_stdlib_name) << A->getAsString(Args);
 
diff --git a/clang/lib/Frontend/CompilerInvocation.cpp.rej b/clang/lib/Frontend/CompilerInvocation.cpp.rej
new file mode 100644
index 000000000000..227618c333c4
--- /dev/null
+++ b/clang/lib/Frontend/CompilerInvocation.cpp.rej
@@ -0,0 +1,21 @@
+***************
+*** 2939,2946 ****
+  #include "clang/Driver/Options.inc"
+  #undef HEADER_SEARCH_OPTION_WITH_MARSHALLING
+  
+-   if (const Arg *A = Args.getLastArg(OPT_stdlib_EQ))
+      Opts.UseLibcxx = (strcmp(A->getValue(), "libc++") == 0);
+  
+    // Canonicalize -fmodules-cache-path before storing it.
+    SmallString<128> P(Args.getLastArgValue(OPT_fmodules_cache_path));
+--- 2939,2948 ----
+  #include "clang/Driver/Options.inc"
+  #undef HEADER_SEARCH_OPTION_WITH_MARSHALLING
+  
++   if (const Arg *A = Args.getLastArg(OPT_stdlib_EQ)) {
+      Opts.UseLibcxx = (strcmp(A->getValue(), "libc++") == 0);
++     Opts.UseMacPortsLibstdcxx = (strcmp(A->getValue(), "macports-libstdc++") == 0);
++   }
+  
+    // Canonicalize -fmodules-cache-path before storing it.
+    SmallString<128> P(Args.getLastArgValue(OPT_fmodules_cache_path));
diff --git a/clang/lib/Frontend/InitHeaderSearch.cpp b/clang/lib/Frontend/InitHeaderSearch.cpp
index bc31445d6d08..abc3750edec0 100644
--- a/clang/lib/Frontend/InitHeaderSearch.cpp
+++ b/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -108,7 +108,7 @@ static bool CanPrefixSysroot(StringRef Path) {
 #if defined(_WIN32)
   return !Path.empty() && llvm::sys::path::is_separator(Path[0]);
 #else
-  return llvm::sys::path::is_absolute(Path);
+  return llvm::sys::path::is_absolute(Path) && Path.find("@@MACPORTS_GCC_INCLUDE_DIR@@")!=0;
 #endif
 }
 
-- 
2.21.1 (Apple Git-122.3)

