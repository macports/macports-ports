diff --git lib-python/2.7/ctypes/macholib/dyld.py lib-python/2.7/ctypes/macholib/dyld.py
--- lib-python/2.7/ctypes/macholib/dyld.py
+++ lib-python/2.7/ctypes/macholib/dyld.py
@@ -6,6 +6,11 @@ import os
 from framework import framework_info
 from dylib import dylib_info
 from itertools import *
+try:
+    from _ctypes import _dyld_shared_cache_contains_path
+except ImportError:
+    def _dyld_shared_cache_contains_path(*args):
+        raise NotImplementedError
 
 __all__ = [
     'dyld_find', 'framework_find',
@@ -130,8 +135,15 @@ def dyld_find(name, executable_path=None
                 dyld_executable_path_search(name, executable_path),
                 dyld_default_search(name, env),
             ), env):
+
         if os.path.isfile(path):
             return path
+        try:
+            if _dyld_shared_cache_contains_path(path):
+                return path
+        except NotImplementedError:
+            pass
+
     raise ValueError("dylib %s could not be found" % (name,))
 
 def framework_find(fn, executable_path=None, env=None):
diff --git lib_pypy/_ctypes/__init__.py lib_pypy/_ctypes/__init__.py
--- lib_pypy/_ctypes/__init__.py
+++ lib_pypy/_ctypes/__init__.py
@@ -13,15 +13,15 @@ from _ctypes.builtin import (
     _string_at_addr, _wstring_at_addr, set_conversion_mode)
 from _ctypes.union import Union
 
+try: from __pypy__ import builtinify
+except ImportError: builtinify = lambda f: f
+
 import os as _os
 
 if _os.name in ("nt", "ce"):
     from _rawffi import FormatError
     from _rawffi import check_HRESULT as _check_HRESULT
 
-    try: from __pypy__ import builtinify
-    except ImportError: builtinify = lambda f: f
-
     @builtinify
     def CopyComPointer(src, dst):
         from ctypes import c_void_p, cast
@@ -32,8 +32,6 @@ if _os.name in ("nt", "ce"):
         dst[0] = cast(src, c_void_p).value
         return 0
 
-    del builtinify
-
     LoadLibrary = dlopen
 
 from _rawffi import FUNCFLAG_STDCALL, FUNCFLAG_CDECL, FUNCFLAG_PYTHONAPI
@@ -43,6 +41,20 @@ from _ctypes.builtin import get_errno, s
 if _os.name in ("nt", "ce"):
     from _ctypes.builtin import get_last_error, set_last_error
 
+import sys as _sys
+if _sys.platform == 'darwin':
+    try:
+        from ._ctypes_cffi import ffi as _ffi, lib as _lib
+        @builtinify
+        def _dyld_shared_cache_contains_path(path):
+            if not hasattr(_lib, '_dyld_shared_cache_contains_path'):
+                raise NotImplementedError
+            return _lib._dyld_shared_cache_contains_path(path.encode())
+    except ImportError:
+        pass
+
+del builtinify
+
 __version__ = '1.1.0'
 #XXX platform dependant?
 RTLD_LOCAL = 0
diff --git lib_pypy/_ctypes/_ctypes_build.py lib_pypy/_ctypes/_ctypes_build.py
new file mode 100644
--- /dev/null
+++ lib_pypy/_ctypes/_ctypes_build.py
@@ -0,0 +1,23 @@
+import os
+import platform
+
+from cffi import FFI
+ffi = FFI()
+
+def main():
+    if platform.system() != 'Darwin':
+        return
+
+    release, _, _ = platform.mac_ver()
+    release = tuple(map(int, release.split('.')))
+    if release < (10, 16):
+        return
+
+    ffi.cdef('bool _dyld_shared_cache_contains_path(const char* path);')
+    ffi.set_source('_ctypes_cffi', '#include <mach-o/dyld.h>')
+
+    os.chdir(os.path.dirname(__file__))
+    ffi.compile()
+
+if __name__ == '__main__':
+    main()
diff --git lib_pypy/pypy_tools/build_cffi_imports.py lib_pypy/pypy_tools/build_cffi_imports.py
--- lib_pypy/pypy_tools/build_cffi_imports.py
+++ lib_pypy/pypy_tools/build_cffi_imports.py
@@ -1,5 +1,5 @@
 from __future__ import print_function
-import sys, shutil, os, tempfile, hashlib
+import sys, shutil, os, tempfile, hashlib, collections
 import sysconfig
 from os.path import join
 
@@ -22,18 +22,19 @@ class MissingDependenciesError(Exception
     pass
 
 
-cffi_build_scripts = {
-    "_ssl": "_ssl_build.py",
-    "sqlite3": "_sqlite3_build.py",
-    "audioop": "_audioop_build.py",
-    "_tkinter": "_tkinter/tklib_build.py",
-    "curses": "_curses_build.py" if sys.platform != "win32" else None,
-    "syslog": "_syslog_build.py" if sys.platform != "win32" else None,
-    "gdbm": "_gdbm_build.py"  if sys.platform != "win32" else None,
-    "grp": "_pwdgrp_build.py" if sys.platform != "win32" else None,
-    "resource": "_resource_build.py" if sys.platform != "win32" else None,
-    "xx": None,    # for testing: 'None' should be completely ignored
-    }
+cffi_build_scripts = collections.OrderedDict([
+    ("_ctypes._ctypes_cffi", "_ctypes/_ctypes_build.py" if sys.platform == "darwin" else None),
+    ("_ssl", "_ssl_build.py"),
+    ("sqlite3", "_sqlite3_build.py"),
+    ("audioop", "_audioop_build.py"),
+    ("_tkinter", "_tkinter/tklib_build.py"),
+    ("curses", "_curses_build.py" if sys.platform != "win32" else None),
+    ("syslog", "_syslog_build.py" if sys.platform != "win32" else None),
+    ("gdbm", "_gdbm_build.py"  if sys.platform != "win32" else None),
+    ("grp", "_pwdgrp_build.py" if sys.platform != "win32" else None),
+    ("resource", "_resource_build.py" if sys.platform != "win32" else None),
+    ("xx", None),    # for testing: 'None' should be completely ignored
+    ])
 
 # for distribution, we may want to fetch dependencies not provided by
 # the OS, such as a recent openssl/libressl.
