# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.1
PortGroup           muniversal 1.0

# clang-11 is the last clang which can be build with the last version of cmake to not require c++11.
name                clang-11-bootstrap

version             11.1.0
revision            1
epoch               0

platforms           darwin
categories          lang
maintainers         {@catap korins.ky:kirill} openmaintainer

license             NCSA

description         clang-11 with minimal MacPorts patches pegged at version ${version}.
long_description    ${description} This port depends only on bootstrap dependencies.

homepage            https://llvm.org/


master_sites        https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
distname            llvm-project-${version}.src

checksums           rmd160  f566b4b75c8f30418f19069a9a84864ead766401 \
                    sha256  74d2529159fd118c3eac6f90107b5611bccc6f647fdea104024183e8d5e25831 \
                    size    84065492

# no Clang / LLVM for PowerPC yet
supported_archs     arm64 i386 x86_64

depends_extract     port:xz-bootstrap
depends_skip_archcheck-append \
                    xz-bootstrap

extract.suffix      .tar.xz
extract.cmd         ${prefix}/libexec/xz-bootstrap/bin/xz

depends_build-append \
                    port:python27-bootstrap
depends_skip_archcheck-append \
                    python27-bootstrap

# Use cmake-bootstrap
depends_build-replace \
                    path:bin/cmake:cmake port:cmake-bootstrap
depends_skip_archcheck-append \
                    cmake-bootstrap
configure.cmd       ${prefix}/libexec/cmake-bootstrap/bin/cmake


worksrcdir          llvm-project/llvm
patch.dir           ${workpath}/llvm-project/llvm

post-extract {
    ln -s ${workpath}/${distname}                       ${workpath}/llvm-project
    ln -s ${workpath}/llvm-project/clang                ${worksrcpath}/tools/clang
    ln -s ${workpath}/llvm-project/compiler-rt          ${worksrcpath}/projects/compiler-rt
    ln -s ${workpath}/llvm-project/libcxx               ${worksrcpath}/projects/libcxx
    ln -s ${workpath}/llvm-project/libcxxabi            ${worksrcpath}/projects/libcxxabi
    ln -s ${workpath}/llvm-project/lld                  ${worksrcpath}/projects/lld
    ln -s ${workpath}/llvm-project/clang-tools-extra    ${worksrcpath}/tools/clang/tools/extra
}

patch.pre_args      -p1
patchfiles          0002-Define-EXC_MASK_CRASH-and-MACH_EXCEPTION_CODES-if-th.patch \
                    0003-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
                    0005-Threading-Only-call-pthread_setname_np-on-SnowLeopar.patch \
                    0006-Only-call-setpriority-PRIO_DARWIN_THREAD-0-PRIO_DARW.patch \
                    0007-patch-llvm8-tools-dsymutil-symbolmap-use-older-cfname-and-fix-uuid-on-leopard.diff \
                    0008-patch-lib-support-unix-path-copyfileclone-on-older-systems.diff \
                    1002-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
                    1004-Default-to-fragile-ObjC-runtime-when-targeting-darwi.patch \
                    1005-Fixup-libstdc-header-search-paths-for-older-versions.patch \
                    1007-Fix-float.h-to-work-on-Snow-Leopard-and-earlier.patch \
                    1008-compilerrt-fuzzer-missingdefs.diff \
                    1009-compilerrt-sanitizer-missingdefs.diff \
                    2002-Work-around-no-libdispatch-on-10.6.patch \
                    3001-Fix-missing-long-long-math-prototypes-when-using-the.patch \
                    3002-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
                    3003-patch-libcxx-chrono-restore-steadyclock-fallback.diff \
                    leopard-no-asan.patch \
                    5000-patch-compilerrtdarwinutils-find-macosxsdkversion.diff \
                    5002-patch-toolchains-darwin-add-back-pre-10.6-link-libs.diff \
                    patch-clang-fix-include-next-sysroot-cpp-headers.diff \
                    Fix-build-issues-pre-Lion-due-to-missing-a-strnlen.patch \
                    fix-build-clang-by-gcc10.diff \
                    llvm-objdump-help-macho.diff \
                    fix-build-with-old-xar.diff

# sterilize MacPorts build environment; we want nothing picked up from MP prefix
compiler.cpath
compiler.library_path

configure.cxx_stdlib

configure.cflags
configure.cxxflags
configure.cppflags
configure.optflags
configure.ldflags

configure.universal_cflags
configure.universal_cxxflags
configure.universal_cppflags
configure.universal_ldflags
configure.universal_args

configure.ccache    no
configure.distcc    no

# sterilize PATH
configure.env-append \
                    PATH=${workpath}/bins:/usr/bin:/bin:/usr/sbin:/sbin
build.env-append    PATH=${workpath}/bins:/usr/bin:/bin:/usr/sbin:/sbin

cmake.build_type    Release
cmake.generator     {Unix Makefiles}

# Install everything into libexec
cmake.install_prefix \
                    ${prefix}/libexec/${name}
cmake.install_rpath

configure.pre_args-replace \
                    {*}[cmake::system_prefix_path] \
                    -DCMAKE_SYSTEM_PREFIX_PATH="${cmake.install_prefix}\;/usr"

configure.pre_args-replace \
                    {*}[cmake::rpath_flags] \
                    -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF

configure.pre_args-delete \
                    {*}[cmake::module_path]

configure.pre_args-delete \
                    {*}[cmake::ccaching]

configure.pre_args-delete \
                    -DCMAKE_INSTALL_NAME_DIR="${cmake.install_prefix}/lib"

platform darwin {
    if {${os.major} == 14} {
        # Building Xray forces build of sanitizer_common, even if
        # COMPILER_RT_BUILD_SANITIZERS=OFF, and this fails on 10.10
        # TODO: See why sanitizer_common fails on 10.10
        configure.args-append \
                    -DCOMPILER_RT_BUILD_XRAY=OFF

        patchfiles-append \
                    fix-build-clang-by-gcc10-on-yosemite.diff
    }

    if {${os.major} <= 14} {
        # We unfortunately don't have an option to just turn off tsan
        # https://llvm.org/bugs/show_bug.cgi?id=27715
        configure.args-append \
                    -DCOMPILER_RT_BUILD_SANITIZERS=OFF
    }

    if {${os.major} <= 11} {
        # xpc.h available 10.7 but doesn't support nullable features
        # xpc.h works currently on 10.8+
        # toggle enabled in https://reviews.llvm.org/D59808
        configure.args-append \
                    -DCLANGD_BUILD_XPC=OFF
    }

    if {${os.major} <= 10} {
        # avoid need for thread_local_storage
        configure.args-append \
                    -DCLANG_ENABLE_CLANGD=OFF \
                    -DLLVM_ENABLE_BACKTRACES=OFF

        # reexported_symbols_list is available on 10.7+ only, used by libcxx
        patchfiles-append \
                    5004-patch-libcxx-reexport-symbols-lionorgreater-only.diff

        # the libcxx installed by MacPorts on darwin 10 and less does not correspond to Apple's builtin libcxx
        patchfiles-append \
                    5005-MacPorts-only-patch-libcxx-includes-disable-availability-tests.diff
    }

    if {${os.major} <= 9} {
        # TO DO: the blocks functionality can be replaced by libblocksruntime
        # this might be integrated into clang on < 10.6
        patchfiles-append \
                    leopard-no-blocks.patch
    }
}

configure.args-append \
                    -DCLANG_ENABLE_ARCMT=OFF \
                    -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
                    -DDARWIN_PREFER_PUBLIC_SDK=ON \
                    -DLLVM_BINDINGS_LIST=none \
                    -DLLVM_BUILD_UTILS=OFF \
                    -DLLVM_ENABLE_PROJECTS="clang\;compiler-rt" \
                    -DLLVM_INCLUDE_BENCHMARKS=OFF \
                    -DLLVM_INCLUDE_DOCS=OFF \
                    -DLLVM_INCLUDE_EXAMPLES=OFF \
                    -DLLVM_INCLUDE_GO_TESTS=OFF \
                    -DLLVM_INCLUDE_TESTS=OFF \
                    -DLLVM_INCLUDE_UTILS=OFF \
                    -DPYTHON_EXECUTABLE=${prefix}/libexec/python27-bootstrap/bin/python2.7

if {${build_arch} eq "arm64"} {
    configure.args-append \
                    -DLLVM_TARGETS_TO_BUILD="AArch64\;X86"
} else {
    configure.args-append \
                    -DLLVM_TARGETS_TO_BUILD=X86
}

if {${configure.sdkroot} ne ""} {
    configure.args-append \
                    -DDARWIN_osx_SYSROOT="${configure.sdkroot}" \
                    -DDEFAULT_SYSROOT="${configure.sdkroot}"
} else {
    # compiler-rt does a broad search for an SDK it likes, but this
    # search fails on older systems that don't have a MacOSX.sdk
    configure.args-append \
                    -DDARWIN_osx_SYSROOT=/
}

if {${os.major} <= 18} {
    # on systems that might build i386, we need atomic builtins
    # https://trac.macports.org/ticket/58712
    configure.args-append \
                    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF
}

if {${os.major} < 11} {
    variant emulated_tls description { enable c11/c++11 thread_local_storage support on older systems using emulated-tls } {
        # use emulated-tls to support thread_local on systems prior to 10.7
        patchfiles-append \
                    9000-patch-llvm-7.0-support-emulated-tls.diff \
                    9000-patch-clang-7.0-support-emulated-tls.diff
    }

    default_variants-append \
                    +emulated_tls
}

# Be default Catalina and Mojave support a single arch at MacPorts
if {${os.major} < 18 || ${os.major} > 19} {
    default_variants-append     +universal
}

compiler.cxx_standard \
                    2011

# macOS 10.12 the first one which toolchain can build it
if {${os.platform} eq "darwin" && ${os.major} < 16} {

    configure.compiler.add_deps \
                    no

    depends_build-append \
                    port:gcc10-bootstrap

    pre-configure {
        file mkdir ${workpath}/bins

        set gcc [open "${workpath}/bins/gcc" w 0755]
        puts ${gcc} "#!/bin/sh"
        puts ${gcc} "arch -arch $\{BUILD_ARCH:-${build_arch}\} ${prefix}/libexec/gcc10-bootstrap/bin/gcc \$@"
        close ${gcc}

        set gxx [open "${workpath}/bins/g++" w 0755]
        puts ${gxx} "#!/bin/sh"
        puts ${gxx} "arch -arch $\{BUILD_ARCH:-${build_arch}\} ${prefix}/libexec/gcc10-bootstrap/bin/g++ \$@"
        close ${gxx}
    }

    configure.cc        ${workpath}/bins/gcc
    configure.cxx       ${workpath}/bins/g++

    # prevent it from linking against gcc's libstdc++.6.dylib and libgcc_s.1.1.dylib
    configure.ldflags-append \
                    -static-libstdc++ -static-libgcc
}

if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${universal_archs_supported} {
        lappend merger_configure_env(${arch}) BUILD_ARCH=${arch}
        lappend merger_build_env(${arch}) BUILD_ARCH=${arch}
    }
}

merger_arch_flag            yes
merger_arch_compiler        yes
merger_must_run_binaries    yes

post-destroot {
    system "ditto ${worksrcpath}/projects/libcxx/include ${destroot}${cmake.install_prefix}/include/c++/v1"
}

notes "
To use this bootstrap version of clang instead of the default compiler, add the \
following lines to the Portfile:

depends_build-append    port:${name}
configure.cc            \$\{prefix\}/libexec/${name}/bin/clang
configure.cxx           \$\{prefix\}/libexec/${name}/bin/clang++
"

livecheck.type      none
