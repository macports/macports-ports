From bd0e205220432ede1f4f42b8b57722e72eb62fc4 Mon Sep 17 00:00:00 2001
From: Akira Hatanaka <ahatanaka@apple.com>
Date: Thu, 1 Sep 2016 01:03:21 +0000
Subject: [PATCH 1008/1008] [Sema] Don't diagnose an array type mismatch when
 the new or previous declaration has a dependent type.

This fixes a bug where clang errors out on a valid code.

rdar://problem/28051467

Differential Revision: https://reviews.llvm.org/D24110

git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@280330 91177308-0d34-0410-b5e6-96231b3b80d8
(cherry picked from commit 0c1c1751472348ead92a1c5ffd6a7db08dd446e7)
---
 lib/Sema/SemaDecl.cpp                     |  4 ++--
 test/SemaTemplate/array-redeclaration.cpp | 33 +++++++++++++++++++++++++++++++
 2 files changed, 35 insertions(+), 2 deletions(-)
 create mode 100644 test/SemaTemplate/array-redeclaration.cpp

diff --git llvm_release_39/tools/clang/lib/Sema/SemaDecl.cpp macports_release_39/tools/clang/lib/Sema/SemaDecl.cpp
index 41719d4e7b..4a9a2fee20 100644
--- llvm_release_39/tools/clang/lib/Sema/SemaDecl.cpp
+++ macports_release_39/tools/clang/lib/Sema/SemaDecl.cpp
@@ -3367,11 +3367,11 @@ void Sema::MergeVarDeclTypes(VarDecl *New, VarDecl *Old,
       // We are merging a variable declaration New into Old. If it has an array
       // bound, and that bound differs from Old's bound, we should diagnose the
       // mismatch.
-      if (!NewArray->isIncompleteArrayType()) {
+      if (!NewArray->isIncompleteArrayType() && !NewArray->isDependentType()) {
         for (VarDecl *PrevVD = Old->getMostRecentDecl(); PrevVD;
              PrevVD = PrevVD->getPreviousDecl()) {
           const ArrayType *PrevVDTy = Context.getAsArrayType(PrevVD->getType());
-          if (PrevVDTy->isIncompleteArrayType())
+          if (PrevVDTy->isIncompleteArrayType() || PrevVDTy->isDependentType())
             continue;
 
           if (!Context.hasSameType(NewArray, PrevVDTy))
diff --git llvm_release_39/tools/clang/test/SemaTemplate/array-redeclaration.cpp macports_release_39/tools/clang/test/SemaTemplate/array-redeclaration.cpp
new file mode 100644
index 0000000000..4edee701cf
--- /dev/null
+++ macports_release_39/tools/clang/test/SemaTemplate/array-redeclaration.cpp
@@ -0,0 +1,33 @@
+// RUN: %clang_cc1 -fsyntax-only -verify %s
+// expected-no-diagnostics
+
+extern int array[1];
+
+template <typename>
+class C {
+  enum { D };
+public:
+  template <typename A> void foo1() {
+    extern int array[((int)C<A>::k > (int)D) ? 1 : -1];
+  }
+};
+
+template<>
+class C<int> {
+public:
+  const static int k = 2;
+};
+
+void foo2() {
+  C<char> c;
+  c.foo1<int>();
+}
+
+template<int n>
+void foo3() {
+  extern int array[n ? 1 : -1];
+}
+
+void foo4() {
+  foo3<5>();
+}
-- 
2.11.0

