# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               legacysupport 1.1
PortGroup               openssl 1.0

configure.cxx_stdlib    libc++
compiler.cxx_standard   2017

name                    nodejs20
version                 20.18.1
revision                2

categories              lang net
license                 {MIT BSD}
maintainers             {ciserlohn @ci42} openmaintainer

description             Evented I/O for V8 JavaScript

long_description        Node's goal is to provide an easy way to build scalable network programs in JavaScript. \
                        Node is similar in design to and influenced by systems like Ruby's Event \
                        Machine or Python's Twisted. Node takes the event model a bit further-it \
                        presents the event loop as a language construct instead of as a library.

conflicts               nodejs8 nodejs10 nodejs12 nodejs14 nodejs16 nodejs18 nodejs22 nodejs24

homepage                https://nodejs.org/
master_sites            ${homepage}dist/v${version}
use_xz                  yes

checksums               rmd160  5021ed52e5ae36311722103bc47f264631f34592 \
                        sha256  91df43f8ab6c3f7be81522d73313dbdd5634bbca228ef0e6d9369fe0ab8cccd0 \
                        size    41962272

distname                node-v${version}

set py_ver              3.12
set py_ver_nodot        [string map {. {}} ${py_ver}]

depends_build-append    port:pkgconfig \
                        port:python${py_ver_nodot}

depends_lib-append      path:lib/pkgconfig/icu-uc.pc:icu \
                        port:zlib \
                        path:lib/libuv.dylib:libuv-devel \
                        port:openssl \
                        port:c-ares \
                        port:nghttp2 \
                        port:brotli

if {${os.platform} eq "darwin" && ${os.major} < 11} {
#for snow leopard node is pretty weird, we have to include
#libc++abi.a or it will fail to link libnode.a at the end
    configure.cxx-append      ${prefix}/lib/libcxx/libc++abi.a
} else {
   configure.cppflags-append -DON_LION_OR_LATER
}    

# all sub-10.12 macs will need macports-libcxx, which (hopefully at this time)
# will be updated to llvm-19
if { ${os.platform} eq "darwin" && ${os.major} < 15} {
    if {${configure.cxx_stdlib} eq "libc++"} {
        depends_lib-append        port:macports-libcxx
        configure.cxx-append      -Wl,-L${prefix}/lib/libcxx
    }
}

# suppress a warning-as-error that shows up with newer clang compilers
if {[string match *clang* ${configure.compiler}]} {
    configure.cxx-append      -Wno-error=enum-constexpr-conversion

    #the ventura buildbot will fail because it doesn't recognise this flag
    #so we disable unknown warnings as errors for older compilers
    configure.cxx-append      -Wno-error=unknown-warning-option
}

proc rec_glob {basedir pattern} {
    set files [glob -directory $basedir -nocomplain -type f $pattern]
    foreach dir [glob -directory $basedir -nocomplain -type d *] {
        lappend files {*}[rec_glob $dir $pattern]
    }
    return $files
}

configure.python        ${prefix}/bin/python${py_ver}

patchfiles              patch-common.gypi.diff \
                        patch-configure.diff \
                        patch-add-guard-for-map-jit.patch \
                        patch-fix-zlib-header.patch

if { ${os.major} < 11 } {
    #snow leopard does not use getsectiondata, so we need to patch it
    #accordingly.
    patchfiles-append   patch-modify-getsectiondata-for-snow-leopard.patch
}

post-patch {
    foreach f [concat ${worksrcpath}/configure \
                   ${worksrcpath}/tools/gyp/gyp \
                   ${worksrcpath}/deps/v8/tools/objdump-v8 \
                   [rec_glob ${worksrcpath} *.py]] {
        reinplace -q "s|/usr/bin/env python3|${configure.python}|" ${f}
        reinplace -q "s|/usr/bin/env python|${configure.python}|" ${f}
    }
    foreach gypfile [rec_glob ${worksrcpath} *.gyp*] {
        reinplace -q "s|'python3'|'${configure.python}'|" ${gypfile}
        reinplace -q "s|'python'|'${configure.python}'|" ${gypfile}
    }
    if { ${os.platform} eq "darwin" && ${os.major} <= 17 } {
        # Officially nodejs requires Xcode 11 to compile, however, the
        # only item that Xcode 11 has that Xcode 10.1 doesn't is
        # os/signpost.h, so disable system instrumentation which uses
        # it. This provides support for macOS 10.13 which can only use
        # Xcode 10.1.
        reinplace -q "s|'v8_enable_system_instrumentation': 1|'v8_enable_system_instrumentation': 0|" ${worksrcpath}/tools/v8_gypfiles/features.gypi
    }
}

pre-configure {
    # Copy zlib headers here because we do not want to prepend the entire
    # ${prefix}/include to the include path (the build will then attempt to use
    # ICU headers)
    file mkdir ${workpath}/zlib-inc ${workpath}/cares-inc
    file copy ${prefix}/include/zconf.h ${prefix}/include/zlib.h \
        ${workpath}/zlib-inc/
    copy {*}[glob ${prefix}/include/*ares*.h] ${workpath}/cares-inc
}

# use the system libuv instead of the bundled version, for two reasons:
#   1. originally the macports libuv had fixes for older macs
#           (like 10.7 panicking when spawning with FD_CLOEXEC)
#   2. now libuv only supports 10.15 and up 
#         -plus the macports libuv should have all features for the appropriate target.
#    
configure.args-append   --shared-libuv
configure.args-append   --without-npm
configure.args-append   --with-intl=system-icu
configure.args-append   --shared-zlib
configure.args-append   --shared-zlib-includes=${workpath}/zlib-inc
configure.args-append   --shared-zlib-libpath=${prefix}/lib
configure.args-append   --shared-openssl
configure.args-append   --shared-openssl-includes=[openssl::include_dir]
configure.args-append   --shared-openssl-libpath=[openssl::lib_dir]
configure.args-append   --shared-nghttp2
configure.args-append   --shared-nghttp2-includes=${prefix}/include/nghttp2
configure.args-append   --shared-nghttp2-libpath=${prefix}/lib
configure.args-append   --shared-cares
configure.args-append   --shared-cares-includes=${workpath}/cares-inc
configure.args-append   --shared-cares-libpath=${prefix}/lib
configure.args-append   --shared-brotli
configure.args-append   --shared-brotli-libpath=${prefix}/lib

# V8 only supports ARM and IA-32 processors
supported_archs         i386 x86_64 arm64

universal_variant       no

test.run                yes
test.cmd                ${build.cmd} -j${build.jobs}

switch $build_arch {
    i386 {
        configure.args-append   --dest-cpu=ia32
    }
    x86_64 {
        configure.args-append   --dest-cpu=x64
    }
   arm64 {
        configure.args-append   --dest-cpu=arm64
    }
}

<<<<<<< HEAD
# Node.js 20.x requires Xcode >= 12 (Apple LLVM >= 12)
# https://github.com/nodejs/node/pull/42292  
compiler.blacklist-append {clang < 1200}

=======
>>>>>>> master
build.args-append   CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CXX.host=${configure.cxx} \
                    CPP=${configure.cpp} \
                    CPPFLAGS="${configure.cppflags}" \
                    CFLAGS="${configure.cflags} ${configure.cppflags}" \
                    CXXFLAGS="${configure.cxxflags} ${configure.cppflags}" \
                    LDFLAGS="${configure.ldflags} [legacysupport::get_library_link_flags]" \
                    PYTHON=${configure.python} \
                    V=1

destroot {
    set bindir ${destroot}${prefix}/bin
    set libdir ${destroot}${prefix}/lib
    set libndir ${libdir}/node
    set libddir ${libdir}/dtrace
    set incdir ${destroot}${prefix}/include/node
    set docdir ${destroot}${prefix}/share/doc/${name}

    xinstall -d ${bindir}
    xinstall -d ${libdir}
    xinstall -d ${libndir}
    xinstall -d ${libddir}
    xinstall -d ${incdir}
    xinstall -d ${incdir}/uv
    xinstall -d ${docdir}

    # install binaries
    xinstall -m 755 -W ${worksrcpath} \
        out/Release/node \
        ${bindir}

    # install headers
    xinstall -m 644 {*}[glob ${worksrcpath}/src/*.h]                ${incdir}
    xinstall -m 644 {*}[glob ${worksrcpath}/deps/v8/include/*.h]    ${incdir}
    xinstall -m 644 {*}[glob ${worksrcpath}/deps/uv/include/*.h]    ${incdir}
    xinstall -m 644 {*}[glob ${worksrcpath}/deps/uv/include/uv/*.h] ${incdir}/uv
    xinstall -m 644 {*}[glob ${worksrcpath}/deps/cares/include/*.h] ${incdir}

    # install manpage
    xinstall -m 644 -W ${worksrcpath} \
        doc/node.1 \
        ${destroot}${prefix}/share/man/man1

    # install docs
    xinstall -m 644 -W ${worksrcpath} \
        CHANGELOG.md \
        CONTRIBUTING.md \
        GOVERNANCE.md \
        LICENSE \
        README.md \
        SECURITY.md \
        ${docdir}
}

livecheck.url       ${homepage}dist/
livecheck.type      regex
livecheck.regex     {v(20\.\d+\.\d+)}
