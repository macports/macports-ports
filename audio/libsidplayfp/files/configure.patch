Fix detection of C++11 compilers.
https://github.com/libsidplayfp/libsidplayfp/issues/129
--- configure.orig	2024-05-19 03:16:43.000000000 -0500
+++ configure	2024-05-21 14:26:50.000000000 -0500
@@ -19116,7 +19231,7 @@
     void
     test1()
     {
-      auto lambda1 = (){};
+      auto lambda1 = [](){};
       auto lambda2 = lambda1;
       lambda1();
       lambda2();
@@ -19125,12 +19240,12 @@
     int
     test2()
     {
-      auto a = (int i, int j){ return i + j; }(1, 2);
-      auto b = () -> int { return '0'; }();
-      auto c = =(){ return a + b; }();
-      auto d = &(){ return c; }();
-      auto e = a, &b(int x) mutable {
-        const auto identity = (int y){ return y; };
+      auto a = [](int i, int j){ return i + j; }(1, 2);
+      auto b = []() -> int { return '0'; }();
+      auto c = [=](){ return a + b; }();
+      auto d = [&](){ return c; }();
+      auto e = [a, &b](int x) mutable {
+        const auto identity = [](int y){ return y; };
         for (auto i = 0; i < a; ++i)
           a += b--;
         return x + identity(a + b);
@@ -19141,13 +19256,13 @@
     int
     test3()
     {
-      const auto nullary = (){ return 0; };
-      const auto unary = (int x){ return x; };
+      const auto nullary = [](){ return 0; };
+      const auto unary = [](int x){ return x; };
       using nullary_t = decltype(nullary);
       using unary_t = decltype(unary);
-      const auto higher1st = (nullary_t f){ return f(); };
-      const auto higher2nd = unary(nullary_t f1){
-        return unary, f1(unary_t f2){ return f2(unary(f1())); };
+      const auto higher1st = [](nullary_t f){ return f(); };
+      const auto higher2nd = [unary](nullary_t f1){
+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };
       };
       return higher1st(nullary) + higher2nd(nullary)(unary);
     }
