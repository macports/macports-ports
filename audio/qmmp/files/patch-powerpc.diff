--- src/qmmp/audioparameters.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/qmmp/audioparameters.cpp	2024-05-18 14:01:04.000000000 +0800
@@ -24,7 +24,7 @@
 AudioParameters::AudioParameters()
 {
     m_srate = 0;
-    m_format = Qmmp::PCM_S16LE;
+    m_format = Qmmp::PCM_S16BE;
     m_sz = 2;
     m_precision = 16;
 }

--- src/qmmp/qmmpsettings.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/qmmp/qmmpsettings.cpp	2024-05-18 14:02:04.000000000 +0800
@@ -42,7 +42,7 @@
     settings.endGroup();
     //audio settings
     m_aud_software_volume = settings.value("Output/software_volume", false).toBool();
-    m_aud_format = (Qmmp::AudioFormat) settings.value("Output/format", Qmmp::PCM_S16LE).toInt();
+    m_aud_format = (Qmmp::AudioFormat) settings.value("Output/format", Qmmp::PCM_S16BE).toInt();
     m_aud_dithering = settings.value("Output/dithering", true).toBool();
     m_volume_step = settings.value("Output/volume_step", 5).toInt();
     //cover settings

--- src/qmmpui/configdialog.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/qmmpui/configdialog.cpp	2024-05-18 14:02:46.000000000 +0800
@@ -64,9 +64,9 @@
     m_ui->replayGainModeComboBox->addItem (tr("Track"), QmmpSettings::REPLAYGAIN_TRACK);
     m_ui->replayGainModeComboBox->addItem (tr("Album"), QmmpSettings::REPLAYGAIN_ALBUM);
     m_ui->replayGainModeComboBox->addItem (tr("Disabled"), QmmpSettings::REPLAYGAIN_DISABLED);
-    m_ui->bitDepthComboBox->addItem("16", Qmmp::PCM_S16LE);
-    m_ui->bitDepthComboBox->addItem("24", Qmmp::PCM_S24LE);
-    m_ui->bitDepthComboBox->addItem("32", Qmmp::PCM_S32LE);
+    m_ui->bitDepthComboBox->addItem("16", Qmmp::PCM_S16BE);
+    m_ui->bitDepthComboBox->addItem("24", Qmmp::PCM_S24BE);
+    m_ui->bitDepthComboBox->addItem("32", Qmmp::PCM_S32BE);
 #ifndef Q_OS_WIN
     m_ui->bitDepthComboBox->addItem("32 (float)", Qmmp::PCM_FLOAT);
 #endif

--- src/plugins/Output/pulseaudio/outputpulseaudio.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Output/pulseaudio/outputpulseaudio.cpp	2024-05-18 13:59:30.000000000 +0800
@@ -94,14 +94,14 @@
     case Qmmp::PCM_S8:
         ss.format = PA_SAMPLE_U8;
         break;
-    case Qmmp::PCM_S16LE:
-        ss.format = PA_SAMPLE_S16LE;
+    case Qmmp::PCM_S16BE:
+        ss.format = PA_SAMPLE_S16BE;
         break;
-    case Qmmp::PCM_S24LE:
-        ss.format = PA_SAMPLE_S24_32LE;
+    case Qmmp::PCM_S24BE:
+        ss.format = PA_SAMPLE_S24_32BE;
         break;
-    case Qmmp::PCM_S32LE:
-        ss.format = PA_SAMPLE_S32LE;
+    case Qmmp::PCM_S32BE:
+        ss.format = PA_SAMPLE_S32BE;
         break;
     case Qmmp::PCM_FLOAT:
 #ifdef PA_SAMPLE_FLOAT32NE
@@ -109,7 +109,7 @@
         break;
 #endif
     default:
-        ss.format = PA_SAMPLE_S16LE;
+        ss.format = PA_SAMPLE_S16BE;
     }
 
     ss.channels = map.count();

--- src/plugins/Output/qtmultimedia/outputqtmultimedia.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Output/qtmultimedia/outputqtmultimedia.cpp	2024-05-18 13:57:34.000000000 +0800
@@ -41,7 +41,7 @@
 	QAudioFormat qformat;
 	qformat.setCodec("audio/pcm");
 	qformat.setFrequency(freq);
-	qformat.setByteOrder(QAudioFormat::LittleEndian);
+	qformat.setByteOrder(QAudioFormat::BigEndian);
 	qformat.setChannels(map.size());
 	qformat.setSampleType(QAudioFormat::SignedInt);
 
@@ -54,15 +54,15 @@
 		qformat.setSampleSize(8);
 		bytes_per_sample = 1;
 		break;
-	case Qmmp::PCM_S16LE:
+	case Qmmp::PCM_S16BE:
 		qformat.setSampleSize(16);
 		bytes_per_sample = 2;
 		break;
-	case Qmmp::PCM_S24LE:
+	case Qmmp::PCM_S24BE:
 		qformat.setSampleSize(24);
 		bytes_per_sample = 4;
 		break;
-	case Qmmp::PCM_S32LE:
+	case Qmmp::PCM_S32BE:
 		qformat.setSampleSize(32);
 		bytes_per_sample = 4;
 		break;

--- src/plugins/General/converter/converter.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/General/converter/converter.cpp	2024-05-18 14:34:52.000000000 +0800
@@ -290,7 +290,7 @@
     AudioParameters ap = decoder->audioParameters();
     AudioConverter inConverter, outConverter;
     qint64 len, total = 0;
-    Qmmp::AudioFormat outFormat = Qmmp::PCM_S16LE;
+    Qmmp::AudioFormat outFormat = Qmmp::PCM_S16BE;
     int percent = 0;
     int prev_percent = 0;
     int samples = 0, output_at = 0;
@@ -300,13 +300,13 @@
     inConverter.configure(ap.format());
 
     if(use16bit)
-        outFormat = Qmmp::PCM_S16LE;
+        outFormat = Qmmp::PCM_S16BE;
     else if(ap.sampleSize() == 1)
         outFormat = Qmmp::PCM_S8;
     else if(ap.sampleSize() == 2)
-        outFormat = Qmmp::PCM_S16LE;
+        outFormat = Qmmp::PCM_S16BE;
     else if(ap.sampleSize() == 4)
-        outFormat = Qmmp::PCM_S32LE;
+        outFormat = Qmmp::PCM_S32BE;
 
     outConverter.configure(outFormat);
 
--- src/plugins/Input/aac/decoder_aac.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/aac/decoder_aac.cpp	2024-05-18 14:35:32.000000000 +0800
@@ -131,7 +131,7 @@
     memmove(m_input_buf, m_input_buf + res, m_input_at - res);
     m_input_at -= res;
     setProperty(Qmmp::FORMAT_NAME, "AAC");
-    configure(freq, chan, Qmmp::PCM_S16LE);
+    configure(freq, chan, Qmmp::PCM_S16BE);
     qDebug("DecoderAAC: initialize succes");
     return true;
 }

--- src/plugins/Input/cdaudio/decoder_cdaudio.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/cdaudio/decoder_cdaudio.cpp	2024-05-18 14:36:04.000000000 +0800
@@ -455,7 +455,7 @@
         }
         qDebug("DecoderCDAudio: using cd audio capable drive \"%s\"", qPrintable(device_path));
     }
-    configure(44100, 2, Qmmp::PCM_S16LE);
+    configure(44100, 2, Qmmp::PCM_S16BE);
     m_bitrate = 1411;
     m_totalTime = tracks[track_at].info.duration();
     m_first_sector = tracks[track_at].first_sector;

--- src/plugins/Input/ffmpeg/decoder_ffmpeg.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/ffmpeg/decoder_ffmpeg.cpp	2024-05-18 14:36:47.000000000 +0800
@@ -324,11 +324,11 @@
         break;
     case AV_SAMPLE_FMT_S16:
     case AV_SAMPLE_FMT_S16P:
-        format = Qmmp::PCM_S16LE;
+        format = Qmmp::PCM_S16BE;
         break;
     case AV_SAMPLE_FMT_S32:
     case AV_SAMPLE_FMT_S32P:
-        format = Qmmp::PCM_S32LE;
+        format = Qmmp::PCM_S32BE;
         break;
     case AV_SAMPLE_FMT_FLT:
     case AV_SAMPLE_FMT_FLTP:

--- src/plugins/Input/flac/decoder_flac.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/flac/decoder_flac.cpp	2024-05-18 14:37:16.000000000 +0800
@@ -451,11 +451,11 @@
         configure(m_data->sample_rate, chmap, Qmmp::PCM_S8);
         break;
     case 16:
-        configure(m_data->sample_rate, chmap, Qmmp::PCM_S16LE);
+        configure(m_data->sample_rate, chmap, Qmmp::PCM_S16BE);
         break;
     case 24:
     case 32:
-        configure(m_data->sample_rate, chmap, Qmmp::PCM_S32LE);
+        configure(m_data->sample_rate, chmap, Qmmp::PCM_S32BE);
         break;
     default:
         return false;

--- src/plugins/Input/modplug/decoder_modplug.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/modplug/decoder_modplug.cpp	2024-05-18 14:37:39.000000000 +0800
@@ -94,7 +94,7 @@
     m_soundFile->Create((uchar*) m_input_buf.data(), m_input_buf.size());
     m_bitrate = m_soundFile->GetNumChannels();
     m_totalTime = (qint64) m_soundFile->GetSongTime() * 1000;
-    configure(m_freq, m_chan, (m_bps == 8 ? Qmmp::PCM_S8 : Qmmp::PCM_S16LE));
+    configure(m_freq, m_chan, (m_bps == 8 ? Qmmp::PCM_S8 : Qmmp::PCM_S16BE));
     return true;
 }
 
--- src/plugins/Input/wildmidi/decoder_wildmidi.cpp	2024-04-18 20:36:35.000000000 +0800
+++ src/plugins/Input/wildmidi/decoder_wildmidi.cpp	2024-05-18 14:39:11.000000000 +0800
@@ -62,7 +62,7 @@
     m_sample_rate = WildMidiHelper::instance()->sampleRate();
     _WM_Info *wm_info = WildMidi_GetInfo(midi_ptr);
     m_totalTime = (qint64)wm_info->approx_total_samples * 1000 / WildMidiHelper::instance()->sampleRate();
-    configure(m_sample_rate, 2, Qmmp::PCM_S16LE);
+    configure(m_sample_rate, 2, Qmmp::PCM_S16BE);
     qDebug("DecoderWildMidi: initialize succes");
     return true;
 }

--- src/qmmp/decoder.h	2024-04-18 20:36:35.000000000 +0800
+++ src/qmmp/decoder.h	2024-05-18 14:31:20.000000000 +0800
@@ -185,14 +185,14 @@
      * @param map Map of channels.
      * @param f Audio format.
      */
-    void configure(quint32 srate, const ChannelMap &map, Qmmp::AudioFormat f = Qmmp::PCM_S16LE);
+    void configure(quint32 srate, const ChannelMap &map, Qmmp::AudioFormat f = Qmmp::PCM_S16BE);
     /*!
      * Use this function inside initialize() reimplementation to tell other plugins about audio parameters.
      * @param srate Sample rate.
      * @param channels Number of channels (internal channel sequence).
      * @param f Audio format.
      */
-    void configure(quint32 srate, int channels, Qmmp::AudioFormat f = Qmmp::PCM_S16LE);
+    void configure(quint32 srate, int channels, Qmmp::AudioFormat f = Qmmp::PCM_S16BE);
     /*!
      * Use this function inside initialize() reimplementation to tell other plugins about audio parameters.
      * @param p Audio parameters.
