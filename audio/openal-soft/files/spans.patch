Fix:

alc/alu.cpp:2148:9: error: member reference base type 'al::span' is not a structure or union
        .subspan(Offset*FrameStep);
        ^~~~~~~~
alc/alu.cpp:2179:79: error: member reference base type 'al::span' is not a structure or union
        const auto dst = al::span{static_cast<T*>(dstbuf), Offset+SamplesToDo}.subspan(Offset);
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~

https://github.com/kcat/openal-soft/issues/1064
https://github.com/kcat/openal-soft/commit/808bb2269ac8eb64ff5fbc030525740f003feb7a
https://github.com/kcat/openal-soft/commit/5050d34920e8426d6f1c569567e94c45d2a9400f
--- alc/alu.cpp.orig	2024-11-27 21:21:16.000000000 -0600
+++ alc/alu.cpp	2024-12-11 13:54:53.000000000 -0600
@@ -2142,8 +2142,9 @@
     ASSUME(FrameStep > 0);
     ASSUME(SamplesToDo > 0);
 
-    const auto output = al::span{static_cast<T*>(OutBuffer), (Offset+SamplesToDo)*FrameStep}
-        .subspan(Offset*FrameStep);
+    /* Some Clang versions don't like calling subspan on an rvalue here. */
+    const auto output_ = al::span{static_cast<T*>(OutBuffer), (Offset+SamplesToDo)*FrameStep};
+    const auto output = output_.subspan(Offset*FrameStep);
     size_t c{0};
     for(const FloatBufferLine &inbuf : InBuffer)
     {
@@ -2174,7 +2175,9 @@
     for(auto *dstbuf : OutBuffers)
     {
         const auto src = al::span{*srcbuf}.first(SamplesToDo);
-        const auto dst = al::span{static_cast<T*>(dstbuf), Offset+SamplesToDo}.subspan(Offset);
+        /* Some Clang versions don't like calling subspan on an rvalue here. */
+        const auto dst_ = al::span{static_cast<T*>(dstbuf), Offset+SamplesToDo};
+        const auto dst = dst_.subspan(Offset);
         std::transform(src.cbegin(), src.end(), dst.begin(), SampleConv<T>);
         ++srcbuf;
     }
--- core/uhjfilter.cpp.orig	2024-11-27 21:21:16.000000000 -0600
+++ core/uhjfilter.cpp	2024-12-11 13:54:53.000000000 -0600
@@ -216,7 +216,9 @@
         const size_t todo{std::min(sSegmentSize-mFifoPos, SamplesToDo-base)};
         auto wseg = winput.subspan(base, todo);
         auto xseg = xinput.subspan(base, todo);
-        auto wxio = al::span{mWXInOut}.subspan(mFifoPos, todo);
+        /* Some Clang versions don't like calling subspan on an rvalue here. */
+        const auto wxio_ = al::span{mWXInOut};
+        auto wxio = wxio_.subspan(mFifoPos, todo);
 
         /* Copy out the samples that were previously processed by the FFT. */
         dstore = std::copy_n(wxio.begin(), todo, dstore);
