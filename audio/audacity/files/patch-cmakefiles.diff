diff --git a/CMakeLists.txt.orig b/CMakeLists.txt
index 4ff5430..08226f6 100644
--- a/CMakeLists.txt.orig
+++ b/CMakeLists.txt
@@ -47,14 +47,14 @@ if( APPLE )
    # Define the OSX compatibility parameters
    set( CMAKE_OSX_ARCHITECTURES x86_64 CACHE INTERNAL "" )
    set( CMAKE_OSX_DEPLOYMENT_TARGET 10.7 CACHE INTERNAL "" )
-   set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
+#    set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
    set( CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "" CACHE INTERNAL "" )
 
    # This prevents a link error when building with the 10.9 or older SDKs
    set( CMAKE_XCODE_ATTRIBUTE_CLANG_LINK_OBJC_RUNTIME OFF )
 
    # Shouldn't cmake do this???
-   string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
+#    string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
 endif()
 
 # Add our module path
@@ -69,12 +69,14 @@ set( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake-proxies/cmake-modules)
 set( CMAKE_CXX_STANDARD 14 )
 set( CMAKE_CXX_STANDARD_REQUIRED ON )
 
-# Use ccache if available
-find_program( CCACHE_PROGRAM ccache )
-mark_as_advanced( FORCE CCACHE_PROGRAM )
+# Use ccache if requested
+if( ${CMAKE_CXX_COMPILER_LAUNCHER} MATCHES "ccache" )
+    set( CCACHE_PROGRAM "${CMAKE_CXX_COMPILER_LAUNCHER}" )
+    mark_as_advanced( FORCE CCACHE_PROGRAM )
 
-if( CCACHE_PROGRAM )
-   set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     if( CCACHE_PROGRAM )
+#        set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     endif()
 endif()
 
 # Our very own project
@@ -182,10 +184,12 @@ set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
 
 # Set up RPATH handling
 set( CMAKE_SKIP_BUILD_RPATH FALSE )
-set( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
-set( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}/audacity" )
-set( CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE )
-set( CMAKE_MACOSX_RPATH FALSE )
+set( CMAKE_BUILD_WITH_INSTALL_RPATH TRUE )
+if (NOT CMAKE_INSTALL_RPATH)
+    set( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_FULL_LIBDIR}/audacity" )
+endif()
+# set( CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE )
+# set( CMAKE_MACOSX_RPATH FALSE )
 
 # the RPATH to be used when installing, but only if it's not a system directory
 #list( FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_FULL_LIBDIR}" isSysDir )
@@ -198,6 +202,7 @@ check_library_exists( m pow "" HAVE_LIBM )
 if( HAVE_LIBM )
    list( APPEND CMAKE_REQUIRED_LIBRARIES -lm )
 endif()
+set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
 
 check_library_exists( atomic __atomic_fetch_add_4 "" HAVE_LIBATOMIC )
 if( HAVE_LIBATOMIC )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 93dc50c821cd59b5be4fa74cc4c8e3fee161cfcb..f55beca805f6d33625cf5ea8f68ac60fb7999b40 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1095,6 +1095,11 @@ list( APPEND LIBRARIES
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:z>
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:pthread>
 )
+if( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+    list( APPEND LIBRARIES
+       PRIVATE
+        $<$<CXX_COMPILER_ID:Clang>:atomic>)
+endif()
 
 set( BUILDING_AUDACITY YES )
 set( INSTALL_PREFIX "${_PREFIX}" )
@@ -1240,6 +1245,9 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
          "-framework AudioUnit"
          "-framework CoreAudio"
          "-framework CoreAudioKit"
+         "-framework AudioToolbox"
+         "-framework Cocoa"
+         "-framework Carbon"
    )
 
    # Use the Aqua theme
@@ -1365,6 +1373,13 @@ source_group(
 
 target_sources( ${TARGET} PRIVATE ${HEADERS} ${SOURCES} ${RESOURCES} ${MAC_RESOURCES} ${WIN_RESOURCES} )
 target_compile_definitions( ${TARGET} PRIVATE ${DEFINES} )
+
+set_property(SOURCE effects/VST/VSTEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/ladspa/LadspaEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS PKGLIBDIR="${PKGLIBDIR}")
+set_property(SOURCE export/ExportMP3.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+
 target_compile_options( ${TARGET} PRIVATE ${OPTIONS} )
 target_include_directories( ${TARGET} PRIVATE ${INCLUDES} )
 target_link_options( ${TARGET} PRIVATE ${LDFLAGS} )
@@ -1373,7 +1388,7 @@ target_link_libraries( ${TARGET} PRIVATE ${LIBRARIES} )
 # If was have cmake 3.16 or higher, we can use precompiled headers, but
 # only use them if ccache is not available and the user hasn't disabled
 # it.
-if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" AND NOT CCACHE_PROGRAM )
+if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" )
    cmd_option(
       ${_OPT}use_pch
       "Use precompiled headers [yes, no]"
@@ -1390,10 +1405,9 @@ endif()
 
 if( NOT "${CMAKE_GENERATOR}" MATCHES "Xcode|Visual Studio*" )
    if( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
-      install( FILES "${_DEST}/Info.plist"
-               DESTINATION "${CMAKE_INSTALL_BINDIR}/Audacity.app/Contents" )
-      install( PROGRAMS "${_EXEDIR}/${AUDACITY_NAME}" "${_EXEDIR}/Wrapper"
-               DESTINATION "${CMAKE_INSTALL_BINDIR}/Audacity.app/Contents/MacOS" )
+      install( TARGETS ${TARGET}
+               DESTINATION "."
+               RESOURCE DESTINATION "${_APPDIR}/Resources" )
    else()
       install( PROGRAMS "${_EXEDIR}/${AUDACITY_NAME}"
                TYPE BIN )
@@ -1403,12 +1417,12 @@ if( NOT "${CMAKE_GENERATOR}" MATCHES "Xcode|Visual Studio*" )
                FILES_MATCHING PATTERN "*.so" )
       install( FILES "${_INTDIR}/audacity.desktop"
                DESTINATION "${_DATADIR}/applications" )
-      install( FILES "${topdir}/LICENSE.txt" "${topdir}/README.txt"
-               DESTINATION "${_DATADIR}/doc/${AUDACITY_NAME}" )
-      install( FILES "${_SRCDIR}/audacity.xml"
-               DESTINATION "${_DATADIR}/mime/packages" )
-      install( FILES "${topdir}/presets/EQDefaultCurves.xml"
-               DESTINATION "${_PKGDATA}" )
    endif()
+   install( FILES "${topdir}/LICENSE.txt" "${topdir}/README.txt"
+            DESTINATION "${_DATADIR}/doc/${AUDACITY_NAME}" )
+   install( FILES "${_SRCDIR}/audacity.xml"
+            DESTINATION "${_DATADIR}/mime/packages" )
+   install( FILES "${topdir}/presets/EQDefaultCurves.xml"
+            DESTINATION "${_PKGDATA}" )
 endif()
 
diff --git a/cmake-proxies/wxWidgets/CMakeLists.txt b/cmake-proxies/wxWidgets/CMakeLists.txt
index 47b6bd0eed3e1a9626d9b6a99f9a92e5186e413e..3947b7abb57d1d90df10d5e0f7d583374131f06e 100644
--- a/cmake-proxies/wxWidgets/CMakeLists.txt
+++ b/cmake-proxies/wxWidgets/CMakeLists.txt
@@ -76,7 +76,10 @@ if( wxWidgets_FOUND )
    set( toolkit "${wxWidgets_LIBRARIES}" )
 else()
    message( STATUS "Using local '${name}' library" )
-
+   if (APPLE)
+      #set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/Audacity.app/Contents/Frameworks)
+      set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/Audacity.app/Contents/Frameworks)
+   endif()
    set( WXWIN $ENV{WXWIN} )
    if( "${WXWIN}" STREQUAL "" )
       # XXX: Look into importing instead of adding to this project
diff --git a/cmake-proxies/lv2/orig.CMakeLists.txt b/cmake-proxies/lv2/CMakeLists.txt
index 289688e..af8d37a 100644
--- a/cmake-proxies/lv2/orig.CMakeLists.txt
+++ b/cmake-proxies/lv2/CMakeLists.txt
@@ -150,6 +150,9 @@ macro( bld name packages define sources )
             "PkgConfig::${pkg}"
       )
    endforeach()
+   if( ${name} STREQUAL "suil_qt5_in_cocoa")
+       list( APPEND libs PRIVATE "-framework Cocoa" )
+   endif()
 
    if( NOT missing )
       list( APPEND DEFINES
@@ -187,7 +190,7 @@ if( WIN32 )
 elseif( APPLE )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:/usr/local/lib/lv2:/usr/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
+   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:@PREFIX@/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
@@ -195,10 +198,18 @@ elseif( APPLE )
    set( SUIL_GTK3_LIB_NAME "libgtk-x11-3.0.so.0" )
    set( SUIL_MODULE_PREFIX "lib" )
    set( SUIL_MODULE_EXT ".dylib" )
+   option(audacity_use_suil_qt5 "Whether to build the suil_qt5_in_cocoa GUI library for LV2 plugins" OFF)
+   if( audacity_use_suil_qt5 )
+       pkg_check_modules( QT5 IMPORTED_TARGET "Qt5Widgets >= 5.1.0" )
+       bld( "suil_qt5_in_cocoa"
+            "QT5"
+            "SUIL_WITH_COCOA_IN_QT5"
+            "${TARGET_ROOT}/suil/src/cocoa_in_qt5.mm" )
+   endif()
 elseif( UNIX )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/.lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
+   set( LILV_DEFAULT_LV2_PATH "~/.lv2:@PREFIX@/lib/lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
diff --git a/mac/scripts/orig.install_wxlibs.sh b/mac/scripts/install_wxlibs.sh
index 49e6d44..ae8b5f4 100755
--- a/mac/scripts/orig.install_wxlibs.sh
+++ b/mac/scripts/install_wxlibs.sh
@@ -30,8 +30,9 @@ update_paths()
    do
       path=$(resolve "${lib}")
 
-      printf "%${indent}.${indent}cChanging '${lib}' to '@loader_path/../Frameworks/${path##*/}'\n" " "
-      install_name_tool -change "${lib}" "@loader_path/../Frameworks/${path##*/}" "${LIBPATH}/${base}"
+      printf "%${indent}.${indent}cChanging '${lib}' to '@executable_path/../Frameworks/${path##*/}'\n" " "
+      install_name_tool -id "@executable_path/../Frameworks/${path##*/}" "${LIBPATH}/${base}"
+      install_name_tool -change "${lib}" "@executable_path/../Frameworks/${path##*/}" "${LIBPATH}/${base}"
 
       update_paths $((indent + 2)) "${path}"
    done
