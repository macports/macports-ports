diff --git a/CMakeLists.txt b/CMakeLists.txt
index a853736706cb3c973ec153ce89eac9b70d7fda27..895a18a42fe017e8dccb2b53b82afee77da2020b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -78,7 +78,7 @@ cmake_policy( SET CMP0075 NEW )
 
 # Definitions that must happen before the project() command
 if( APPLE )
-   set( MIN_MACOS_VERSION 10.9 )
+   set( MIN_MACOS_VERSION 10.7 )
    set( TARGET_MACOS_VERSION 10.13 )
    # Generate schema files
    set( CMAKE_XCODE_GENERATE_SCHEME ON )
@@ -86,14 +86,14 @@ if( APPLE )
    # Define the OSX compatibility parameters
    set( CMAKE_OSX_ARCHITECTURES x86_64 CACHE INTERNAL "" )
    set( CMAKE_OSX_DEPLOYMENT_TARGET ${MIN_MACOS_VERSION} CACHE INTERNAL "" )
-   set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
+#    set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
    set( CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "" CACHE INTERNAL "" )
 
    # This prevents a link error when building with the 10.9 or older SDKs
    set( CMAKE_XCODE_ATTRIBUTE_CLANG_LINK_OBJC_RUNTIME OFF )
 
    # Shouldn't cmake do this???
-   string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
+#    string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
 endif()
 
 # Add our module path
@@ -108,12 +108,14 @@ set( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake-proxies/cmake-modules)
 set( CMAKE_CXX_STANDARD 14 )
 set( CMAKE_CXX_STANDARD_REQUIRED ON )
 
-# Use ccache if available
-find_program( CCACHE_PROGRAM ccache )
-mark_as_advanced( FORCE CCACHE_PROGRAM )
+# Use ccache if requested
+if( ${CMAKE_CXX_COMPILER_LAUNCHER} MATCHES "ccache" )
+    set( CCACHE_PROGRAM "${CMAKE_CXX_COMPILER_LAUNCHER}" )
+    mark_as_advanced( FORCE CCACHE_PROGRAM )
 
-if( CCACHE_PROGRAM )
-   set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     if( CCACHE_PROGRAM )
+#        set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     endif()
 endif()
 
 # Our very own project
@@ -135,7 +137,8 @@ cmd_option( ${_OPT}obey_system_dependencies
             Off
 )
 
-include( AudacityDependencies )
+# spurious commit:
+# include( AudacityDependencies )
 
 # Pull all the modules we'll need
 include( CheckCXXCompilerFlag )
@@ -252,6 +255,7 @@ if( CMAKE_CONFIGURATION_TYPES )
 else()
    set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE}" )
 endif()
+set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
 
 set( _DEST "${_DESTDIR}" )
 set( _PREFIX "${CMAKE_INSTALL_PREFIX}" )
@@ -265,9 +269,12 @@ set( _EXEDIR "${_DEST}" )
 
 # Setup RPATH handling
 set( CMAKE_BUILD_RPATH "${_DEST}/${_PKGLIB}" )
-set( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
-set( CMAKE_INSTALL_RPATH "${_PREFIX}/${_PKGLIB}" )
-set( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE )
+set( CMAKE_BUILD_WITH_INSTALL_RPATH TRUE )
+if (NOT CMAKE_INSTALL_RPATH)
+    set( CMAKE_INSTALL_RPATH "${_PREFIX}/${_PKGLIB}" )
+endif()
+message(STATUS "CMAKE_INSTALL_RPATH=${CMAKE_INSTALL_RPATH}")
+# set( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE )
 
 # Adjust them for the Mac
 if( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
diff --git a/cmake-proxies/cmake-modules/CopyLibs.cmake b/cmake-proxies/cmake-modules/CopyLibs.cmake
index ddb5d9ae60f576efd893c728009313bd337ca4e8..7044c04d5c0cd784c515e479dcd2bd943986671c 100644
--- a/cmake-proxies/cmake-modules/CopyLibs.cmake
+++ b/cmake-proxies/cmake-modules/CopyLibs.cmake
@@ -67,6 +67,7 @@ function( gather_libs src )
                list( APPEND libs ${lib} )
 
                get_filename_component( refname "${lib}" NAME )
+               list( APPEND postcmds "sh -c 'install_name_tool -id @executable_path/../Frameworks/${refname} ${libname}'" )
                list( APPEND postcmds "sh -c 'install_name_tool -change ${lib} @executable_path/../Frameworks/${refname} ${libname}'" )
 
                gather_libs( ${lib} )
diff --git a/cmake-proxies/lv2/CMakeLists.txt b/cmake-proxies/lv2/CMakeLists.txt
index 5551e5dd8d1fa060a91a00eb9a3bd115c31d7274..db7a5341d0ed22d4f14adb72b4b61fda22a0fd2e 100644
--- a/cmake-proxies/lv2/CMakeLists.txt
+++ b/cmake-proxies/lv2/CMakeLists.txt
@@ -151,6 +151,9 @@ macro( bld name packages define sources )
             "PkgConfig::${pkg}"
       )
    endforeach()
+   if( ${name} STREQUAL "suil_qt5_in_cocoa")
+       list( APPEND libs PRIVATE "-framework Cocoa" )
+   endif()
 
    if( NOT missing )
       list( APPEND DEFINES
@@ -188,7 +191,7 @@ if( WIN32 )
 elseif( APPLE )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:/usr/local/lib/lv2:/usr/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
+   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:@PREFIX@/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
@@ -196,10 +199,18 @@ elseif( APPLE )
    set( SUIL_GTK3_LIB_NAME "libgtk-x11-3.0.so.0" )
    set( SUIL_MODULE_PREFIX "lib" )
    set( SUIL_MODULE_EXT ".dylib" )
+   option(audacity_use_suil_qt5 "Whether to build the suil_qt5_in_cocoa GUI library for LV2 plugins" OFF)
+   if( audacity_use_suil_qt5 )
+       pkg_check_modules( QT5 IMPORTED_TARGET "Qt5Widgets >= 5.1.0" )
+       bld( "suil_qt5_in_cocoa"
+            "QT5"
+            "SUIL_WITH_COCOA_IN_QT5"
+            "${TARGET_ROOT}/suil/src/cocoa_in_qt5.mm" )
+   endif()
 elseif( UNIX )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/.lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
+   set( LILV_DEFAULT_LV2_PATH "~/.lv2:@PREFIX@/lib/lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
diff --git a/cmake-proxies/wxWidgets/CMakeLists.txt b/cmake-proxies/wxWidgets/CMakeLists.txt
index 47b6bd0eed3e1a9626d9b6a99f9a92e5186e413e..3947b7abb57d1d90df10d5e0f7d583374131f06e 100644
--- a/cmake-proxies/wxWidgets/CMakeLists.txt
+++ b/cmake-proxies/wxWidgets/CMakeLists.txt
@@ -76,7 +76,10 @@ if( wxWidgets_FOUND )
    set( toolkit "${wxWidgets_LIBRARIES}" )
 else()
    message( STATUS "Using local '${name}' library" )
-
+   if (APPLE)
+      #set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/Audacity.app/Contents/Frameworks)
+      set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/Audacity.app/Contents/Frameworks)
+   endif()
    set( WXWIN $ENV{WXWIN} )
    if( "${WXWIN}" STREQUAL "" )
       # XXX: Look into importing instead of adding to this project
@@ -240,10 +243,10 @@ file(
 
 string( REGEX MATCHALL "\".+(Audacity).+\"" ours "${output}")
 if( NOT ours )
-   message( FATAL_ERROR
+   message( WARNING
       "\n########################################################################\n"
-      "Audacity version 3.0.0 or higher requires use of a customized version of "
-      "wxWidgets.  For details:\n"
+      "Audacity version 3.0.0 or higher recommends the use of a customised version "
+      "of wxWidgets.  For details:\n"
       "  https://wiki.audacityteam.org/wiki/Building_for_Distros\n"
       "########################################################################\n"
    )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e6dd6cf03..385b05793 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1032,7 +1032,7 @@ list( APPEND DEFINES
 # If we have cmake 3.16 or higher, we can use precompiled headers, but
 # only use them if ccache is not available and the user hasn't disabled
 # it.
-if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" AND NOT CCACHE_PROGRAM )
+if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16"  )
    cmd_option(
       ${_OPT}use_pch
       "Use precompiled headers [yes, no]"
@@ -1081,6 +1081,11 @@ list( APPEND LIBRARIES
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:z>
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:pthread>
 )
+if( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+    list( APPEND LIBRARIES
+       PRIVATE
+        $<$<CXX_COMPILER_ID:Clang>:atomic>)
+endif()
 
 set( BUILDING_AUDACITY YES )
 set( INSTALL_PREFIX "${_PREFIX}" )
@@ -1206,6 +1211,9 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
          "-framework AudioUnit"
          "-framework CoreAudio"
          "-framework CoreAudioKit"
+         "-framework AudioToolbox"
+         "-framework Cocoa"
+         "-framework Carbon"
    )
 
    # Use the Aqua theme
@@ -1317,13 +1325,20 @@ list( APPEND DEFINES PRIVATE "${export_symbol}" INTERFACE "${import_symbol}" )
 
 target_sources( ${TARGET} PRIVATE ${HEADERS} ${SOURCES} ${RESOURCES} ${MAC_RESOURCES} ${WIN_RESOURCES} )
 target_compile_definitions( ${TARGET} PRIVATE ${DEFINES} )
+
+set_property(SOURCE effects/VST/VSTEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/ladspa/LadspaEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS PKGLIBDIR="${PKGLIBDIR}")
+set_property(SOURCE export/ExportMP3.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+
 target_compile_options( ${TARGET} PRIVATE ${OPTIONS} )
 target_include_directories( ${TARGET} PRIVATE ${INCLUDES} )
 target_link_options( ${TARGET} PRIVATE ${LDFLAGS} )
 target_link_libraries( ${TARGET} ${LIBRARIES} )
 target_link_libraries( ${TARGET} PUBLIC ${AUDACITY_LIBRARIES} )
 
-if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" AND NOT CCACHE_PROGRAM )
+if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16"  )
    if( ${_OPT}use_pch )
       message( STATUS "Using precompiled headers" )
       target_precompile_headers( ${TARGET} PRIVATE
