# -*- coding: utf-8; mode: tcl; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           github 1.0
# PortGroups for the main ports
PortGroup           wxWidgets 1.0
PortGroup           active_variants 1.1
PortGroup           cmake 1.1
PortGroup           compiler_blacklist_versions 1.0

# placeholder name
name                audacity
categories          audio
maintainers         nomaintainer
platforms           darwin
license             GPL-2+
universal_variant   no

set aud_app_path    ${applications_dir}/Audacity.app

# The manual subport is defined first since it doesn't require a lot of setting up
subport "${name}-manual" {}
if {${subport} eq "${name}-manual"} {
    description     The manual for audacity
    long_description {*}${description}. Users of port:audacity2-legacy may prefer to use the \
                    online manual instead of installing this port.
    github.setup    audacity audacity-manual 3.2.5 v
    homepage        https://manual.audacityteam.org/
    checksums       rmd160  f838df4e46539c95ce61221d45182f6999e602fb \
                    sha256  ed3531e1029a40d9dfd2d21f8cee0fd3a1ec66bacd9f9da4b8bededd61de5b74 \
                    size    22248955
    depends_run     path:${aud_app_path}/Contents:audacity
    use_configure   no
    build           {}
    installs_libs   no
    supported_archs noarch
    platforms       {darwin any}
    destroot {
        platform darwin {
            xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/help
            file copy ${worksrcpath}/manual ${destroot}${aud_app_path}/Contents/help
        }
        platform linux {
            xinstall -m 755 -d ${destroot}${prefix}/share/audacity/help
            file copy ${worksrcpath}/manual ${destroot}${prefix}/share/audacity/help
        }
    }
    return          0
}

subport audacity-wxWidgets {}

dist_subdir         ${name}

# default to our own "stealth" wxWidgets prefix; these will be reset 
# by wxWidget.use if +wxsystem
wxWidgets.name      wxWidgets
wxWidgets.version   audacity-3.1
wxWidgets.prefix    ${prefix}/libexec/${wxWidgets.name}/${wxWidgets.version}
wxWidgets.wxdir     ${wxWidgets.prefix}/bin
wxWidgets.wxconfig  ${wxWidgets.wxdir}/wx-config
wxWidgets.wxrc      ${wxWidgets.wxdir}/wxrc
# dependencies for wxWidgets:
set awx_deps        {path:include/turbojpeg.h:libjpeg-turbo \
                    port:tiff
                    port:libpng \
                    port:zlib \
                    port:libiconv}

supported_archs     x86_64 arm64
cmake.generator     Ninja
if {${build.cmd} ne "ninja"} {
    build.args-append   V=1 VERBOSE=1
    build.post_args-append -k
} else {
    build.pre_args-prepend -k 0
}


# platform darwin {
#     compiler.blacklist *gcc* {clang < 602}
#     foreach clv {3.3 3.4 3.5 3.7 5.0 6.0 7.0 8.0} {
#         compiler.blacklist-append macports-clang-${clv}
#     }
#     foreach clv {9.0 10 11 12 13 14 15} {
#         if {[file exists ${prefix}/bin/clang-mp-${clv}]} {
#             compiler.whitelist-prepend macports-clang-${clv}
#         }
#         compiler.fallback-prepend macports-clang-${clv}
#     }
# }

# ensure pre-compiled headers and the possible use of ccache can co-exist
configure.env-append \
                    "CCACHE_SLOPPINESS=pch_defines,time_macros"
build.env-append    "CCACHE_SLOPPINESS=pch_defines,time_macros"

proc if_not_ccache {} {
    global configure.ccache
    if {[tbool configure.ccache]} {
        return "OFF"
    } else {
        return "ON"
    }
}

if {${subport} ne "audacity-wxWidgets"} {
    ######### main port #########

description         A Free, Cross-Platform Digital Audio Editor.
long_description    Audacity is a free, easy-to-use, multi-track audio editor and recorder \
                    for Windows, Mac OS X, GNU/Linux and other operating systems. The interface is translated \
                    into many languages. You can use Audacity to: \n\
                    Record live audio. \n\
                    Record computer playback on any Windows Vista or later machine. \n\
                    Convert tapes and records into digital recordings or CDs. \n\
                    Edit WAV, AIFF, FLAC, MP2, MP3 or Ogg Vorbis sound files. \n\
                    AC3, M4A/M4R (AAC), WMA and other formats supported using optional libraries. \n\
                    Cut, copy, splice or mix sounds together. \n\
                    Numerous effects including change the speed or pitch of a recording. \n\
                    And more!

conflicts           audacity2-legacy audacity3-legacy audacity-legacy audacity-gtk
github.setup        audacity audacity 54266cad3a4a2bfe5fa4328906b1b86a2fc08daf

version             3.2.5.467
# this port is intended to facilitate development efforts shared with "upstreams"
# so using git instead of a tarball fetch type is more appropriate for the current maintainer
fetch.type          git
distname            audacity-git
set PPREFIX         3.2.5/

##>> RJVB : set this to 15 (10.11) for upstream!
set min_OS_for_wx32 15
##<< RJVB

platform darwin {
    if {${os.major} < 13} {
        replaced_by audacity3-legacy
        PortGroup   obsolete 1.0
        return      0
    } else {
        if {${os.major} >= ${min_OS_for_wx32}} {
            variant wxsystem description {Depend on wxWidgets from MacPorts} {}
            default_variants +wxsystem
        }
    }
}

compiler.cxx_standard 2014

proc add_patchfile_ifexists {args} {
    global PPREFIX filespath
    foreach fname ${args} {
        if {[file exists ${filespath}/${fname}]} {
            patchfiles-append ${fname}
        }
    }
}

homepage            https://www.audacityteam.org/

## Audacity's build depends on a python3 interpreter but it will find a suitable one from the installed versions
## itself - and at least one must be installed because it's an indirect dependency of port:git .

if {[variant_isset wxsystem]} {
    wxWidgets.use   wxWidgets-3.2

    require_active_variants ${wxWidgets.port} "" stdlib

    depends_lib-append \
                    port:${wxWidgets.port}
} else {
    depends_build-append \
                    port:audacity-wxWidgets
    depends_lib-append \
                    {*}${awx_deps}
}

depends_build-append \
                    port:pkgconfig \
                    port:cctools

depends_lib-append  port:freetype \
                    path:lib/pkgconfig/harfbuzz.pc:harfbuzz \
                    port:soundtouch \
                    port:soxr \
                    port:twolame \
                    port:expat \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:flac \
                    port:lame \
                    port:libogg \
                    port:libsndfile \
                    port:libvorbis \
                    port:sqlite3
# platform linux {
#     depends_lib-append \
#                     path:lib/libuuid.so:ossp-uuid
# }
if {${os.arch} ne "arm"} {
    depends_lib-append \
                    port:libid3tag \
                    port:libmad
}
depends_lib-append  port:mpg123 \
                    port:wavpack
# audacity could use port:lv2 and port:lilv but would also require a port:suil for that to be possible.

patch.pre_args      -Np1

# among other things, we add frameworks AudioToolbox, Cocoa and Carbon because somewhere after wxW 3.1.3
# the wx build system no longer exports private libraries. Carbon could be temporary because wxW
# dropped Carbon usage somewhere around 3.1.4 but drops support for 10.9- earlier. This is not
# required when building against port:wxWidgets-3.1 but it won't hurt either.
patchfiles-append   patch-cmakefiles-@prefix@.diff \
                    patch-build-preparations.diff \
                    patch-fix_bundlepy-@prefix@.diff \
                    patch-build-pre-1014.diff

if {[variant_isset wxsystem]} {
    # make certain we're not embedding any wxWidgets libraries
    add_patchfile_ifexists \
                    patch-no-embedded-wxW.diff
} else {
    # make certain we're embedding our wxWidgets libraries
    add_patchfile_ifexists \
                    patch-embed-wxW.diff
}

patchfiles-append   patch-aboutdlg.diff \
                    add_enGB_translation.diff \
                    patch-libnyquist-symbol-visibility.diff \
                    patch-ffmpeg-functions.diff

platform darwin {
    depends_build-append \
                    port:nasm

    # use lame from MacPorts (partial revert of ae431bc5)
    patchfiles-append \
                    patch-more-decent-font-sizes.diff \
                    patch-use-MPlame.diff
    # work around a missing implementation in wxCocoa's wxSound class
    patchfiles-append \
                    patch-implement-progdial=beep.diff
    add_patchfile_ifexists \
                    patch-no-sdk1013.diff
}
patchfiles-append   patch-enable-compact-menu.diff
add_patchfile_ifexists \
                    ${PPREFIX}patch-temp-fixes.diff

platform darwin {
    variant suil description {Build the GUI library for LV2 plugins\; requires Qt5} {
        PortGroup   qt5 1.0
    }
}

# if {${subport} eq "${name}"} {
# #>> RJVB
#     ## uncomment only when intending to regenerate the patchfiles
#     ## Prerequisites:
#     ## - git-unpatch
#     ## - checkout -b <some scratch branch>
#     patch {
#         foreach p ${patchfiles} {
#             set pf [file join ${filespath} ${p}]
#             ui_info "--> applying patch ${p} (${pf})"
#             system -W ${worksrcpath} "${patch.cmd} ${patch.pre_args} -i ${pf}"
#             if {${p} eq "add_enGB_translation.diff"} {
#                 system -W ${worksrcpath} "git add locale/en_GB.po"
#             }
#             system -W ${worksrcpath} "git diff --no-ext-diff HEAD -- . > ${pf}"
#             system -W ${worksrcpath} "git commit -v -a -m \"${pf}\""
#         }
#     }
# #<< RJVB
# }

if {${os.platform} eq "darwin"} {
    if {${os.major} >= 17} {
        # Audacity builds "normally" from 10.7 to 10.13, but will request the 10.13 SDK
        # on 10.14 and newer to "prevent high CPU usage and slow drawing". Linking will
        # fail if MacPort lets source be compiled against the platform SDK, so we handle
        # SDK selection ourselves entirely. MP builds aren't required to support anything
        # but the OS version they were built for. On 11.x we just build as if there are
        # no OS specifics.
        if {${os.major} < 20} {
            macosx_deployment_target 10.13
            patchfiles-delete patch-no-sdk1013.diff
            configure.sdkroot
        }
    } elseif {${os.major} == 13} {
        macosx_deployment_target 10.9
        configure.sdkroot \
                    ${developer_dir}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk
    }
}

# quelch a huge number of warnings
configure.cxxflags-append \
                    -Wno-inconsistent-missing-override \
                    -Wno-overloaded-virtual

platform darwin {
    # set the install_rpath first
    cmake.install_rpath-append \
                    ${prefix}/lib/audacity \
                    ${aud_app_path}/Contents/Frameworks
    if {[variant_isset wxsystem]} {
        cmake.install_rpath-append \
                    ${wxWidgets.prefix}/lib
    } else {
        configure.ldflags-append \
                    -Wl,-rpath,${prefix}/lib/audacity \
                    -Wl,-rpath,${aud_app_path}/Contents/Frameworks
    }
    if {${subport} eq "${name}"} {
        # now change the prefix
        cmake.install_prefix ${applications_dir}
    }
    configure.pre_args-replace \
                    -DCMAKE_INSTALL_NAME_DIR="${cmake.install_prefix}/lib" \
                    -DCMAKE_INSTALL_NAME_DIR="${aud_app_path}/Contents/Frameworks"
}

set _OPT "audacity_"
configure.args-append \
                    -DCMAKE_MACOSX_RPATH=ON \
                    -D${_OPT}lib_preference=system \
                    -D${_OPT}has_tests=off \
                    -D${_OPT}has_sentry_reporting=off \
                    -D${_OPT}has_crashreports=off \
                    -D${_OPT}has_updates_check=off \
                    -D${_OPT}conan_allow_prebuilt_binaries=off \
                    -D${_OPT}use_audio_units=on \
                    -D${_OPT}use_ffmpeg=loaded \
                    -D${_OPT}use_soxr=system \
                    -D${_OPT}use_vamp=local \
                    -D${_OPT}use_lv2=local \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_sbsms=local \
                    -D${_OPT}use_soundtouch=system \
                    -D${_OPT}use_twolame=system \
                    -D${_OPT}use_midi=system \
                    -D${_OPT}has_vst3=off \
                    -D${_OPT}use_sqlite=system \
                    -D${_OPT}use_pch=[if_not_ccache] \
                    -DCMAKE_DISABLE_FIND_PACKAGE_JACK=On
## Is this automatic nowadays?
# if {${os.arch} eq "arm"} {
#     configure.args-append \
#                     -D${_OPT}use_mad=off \
#                     -D${_OPT}use_id3tag=off
# }

    # in this port implementation we always get wxWidgets from the system
    # (but we embed the libraries if building -wxsystem)
    configure.args-append \
                    -DwxWidgets_CONFIG_EXECUTABLE=${wxWidgets.wxconfig} \
                    -D${_OPT}use_wxwidgets=system
    configure.env-append \
                    WX_CONFIG=${wxWidgets.wxconfig}

if {[variant_isset suil]} {
    configure.args-replace \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_suil_qt5=ON
}

# make sure the C++ stdlib argument is added to the LDFLAGS too
if {${configure.cxx_stdlib} ne "" && [string match *clang* ${configure.cxx}]} {
    configure.ldflags-append \
                    -stdlib=${configure.cxx_stdlib}
}

post-configure {
    reinplace -q "s|compiler.libcxx=libstdc++|compiler.libcxx=libc++|g" ${build.dir}/.conan/profiles/default
}

# with everything defined/declared as intended we can now
# handle the post-patch step with its reinplace statements.
post-patch {
    reinplace -W ${worksrcpath} "s|/usr/local|${prefix}|g" \
                                src/effects/ladspa/LadspaEffect.cpp \
                                src/effects/VST/VSTEffect.cpp \
                                src/export/ExportMP3.cpp \
                                lib-src/lv2/lilv/wscript \
                                lib-src/lv2/lilv/test/lilv_test.c
    reinplace -W ${worksrcpath} "s|/Library/Audio/Plug-Ins/Vamp|/Library/Audio/Plug-Ins/Vamp:${prefix}/lib/vamp|g" \
                                lib-src/libvamp/src/vamp-hostsdk/PluginHostAdapter.cpp
    reinplace -W ${worksrcpath} "s|/Library/Application Support/audacity/libs|${prefix}/lib|g" \
                                src/FFmpeg.h
    reinplace -W ${worksrcpath} "s|@PREFIX@|/opt/local|g" \
                                cmake-proxies/lv2/CMakeLists.txt \
                                scripts/build/macOS/fix_bundle.py \
                                libraries/lib-ffmpeg-support/FFmpegFunctions.cpp
}

pre-build {
    # register the exact source version in the build:
    if {[file exists ${worksrcpath}/mac/scripts/get_gitident.sh]} {
        system -W ${worksrcpath}/mac "scripts/get_gitident.sh"
        system "echo '#define GIT_DESC \"${version}\"' >> ${worksrcpath}/src/RevisionIdent.h"
    } else {
        system "echo '#define GIT_DESC \"${version}\"' > ${worksrcpath}/src/GitDesc.h"
    }
}

platform darwin {
    proc fixup_wx_libraries {} {
        global destroot aud_app_path wxWidgets.prefix
        if {[variant_isset wxsystem]} {
            # replace the embedded libraries with symlinks, so they're found via
            # the @executable_path rpath.
            foreach lwx [glob -nocomplain ${destroot}${aud_app_path}/Contents/Frameworks/libwx*] {
                file delete ${lwx}
                ln -s "${wxWidgets.prefix}/lib/[file tail ${lwx}]" ${lwx}
            }
        }
    }

    post-destroot {
        fixup_wx_libraries
        xinstall -m 755 -d ${destroot}${prefix}/share/audacity
        ln -s ${aud_app_path}/Contents/plug-ins ${destroot}${prefix}/share/audacity/
        xinstall -m 755 -d ${destroot}${prefix}/share/mime/packages
        xinstall -m 644 ${worksrcpath}/src/audacity.xml ${destroot}${prefix}/share/mime/packages/
        xinstall -m 755 -d ${destroot}${prefix}/share/appdata
        xinstall -m 644 ${worksrcpath}/help/audacity.appdata.xml ${destroot}${prefix}/share/appdata/
        xinstall -m 755 -d ${destroot}${prefix}/share/doc/Audacity
        xinstall -m 644 ${worksrcpath}/README.md ${worksrcpath}/LICENSE.txt ${destroot}${prefix}/share/doc/Audacity
        xinstall -m 755 -d ${destroot}${prefix}/share/man/man1
        xinstall -m 644 ${worksrcpath}/help/audacity.1 ${destroot}${prefix}/share/man/man1/
        xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/scalable/apps
        xinstall -m 644 ${worksrcpath}/images/audacity.svg ${destroot}${prefix}/share/icons/hicolor/scalable/apps/
        foreach s {16 22 24 32 48} {
            xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
            xinstall -m 644 ${worksrcpath}/images/icons/${s}x${s}/audacity.png ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
        }
        if {[variant_isset suil]} {
            file rename ${destroot}${aud_app_path}/Contents/Audacity.app/Contents/Frameworks/libsuil_qt5_in_cocoa.so \
                ${destroot}${aud_app_path}/Contents/Frameworks/
            ln -s libsuil_qt5_in_cocoa.so ${destroot}${aud_app_path}/Contents/Frameworks/libsuil_qt5_in_cocoa.dylib
        }
        if {[variant_isset wxsystem]} {
            foreach l [glob -nocomplain ${wxWidgets.prefix}/share/locale/*] {
                set lang [file tail ${l}]
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj
                ln -s ${l}/LC_MESSAGES/wxstd.mo ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj/
            }
        }
        # allow the application to find certain things where it expects them on OS X (= inside the app bundle)
        foreach r [glob -nocomplain ${destroot}${prefix}/share/audacity/*] {
            set f [file tail ${r}]
            if {![file exists ${destroot}${aud_app_path}/Contents/Resources/${f}]} {
                ln -s ${prefix}/share/audacity/${f} ${destroot}${aud_app_path}/Contents/Resources/
            }
        }
        # install a wrapper script in ${prefix}/bin
        system "echo \"#!/bin/sh\nexec \\\"${aud_app_path}/Contents/MacOS/Wrapper\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/audacity"
        system "chmod 755 ${destroot}${prefix}/bin/audacity"
    }
}

post-destroot {
    xinstall -m 755 ${filespath}/vocalremover.ny ${destroot}${aud_app_path}/Contents/plug-ins/
}

notes "
    In case Audacity complains about finding FFmpeg or Lame, please locate these libraries\
    under ${prefix}/lib in the Libraries section of the Preferences dialog (see\
    https://manual.audacityteam.org/man/installing_and_updating_audacity_on_mac_os_x.html#locate)
"

if {![variant_isset wxsystem]} {
    notes-append ">> You can now `sudo port deactivate audacity-wxWidgets`! <<"
}

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;

    ######### end main port #########
} else {
    ######### wxWidgets #########
    github.setup        audacity wxWidgets 837669d

    name                audacity-wxWidgets
    version             3.1.3.2
    distname            awxWidgets-git
    checksums           rmd160  594e539c0cb8e4ebd21303ac5c7354efcd70f54a \
                        sha256  0547bd279056ce33db8da88ecfe4d85de28513e18983fffd558ac6051feea368 \
                        size    20462802

    description         C++ framework for cross-platform GUI development
    long_description    Audacity's version of wxWidgets 3.1, an open-source cross-platform C++ \
                        GUI framework for Mac OS, Unix, Linux, Windows. This port is not intended \
                        for use with 3rd party software, and only needs to be active when building \
                        Audacity WITHOUT the `wxsystem` variant set (i.e. -wxsystem). \n\
                        >> Use of this wxWidgets version is compulsory if the port:Audacity does \
                        not have a `wxsystem` variant! ! <<
    license             wxwidgets-3.1

    depends_lib-append  {*}${awx_deps}

    patch.pre_args      -Np1
    patchfiles-append   wxW/patch-relax-buildoption-check.diff \
                        wxW/patch-windowmm.diff
    # patchfiles borrowed from audacity's conan build for their wxWidgets:
    patchfiles-append   wxW/patch-configcmake.diff \
                        wxW/patch-fix-cocoa-process.diff \
                        wxW/patch-cocoa-build.diff

    set wxtype          osx_cocoa
    compiler.c_standard 2011
    compiler.cxx_standard 2014

    cmake.install_prefix ${wxWidgets.prefix}
    configure.args-append \
                        -DwxBUILD_TOOLKIT=${wxtype} \
                        -DwxUSE_ACCESSIBILITY=ON \
                        -DwxUSE_LIBICONV=sys \
                        -DwxUSE_LIBJPEG=sys \
                        -DwxUSE_LIBTIFF=sys \
                        -DwxUSE_LIBPNG=sys \
                        -DwxUSE_ZLIB=sys \
                        -DwxUSE_LIBLZMA=sys \
                        -DwxUSE_OPENGL=ON \
                        -DwxUSE_LIBSDL=OFF \
                        -DwxUSE_AUI=ON \
                        -DwxUSE_DISPLAY=ON \
                        -DwxUSE_XRC=ON \
                        -DwxUSE_GRAPHICS_CONTEXT=ON \
                        -DwxBUILD_PRECOMP=[if_not_ccache] \
                        -DwxBUILD_STRIPPED_RELEASE_DEFAULT=OFF \
                        -DwxBUILD_CXX_STANDARD=14 \
                        -DCMAKE_CXX_STANDARD_REQUIRED=ON \
                        -DwxBUILD_COMPATIBILITY=3.0

    if { ${os.major} == 13 } {
        configure.sdkroot ${developer_dir}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk
    }

    post-configure {
        if {![catch "registry_active ${subport}"]} {
            ui_warning "${subport} will not be packaged (destrooted) because it is already active."
        }
    }
    pre-destroot {
        if {![catch "registry_active ${subport}"]} {
            ui_error "${subport} cannot be packaged (destrooted): it is already active."
            ui_error "Please forcibly deactivate the existing copy, e.g. by running:"
            ui_error ""
            ui_error "    sudo port -f deactivate ${subport}"
            ui_error ""
            ui_error "Then try again."
            return -code error "port is active"
        }
    }

    post-destroot {
        set confscript ${wxWidgets.prefix}/lib/wx/config/${wxtype}-unicode-3.1
        ln -s ${confscript} ${destroot}${wxWidgets.prefix}/bin/wx-config
        ln -s wxrc ${destroot}${wxWidgets.prefix}/bin/wxrc-3.1
    }
}

livecheck.type      none
