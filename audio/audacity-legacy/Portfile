# -*- coding: utf-8; mode: tcl; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           github 1.0

name                audacity3-legacy
categories          audio
maintainers         nomaintainer
platforms           darwin
license             GPL-2+
universal_variant   no
dist_subdir         audacity

set aud_app_path    ${applications_dir}/Audacity.app

# PortGroups for the main ports
PortGroup           active_variants 1.1
PortGroup           cmake 1.1

description         A Free, Cross-Platform Digital Audio Editor.
long_description    Audacity is a free, easy-to-use, multi-track audio editor and recorder \
                    for Windows, Mac OS X, GNU/Linux and other operating systems. The interface is translated \
                    into many languages. You can use Audacity to: \n\
                    Record live audio. \n\
                    Record computer playback on any Windows Vista or later machine. \n\
                    Convert tapes and records into digital recordings or CDs. \n\
                    Edit WAV, AIFF, FLAC, MP2, MP3 or Ogg Vorbis sound files. \n\
                    AC3, M4A/M4R (AAC), WMA and other formats supported using optional libraries. \n\
                    Cut, copy, splice or mix sounds together. \n\
                    Numerous effects including change the speed or pitch of a recording. \n\
                    And more!

subport             audacity2-legacy {
    long_description-append \
                    \n This version of the port provides the last release using the legacy file format. \
                    The newer v3 versions can import the legacy .aup projects but can only \
                    write in a new .aup3 format that the older versions cannot import! Use this port \
                    if you have a need to exchange native projects with people using Audacity versions \
                    older than 3.0.0 .
}

if {${subport} eq "audacity2-legacy"} {
    conflicts       audacity3-legacy audacity audacity-legacy
    # get the source tarball from github because it contains all required external libs
    # incl. those not in MacPorts.
    github.setup    audacity audacity 2.4.2 Audacity-
    checksums       rmd160  d9e04c029a144800e378a6b5464c74f3fdb2a7e2 \
                    sha256  032273e2408ad51f97c6846ac8d8fe9e4a3fbc6e4c620e630ea4c1d0124d9a94 \
                    size    61254313
    set PPREFIX     ./

    variant wxsystem description {Depend on wxWidgets from MacPorts} {}

    variant wx30 conflicts wx32 requires wxsystem description {build against wxWidgets-3.0} {}
    set default_wx_variant wx30
} else {
    conflicts       audacity2-legacy audacity audacity-legacy
    ## 576b7e66 looks like possibly the last commit before the takeover by the new project owner:
    github.setup    audacity audacity 576b7e66d2b96c39241d3d992259fc2bfa7855b0
    version         3.0.2.129
    # this port is intended to facilitate development efforts shared with "upstreams"
    # so using git instead of a tarball fetch type is more appropriate for the current maintainer
#     fetch.type      git
#     distname        audacity-git
    checksums       rmd160  3615af185a7338b83fba23c943b9898c7bbb260d \
                    sha256  58349631840adf45a81b57037819e14e18cb684586cde249630e66488b911902 \
                    size    64490814
    set PPREFIX     3.0.2/

    set default_wx_variant wx32
}
# neither of these ports are currently eligible for upgrades
livecheck.type      none

# this subport has to remain and can become a stub that pulls in the appropriate actual legacy port
subport             audacity-legacy {}
if {${subport} eq "audacity-legacy"} {
    replaced_by     audacity2-legacy
    PortGroup       obsolete 1.0
    return          0
}

##>> RJVB : set this to 15 (10.11) for upstream!
set min_OS_for_wx32 15
##<< RJVB

if {${os.platform} ne "darwin" || ${os.major} >= ${min_OS_for_wx32}} {
    if {![variant_exists wxsystem]} {
        variant wxsystem description {Depend on wxWidgets from MacPorts} {}
    }
    variant wx32 conflicts wx30 requires wxsystem description {build against wxWidgets-3.2} {}
}

if {![variant_exists wxsystem] || [variant_isset wxsystem]} {
    PortGroup       wxWidgets 1.0
} else {
    depends_fetch-append \
                    bin:wget:wget
}

supported_archs     x86_64 arm64
compiler.cxx_standard 2014
build.post_args-append -k
cmake.generator     Ninja

proc add_patchfile_ifexists {args} {
    global PPREFIX filespath
    foreach fname ${args} {
        if {[file exists ${filespath}/${fname}]} {
            patchfiles-append ${fname}
        }
    }
}

homepage            https://www.audacityteam.org/

## Audacity's build depends on a python3 interpreter but it will find a suitable one from the installed versions
## itself - and at least one must be installed because it's an indirect dependency of port:git .

if {[variant_isset wxsystem]} {
    if {![variant_isset wx30] && ![variant_isset wx32]} {
        default_variants +${default_wx_variant}
    }
    if {[variant_exists wx32] && [variant_isset wx32]} {
        wxWidgets.use   wxWidgets-3.2
    } elseif {[variant_exists wx30] && [variant_isset wx30]} {
        wxWidgets.use   wxWidgets-3.0
    } else {
        ui_error "variant +wxsystem must be combined with a wxWidgets version variant (default: +${default_wx_variant})"
        return -code error "missing wx variant"
    }

    require_active_variants ${wxWidgets.port} "" stdlib

    depends_lib-append  port:${wxWidgets.port}
} else {
    set wxCommit    837669d
    # different master_sites so we need to fetch and extract the audacity-wxWidgets sources "manually"
    post-fetch {
        if {![file exists ${distpath}/wxWidgets-${wxCommit}.tar.gz]} {
            ui_info "--->  Fetching wxWidgets-${wxCommit}.tar.gz"
            system "wget --no-check-certificate \"https://github.com/audacity/wxWidgets/tarball/${wxCommit}/wxWidgets-${wxCommit}.tar.gz\" \
                --progress=bar:force -O ${distpath}/wxWidgets-${wxCommit}.tar.gz"
        }
    }
    post-extract {
        ui_info "--->  Extracting wxWidgets-${wxCommit}.tar.gz"
        system -W ${worksrcpath}/lib-src "tar -xf ${distpath}/wxWidgets-${wxCommit}.tar.gz"
        ln -s audacity-wxWidgets-${wxCommit} ${worksrcpath}/lib-src/wxWidgets
    }
    # add the wxWidgets dependencies
    depends_lib-append \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:tiff \
                    port:libpng \
                    port:zlib \
                    port:libiconv
}

depends_build-append \
                    port:pkgconfig \
                    port:cctools

depends_lib-append  port:freetype \
                    path:lib/pkgconfig/harfbuzz.pc:harfbuzz \
                    port:soundtouch \
                    port:soxr \
                    port:twolame \
                    port:expat \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:flac \
                    port:lame \
                    port:libogg \
                    port:libsndfile \
                    port:libvorbis
if {${os.arch} ne "arm"} {
    depends_lib-append \
                    port:libid3tag \
                    port:libmad
}
# depends_lib-append  port:mpg123 \
#                     port:wavpack
# audacity could use port:lv2 and port:lilv but would also require a port:suil for that to be possible.

patch.pre_args      -Np1

# address issues in the build system:
# - build and link VSTControlOSX.mm instead of the GTk interface
# - address a visibility issue with the slider_array variable in libnyquist
# - make the AudioUnits plugin support build; on 64bit and also include AUControl.mm
platform darwin {
    depends_build-append \
                    port:nasm

    patchfiles-append \
                    buildinfo-clarify-no-gstreamer.diff           \
                    patch-aboutdlg-compiler.diff                  \
                    add_enGB_translation.diff                     \
                    patch-more-decent-font-sizes.diff             \
                    patch-libnyquist-symbol-visibility.diff
    # use lame from MacPorts (partial revert of ae431bc5)
    # load ffmpeg libs from MacPorts (reverts of 1d40f33e)
    patchfiles-append \
                    patch-use-MPlame.diff \
                    patch-use-MPffmpeg.diff
    # work around a missing implementation in wxCocoa's wxSound class
    patchfiles-append \
                    patch-implement-progdial=beep.diff \
                    patch-wxw-303.diff
    if {[variant_isset wxsystem]} {
        # make certain we're not embedding any wxWidgets libraries
        add_patchfile_ifexists \
                    ${PPREFIX}patch-no-embedded-wxW.diff
    } else {
        # make certain we're embedding our wxWidgets libraries
        add_patchfile_ifexists \
                    ${PPREFIX}patch-embed-wxW.diff
    }
    add_patchfile_ifexists \
                    ${PPREFIX}patch-no-sdk1013.diff
}
add_patchfile_ifexists \
                    ${PPREFIX}patch-skip-gcc-version-test.diff \
                    ${PPREFIX}patch-enable-compact-menu.diff \
                    ${PPREFIX}patch-use-MPportaudio.diff \
                    ${PPREFIX}patch-temp-fixes.diff
if {[variant_isset wxsystem] && ${wxWidgets.use} ne "wxWidgets-3.2"} {
    add_patchfile_ifexists \
                    ${PPREFIX}patch-wxw-31x.diff
}

platform darwin {
    variant suil description {Build the GUI library for LV2 plugins\; requires Qt5} {
        PortGroup   qt5 1.0
    }
}

# among other things, we add frameworks AudioToolbox, Cocoa and Carbon because somewhere after wxW 3.1.3
# the wx build system no longer exports private libraries. Carbon could be temporary because wxW
# dropped Carbon usage somewhere around 3.1.4 but drops support for 10.9- earlier. This is not
# required when building against port:wxWidgets-3.1 but it won't hurt either.
patchfiles-append   ${PPREFIX}patch-cmakefiles-@prefix@.diff

# make export work with ffmpeg 4.4:
patchfiles-append   patch-use-ffmpeg-4.4.diff

if {${os.major} >= 17} {
    # Audacity builds "normally" from 10.7 to 10.13, but will request the 10.13 SDK
    # on 10.14 and newer to "prevent high CPU usage and slow drawing". Linking will
    # fail if MacPort lets source be compiled against the platform SDK, so we handle
    # SDK selection ourselves entirely. MP builds aren't required to support anything
    # but the OS version they were built for. On 11.x we just build as if there are
    # no OS specifics.
    if {${os.major} < 20} {
        macosx_deployment_target 10.13
        patchfiles-delete ${PPREFIX}patch-no-sdk1013.diff
        configure.sdkroot
    }
}

# quelch a huge number of warnings
configure.cxxflags-append \
                    -Wno-inconsistent-missing-override \
                    -Wno-overloaded-virtual

platform darwin {
    # set the install_rpath first
    cmake.install_rpath-append \
                    ${prefix}/lib/audacity \
                    ${aud_app_path}/Contents/Frameworks
    if {[variant_isset wxsystem]} {
        cmake.install_rpath-append \
                    ${wxWidgets.prefix}/lib
    } else {
        configure.ldflags-append \
                    -Wl,-rpath,${prefix}/lib/audacity \
                    -Wl,-rpath,${aud_app_path}/Contents/Frameworks
    }
    if {${subport} eq "${name}"} {
        # now change the prefix
        cmake.install_prefix ${applications_dir}
    }
    configure.pre_args-replace \
                    -DCMAKE_INSTALL_NAME_DIR="${cmake.install_prefix}/lib" \
                    -DCMAKE_INSTALL_NAME_DIR="${aud_app_path}/Contents/Frameworks"
}
set _OPT "audacity_"
configure.args-append \
                    -DCMAKE_MACOSX_RPATH=ON \
                    -D${_OPT}lib_preference=system \
                    -D${_OPT}use_audio_units=on \
                    -D${_OPT}use_pa_jack=off \
                    -D${_OPT}use_ffmpeg=linked \
                    -D${_OPT}use_lame=system \
                    -D${_OPT}use_flac=system \
                    -D${_OPT}use_soxr=system \
                    -D${_OPT}use_vamp=local \
                    -D${_OPT}use_ogg=system \
                    -D${_OPT}use_vorbis=system \
                    -D${_OPT}use_lv2=local \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_sbsms=local \
                    -D${_OPT}use_soundtouch=system \
                    -D${_OPT}use_twolame=system \
                    -D${_OPT}use_midi=local \
                    -D${_OPT}use_pch=off
if {${os.arch} ne "arm"} {
    configure.args-append \
                    -D${_OPT}use_mad=system \
                    -D${_OPT}use_id3tag=system
} else {
    configure.args-append \
                    -D${_OPT}use_mad=off \
                    -D${_OPT}use_id3tag=off
}
if {${subport} eq ${name}} {
    # using port:sqlite3 leads to unstable behaviour?!
    configure.args-append \
                    -D${_OPT}use_sqlite=local
} else {
    depends_lib-append \
                    port:sqlite3
}
if {[variant_isset wxsystem]} {
    configure.args-append \
                    -DwxWidgets_CONFIG_EXECUTABLE=${wxWidgets.wxconfig} \
                    -D${_OPT}use_wxwidgets=system
    configure.env-append \
                    WX_CONFIG=${wxWidgets.wxconfig}
} else {
    configure.args-append \
                    -D${_OPT}use_wxwidgets=local
    # use the MacPorts options for building wxWidgets, in particular
    # about using dependencies from MacPorts:
    configure.args-append \
                    -DwxUSE_LIBICONV=sys \
                    -DwxUSE_LIBJPEG=sys \
                    -DwxUSE_LIBTIFF=sys \
                    -DwxUSE_LIBPNG=sys \
                    -DwxUSE_ZLIB=sys \
                    -DwxUSE_OPENGL=ON \
                    -DwxUSE_LIBSDL=OFF \
                    -DwxUSE_AUI=ON \
                    -DwxUSE_DISPLAY=ON \
                    -DwxUSE_XRC=ON \
                    -DwxUSE_GRAPHICS_CONTEXT=ON \
                    -DwxBUILD_PRECOMP=ON \
                    -DwxBUILD_STRIPPED_RELEASE_DEFAULT=OFF
    configure.env-append \
                    WXWIN=${worksrcpath}/lib-src/wxWidgets
    build.env-append \
                    WXWIN=${worksrcpath}/lib-src/wxWidgets
}
# ensure pre-compiled headers and the possible use of ccache can co-exist
configure.env-append \
                    "CCACHE_SLOPPINESS=pch_defines,time_macros"
build.env-append    "CCACHE_SLOPPINESS=pch_defines,time_macros"

if {[variant_isset suil]} {
    configure.args-replace \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_suil_qt5=ON
}
platform darwin {
    # Since version 2.2.0 we need to use the embedded (modified) Portaudio version.
    # (this has actually become the only option despite my patch for 3.0.2; the
    # buildsystem derails if we try to use the system portaudio.)
    configure.args-append \
                    -Daudacity_use_portaudio=local
}

# make sure the C++ stdlib argument is added to the LDFLAGS too
if {${configure.cxx_stdlib} ne "" && [string match *clang* ${configure.cxx}]} {
    configure.ldflags-append \
                    -stdlib=${configure.cxx_stdlib}
}

if {${build.cmd} ne "ninja"} {
    build.args-append   V=1 VERBOSE=1
} else {
    build.pre_args-prepend -k 0
}

# with everything defined/declared as intended we can now
# handle the post-patch step with its reinplace statements.
post-patch {
    reinplace -W ${worksrcpath} "s|/usr/local|${prefix}|g" \
                                src/effects/ladspa/LadspaEffect.cpp \
                                src/effects/VST/VSTEffect.cpp \
                                src/export/ExportMP3.cpp \
                                lib-src/lv2/lilv/wscript \
                                lib-src/lv2/lilv/test/lilv_test.c
    reinplace -W ${worksrcpath} "s|/Library/Audio/Plug-Ins/Vamp|/Library/Audio/Plug-Ins/Vamp:${prefix}/lib/vamp|g" \
                                lib-src/libvamp/src/vamp-hostsdk/PluginHostAdapter.cpp
    reinplace -W ${worksrcpath} "s|/Library/Application Support/audacity/libs|${prefix}/lib|g" \
                                src/FFmpeg.h
    reinplace -W ${worksrcpath} "s|@PREFIX@|/opt/local|g" \
                                cmake-proxies/lv2/CMakeLists.txt
}

pre-build {
    # register the exact source version in the build:
    if {[file exists ${worksrcpath}/mac/scripts/get_gitident.sh]} {
        system -W ${worksrcpath}/mac "scripts/get_gitident.sh"
        system "echo '#define GIT_DESC \"${version}\"' >> ${worksrcpath}/src/RevisionIdent.h"
    } else {
        system "echo '#define GIT_DESC \"${version}\"' > ${worksrcpath}/src/GitDesc.h"
    }
#     if {[file exists ${build.dir}/build.ninja]} {
#         # work around a (probable) cmake error; note this doesn't catch "recmake" actions triggered during the build!
#         reinplace "s|-framework QtWidgets QtGui QtCore||g" ${build.dir}/build.ninja
#     }
}

platform darwin {
    proc fixup_wx_libraries {} {
        global destroot aud_app_path wxWidgets.prefix
        if {[variant_isset wxsystem]} {
            # replace the embedded libraries with symlinks, so they're found via
            # the @executable_path rpath.
            foreach lwx [glob -nocomplain ${destroot}${aud_app_path}/Contents/Frameworks/libwx*] {
                file delete ${lwx}
                ln -s "${wxWidgets.prefix}/lib/[file tail ${lwx}]" ${lwx}
            }
        }
    }

    if {${subport} eq "${name}" && ![variant_isset wxsystem]} {
        destroot {
            # replace the destroot'ed app bundle with the one in ${build.dir}/bin that contains
            # the right install_name settings in most of the wxWidgets libraries
            file delete -force ${destroot}${aud_app_path}
            system "ditto --rsrc ${build.dir}/bin/Audacity.app ${destroot}${aud_app_path}"
        }
    }
    post-destroot {
        if {${subport} eq "audacity2-legacy"} {
            file rename ${destroot}${prefix}/Audacity.app ${destroot}${aud_app_path}
            file delete -force ${destroot}${prefix}/share/audacity/plug-ins
            file delete -force ${destroot}${prefix}/share/audacity/nyquist
            file delete -force ${destroot}${prefix}/share/audacity/modules
            xinstall -m 755 -d ${destroot}${prefix}/share/audacity
            ln -s ${aud_app_path}/Contents/plug-ins ${destroot}${prefix}/share/audacity/
            file delete -force ${destroot}/Resources
            fixup_wx_libraries
            if {[variant_isset suil]} {
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Frameworks
                file rename ${build.dir}/bin/MacPorts/lib/audacity/suil_qt5_in_cocoa.so \
                    ${destroot}${aud_app_path}/Contents/Frameworks/suil_qt5_in_cocoa.dylib
                ln -s suil_qt5_in_cocoa.dylib ${destroot}${aud_app_path}/Contents/Frameworks/suil_qt5_in_cocoa.so
            }
        } else {
            fixup_wx_libraries
            xinstall -m 755 -d ${destroot}${prefix}/share/audacity
            ln -s ${aud_app_path}/Contents/plug-ins ${destroot}${prefix}/share/audacity/
            xinstall -m 755 -d ${destroot}${prefix}/share/mime/packages
            xinstall -m 644 ${worksrcpath}/src/audacity.xml ${destroot}${prefix}/share/mime/packages/
            xinstall -m 755 -d ${destroot}${prefix}/share/appdata
            xinstall -m 644 ${worksrcpath}/help/audacity.appdata.xml ${destroot}${prefix}/share/appdata/
            xinstall -m 755 -d ${destroot}${prefix}/share/doc/Audacity
            xinstall -m 644 ${worksrcpath}/README.txt ${worksrcpath}/LICENSE.txt ${destroot}${prefix}/share/doc/Audacity
            xinstall -m 755 -d ${destroot}${prefix}/share/man/man1
            xinstall -m 644 ${worksrcpath}/help/audacity.1 ${destroot}${prefix}/share/man/man1/
            xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/scalable/apps
            xinstall -m 644 ${worksrcpath}/images/audacity.svg ${destroot}${prefix}/share/icons/hicolor/scalable/apps/
            foreach s {16 22 24 32 48} {
                xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
                xinstall -m 644 ${worksrcpath}/images/icons/${s}x${s}/audacity.png ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
            }
            if {[variant_isset suil]} {
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Frameworks
                file rename ${destroot}${aud_app_path}/Contents${build.dir}/bin/Audacity.app/Contents/Frameworks/libsuil_qt5_in_cocoa.so \
                    ${destroot}${aud_app_path}/Contents/Frameworks/libsuil_qt5_in_cocoa.dylib
                ln -s libsuil_qt5_in_cocoa.dylib ${destroot}${aud_app_path}/Contents/Frameworks/libsuil_qt5_in_cocoa.so
            }
        }
        if {[variant_isset wxsystem]} {
            foreach l [glob -nocomplain ${wxWidgets.prefix}/share/locale/*] {
                set lang [file tail ${l}]
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj
                ln -s ${l}/LC_MESSAGES/wxstd.mo ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj/
            }
        }
        # allow the application to find certain things where it expects them on OS X (= inside the app bundle)
        foreach r [glob -nocomplain ${destroot}${prefix}/share/audacity/*] {
            set f [file tail ${r}]
            if {![file exists ${destroot}${aud_app_path}/Contents/Resources/${f}]} {
                ln -s ${prefix}/share/audacity/${f} ${destroot}${aud_app_path}/Contents/Resources/
            }
        }
        # install a wrapper script in ${prefix}/bin
        system "echo \"#!/bin/sh\nexec \\\"${aud_app_path}/Contents/MacOS/Wrapper\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/audacity"
        system "chmod 755 ${destroot}${prefix}/bin/audacity"
    }
}

post-destroot {
    xinstall -m 755 ${filespath}/vocalremover.ny ${destroot}${aud_app_path}/Contents/plug-ins/
}

notes "
    In case Audacity complains about finding FFmpeg or Lame, please locate these libraries\
    under ${prefix}/lib in the Libraries section of the Preferences dialog (see\
    https://manual.audacityteam.org/man/installing_and_updating_audacity_on_mac_os_x.html#locate)
"

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
