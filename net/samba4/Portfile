# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           perl5 1.0

# O_CLOEXEC, AT_FDCWD
PortGroup           legacysupport 1.1
legacysupport.newest_darwin_requires_legacy 13

name                samba4
conflicts           samba3
version             4.15.5
revision            5
checksums           rmd160  0f16f05626b8b146f150292f89a7bbdfafc13548 \
                    sha256  69115e33831937ba5151be0247943147765aece658ba743f44741672ad68d17f \
                    size    19279071

categories          net
maintainers         nomaintainer
license             GPL-3
description         SMB/CIFS server and client
long_description    Samba is an software suite that provides seamless file \
                    and print services to SMB/CIFS clients.

homepage            https://www.samba.org
master_sites        https://download.samba.org/pub/samba/stable
distname            samba-${version}

perl5.major         5.34

depends_build       port:pkgconfig \
                    port:gettext

depends_lib         port:cctools \
                    port:gettext-runtime \
                    path:lib/pkgconfig/gnutls.pc:gnutls \
                    port:gpgme \
                    path:lib/pkgconfig/icu-uc.pc:icu \
                    port:jansson \
                    port:libarchive \
                    port:libiconv \
                    path:lib/libldap.dylib:openldap \
                    port:p${perl5.major}-parse-yapp \
                    port:popt \
                    port:python310 \
                    port:readline \
                    port:zlib

platform darwin {
    # patch "get_user_groups: failed to get the unix group list" on
    # macOS
    #
    # Samba fails on macOS when current user belongs to more than 16
    # groups.
    #
    # The 16 group limit is returned by sysconf when asked for
    # _SC_NGROUPS_MAX; this is apparently due to OS X's nested groups;
    # while the call to getgrouplist returns a flat (not nested) group
    # list. getgrouplist will happily return the first 16 groups but
    # still return a -1 return code, indicating failure. Hence the
    # strange maximum of 16 groups on OS X.
    #
    # https://github.com/Homebrew/legacy-homebrew/issues/5954
    patchfiles-append \
                    patch-macos-grouplimit.diff
}

# patch to disable building documentation on MacOS
# this enables us to have a working samba4 port without docs,
# rather than not having samba4 at all. Can be removed when
# doc build issues are resolved.
patchfiles-append patch-no-xsltproc.diff

configure.perl      ${perl5.bin}
configure.python    ${prefix}/bin/python3.10
configure.env-append \
                    YAPP=${prefix}/bin/yapp-${perl5.major}
configure.cmd       ${configure.python} ./buildtools/bin/waf configure
configure.args      -C \
                    --enable-fhs \
                    --mandir=${prefix}/share/man \
                    --with-libiconv=${prefix} \
                    --without-acl-support \
                    --without-ad-dc \
                    --disable-avahi \
                    --with-gpgme \
                    --disable-spotlight

build.cmd           ${configure.python} ./buildtools/bin/waf -v
build.pre_args
build.env-append    DESTDIR=${destroot}

destroot.cmd        ${configure.python} ./buildtools/bin/waf -v
destroot.env-append DESTDIR=${destroot}
destroot.destdir

# this will be used on Darwin, to correct the IDs of a binary's library dependencies
# so that they will be found in the location where they are actually installed.
options changelist
changelist

post-destroot {
    platform darwin {
        # install a file missed by the build system:
        xinstall -m 755 ${worksrcpath}/bin/shared/private/libdnsserver-common-samba4.dylib ${destroot}${prefix}/lib/samba

        # On Darwin the build system fails to set library install names AND uses absolute paths
        # into the build directory (-o ${build.dir}/path/to/libfoo.dylib).
        # We want to run without need for ${build.dir} so we need to fix the IDs and the "rpaths".
        proc canonical {lf} {
            set l [file normalize ${lf}]
            if {[file type ${l}] eq "link"} {
                set target [file readlink ${l}]
                if {[file pathtype ${target}] eq "relative"} {
                    return [file normalize [file join [file dirname ${l}] ${target}]]
                } else {
                    return [file normalize ${target}]
                }
            } else {
                return ${l}
            }
        }

        # First, find all .dylib files, record their current ID (in changelist) and correct it
        ui_msg "--->  Fixing dylib IDs"
        array set libdone {}
        catch {exec -ignorestderr find ${destroot}${prefix} -regex {.*/lib[^.]*\.[0-9]\.dylib}} versioneddylibs err
        foreach lf ${versioneddylibs} {
            # we may get output from `find` that's not a file, so check
            if {[file exists ${lf}]} {
                set l [canonical ${lf}]
                if {[string first ${destroot} ${l}] < 0} {
                    # shouldn't happen but better safe than sorry
                    ui_warn "${lf} -> ${l} !"
                } else {
                    # NB: the install name is based on the symlink, not the target!
                    set id [exec otool -D ${lf} | tail -1]
                    # the new install name == ID: the full path minus ${destroot}.
                    set instname [string map [list ${destroot} ""] ${lf}]
                    if {${instname} ne ${id}} {
                        system "install_name_tool -id ${instname} ${l}"
                        # the current ID must be changed to the new one in all files that depend on it:
                        changelist-append -change ${id} ${instname}
                        # annoyingly some libraries will still their intermediate library ID
                        # and who knows if other binaries depend on those IDs
                        # Just change both...
                        if {[string last ".inst.dylib" ${id}] >= 0} {
                            set id2 "[file rootname [file rootname ${id}]].dylib"
                        } else {
                            set id2 "[file rootname ${id}].inst.dylib"
                        }
                        changelist-append -change ${id2} ${instname}
                    }
                    # mark the actual file we just processed as "done".
                    set libdone(${l}) yes
                }
            }
        }
        # idem for the unversioned libraries - by finding all and then ignoring those already processed.
        catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib"} otherdylibs err
        foreach lf ${otherdylibs} {
            if {[file exists ${lf}]} {
                set l [canonical ${lf}]
                if {[string first ${destroot} ${l}] < 0} {
                    # shouldn't happen but better safe than sorry
                    ui_warn "${lf} -> ${l} !"
                } elseif {![info exists libdone(${l})]} {
                    set id [exec otool -D ${lf} | tail -1]
                    set instname [string map [list ${destroot} ""] ${lf}]
                    if {${instname} ne ${id}} {
                        system "install_name_tool -id ${instname} ${l}"
                        changelist-append -change ${id} ${instname}
                        if {[string last ".inst.dylib" ${id}] >= 0} {
                            set id2 "[file rootname [file rootname ${id}]].dylib"
                        } else {
                            set id2 "[file rootname ${id}].inst.dylib"
                        }
                        changelist-append -change ${id2} ${instname}
                    }
                } else {
                    ui_debug "Library ${l} has already been fixed"
                }
            }
        }
        ui_debug "Changelist:"
        ui_debug "${changelist}"
        ui_msg "--->  Updating all binaries with the new IDs"
        # reset libdone
        array unset libdone
        catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib" -o -name "*.so"} alllibs err
        foreach lf ${alllibs} {
            if {[file exists ${lf}]} {
                set exe [canonical ${lf}]
                if {![info exists libdone(${exe})]} {
                    system "install_name_tool ${changelist} ${exe}"
                    set libdone(${exe}) yes
                }
            }
        }
        foreach exe [glob ${destroot}${prefix}/bin/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        foreach exe [glob ${destroot}${prefix}/sbin/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        foreach exe [glob ${destroot}${prefix}/libexec/samba/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        # All done, "already"!
    }
}

livecheck.type  regex
livecheck.url   https://download.samba.org/pub/samba/
livecheck.regex samba-(\[0-9a-z.\]+)\\.tar\\.gz
