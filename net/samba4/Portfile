# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0

name			samba4
conflicts		samba3
version			4.13.1
revision		0
checksums		rmd160  796d14ba14d9ff1f386179d55a7aa4a535c29370 \
			sha256  2458213b5e9abd5060228909bbe7f28fbb3ab344a7bdf34c9d0fd1566501285f \
			size    18413369

categories		net
platforms		darwin
maintainers		nomaintainer
license			GPL-3
description		SMB/CIFS server and client
long_description  Samba is an software suite that provides seamless file \
			      and print services to SMB/CIFS clients.

homepage		http://www.samba.org/
master_sites	https://download.samba.org/pub/samba/stable
distname		samba-${version}

depends_build   port:pkgconfig 
depends_lib		port:cctools \
	            port:gettext \
		        port:gnutls \
                port:gpgme \
                port:jansson \
		        port:libarchive \
	            port:libiconv \
			    port:openldap \
			    port:p5.28-parse-yapp \
			    port:popt \
			    port:python38 \
			    port:readline \
			    port:zlib

patch.pre_args	-p1

platform darwin {
	# patch to fix st_atim, st_ctim and st_mtim calls on MacOS
	patchfiles-append patch-fix-st_atim.diff
}

# patch to disable building documentation on MacOS
# this enables us to have a working samba4 port without docs,
# rather than not having samba4 at all. Can be removed when
# doc build issues are resolved.
patchfiles-append patch-no-xsltproc.diff

configure.ldflags-append -v

configure.perl          ${prefix}/bin/perl5.28
configure.python        ${prefix}/bin/python3.8
configure.env-append    YAPP=${prefix}/bin/yapp-5.28
configure.cmd		${configure.python} ./buildtools/bin/waf configure
configure.args		-C \
			--enable-fhs \
			--mandir=${prefix}/share/man \
			--with-libiconv=${prefix} \
			--without-acl-support \
			--without-ad-dc \
			--disable-avahi \
			--with-gpgme \
			--disable-spotlight

build.cmd		${configure.python} ./buildtools/bin/waf -v
build.pre_args
build.env-append	DESTDIR=${destroot}

destroot.cmd		${configure.python} ./buildtools/bin/waf -v
destroot.env-append	DESTDIR=${destroot}
destroot.destdir

# this will be used on Darwin, to correct the IDs of a binary's library dependencies
# so that they will be found in the location where they are actually installed.
options changelist
changelist

post-destroot {
	platform darwin {
		# install a file missed by the build system:
		xinstall -m 755 ${worksrcpath}/bin/shared/private/libdnsserver-common-samba4.dylib ${destroot}${prefix}/lib/samba

		# On Darwin the build system fails to set library install names AND uses absolute paths
		# into the build directory (-o ${build.dir}/path/to/libfoo.dylib).
		# We want to run without need for ${build.dir} so we need to fix the IDs and the "rpaths".
		proc canonical {lf} {
			set l [file normalize ${lf}]
			if {[file type ${l}] eq "link"} {
				set target [file readlink ${l}]
				if {[file pathtype ${target}] eq "relative"} {
					return [file normalize [file join [file dirname ${l}] ${target}]]
				} else {
					return [file normalize ${target}]
				}
			} else {
				return ${l}
			}
		}

		# First, find all .dylib files, record their current ID (in changelist) and correct it
		ui_msg "--->  Fixing dylib IDs"
		array set libdone {}
		catch {exec -ignorestderr find ${destroot}${prefix} -regex {.*/lib[^.]*\.[0-9]\.dylib}} versioneddylibs err
		foreach lf ${versioneddylibs} {
			# we may get output from `find` that's not a file, so check
			if {[file exists ${lf}]} {
				set l [canonical ${lf}]
				if {[string first ${destroot} ${l}] < 0} {
					# shouldn't happen but better safe than sorry
					ui_warn "${lf} -> ${l} !"
				} else {
					# NB: the install name is based on the symlink, not the target!
					set id [exec otool -D ${lf} | tail -1]
					# the new install name == ID: the full path minus ${destroot}.
					set instname [string map [list ${destroot} ""] ${lf}]
					if {${instname} ne ${id}} {
						system "install_name_tool -id ${instname} ${l}"
						# the current ID must be changed to the new one in all files that depend on it:
						changelist-append -change ${id} ${instname}
						# annoyingly some libraries will still their intermediate library ID
						# and who knows if other binaries depend on those IDs
						# Just change both...
						if {[string last ".inst.dylib" ${id}] >= 0} {
							set id2 "[file rootname [file rootname ${id}]].dylib"
						} else {
							set id2 "[file rootname ${id}].inst.dylib"
						}
						changelist-append -change ${id2} ${instname}
					}
					# mark the actual file we just processed as "done".
					set libdone(${l}) yes
				}
			}
		}
		# idem for the unversioned libraries - by finding all and then ignoring those already processed.
		catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib"} otherdylibs err
		foreach lf ${otherdylibs} {
			if {[file exists ${lf}]} {
				set l [canonical ${lf}]
				if {[string first ${destroot} ${l}] < 0} {
					# shouldn't happen but better safe than sorry
					ui_warn "${lf} -> ${l} !"
				} elseif {![info exists libdone(${l})]} {
					set id [exec otool -D ${lf} | tail -1]
					set instname [string map [list ${destroot} ""] ${lf}]
					if {${instname} ne ${id}} {
						system "install_name_tool -id ${instname} ${l}"
						changelist-append -change ${id} ${instname}
						if {[string last ".inst.dylib" ${id}] >= 0} {
							set id2 "[file rootname [file rootname ${id}]].dylib"
						} else {
							set id2 "[file rootname ${id}].inst.dylib"
						}
						changelist-append -change ${id2} ${instname}
					}
				} else {
					ui_debug "Library ${l} has already been fixed"
				}
			}
		}
		ui_debug "Changelist:"
		ui_debug "${changelist}"
		ui_msg "--->  Updating all binaries with the new IDs"
		# reset libdone
		array unset libdone
		catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib" -o -name "*.so"} alllibs err
		foreach lf ${alllibs} {
			if {[file exists ${lf}]} {
				set exe [canonical ${lf}]
				if {![info exists libdone(${exe})]} {
					system "install_name_tool ${changelist} ${exe}"
					set libdone(${exe}) yes
				}
			}
		}
		foreach exe [glob ${destroot}${prefix}/bin/*] {
			if {[file exists ${exe}]} {
				# catch because we could encounter scripts
				catch {system "install_name_tool ${changelist} ${exe}"}
			}
		}
		foreach exe [glob ${destroot}${prefix}/sbin/*] {
			if {[file exists ${exe}]} {
				# catch because we could encounter scripts
				catch {system "install_name_tool ${changelist} ${exe}"}
			}
		}
		foreach exe [glob ${destroot}${prefix}/libexec/samba/*] {
			if {[file exists ${exe}]} {
				# catch because we could encounter scripts
				catch {system "install_name_tool ${changelist} ${exe}"}
			}
		}
		# All done, "already"!
	}
}

livecheck.type	regex
livecheck.url	http://us4.samba.org/samba/ftp/samba4/?M=D
livecheck.regex	samba-(\[0-9a-z.\]+)\\.tar\\.gz
