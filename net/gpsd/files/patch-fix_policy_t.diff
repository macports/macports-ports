--- gps.h.orig
+++ gps.h
@@ -1902,7 +1902,7 @@
     int driver_mode;    		/* is driver in native mode or not? */
 };
 
-struct policy_t {
+struct gps_policy_t {
     bool watcher;			/* is watcher mode on? */
     bool json;				/* requesting JSON? */
     bool nmea;				/* requesting dumping as NMEA? */
@@ -2038,7 +2038,7 @@
 
     struct devconfig_t dev;	/* device that shipped last update */
 
-    struct policy_t policy;	/* our listening policy */
+    struct gps_policy_t policy;	/* our listening policy */
 
     struct {
 	timestamp_t time;
--- gps_json.h.orig
+++ gps_json.h
@@ -15,19 +15,19 @@
 #endif
 void json_data_report(const gps_mask_t,
 		      const struct gps_device_t *,
-		      const struct policy_t *,
+		      const struct gps_policy_t *,
 		      char *, size_t);
 char *json_stringify(char *, size_t, const char *);
 void json_tpv_dump(const struct gps_device_t *,
-		   const struct policy_t *, char *, size_t);
+		   const struct gps_policy_t *, char *, size_t);
 void json_noise_dump(const struct gps_data_t *, char *, size_t);
 void json_sky_dump(const struct gps_data_t *, char *, size_t);
 void json_att_dump(const struct gps_data_t *, char *, size_t);
 void json_oscillator_dump(const struct gps_data_t *, char *, size_t);
 void json_subframe_dump(const struct gps_data_t *, char buf[], size_t);
 void json_device_dump(const struct gps_device_t *, char *, size_t);
-void json_watch_dump(const struct policy_t *, char *, size_t);
-int json_watch_read(const char *, struct policy_t *,
+void json_watch_dump(const struct gps_policy_t *, char *, size_t);
+int json_watch_read(const char *, struct gps_policy_t *,
 		    const char **);
 int json_device_read(const char *, struct devconfig_t *,
 		     const char **);
--- gpsd.c.orig
+++ gpsd.c
@@ -519,7 +519,7 @@
 {
     int fd;			/* client file descriptor. -1 if unused */
     time_t active;		/* when subscriber last polled for data */
-    struct policy_t policy;	/* configurable bits */
+    struct gps_policy_t policy;	/* configurable bits */
     pthread_mutex_t mutex;	/* serialize access to fd */
 };
 
--- gpsd_json.c.orig
+++ gpsd_json.c
@@ -133,7 +133,7 @@
 
 
 void json_tpv_dump(const struct gps_device_t *session,
-		   const struct policy_t *policy CONDITIONALLY_UNUSED,
+		   const struct gps_policy_t *policy CONDITIONALLY_UNUSED,
 		   char *reply, size_t replylen)
 {
     const struct gps_data_t *gpsdata = &session->gpsdata;
@@ -372,7 +372,7 @@
     (void)strlcat(reply, "}\r\n", replylen);
 }
 
-void json_watch_dump(const struct policy_t *ccp,
+void json_watch_dump(const struct gps_policy_t *ccp,
 		     char *reply, size_t replylen)
 {
     (void)snprintf(reply, replylen,
@@ -3397,7 +3397,7 @@
 
 void json_data_report(const gps_mask_t changed,
 		 const struct gps_device_t *session,
-		 const struct policy_t *policy,
+		 const struct gps_policy_t *policy,
 		 char *buf, size_t buflen)
 /* report a session state in JSON */
 {
--- gpsdecode.c.orig
+++ gpsdecode.c
@@ -551,7 +551,7 @@
 /* sensor data on fpin to dump format on fpout */
 {
     struct gps_device_t session;
-    struct policy_t policy;
+    struct gps_policy_t policy;
     size_t minima[PACKET_TYPES+1];
 #if defined(SOCKET_EXPORT_ENABLE) || defined(AIVDM_ENABLE)
     char buf[GPS_JSON_RESPONSE_MAX * 4];
@@ -649,7 +649,7 @@
 /* JSON format on fpin to JSON on fpout - idempotency test */
 {
     char inbuf[BUFSIZ];
-    struct policy_t policy;
+    struct gps_policy_t policy;
     struct gps_device_t session;
     int lineno = 0;
 
--- shared_json.c.orig
+++ shared_json.c
@@ -74,7 +74,7 @@
 }
 
 int json_watch_read(const char *buf,
-		    struct policy_t *ccp,
+		    struct gps_policy_t *ccp,
 		    const char **endptr)
 {
     bool dummy_pps_flag;
--- test_libgps.c.orig
+++ test_libgps.c
@@ -64,7 +64,7 @@
 		 sizeof(struct gps_data_t), sizeof(struct rtcm2_t),
 		 sizeof(struct rtcm3_t), sizeof(struct ais_t),
 		 sizeof(struct attitude_t), sizeof(struct rawdata_t),
-		 sizeof(collect.devices), sizeof(struct policy_t),
+		 sizeof(collect.devices), sizeof(struct gps_policy_t),
 		 sizeof(struct version_t), sizeof(struct gst_t));
 	    exit(EXIT_SUCCESS);
 #ifdef CLIENTDEBUG_ENABLE
