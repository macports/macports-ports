# Comment out code that generates this configure error. This code
# looks for specific firewall implementations but this necessary for
# only the client portion of fwknop.
#
#   checking for gpg... /opt/local/bin/gpg
#   checking for wget... /opt/local/bin/wget
#   ./configure: line 18794: syntax error near unexpected token `;;'
#   ./configure: line 18794: `   ;;'
#   Command failed:  cd "/opt/local/var/macports/build/...../fwknop-client/work/fwknop-2.6.10" && ./configure --prefix=/opt/local --disable-server
#

--- configure.ac.orig	2018-08-06 17:41:32
+++ configure.ac	2024-05-27 15:56:16
@@ -611,146 +611,7 @@
 
   AM_CONDITIONAL([USE_NDBM], [test x$use_ndbm = xyes])
   AM_CONDITIONAL([CONFIG_FILE_CACHE], [test x$want_file_cache = xyes])
-
-dnl Check for firewalld
-dnl
-  AC_ARG_WITH([firewall-cmd],
-    [AS_HELP_STRING([--with-firewall-cmd=/path/to/firewall-cmd],
-      [Specify path to the firewall-cmd executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-firewall-cmd requires an argument specifying a path to firewall-cmd])],
-          [ FORCE_FIREWALLD_EXE=$withval ]
-        )
-      )
-    ],
-    [
-      AC_PATH_PROG(FIREWALLD_EXE, [firewall-cmd], [], [$APP_PATH])
-    ]
-  )
 
-  AC_ARG_WITH([firewalld],
-    [AS_HELP_STRING([--with-firewalld=/path/to/firewall-cmd],
-      [Synonym for --with-firewall-cmd, specify path to the firewall-cmd executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-firewalld requires an argument specifying a path to firewall-cmd])],
-          [ FORCE_FIREWALLD_EXE=$withval ]
-        )
-      )
-    ],
-    [
-     AC_PATH_PROG(FIREWALLD_EXE, [firewalld], [], [$APP_PATH])
-    ]
-  )
-
-dnl Check for iptables
-dnl
-  AC_ARG_WITH([iptables],
-    [AS_HELP_STRING([--with-iptables=/path/to/iptables],
-      [Specify path to the iptables executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-iptables requires an argument specifying a path to iptables])],
-          [ FORCE_IPTABLES_EXE=$withval ]
-        )
-      )
-    ],
-    [
-      AC_PATH_PROG(IPTABLES_EXE, [iptables], [], [$APP_PATH])
-    ]
-  )
-
-dnl Check for ipfw
-dnl
-  AC_ARG_WITH([ipfw],
-    [AS_HELP_STRING([--with-ipfw=/path/to/ipfw],
-      [Specify path to the ipfw executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-ipfw requires an argument specifying a path to ipfw])],
-          [ FORCE_IPFW_EXE=$withval ]
-        )
-      )
-    ],
-    [
-      AC_PATH_PROG(IPFW_EXE, [ipfw], [], [$APP_PATH])
-    ]
-  )
-
-dnl Check for pf from OpenBSD
-dnl
-  AC_ARG_WITH([pf],
-    [AS_HELP_STRING([--with-pf=/path/to/pfctl],
-      [Specify path to the pf executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-pf requires an argument specifying a path to pf])],
-          [ FORCE_PF_EXE=$withval ]
-        )
-      )
-    ],
-    [
-      AC_PATH_PROG(PF_EXE, [pfctl], [], [$APP_PATH])
-    ]
-  )
-
-dnl Check for ipf (ipfilter)
-dnl
-  AC_ARG_WITH([ipf],
-    [AS_HELP_STRING([--with-ipf=/path/to/ipf],
-      [Specify path to the ipf executable @<:@default=check path@:>@])],
-    [
-      AS_IF([ test "x$withval" = xno ], [],
-        AS_IF([ test "x$withval" = x -o "x$withval" = xyes ],
-          [AC_MSG_ERROR([--with-ipf requires an argument specifying a path to ipf])],
-          [ FORCE_IPF_EXE=$withval ]
-        )
-      )
-    ],
-    [
-      AC_PATH_PROG(IPF_EXE, [ipf], [], [$APP_PATH])
-    ]
-  )
-
-dnl If a firewall was forced. set the appropriate _EXE var and clear the others.
-dnl
-  AS_IF([test "x$FORCE_FIREWALLD_EXE" != x], [
-    FIREWALLD_EXE="$FORCE_FIREWALLD_EXE"
-  ],[
-    AS_IF([test "x$FORCE_IPTABLES_EXE" != x], [
-      IPTABLES_EXE="$FORCE_IPTABLES_EXE"
-      FIREWALLD_EXE=""
-    ],[
-      AS_IF([test "x$FORCE_IPFW_EXE" != x], [
-        IPFW_EXE="$FORCE_IPFW_EXE"
-        IPTABLES_EXE=""
-        FIREWALLD_EXE=""
-      ],[
-        AS_IF([test "x$FORCE_PF_EXE" != x], [
-          PF_EXE="$FORCE_PF_EXE"
-          IPFW_EXE=""
-          IPTABLES_EXE=""
-          FIREWALLD_EXE=""
-        ],[
-          AS_IF([test "x$FORCE_IPF_EXE" != x], [
-            IPF_EXE="$FORCE_IPF_EXE"
-            PF_EXE=""
-            IPFW_EXE=""
-            IPTABLES_EXE=""
-            FIREWALLD_EXE=""
-          ]
-        ]
-      ]
-    ]
-  ]
-  )))))
-
 dnl Determine which firewall exe we use (if we have one).
 dnl If firewalld was found or specified, it wins, then we fallback to iptables,
 dnl then ipfw, pf, and otherwise we try ipf.
