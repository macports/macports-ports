From 485b97601af741001aa62041d205d32b59133205 Mon Sep 17 00:00:00 2001
From: Gregor Jasny <gjasny@googlemail.com>
Date: Sat, 8 Jun 2024 00:45:30 +0200
Subject: [PATCH 01/12] docs: distribute ares_dns_rec_type_tostr (#778)

Fix By: Gregor Jasny (@gjasny)
---
 docs/Makefile.inc | 1 +
 1 file changed, 1 insertion(+)

diff --git a/docs/Makefile.inc b/docs/Makefile.inc
index 685978674..097bf2658 100644
--- a/docs/Makefile.inc
+++ b/docs/Makefile.inc
@@ -37,6 +37,7 @@ MANPAGES = ares_cancel.3		\
   ares_dns_record_rr_get.3		\
   ares_dns_record_rr_get_const.3	\
   ares_dns_rec_type_fromstr.3		\
+  ares_dns_rec_type_tostr.3		\
   ares_dns_rec_type_t.3			\
   ares_dns_rr.3				\
   ares_dns_rr_get_addr.3		\

From 5fbe31a8448eea0b37bf958f285e5cdb5408cd26 Mon Sep 17 00:00:00 2001
From: Gregor Jasny <gjasny@googlemail.com>
Date: Sat, 8 Jun 2024 01:00:50 +0200
Subject: [PATCH 02/12] fix some obvious errors reported by the CLion Project
 Analyzer (#779)

Fix By: Gregor Jasny (@gjasny)
---
 src/lib/ares__buf.c          | 2 --
 src/lib/ares__htable_strvp.h | 2 +-
 src/lib/ares_getnameinfo.c   | 2 +-
 test/ares-test-live.cc       | 2 +-
 test/ares-test-misc.cc       | 2 +-
 5 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/src/lib/ares__buf.c b/src/lib/ares__buf.c
index 2203662fa..5292e1bdc 100644
--- a/src/lib/ares__buf.c
+++ b/src/lib/ares__buf.c
@@ -135,8 +135,6 @@ void ares__buf_reclaim(ares__buf_t *buf)
   if (buf->tag_offset != SIZE_MAX) {
     buf->tag_offset -= prefix_size;
   }
-
-  return;
 }
 
 static ares_status_t ares__buf_ensure_space(ares__buf_t *buf,
diff --git a/src/lib/ares__htable_strvp.h b/src/lib/ares__htable_strvp.h
index 25dd2b907..878c71869 100644
--- a/src/lib/ares__htable_strvp.h
+++ b/src/lib/ares__htable_strvp.h
@@ -115,4 +115,4 @@ size_t      ares__htable_strvp_num_keys(const ares__htable_strvp_t *htable);
 
 /*! @} */
 
-#endif /* __ARES__HTABLE_STVP_H */
+#endif /* __ARES__HTABLE_STRVP_H */
diff --git a/src/lib/ares_getnameinfo.c b/src/lib/ares_getnameinfo.c
index d4cf58ea5..57c6ddaf9 100644
--- a/src/lib/ares_getnameinfo.c
+++ b/src/lib/ares_getnameinfo.c
@@ -82,7 +82,7 @@ static char *lookup_service(unsigned short port, unsigned int flags, char *buf,
                             size_t buflen);
 #ifdef HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID
 static void append_scopeid(const struct sockaddr_in6 *addr6,
-                           unsigned int scopeid, char *buf, size_t buflen);
+                           unsigned int flags, char *buf, size_t buflen);
 #endif
 static char *ares_striendstr(const char *s1, const char *s2);
 
diff --git a/test/ares-test-live.cc b/test/ares-test-live.cc
index 9e5c4c357..88d2153cb 100644
--- a/test/ares-test-live.cc
+++ b/test/ares-test-live.cc
@@ -807,7 +807,7 @@ TEST_F(DefaultChannelTest, LiveSetServersPorts) {
   server2.family = AF_INET;
   server2.addr.addr4.s_addr = htonl(0x02030405);
   server2.udp_port = 0;
-  server2.tcp_port = 0;;
+  server2.tcp_port = 0;
   EXPECT_EQ(ARES_ENODATA, ares_set_servers_ports(nullptr, &server1));
 
   // Change while pending will requeue any requests to new servers
diff --git a/test/ares-test-misc.cc b/test/ares-test-misc.cc
index e680481a8..6d6c691e4 100644
--- a/test/ares-test-misc.cc
+++ b/test/ares-test-misc.cc
@@ -104,7 +104,7 @@ TEST_F(DefaultChannelTest, SetServersPorts) {
   server2.family = AF_INET;
   server2.addr.addr4.s_addr = htonl(0x02030405);
   server2.udp_port = 0;
-  server2.tcp_port = 0;;
+  server2.tcp_port = 0;
   EXPECT_EQ(ARES_ENODATA, ares_set_servers_ports(nullptr, &server1));
 
   EXPECT_EQ(ARES_SUCCESS, ares_set_servers_ports(channel_, &server1));

From 540389215c1441596fb59fe6da114ae093415f8b Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 07:22:10 -0400
Subject: [PATCH 03/12] MacOS - legacy versions: add fcntl.h to prevent
 undefined symbols for config change detection

---
 src/lib/ares_event_configchg.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/lib/ares_event_configchg.c b/src/lib/ares_event_configchg.c
index c7bc9ffd5..e2e7ef56e 100644
--- a/src/lib/ares_event_configchg.c
+++ b/src/lib/ares_event_configchg.c
@@ -260,6 +260,7 @@ ares_status_t ares_event_configchg_init(ares_event_configchg_t **configchg,
 #  include <unistd.h>
 #  include <notify.h>
 #  include <dlfcn.h>
+#  include <fcntl.h>
 
 struct ares_event_configchg {
   int fd;

From 035ec0b8dbf4b0774d37075f332896459213e0f8 Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 07:33:03 -0400
Subject: [PATCH 04/12] MacOS - legacy: back off to older upstream dnsinfo.h

MacOS 10.8-10.11 won't compile with dnsinfo.h from configd-1109.140.1,
back off to configd-963.50.8 which still works with newer MacOS verions

Fixes Issue: #783
Fix By: Brad House (@bradh352)
---
 src/lib/thirdparty/apple/dnsinfo.h            |  12 +-
 src/lib/thirdparty/apple/dnsinfo.h-1109.140.1 | 128 ++++++++++++++++++
 3 files changed, 143 insertions(+), 7 deletions(-)
 create mode 100644 src/lib/thirdparty/apple/dnsinfo.h-1109.140.1

--- a/src/lib/thirdparty/apple/dnsinfo.h
+++ b/src/lib/thirdparty/apple/dnsinfo.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2004-2006, 2008, 2009, 2011-2013, 2015-2018 Apple Inc. All rights reserved.
+ * Copyright (c) 2004-2006, 2008, 2009, 2011-2013, 2015-2017 Apple Inc. All rights reserved.
  *
  * @APPLE_LICENSE_HEADER_START@
  *
@@ -28,7 +28,7 @@
  * These routines provide access to the systems DNS configuration
  */
 
-#include <os/availability.h>
+#include <Availability.h>
 #include <sys/cdefs.h>
 #include <stdint.h>
 #include <sys/types.h>
@@ -111,17 +111,17 @@ __BEGIN_DECLS
  * DNS configuration access APIs
  */
 const char *
-dns_configuration_notify_key    (void)				API_AVAILABLE(macos(10.4), ios(2.0));
+dns_configuration_notify_key    (void)				__OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_2_0);
 
 dns_config_t *
-dns_configuration_copy		(void)				API_AVAILABLE(macos(10.4), ios(2.0));
+dns_configuration_copy		(void)				__OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_2_0);
 
 void
-dns_configuration_free		(dns_config_t	*config)	API_AVAILABLE(macos(10.4), ios(2.0));
+dns_configuration_free		(dns_config_t	*config)	__OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_2_0);
 
 void
 _dns_configuration_ack		(dns_config_t	*config,
-				 const char	*bundle_id)	API_AVAILABLE(macos(10.8), ios(6.0));
+				 const char	*bundle_id)	__OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
 
 __END_DECLS
 
diff --git a/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1 b/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1
new file mode 100644
index 000000000..d5a0e70e2
--- /dev/null
+++ b/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2004-2006, 2008, 2009, 2011-2013, 2015-2018 Apple Inc. All rights reserved.
+ *
+ * @APPLE_LICENSE_HEADER_START@
+ *
+ * This file contains Original Code and/or Modifications of Original Code
+ * as defined in and that are subject to the Apple Public Source License
+ * Version 2.0 (the 'License'). You may not use this file except in
+ * compliance with the License. Please obtain a copy of the License at
+ * http://www.opensource.apple.com/apsl/ and read it before using this
+ * file.
+ *
+ * The Original Code and all software distributed under the License are
+ * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
+ * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
+ * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
+ * Please see the License for the specific language governing rights and
+ * limitations under the License.
+ *
+ * @APPLE_LICENSE_HEADER_END@
+ */
+
+#ifndef __DNSINFO_H__
+#define __DNSINFO_H__
+
+/*
+ * These routines provide access to the systems DNS configuration
+ */
+
+#include <os/availability.h>
+#include <sys/cdefs.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+
+#define	DNSINFO_VERSION		20170629
+
+#define DEFAULT_SEARCH_ORDER    200000   /* search order for the "default" resolver domain name */
+
+#define	DNS_PTR(type, name)				\
+	union {						\
+		type		name;			\
+		uint64_t	_ ## name ## _p;	\
+	}
+
+#define	DNS_VAR(type, name)				\
+	type	name
+
+
+#pragma pack(4)
+typedef struct {
+	struct in_addr	address;
+	struct in_addr	mask;
+} dns_sortaddr_t;
+#pragma pack()
+
+
+#pragma pack(4)
+typedef struct {
+	DNS_PTR(char *,			domain);	/* domain */
+	DNS_VAR(int32_t,		n_nameserver);	/* # nameserver */
+	DNS_PTR(struct sockaddr **,	nameserver);
+	DNS_VAR(uint16_t,		port);		/* port (in host byte order) */
+	DNS_VAR(int32_t,		n_search);	/* # search */
+	DNS_PTR(char **,		search);
+	DNS_VAR(int32_t,		n_sortaddr);	/* # sortaddr */
+	DNS_PTR(dns_sortaddr_t **,	sortaddr);
+	DNS_PTR(char *,			options);	/* options */
+	DNS_VAR(uint32_t,		timeout);	/* timeout */
+	DNS_VAR(uint32_t,		search_order);	/* search_order */
+	DNS_VAR(uint32_t,		if_index);
+	DNS_VAR(uint32_t,		flags);
+	DNS_VAR(uint32_t,		reach_flags);	/* SCNetworkReachabilityFlags */
+	DNS_VAR(uint32_t,		service_identifier);
+	DNS_PTR(char *,			cid);		/* configuration identifer */
+	DNS_PTR(char *,			if_name);	/* if_index interface name */
+} dns_resolver_t;
+#pragma pack()
+
+
+#define DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS	0x0002		/* always requesting for A dns records in queries */
+#define DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS	0x0004		/* always requesting for AAAA dns records in queries */
+
+#define	DNS_RESOLVER_FLAGS_REQUEST_ALL_RECORDS	\
+	(DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS | DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS)
+
+#define DNS_RESOLVER_FLAGS_SCOPED		0x1000		/* configuration is for scoped questions */
+#define DNS_RESOLVER_FLAGS_SERVICE_SPECIFIC	0x2000		/* configuration is service-specific */
+#define DNS_RESOLVER_FLAGS_SUPPLEMENTAL		0x4000		/* supplemental match configuration */
+
+
+#pragma pack(4)
+typedef struct {
+	DNS_VAR(int32_t,		n_resolver);		/* resolver configurations */
+	DNS_PTR(dns_resolver_t **,	resolver);
+	DNS_VAR(int32_t,		n_scoped_resolver);	/* "scoped" resolver configurations */
+	DNS_PTR(dns_resolver_t **,	scoped_resolver);
+	DNS_VAR(uint64_t,		generation);
+	DNS_VAR(int32_t,		n_service_specific_resolver);
+	DNS_PTR(dns_resolver_t **,	service_specific_resolver);
+	DNS_VAR(uint32_t,		version);
+} dns_config_t;
+#pragma pack()
+
+
+__BEGIN_DECLS
+
+/*
+ * DNS configuration access APIs
+ */
+const char *
+dns_configuration_notify_key    (void)				API_AVAILABLE(macos(10.4), ios(2.0));
+
+dns_config_t *
+dns_configuration_copy		(void)				API_AVAILABLE(macos(10.4), ios(2.0));
+
+void
+dns_configuration_free		(dns_config_t	*config)	API_AVAILABLE(macos(10.4), ios(2.0));
+
+void
+_dns_configuration_ack		(dns_config_t	*config,
+				 const char	*bundle_id)	API_AVAILABLE(macos(10.8), ios(6.0));
+
+__END_DECLS
+
+#endif	/* __DNSINFO_H__ */

From fbbaa46a1ff2dc32112a03b81b68e28d97fb3b21 Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 07:36:24 -0400
Subject: [PATCH 05/12] no reason to keep around other dnsinfo.h

---
 src/lib/thirdparty/apple/dnsinfo.h-1109.140.1 | 128 ------------------
 1 file changed, 128 deletions(-)
 delete mode 100644 src/lib/thirdparty/apple/dnsinfo.h-1109.140.1

diff --git a/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1 b/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1
deleted file mode 100644
index d5a0e70e2..000000000
--- a/src/lib/thirdparty/apple/dnsinfo.h-1109.140.1
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright (c) 2004-2006, 2008, 2009, 2011-2013, 2015-2018 Apple Inc. All rights reserved.
- *
- * @APPLE_LICENSE_HEADER_START@
- *
- * This file contains Original Code and/or Modifications of Original Code
- * as defined in and that are subject to the Apple Public Source License
- * Version 2.0 (the 'License'). You may not use this file except in
- * compliance with the License. Please obtain a copy of the License at
- * http://www.opensource.apple.com/apsl/ and read it before using this
- * file.
- *
- * The Original Code and all software distributed under the License are
- * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
- * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
- * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
- * Please see the License for the specific language governing rights and
- * limitations under the License.
- *
- * @APPLE_LICENSE_HEADER_END@
- */
-
-#ifndef __DNSINFO_H__
-#define __DNSINFO_H__
-
-/*
- * These routines provide access to the systems DNS configuration
- */
-
-#include <os/availability.h>
-#include <sys/cdefs.h>
-#include <stdint.h>
-#include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-
-#define	DNSINFO_VERSION		20170629
-
-#define DEFAULT_SEARCH_ORDER    200000   /* search order for the "default" resolver domain name */
-
-#define	DNS_PTR(type, name)				\
-	union {						\
-		type		name;			\
-		uint64_t	_ ## name ## _p;	\
-	}
-
-#define	DNS_VAR(type, name)				\
-	type	name
-
-
-#pragma pack(4)
-typedef struct {
-	struct in_addr	address;
-	struct in_addr	mask;
-} dns_sortaddr_t;
-#pragma pack()
-
-
-#pragma pack(4)
-typedef struct {
-	DNS_PTR(char *,			domain);	/* domain */
-	DNS_VAR(int32_t,		n_nameserver);	/* # nameserver */
-	DNS_PTR(struct sockaddr **,	nameserver);
-	DNS_VAR(uint16_t,		port);		/* port (in host byte order) */
-	DNS_VAR(int32_t,		n_search);	/* # search */
-	DNS_PTR(char **,		search);
-	DNS_VAR(int32_t,		n_sortaddr);	/* # sortaddr */
-	DNS_PTR(dns_sortaddr_t **,	sortaddr);
-	DNS_PTR(char *,			options);	/* options */
-	DNS_VAR(uint32_t,		timeout);	/* timeout */
-	DNS_VAR(uint32_t,		search_order);	/* search_order */
-	DNS_VAR(uint32_t,		if_index);
-	DNS_VAR(uint32_t,		flags);
-	DNS_VAR(uint32_t,		reach_flags);	/* SCNetworkReachabilityFlags */
-	DNS_VAR(uint32_t,		service_identifier);
-	DNS_PTR(char *,			cid);		/* configuration identifer */
-	DNS_PTR(char *,			if_name);	/* if_index interface name */
-} dns_resolver_t;
-#pragma pack()
-
-
-#define DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS	0x0002		/* always requesting for A dns records in queries */
-#define DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS	0x0004		/* always requesting for AAAA dns records in queries */
-
-#define	DNS_RESOLVER_FLAGS_REQUEST_ALL_RECORDS	\
-	(DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS | DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS)
-
-#define DNS_RESOLVER_FLAGS_SCOPED		0x1000		/* configuration is for scoped questions */
-#define DNS_RESOLVER_FLAGS_SERVICE_SPECIFIC	0x2000		/* configuration is service-specific */
-#define DNS_RESOLVER_FLAGS_SUPPLEMENTAL		0x4000		/* supplemental match configuration */
-
-
-#pragma pack(4)
-typedef struct {
-	DNS_VAR(int32_t,		n_resolver);		/* resolver configurations */
-	DNS_PTR(dns_resolver_t **,	resolver);
-	DNS_VAR(int32_t,		n_scoped_resolver);	/* "scoped" resolver configurations */
-	DNS_PTR(dns_resolver_t **,	scoped_resolver);
-	DNS_VAR(uint64_t,		generation);
-	DNS_VAR(int32_t,		n_service_specific_resolver);
-	DNS_PTR(dns_resolver_t **,	service_specific_resolver);
-	DNS_VAR(uint32_t,		version);
-} dns_config_t;
-#pragma pack()
-
-
-__BEGIN_DECLS
-
-/*
- * DNS configuration access APIs
- */
-const char *
-dns_configuration_notify_key    (void)				API_AVAILABLE(macos(10.4), ios(2.0));
-
-dns_config_t *
-dns_configuration_copy		(void)				API_AVAILABLE(macos(10.4), ios(2.0));
-
-void
-dns_configuration_free		(dns_config_t	*config)	API_AVAILABLE(macos(10.4), ios(2.0));
-
-void
-_dns_configuration_ack		(dns_config_t	*config,
-				 const char	*bundle_id)	API_AVAILABLE(macos(10.8), ios(6.0));
-
-__END_DECLS
-
-#endif	/* __DNSINFO_H__ */

From e64772f3b4a68dd9a6250036d1c47848f630da7b Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 08:55:05 -0400
Subject: [PATCH 06/12] MacOS legacy: Attempt to support last MacOS PPC release
 - 10.6

---
 src/lib/ares_sysconfig_mac.c       | 13 +++++++++++--
 src/lib/thirdparty/apple/dnsinfo.h | 30 ++++++++++++------------------
 3 files changed, 37 insertions(+), 28 deletions(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index 302bd0d34..e15bcf811 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -53,6 +53,7 @@
 #  include <arpa/inet.h>
 #  include "thirdparty/apple/dnsinfo.h"
 #  include <SystemConfiguration/SCNetworkConfiguration.h>
+#  include <AvailabilityMacros.h>
 #  include "ares.h"
 #  include "ares_private.h"
 
@@ -148,6 +149,7 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
     return ARES_SUCCESS;
   }
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080 /* MacOS 10.8 */
   /* Check to see if DNS server should be used, base this on if the server is
    * reachable or can be reachable automatically if we send traffic that
    * direction. */
@@ -156,6 +158,7 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
          kSCNetworkReachabilityFlagsConnectionOnTraffic))) {
     return ARES_SUCCESS;
   }
+#endif
 
   /* NOTE: it doesn't look like resolver->flags is relevant */
 
@@ -219,7 +222,8 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
    *   - resolver->timeout appears unused, always 0, so we ignore this
    *   - resolver->service_identifier doesn't appear relevant to us
    *   - resolver->cid also isn't relevant
-   *   - resolver->if_index we don't need, if_name is used instead.
+   *   - resolver->if_name we won't use since it isn't available in MacOS 10.8
+   *     or earlier, use resolver->if_index instead to then lookup the name.
    */
 
   /* XXX: resolver->search_order appears like it might be relevant, we might
@@ -233,6 +237,8 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
     struct ares_addr       addr;
     unsigned short         addrport;
     const struct sockaddr *sockaddr;
+    char                   if_name_str[256] = "";
+    const char            *if_name;
 
     /* UBSAN alignment workaround to fetch memory address */
     memcpy(&sockaddr, resolver->nameserver + i, sizeof(sockaddr));
@@ -262,8 +268,11 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
     if (addrport == 0) {
       addrport = port;
     }
+
+    if_name = ares__if_indextoname(resolver->if_index, if_name_str,
+                                   sizeof(if_name_str));
     status = ares__sconfig_append(&sysconfig->sconfig, &addr, addrport,
-                                  addrport, resolver->if_name);
+                                  addrport, if_name);
     if (status != ARES_SUCCESS) {
       return status;
     }
diff --git a/src/lib/thirdparty/apple/dnsinfo.h b/src/lib/thirdparty/apple/dnsinfo.h
index 68110b2eb..d92a1d803 100644
--- a/src/lib/thirdparty/apple/dnsinfo.h
+++ b/src/lib/thirdparty/apple/dnsinfo.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2004-2006, 2008, 2009, 2011-2013, 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (c) 2004-2006, 2008, 2009, 2011 Apple Inc. All rights reserved.
  *
  * @APPLE_LICENSE_HEADER_START@
  *
@@ -34,8 +34,9 @@
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <netinet/in.h>
+#include <AvailabilityMacros.h>
 
-#define	DNSINFO_VERSION		20170629
+#define	DNSINFO_VERSION		20111104
 
 #define DEFAULT_SEARCH_ORDER    200000   /* search order for the "default" resolver domain name */
 
@@ -72,23 +73,17 @@ typedef struct {
 	DNS_VAR(uint32_t,		search_order);	/* search_order */
 	DNS_VAR(uint32_t,		if_index);
 	DNS_VAR(uint32_t,		flags);
+#if MAC_OS_X_VERSION_MIN_REQUIRED < 1080 /* MacOS 10.8 */
+	DNS_VAR(uint32_t,		reserved[6]);
+#else
 	DNS_VAR(uint32_t,		reach_flags);	/* SCNetworkReachabilityFlags */
-	DNS_VAR(uint32_t,		service_identifier);
-	DNS_PTR(char *,			cid);		/* configuration identifer */
-	DNS_PTR(char *,			if_name);	/* if_index interface name */
+	DNS_VAR(uint32_t,		reserved[5]);
+#endif
 } dns_resolver_t;
 #pragma pack()
 
 
-#define DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS	0x0002		/* always requesting for A dns records in queries */
-#define DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS	0x0004		/* always requesting for AAAA dns records in queries */
-
-#define	DNS_RESOLVER_FLAGS_REQUEST_ALL_RECORDS	\
-	(DNS_RESOLVER_FLAGS_REQUEST_A_RECORDS | DNS_RESOLVER_FLAGS_REQUEST_AAAA_RECORDS)
-
-#define DNS_RESOLVER_FLAGS_SCOPED		0x1000		/* configuration is for scoped questions */
-#define DNS_RESOLVER_FLAGS_SERVICE_SPECIFIC	0x2000		/* configuration is service-specific */
-#define DNS_RESOLVER_FLAGS_SUPPLEMENTAL		0x4000		/* supplemental match configuration */
+#define DNS_RESOLVER_FLAGS_SCOPED	1		/* configuration is for scoped questions */
 
 
 #pragma pack(4)
@@ -97,10 +92,7 @@ typedef struct {
 	DNS_PTR(dns_resolver_t **,	resolver);
 	DNS_VAR(int32_t,		n_scoped_resolver);	/* "scoped" resolver configurations */
 	DNS_PTR(dns_resolver_t **,	scoped_resolver);
-	DNS_VAR(uint64_t,		generation);
-	DNS_VAR(int32_t,		n_service_specific_resolver);
-	DNS_PTR(dns_resolver_t **,	service_specific_resolver);
-	DNS_VAR(uint32_t,		version);
+	DNS_VAR(uint32_t,		reserved[5]);
 } dns_config_t;
 #pragma pack()
 
@@ -119,9 +111,11 @@ dns_configuration_copy		(void)				__OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_2
 void
 dns_configuration_free		(dns_config_t	*config)	__OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_2_0);
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
 void
 _dns_configuration_ack		(dns_config_t	*config,
 				 const char	*bundle_id)	__OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
+#endif
 
 __END_DECLS
 

From 51f589114f0c5c3cfb88e07919ffa366d8b95665 Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 09:06:38 -0400
Subject: [PATCH 07/12] MacOS Legacy: omit unneeded header on old macos
 versions

---
 src/lib/ares_sysconfig_mac.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index e15bcf811..905c07198 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -52,8 +52,10 @@
 #  include <dlfcn.h>
 #  include <arpa/inet.h>
 #  include "thirdparty/apple/dnsinfo.h"
-#  include <SystemConfiguration/SCNetworkConfiguration.h>
 #  include <AvailabilityMacros.h>
+#  if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080 /* MacOS 10.8 */
+#    include <SystemConfiguration/SCNetworkConfiguration.h>
+#  endif
 #  include "ares.h"
 #  include "ares_private.h"
 

From 894cdf16ccfe54b1b543d3ffe5bd180cc2cfc33a Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 14:43:09 -0400
Subject: [PATCH 08/12] MacOS Legacy: try to work with 10.5

---
 src/lib/ares_sysconfig_mac.c | 54 ++++++++++++++++++++++++++++--------
 1 file changed, 43 insertions(+), 11 deletions(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index 905c07198..19213741e 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -80,8 +80,16 @@ static void dnsinfo_destroy(dnsinfo_t *dnsinfo)
 
 static ares_status_t dnsinfo_init(dnsinfo_t **dnsinfo_out)
 {
-  dnsinfo_t    *dnsinfo = NULL;
-  ares_status_t status  = ARES_SUCCESS;
+  dnsinfo_t    *dnsinfo       = NULL;
+  ares_status_t status        = ARES_SUCCESS;
+  size_t        i;
+  const char   *searchlibs[]  = {
+    "/usr/lib/libSystem.dylib",
+    "SystemConfiguration.framework/SystemConfiguration",
+    "/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration",
+    "/System/Library/Frameworks/SystemConfiguration.framework/Versions/Current/SystemConfiguration",
+    NULL
+  };
 
   if (dnsinfo_out == NULL) {
     status = ARES_EFORMERR;
@@ -91,22 +99,46 @@ static ares_status_t dnsinfo_init(dnsinfo_t **dnsinfo_out)
   *dnsinfo_out = NULL;
 
   dnsinfo = ares_malloc_zero(sizeof(*dnsinfo));
-
   if (dnsinfo == NULL) {
     status = ARES_ENOMEM;
     goto done;
   }
 
-  dnsinfo->handle = dlopen("/usr/lib/libSystem.dylib", RTLD_LAZY | RTLD_NOLOAD);
-  if (dnsinfo->handle == NULL) {
-    status = ARES_ESERVFAIL;
-    goto done;
+  for (i=0; searchlibs[i] != NULL; i++) {
+    dnsinfo->handle = dlopen(searchlibs[i], RTLD_LAZY | RTLD_NOLOAD);
+    if (dnsinfo->handle == NULL) {
+      /* Fail, loop */
+      continue;
+    }
+
+    dnsinfo->dns_configuration_copy =
+      dlsym(dnsinfo->handle, "dns_configuration_copy");
+
+    if (dnsinfo->dns_configuration_copy == NULL) {
+      /* Might be needed for PPC ABI */
+      dnsinfo->dns_configuration_copy =
+        dlsym(dnsinfo->handle, "_dns_configuration_copy");
+    }
+
+    dnsinfo->dns_configuration_free =
+      dlsym(dnsinfo->handle, "dns_configuration_free");
+
+    if (dnsinfo->dns_configuration_free == NULL) {
+      /* Might be needed for PPC ABI */
+      dnsinfo->dns_configuration_free =
+        dlsym(dnsinfo->handle, "_dns_configuration_free");
+    }
+
+    if (dnsinfo->dns_configuration_copy != NULL &&
+        dnsinfo->dns_configuration_free != NULL) {
+      break;
+    }
+
+    /* Fail, loop */
+    dlclose(dnsinfo->handle);
+    dnsinfo->handle = NULL;
   }
 
-  dnsinfo->dns_configuration_copy =
-    dlsym(dnsinfo->handle, "dns_configuration_copy");
-  dnsinfo->dns_configuration_free =
-    dlsym(dnsinfo->handle, "dns_configuration_free");
 
   if (dnsinfo->dns_configuration_copy == NULL ||
       dnsinfo->dns_configuration_free == NULL) {

From 699e52f148eecee0d328048f362372db5d9c759f Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 14:45:30 -0400
Subject: [PATCH 09/12] MacOS Legacy: get rid of RTLD_NOLOAD

---
 src/lib/ares_sysconfig_mac.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index 19213741e..f6bfe1232 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -105,7 +105,7 @@ static ares_status_t dnsinfo_init(dnsinfo_t **dnsinfo_out)
   }
 
   for (i=0; searchlibs[i] != NULL; i++) {
-    dnsinfo->handle = dlopen(searchlibs[i], RTLD_LAZY | RTLD_NOLOAD);
+    dnsinfo->handle = dlopen(searchlibs[i], RTLD_LAZY /* | RTLD_NOLOAD */);
     if (dnsinfo->handle == NULL) {
       /* Fail, loop */
       continue;

From 495fdec7d002a83442f303157af082666c0ee10c Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 15:09:59 -0400
Subject: [PATCH 10/12] MacOS Legacy: simplify, don't forget change monitoring

---
 src/lib/ares_event_configchg.c | 37 ++++++++++++++++++++++++----------
 src/lib/ares_sysconfig_mac.c   | 14 -------------
 2 files changed, 26 insertions(+), 25 deletions(-)

diff --git a/src/lib/ares_event_configchg.c b/src/lib/ares_event_configchg.c
index e2e7ef56e..94eb7b787 100644
--- a/src/lib/ares_event_configchg.c
+++ b/src/lib/ares_event_configchg.c
@@ -329,11 +329,17 @@ static void ares_event_configchg_cb(ares_event_thread_t *e, ares_socket_t fd,
 ares_status_t ares_event_configchg_init(ares_event_configchg_t **configchg,
                                         ares_event_thread_t     *e)
 {
-  ares_status_t status                               = ARES_SUCCESS;
-  void         *handle                               = NULL;
-  const char *(*pdns_configuration_notify_key)(void) = NULL;
-  const char *notify_key                             = NULL;
-  int         flags;
+  ares_status_t   status                               = ARES_SUCCESS;
+  void           *handle                               = NULL;
+  const char   *(*pdns_configuration_notify_key)(void) = NULL;
+  const char     *notify_key                           = NULL;
+  int             flags;
+  size_t          i;
+  const char     *searchlibs[]                         = {
+    "/usr/lib/libSystem.dylib",
+    "/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration",
+    NULL
+  };
 
   *configchg = ares_malloc_zero(sizeof(**configchg));
   if (*configchg == NULL) {
@@ -341,13 +347,22 @@ ares_status_t ares_event_configchg_init(ares_event_configchg_t **configchg,
   }
 
   /* Load symbol as it isn't normally public */
-  handle = dlopen("/usr/lib/libSystem.dylib", RTLD_LAZY | RTLD_NOLOAD);
-  if (handle == NULL) {
-    status = ARES_ESERVFAIL;
-    goto done;
-  }
+  for (i=0; searchlibs[i] != NULL; i++) {
+    handle = dlopen(searchlibs[i], RTLD_LAZY);
+    if (handle == NULL) {
+      /* Fail, loop! */
+      continue;
+    }
 
-  pdns_configuration_notify_key = dlsym(handle, "dns_configuration_notify_key");
+    pdns_configuration_notify_key = dlsym(handle, "dns_configuration_notify_key");
+    if (pdns_configuration_notify_key != NULL) {
+      break;
+    }
+
+    /* Fail, loop! */
+    dlclose(handle);
+    handle = NULL;
+  }
 
   if (pdns_configuration_notify_key == NULL) {
     status = ARES_ESERVFAIL;
diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index f6bfe1232..8d7512934 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -85,9 +85,7 @@ static ares_status_t dnsinfo_init(dnsinfo_t **dnsinfo_out)
   size_t        i;
   const char   *searchlibs[]  = {
     "/usr/lib/libSystem.dylib",
-    "SystemConfiguration.framework/SystemConfiguration",
     "/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration",
-    "/System/Library/Frameworks/SystemConfiguration.framework/Versions/Current/SystemConfiguration",
     NULL
   };
 
@@ -114,21 +112,9 @@ static ares_status_t dnsinfo_init(dnsinfo_t **dnsinfo_out)
     dnsinfo->dns_configuration_copy =
       dlsym(dnsinfo->handle, "dns_configuration_copy");
 
-    if (dnsinfo->dns_configuration_copy == NULL) {
-      /* Might be needed for PPC ABI */
-      dnsinfo->dns_configuration_copy =
-        dlsym(dnsinfo->handle, "_dns_configuration_copy");
-    }
-
     dnsinfo->dns_configuration_free =
       dlsym(dnsinfo->handle, "dns_configuration_free");
 
-    if (dnsinfo->dns_configuration_free == NULL) {
-      /* Might be needed for PPC ABI */
-      dnsinfo->dns_configuration_free =
-        dlsym(dnsinfo->handle, "_dns_configuration_free");
-    }
-
     if (dnsinfo->dns_configuration_copy != NULL &&
         dnsinfo->dns_configuration_free != NULL) {
       break;

From b07f6826c4687b6ca49b0036de62c6060daf71db Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 15:16:42 -0400
Subject: [PATCH 11/12] remove some excessive UBSAN workaround

---
 src/lib/ares_sysconfig_mac.c | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index 8d7512934..0e62c4818 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -309,7 +309,6 @@ static ares_status_t read_resolvers(dns_resolver_t **resolvers, int nresolvers,
 
   for (i = 0; status == ARES_SUCCESS && i < nresolvers; i++) {
     const dns_resolver_t *resolver_ptr;
-    dns_resolver_t        resolver;
 
     /* UBSAN doesn't like that this is unaligned, lets use memcpy to get the
      * address.  Equivalent to:
@@ -317,10 +316,7 @@ static ares_status_t read_resolvers(dns_resolver_t **resolvers, int nresolvers,
      */
     memcpy(&resolver_ptr, resolvers + i, sizeof(resolver_ptr));
 
-    /* UBSAN. If the pointer is misaligned, try to use memcpy to get the data
-     * into a new structure that is hopefully aligned properly */
-    memcpy(&resolver, resolver_ptr, sizeof(resolver));
-    status = read_resolver(&resolver, sysconfig);
+    status = read_resolver(resolver_ptr, sysconfig);
   }
 
   return status;

From 1e505cc45781071801c7bc8045013d4f2cf447d7 Mon Sep 17 00:00:00 2001
From: Brad House <brad@brad-house.com>
Date: Wed, 12 Jun 2024 16:21:26 -0400
Subject: [PATCH 12/12] MacOS legacy: resovler->domain changed meaning around
 MacOS 10.8

---
 src/lib/ares_sysconfig_mac.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/lib/ares_sysconfig_mac.c b/src/lib/ares_sysconfig_mac.c
index 0e62c4818..6ec499e59 100644
--- a/src/lib/ares_sysconfig_mac.c
+++ b/src/lib/ares_sysconfig_mac.c
@@ -162,12 +162,17 @@ static ares_status_t read_resolver(const dns_resolver_t *resolver,
   unsigned short port   = 0;
   ares_status_t  status = ARES_SUCCESS;
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080 /* MacOS 10.8 */
   /* XXX: resolver->domain is for domain-specific servers.  When we implement
    *      this support, we'll want to use this.  But for now, we're going to
-   *      skip any servers which set this since we can't properly route. */
+   *      skip any servers which set this since we can't properly route.
+   *      MacOS used to use this setting for a different purpose in the
+   *      past however, so on versions of MacOS < 10.8 just ignore this
+   *      completely. */
   if (resolver->domain != NULL) {
     return ARES_SUCCESS;
   }
+#endif
 
 #if MAC_OS_X_VERSION_MIN_REQUIRED >= 1080 /* MacOS 10.8 */
   /* Check to see if DNS server should be used, base this on if the server is
