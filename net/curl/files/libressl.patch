diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index 2a6b3cfacb..99e1ba34e3 100644
--- lib/vtls/openssl.c
+++ lib/vtls/openssl.c
@@ -117,15 +117,8 @@
 #define X509_get0_notBefore(x) X509_get_notBefore(x)
 #define X509_get0_notAfter(x) X509_get_notAfter(x)
 #define CONST_EXTS /* nope */
-#ifdef LIBRESSL_VERSION_NUMBER
-static unsigned long OpenSSL_version_num(void)
-{
-  return LIBRESSL_VERSION_NUMBER;
-}
-#else
 #define OpenSSL_version_num() SSLeay()
 #endif
-#endif
 
 #if (OPENSSL_VERSION_NUMBER >= 0x1000200fL) && /* 1.0.2 or later */ \
   !defined(LIBRESSL_VERSION_NUMBER)
@@ -3519,9 +3512,24 @@ static ssize_t ossl_recv(struct connectdata *conn, /* connection data */
 
 static size_t Curl_ossl_version(char *buffer, size_t size)
 {
+  int rc = -1;
 #ifdef OPENSSL_IS_BORINGSSL
-  return snprintf(buffer, size, OSSL_PACKAGE);
-#else /* OPENSSL_IS_BORINGSSL */
+  /* no version extraction method known */
+#elif defined(LIBRESSL_VERSION_NUMBER)
+  const char *ver = OpenSSL_version(OPENSSL_VERSION);
+  if(ver && !strncmp(ver, "LibreSSL ", 9) && ver[9]) {
+    char *partial = strdup(&ver[9]);
+    if(partial) {
+      char *p;
+      for(p = partial; *p; ++p) {
+        if(ISSPACE(*p))
+          *p = '_';
+      }
+      rc = snprintf(buffer, size, "%s/%s", OSSL_PACKAGE, partial);
+      free(partial);
+    }
+  }
+#else
   char sub[3];
   unsigned long ssleay_value;
   sub[2]='\0';
@@ -3546,14 +3554,20 @@ static size_t Curl_ossl_version(char *buffer, size_t size)
     else
       sub[0]='\0';
   }
-
-  return snprintf(buffer, size, "%s/%lx.%lx.%lx%s",
-                  OSSL_PACKAGE,
-                  (ssleay_value>>28)&0xf,
-                  (ssleay_value>>20)&0xff,
-                  (ssleay_value>>12)&0xff,
-                  sub);
-#endif /* OPENSSL_IS_BORINGSSL */
+  rc = snprintf(buffer, size, "%s/%lx.%lx.%lx%s",
+                OSSL_PACKAGE,
+                (ssleay_value>>28)&0xf,
+                (ssleay_value>>20)&0xff,
+                (ssleay_value>>12)&0xff,
+                sub);
+#endif
+  if(0 < rc && (unsigned)rc < size)
+    return rc;
+  if(!size)
+    return 0;
+  strncpy(buffer, OSSL_PACKAGE, size);
+  buffer[size - 1] = '\0';
+  return strlen(buffer);
 }
 
 /* can be called with data == NULL */
