From 351664ec071daa04161577c6a1c949ed0f2c3206 Mon Sep 17 00:00:00 2001
From: minus <minus@mnus.de>
Date: Sun, 17 Nov 2019 09:36:23 +0100
Subject: [PATCH 1/2] [Logging] Fix Python 3.8 compatibility

Deluge's logger class extends Python's `logging.Logger`. Since Python
3.8, it takes an additional argument `stacklevel`.
The implementation in Deluge does not support that. Work around the
problem by ignoring additional arguments.
---
 deluge/log.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/deluge/log.py b/deluge/log.py
index 75e8308b5..0f9877fdb 100644
--- deluge/log.py
+++ deluge/log.py
@@ -86,7 +86,7 @@ def critical(self, msg, *args, **kwargs):
     def exception(self, msg, *args, **kwargs):
         yield LoggingLoggerClass.exception(self, msg, *args, **kwargs)
 
-    def findCaller(self, stack_info=False):  # NOQA: N802
+    def findCaller(self, *args, **kwargs):  # NOQA: N802
         f = logging.currentframe().f_back
         rv = '(unknown file)', 0, '(unknown function)'
         while hasattr(f, 'f_code'):

From 5e06aee5c8846f94bd5fcc209132dacf06de781f Mon Sep 17 00:00:00 2001
From: minus <minus@mnus.de>
Date: Tue, 19 Nov 2019 17:14:01 +0100
Subject: [PATCH 2/2] [Logging] Fix findCaller with unknown source

In case no source was found, a 3-tuple was returned instead of a 4-tuple
in Python 3
---
 deluge/log.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/deluge/log.py b/deluge/log.py
index 0f9877fdb..bf4f3c2d7 100644
--- deluge/log.py
+++ deluge/log.py
@@ -88,7 +88,7 @@ def exception(self, msg, *args, **kwargs):
 
     def findCaller(self, *args, **kwargs):  # NOQA: N802
         f = logging.currentframe().f_back
-        rv = '(unknown file)', 0, '(unknown function)'
+        rv = ('(unknown file)', 0, '(unknown function)', None)
         while hasattr(f, 'f_code'):
             co = f.f_code
             filename = os.path.normcase(co.co_filename)
@@ -98,12 +98,12 @@ def findCaller(self, *args, **kwargs):  # NOQA: N802
             ):
                 f = f.f_back
                 continue
-            if common.PY2:
-                rv = (filename, f.f_lineno, co.co_name)
-            else:
-                rv = (filename, f.f_lineno, co.co_name, None)
+            rv = (co.co_filename, f.f_lineno, co.co_name, None)
             break
-        return rv
+        if common.PY2:
+            return rv[:-1]
+        else:
+            return rv
 
 
 levels = {
