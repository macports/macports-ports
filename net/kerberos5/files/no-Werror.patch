--- aclocal.m4.orig	2021-02-01 13:49:03.000000000 -0600
+++ aclocal.m4	2021-02-08 18:01:27.000000000 -0600
@@ -535,7 +535,7 @@
     TRY_WARN_CC_FLAG(-Wno-format-zero-length)
     # Other flags here may not be supported on some versions of
     # gcc that people want to use.
-    for flag in overflow strict-overflow missing-format-attribute missing-prototypes return-type missing-braces parentheses switch unused-function unused-label unused-variable unused-value unknown-pragmas sign-compare newline-eof error=uninitialized no-maybe-uninitialized error=pointer-arith error=int-conversion error=incompatible-pointer-types error=discarded-qualifiers error=implicit-int ; do
+    for flag in overflow strict-overflow missing-format-attribute missing-prototypes return-type missing-braces parentheses switch unused-function unused-label unused-variable unused-value unknown-pragmas sign-compare newline-eof no-maybe-uninitialized ; do
       TRY_WARN_CC_FLAG(-W$flag)
     done
     #  old-style-definition? generates many, many warnings
@@ -552,10 +552,7 @@
     # We're currently targeting C89+, not C99, so disallow some
     # constructs.
     for flag in declaration-after-statement ; do
-      TRY_WARN_CC_FLAG(-Werror=$flag)
-      if test "$flag_supported" = no; then
         TRY_WARN_CC_FLAG(-W$flag)
-      fi
     done
     # We require function declarations now.
     #
@@ -564,10 +561,6 @@
     # version doesn't cause implicitly declared functions to be
     # flagged as errors.  If neither works, -Wall implies
     # -Wimplicit-function-declaration so don't bother.
-    TRY_WARN_CC_FLAG(-Werror-implicit-function-declaration)
-    if test "implicit-function-declaration_supported" = no; then
-      TRY_WARN_CC_FLAG(-Werror=implicit-function-declaration)
-    fi
     #
   fi
   if test "`uname -s`" = Darwin ; then
