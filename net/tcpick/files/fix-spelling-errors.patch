Description: Fix spelling errors on source code, man page and doc files
Author: Marcos Fouces <marcos@debian.org>
--- a/AUTHORS
+++ b/AUTHORS
@@ -117,7 +117,7 @@
 RPM:
 ****
 
-Mantained by Dag Wieers, with a lot of platforms available:
+Maintained by Dag Wieers, with a lot of platforms available:
 `http://dag.wieers.com/packages/tcpick/'
 
    Lou Afonso has compiled version 0.1.20
--- a/ChangeLog
+++ b/ChangeLog
@@ -82,7 +82,7 @@
 
      Francesco Stablum (duskdruid:despammed.com):
 
-   * Now '\r' and '\t' charachters are printable in 'P' and 'U' modes.
+   * Now '\r' and '\t' characters are printable in 'P' and 'U' modes.
 
    * MacOSX "BIOCSRTIMEOUT: Invalid argument" bug should be fixed.
 
@@ -160,7 +160,7 @@
      Shah discovered it)
 
    * Bugfix: `u' flag of `-w' worked as with `b' flag either if `b'
-     wasn't choosen.
+     wasn't chosen.
 
 07/09/04 0.2.0-devel1
 *********************
@@ -222,10 +222,10 @@
      I have added another set of displaying option, that are prefixed
      with -b. The -b options are useful to view data only when
      acknowledged (exactly like data written to files) and with this is
-     particulary useful the raw mode (-bR) that you can use if you want
+     particularly useful the raw mode (-bR) that you can use if you want
      to redirect data with a pipe to another software.
 
-   * The newline carachter is suppressed when displaying the payload of
+   * The newline character is suppressed when displaying the payload of
      the packet or an acknowledged stream in the case there are no
      banners except the case of the hexdump's.
 
@@ -248,7 +248,7 @@
    * In the hexdump+ascii red dots rapresents now the unprintable
      carachter.
 
-   * the lenght of the payload is now displayed in the packet banner
+   * the length of the payload is now displayed in the packet banner
 
    * rewritten the core of verify.c and fragments.c
 
@@ -486,9 +486,9 @@
 added lot of write to file features:
    * header writing, (-wH)
 
-   * only printable charachters writing (-wP)
+   * only printable characters writing (-wP)
 
-   * unprintable charachters transformed into hexadecimal code (-wU)
+   * unprintable characters transformed into hexadecimal code (-wU)
 
    * added other options (see manpage for details) -s -P -R -U
 
@@ -512,13 +512,13 @@
 **************
 
    * now you can display data in the packet in hexdump mode (-x) and
-     you can watch at the printable ascii charachters too, using -X
+     you can watch at the printable ascii characters too, using -X
      option
 
 28/11/03 0.1.5
 **************
 
-   * better options managment, including long options
+   * better options management, including long options
 
    * added data showing in hexadecimal
 
@@ -538,6 +538,6 @@
 24/11/03 0.1.1
 **************
 
-   * fixed bad managing of payload (now ack packets whith no data are
+   * fixed bad managing of payload (now ack packets with no data are
      dropped)
 
--- a/EXAMPLES
+++ b/EXAMPLES
@@ -7,7 +7,7 @@
 1.1 connection status
 =====================
 
-Tcpick is a sniffer able to understand wich status has the connection
+Tcpick is a sniffer able to understand which status has the connection
 (SYN-SENT, SYN-RECEIVED and so on). To see the connection tracker in
 action on eth0 simply type:
 
--- a/OPTIONS
+++ b/OPTIONS
@@ -27,7 +27,7 @@
        tcpick  is  a textmode sniffer libpcap-based that can track tcp streams
        and saves the data captured in different files, each for every  connec-
        tion,  or  displays them in the terminal in different formats (hexdump,
-       printable charachters, raw...)  Useful for picking files in  a  passive
+       printable characters, raw...)  Useful for picking files in  a  passive
        way.   It is useful to keep track of what users of a network are doing,
        and is usable with textmode tools like  grep,  sed,  awk.   Happy  data
        hunting :-)
@@ -131,11 +131,11 @@
 	      and -yX options.
 
        -yP    Shows  data  contained  in  the	tcp   packets.	 Non-printable
-	      charachters  are	transformed in dots: ".". Newline character is
+	      characters  are	transformed in dots: ".". Newline character is
 	      preserved.  This is the best way, in my  opinion	to  show  data
 	      like HTTP requests, IRC communication, SMTP stuff and so on.
 
-       -yR    Displays	all  kind of charachters, printable and non printable.
+       -yR    Displays	all  kind of characters, printable and non printable.
 	      If something binary is transmitted, the effect will probably  be
 	      like watching with "cat" at a gzipped file.
 
@@ -145,7 +145,7 @@
        -yX    Shows all data after the header in hexadecimal  and  ascii  dump
 	      with 16 bytes per line.
 
-       -yU    Shows all data after the header, but Unprintable charachters are
+       -yU    Shows all data after the header, but Unprintable characters are
 	      displayed as hexadecimal values between a "<" and a ">"  symbol.
 
 
@@ -160,7 +160,7 @@
        If  you use the additional flag b of the -w option (i.e. -wPub), in the
        file will be written this banner:
 
-       [client|server] offset before:offset after (lenght  of  rebuilded  seg-
+       [client|server] offset before:offset after (length  of  rebuilded  seg-
        ment)
 
        to distinguish between client and server data.
@@ -177,10 +177,10 @@
 	      changes. Useful for sniffing binary or compressed files.
 	      (-wRC only the client, -wRS only the server)
 
-       -wP    Unprintable charachters are written like dots.
+       -wP    Unprintable characters are written like dots.
 	      (-wPC only the client, -wPS only the server)
 
-       -wU    Unprintable  charachters	are  displayed	as  hexadecimal values
+       -wU    Unprintable  characters	are  displayed	as  hexadecimal values
 	      between a "<" and a ">" symbol.
 	      (-wPC only the client, -wPS only the server)
 
@@ -222,7 +222,7 @@
 	      you are able to track only the first connection (-T1) matched by
 	      tcpick and data are displayed as raw. Only data from the	client
 	      are  put	on  stdout.  All  messages and banners are suppressed,
-	      except error messages (-S -v0), so this  option  is  particulary
+	      except error messages (-S -v0), so this  option  is  particularly
 	      useful  to  download  an entire fully rebuilded and acknowledged
 	      connection.
 
--- a/README
+++ b/README
@@ -6,7 +6,7 @@
 connections data in different files, or it can display all the stream
 on the terminal, when the connection is closed.  There are useful
 display modes like hexdump, hexdump + ascii, only printable
-charachters, raw mode and so on. Available a color mode too, helpful to
+characters, raw mode and so on. Available a color mode too, helpful to
 read better the output of the program.  Actually it can handle eth and
 ppp interfaces.  It is useful to keep track of what users of a network
 are doing, and is usable with textmode tools like grep, sed, awk.
--- a/src/fragments.c
+++ b/src/fragments.c
@@ -162,7 +162,7 @@
 	    int ack_num )
 /* called by established_packet
  * when a "ack" packet comes to the network device,
- * data that are unacknowledged will be acknowledged and immediatly
+ * data that are unacknowledged will be acknowledged and immediately
  * sent to the write engine wrebuild 
  */
 {
--- a/src/ip.h
+++ b/src/ip.h
@@ -127,7 +127,7 @@
     u_short ip_id;			/* identification */
     u_short ip_off;			/* fragment offset field */
 #define	IP_RF 0x8000			/* reserved fragment flag */
-#define	IP_DF 0x4000			/* dont fragment flag */
+#define	IP_DF 0x4000			/* don't fragment flag */
 #define	IP_MF 0x2000			/* more fragments flag */
 #define	IP_OFFMASK 0x1fff		/* mask for fragmenting bits */
     u_int8_t ip_ttl;			/* time to live */
--- a/src/lookup_query.c
+++ b/src/lookup_query.c
@@ -86,7 +86,7 @@
 				return service=(char *)strdup(ptr->s_name);
 			}
 	debug( "service name NOT resolved: %d",ntohs(port) );
-	/* \n carachter should be inserted because this messages comes after 
+	/* \n character should be inserted because this messages comes after 
 	 *  a "printf" message not ended in \n in another function 
 	 */
 	s_port=(char *)S_calloc(128,1);
--- a/src/lookup_tree.c
+++ b/src/lookup_tree.c
@@ -206,7 +206,7 @@
 		_l_root->parent = NULL;
 	}
 
-	/* 2. step: the left side C of the node D becames the
+	/* 2. step: the left side C of the node D becomes the
 	 * right of the node B */
 
 	B->right = D->left;
@@ -260,7 +260,7 @@
 
 	D->parent = B->parent;
 	
-	/* 2. step: the right side C of the node D becames the
+	/* 2. step: the right side C of the node D becomes the
 	 * left of the node B */
 	B->left = D->right;
 
--- a/src/loop.c
+++ b/src/loop.c
@@ -72,7 +72,7 @@
 #ifdef TCPICK_DEBUG
 		if( payload_len != (hdr->len - (int)( payload - packet ) ) ) {
 		    suicide( "got_packet", 
-			     "payload lenght calculated with iplen and hdr->len\n"
+			     "payload length calculated with iplen and hdr->len\n"
 			     "differs by %d bytes\n"
 			     "hdr->len = %d\n"
 			     "datalink_size  = %d\n"
--- a/src/tcpick.c
+++ b/src/tcpick.c
@@ -245,7 +245,7 @@
 		pcap_setfilter( descr, &filter_compiled );
 	}
 
-	/* getting information about the datalink type of the device choosen 
+	/* getting information about the datalink type of the device chosen 
 	   (not all are supported) */
 	datalink_id = pcap_datalink( descr );
 	datalink_str = (char *)datalink2str( datalink_id );
--- a/tcpick.8
+++ b/tcpick.8
@@ -53,7 +53,7 @@
 tcp streams and saves the
 data captured in different files, each for every connection, 
 or displays them in the terminal in different
-formats (hexdump, printable charachters, raw...)
+formats (hexdump, printable characters, raw...)
 Useful for picking files in a passive way.
 It is useful to keep track of what users of a network are doing, and is
 usable with textmode tools like grep, sed, awk. 
@@ -141,7 +141,7 @@
 discarded. If \fInumber\fP is not specified, it will be set to \fB1\fP.
 .TP
 .B \-v \fIverbosity\fP
-Quite unuseful, yet. Set verbosity level. Actually there are not 
+Quite useless, yet. Set verbosity level. Actually there are not 
 really many
 extra messages to display, this means it is enabled by default
 (\fB-v1\fP). 
@@ -171,13 +171,13 @@
 \fB-yX\fP options.
 .TP
 .B \-yP
-Shows data contained in the tcp packets. Non-printable charachters are
+Shows data contained in the tcp packets. Non-printable characters are
 transformed in dots: "\fB.\fP". Newline character is preserved.
 This is the best way, in my opinion to show data like HTTP requests,
 IRC communication, SMTP stuff and so on.
 .TP
 .B \-yR
-Displays all kind of charachters, printable and non printable. If
+Displays all kind of characters, printable and non printable. If
 something binary is transmitted, the effect will probably be like
 watching with "\fBcat\fP" at a gzipped file.
 .TP
@@ -189,7 +189,7 @@
 bytes per line.
 .TP
 .B \-yU
-Shows all data after the header, but \fBU\fPnprintable charachters are
+Shows all data after the header, but \fBU\fPnprintable characters are
 displayed as hexadecimal values between a "<" and a ">" symbol.
 
 .SH REBUILD AND WRITE THE TCP STREAM TO FILE
@@ -212,7 +212,7 @@
 (i.e. \fB-wPub\fP), in the file will be written this banner:
 
 .br
-\fB[client|server] offset before:offset after (lenght of rebuilded
+\fB[client|server] offset before:offset after (length of rebuilded
 segment)\fP
 .br
 
@@ -234,12 +234,12 @@
 (\fB-wRC\fP only the client, \fB-wRS\fP only the server)
 .TP
 .B \-wP
-Unprintable charachters are written like dots.
+Unprintable characters are written like dots.
 .br
 (\fB-wPC\fP only the client, \fB-wPS\fP only the server)
 .TP
 .B \-wU
-\fBU\fPnprintable charachters are
+\fBU\fPnprintable characters are
 displayed as hexadecimal values between a "<" and a ">" symbol.
 .br
 (\fB-wPC\fP only the client, \fB-wPS\fP only the server)
@@ -288,7 +288,7 @@
 client are
 put on stdout. All messages and banners are suppressed, except error
 messages (\fB-S -v0\fP),
-so this option is particulary useful to download an entire
+so this option is particularly useful to download an entire
 fully rebuilded and acknowledged connection.
 .TP
 \fB -PS --pipe server \fP
--- a/src/text.h
+++ b/src/text.h
@@ -49,7 +49,7 @@
  "Usage: " OPTIONS								\
  "Example: tcpick " EXAMPLEARGS "\n\n"							\
  "for an updated list of options see tcpick(1) manpage\n"				\
- "to see version and license informations try `tcpick --version'\n"			\
+ "to see version and license information try `tcpick --version'\n"			\
  "or read the `COPYING' file, released with the package\n\n"				\
  "tcpick homepage: http://tcpick.sourceforge.net\n\n"					\
  MAILING_LIST										\
