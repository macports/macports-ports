--- build_files/cmake/platform/platform_apple.cmake.orig	2020-04-22 22:22:46.000000000 -0400
+++ build_files/cmake/platform/platform_apple.cmake	2020-07-21 20:56:00.000000000 -0400
@@ -38,6 +38,10 @@
   message(FATAL_ERROR "Mac OSX requires pre-compiled libs at: '${LIBDIR}'")
 endif()
 
+if(NOT DEFINED FRAMEWORK_SEARCH_PATHS)
+  set(FRAMEWORK_SEARCH_PATHS /Library/Frameworks)
+endif()
+
 if(WITH_OPENAL)
   find_package(OpenAL)
   if(OPENAL_FOUND)
@@ -48,7 +52,7 @@
 endif()
 
 if(WITH_ALEMBIC)
-  set(ALEMBIC ${LIBDIR}/alembic)
+  set(ALEMBIC ${LIBDIR})
   set(ALEMBIC_INCLUDE_DIR ${ALEMBIC}/include)
   set(ALEMBIC_INCLUDE_DIRS ${ALEMBIC_INCLUDE_DIR})
   set(ALEMBIC_LIBPATH ${ALEMBIC}/lib)
@@ -64,7 +68,7 @@
 endif()
 
 if(WITH_OPENSUBDIV)
-  set(OPENSUBDIV ${LIBDIR}/opensubdiv)
+  set(OPENSUBDIV ${LIBDIR})
   set(OPENSUBDIV_LIBPATH ${OPENSUBDIV}/lib)
   find_library(OSD_LIB_CPU NAMES osdCPU PATHS ${OPENSUBDIV_LIBPATH})
   find_library(OSD_LIB_GPU NAMES osdGPU PATHS ${OPENSUBDIV_LIBPATH})
@@ -75,38 +79,38 @@
 
 if(WITH_JACK)
   find_library(JACK_FRAMEWORK
-    NAMES jackmp
+    NAMES jack PATHS ${LIBDIR}
   )
-  set(JACK_INCLUDE_DIRS ${JACK_FRAMEWORK}/headers)
+  set(JACK_INCLUDE_DIRS ${JACK_FRAMEWORK}/include)
   if(NOT JACK_FRAMEWORK)
     set(WITH_JACK OFF)
   endif()
 endif()
 
 if(WITH_CODEC_SNDFILE)
-  set(LIBSNDFILE ${LIBDIR}/sndfile)
+  set(LIBSNDFILE ${LIBDIR})
   set(LIBSNDFILE_INCLUDE_DIRS ${LIBSNDFILE}/include)
   set(LIBSNDFILE_LIBRARIES sndfile FLAC ogg vorbis vorbisenc)
-  set(LIBSNDFILE_LIBPATH ${LIBSNDFILE}/lib ${LIBDIR}/ffmpeg/lib)  # TODO, deprecate
+  set(LIBSNDFILE_LIBPATH ${LIBSNDFILE}/lib)  # TODO, deprecate
 endif()
 
 if(WITH_PYTHON)
   # we use precompiled libraries for py 3.7 and up by default
-  set(PYTHON_VERSION 3.7)
+  set(PYTHON_VERSION 3.8)
   if(NOT WITH_PYTHON_MODULE AND NOT WITH_PYTHON_FRAMEWORK)
     # normally cached but not since we include them with blender
-    set(PYTHON_INCLUDE_DIR "${LIBDIR}/python/include/python${PYTHON_VERSION}m")
-    set(PYTHON_EXECUTABLE "${LIBDIR}/python/bin/python${PYTHON_VERSION}m")
-    set(PYTHON_LIBRARY ${LIBDIR}/python/lib/libpython${PYTHON_VERSION}m.a)
+    set(PYTHON_INCLUDE_DIR "${LIBDIR}/python/include/python${PYTHON_VERSION}")
+    set(PYTHON_EXECUTABLE "${LIBDIR}/python/bin/python${PYTHON_VERSION}")
+    set(PYTHON_LIBRARY ${LIBDIR}/python/lib/libpython${PYTHON_VERSION}.a)
     set(PYTHON_LIBPATH "${LIBDIR}/python/lib/python${PYTHON_VERSION}")
     # set(PYTHON_LINKFLAGS "-u _PyMac_Error")  # won't  build with this enabled
   else()
     # module must be compiled against Python framework
-    set(_py_framework "/Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION}")
+    set(_py_framework "${FRAMEWORK_SEARCH_PATHS}/Python.framework/Versions/${PYTHON_VERSION}")
 
-    set(PYTHON_INCLUDE_DIR "${_py_framework}/include/python${PYTHON_VERSION}m")
-    set(PYTHON_EXECUTABLE "${_py_framework}/bin/python${PYTHON_VERSION}m")
-    set(PYTHON_LIBPATH "${_py_framework}/lib/python${PYTHON_VERSION}/config-${PYTHON_VERSION}m")
+    set(PYTHON_INCLUDE_DIR "${_py_framework}/include/python${PYTHON_VERSION}")
+    set(PYTHON_EXECUTABLE "${_py_framework}/bin/python${PYTHON_VERSION}")
+    set(PYTHON_LIBPATH "${_py_framework}/lib/python${PYTHON_VERSION}")
     # set(PYTHON_LIBRARY python${PYTHON_VERSION})
     # set(PYTHON_LINKFLAGS "-u _PyMac_Error -framework Python")  # won't  build with this enabled
 
@@ -126,26 +130,40 @@
 endif()
 
 if(WITH_FFTW3)
-  set(FFTW3 ${LIBDIR}/fftw3)
+  set(FFTW3 ${LIBDIR})
   set(FFTW3_INCLUDE_DIRS ${FFTW3}/include)
   set(FFTW3_LIBRARIES fftw3)
   set(FFTW3_LIBPATH ${FFTW3}/lib)
 endif()
 
-set(ZLIB /usr)
+set(ZLIB ${LIBDIR})
 set(ZLIB_INCLUDE_DIRS "${ZLIB}/include")
 set(ZLIB_LIBRARIES z bz2)
 
 set(PNG_LIBRARIES png ${ZLIB_LIBRARIES})
 set(JPEG_LIBRARIES jpeg)
 
-set(FREETYPE ${LIBDIR}/freetype)
+set(FREETYPE ${LIBDIR})
 set(FREETYPE_INCLUDE_DIRS ${FREETYPE}/include ${FREETYPE}/include/freetype2)
 set(FREETYPE_LIBPATH ${FREETYPE}/lib)
 set(FREETYPE_LIBRARY freetype)
 
+if(WITH_LZO AND WITH_SYSTEM_LZO)
+  set(LZO ${LIBDIR})
+  set(LZO_INCLUDE_DIR ${LZO}/include)
+  set(LZO_LIBRARY lzo2)
+  set(LZO_LIBRARIES ${LZO_LIBRARY})
+endif()
+
+if(WITH_SYSTEM_EIGEN3)
+  set(EIGEN3 ${LIBDIR})
+  set(EIGEN3_INCLUDE_DIR ${EIGEN3}/include)
+  set(EIGEN3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR} ${EIGEN3}/include/eigen3)
+  set(EIGEN3_LIBRARY eigen3)
+endif()
+
 if(WITH_IMAGE_OPENEXR)
-  set(OPENEXR ${LIBDIR}/openexr)
+  set(OPENEXR ${LIBDIR})
   set(OPENEXR_INCLUDE_DIR ${OPENEXR}/include)
   set(OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR} ${OPENEXR}/include/OpenEXR)
   set(OPENEXR_LIBRARIES
@@ -158,7 +176,7 @@
 endif()
 
 if(WITH_CODEC_FFMPEG)
-  set(FFMPEG ${LIBDIR}/ffmpeg)
+  set(FFMPEG ${LIBDIR})
   set(FFMPEG_INCLUDE_DIRS ${FFMPEG}/include)
   set(FFMPEG_LIBRARIES
     avcodec avdevice avformat avutil
@@ -171,9 +189,9 @@
 
 if(WITH_IMAGE_OPENJPEG OR WITH_CODEC_FFMPEG)
   # use openjpeg from libdir that is linked into ffmpeg
-  set(OPENJPEG ${LIBDIR}/openjpeg)
+  set(OPENJPEG ${LIBDIR})
   set(OPENJPEG_INCLUDE_DIRS ${OPENJPEG}/include)
-  set(OPENJPEG_LIBRARIES ${OPENJPEG}/lib/libopenjp2.a)
+  set(OPENJPEG_LIBRARIES ${OPENJPEG}/lib/libopenjp2.dylib)
 endif()
 
 find_library(SYSTEMSTUBS_LIBRARY
@@ -194,69 +212,70 @@
 list(APPEND PLATFORM_LINKLIBS c++)
 
 if(WITH_JACK)
-  set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} -F/Library/Frameworks -weak_framework jackmp")
+  set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} -F${FRAMEWORK_SEARCH_PATHS} -ljack")
 endif()
 
 if(WITH_PYTHON_MODULE OR WITH_PYTHON_FRAMEWORK)
   # force cmake to link right framework
-  set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} /Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION}/Python")
+  set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} ${FRAMEWORK_SEARCH_PATHS}/Python.framework/Versions/${PYTHON_VERSION}/Python")
 endif()
 
 if(WITH_OPENCOLLADA)
-  set(OPENCOLLADA ${LIBDIR}/opencollada)
+  set(OPENCOLLADA ${LIBDIR})
 
   set(OPENCOLLADA_INCLUDE_DIRS
-    ${LIBDIR}/opencollada/include/COLLADAStreamWriter
-    ${LIBDIR}/opencollada/include/COLLADABaseUtils
-    ${LIBDIR}/opencollada/include/COLLADAFramework
-    ${LIBDIR}/opencollada/include/COLLADASaxFrameworkLoader
-    ${LIBDIR}/opencollada/include/GeneratedSaxParser
+    ${LIBDIR}/include/opencollada/COLLADAStreamWriter
+    ${LIBDIR}/include/opencollada/COLLADABaseUtils
+    ${LIBDIR}/include/opencollada/COLLADAFramework
+    ${LIBDIR}/include/opencollada/COLLADASaxFrameworkLoader
+    ${LIBDIR}/include/opencollada/GeneratedSaxParser
   )
 
   set(OPENCOLLADA_LIBPATH ${OPENCOLLADA}/lib)
   set(OPENCOLLADA_LIBRARIES
-    OpenCOLLADASaxFrameworkLoader
+    -L${OPENCOLLADA_LIBPATH}/opencollada
+    -lOpenCOLLADASaxFrameworkLoader
     -lOpenCOLLADAFramework
     -lOpenCOLLADABaseUtils
     -lOpenCOLLADAStreamWriter
     -lMathMLSolver
     -lGeneratedSaxParser
     -lbuffer -lftoa -lUTF
-    ${OPENCOLLADA_LIBPATH}/libxml2.a
+    ${OPENCOLLADA_LIBPATH}/libxml2.dylib
   )
   # PCRE is bundled with openCollada
-  # set(PCRE ${LIBDIR}/pcre)
-  # set(PCRE_LIBPATH ${PCRE}/lib)
+  set(PCRE ${LIBDIR})
+  set(PCRE_LIBPATH ${PCRE}/lib)
   set(PCRE_LIBRARIES pcre)
 endif()
 
 if(WITH_SDL)
-  set(SDL ${LIBDIR}/sdl)
+  set(SDL ${LIBDIR})
   set(SDL_INCLUDE_DIR ${SDL}/include)
   set(SDL_LIBRARY SDL2)
   set(SDL_LIBPATH ${SDL}/lib)
   set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} -framework ForceFeedback")
 endif()
 
-set(PNG "${LIBDIR}/png")
+set(PNG "${LIBDIR}")
 set(PNG_INCLUDE_DIRS "${PNG}/include")
 set(PNG_LIBPATH ${PNG}/lib)
 
-set(JPEG "${LIBDIR}/jpeg")
+set(JPEG "${LIBDIR}")
 set(JPEG_INCLUDE_DIR "${JPEG}/include")
 set(JPEG_LIBPATH ${JPEG}/lib)
 
 if(WITH_IMAGE_TIFF)
-  set(TIFF ${LIBDIR}/tiff)
+  set(TIFF ${LIBDIR})
   set(TIFF_INCLUDE_DIR ${TIFF}/include)
   set(TIFF_LIBRARY tiff)
   set(TIFF_LIBPATH ${TIFF}/lib)
 endif()
 
 if(WITH_BOOST)
-  set(BOOST ${LIBDIR}/boost)
+  set(BOOST ${LIBDIR})
   set(BOOST_INCLUDE_DIR ${BOOST}/include)
-  set(BOOST_POSTFIX)
+  set(BOOST_POSTFIX "-mt")
   set(BOOST_LIBRARIES
     boost_date_time${BOOST_POSTFIX}
     boost_filesystem${BOOST_POSTFIX}
@@ -283,10 +302,10 @@
 endif()
 
 if(WITH_OPENIMAGEIO)
-  set(OPENIMAGEIO ${LIBDIR}/openimageio)
+  set(OPENIMAGEIO ${LIBDIR})
   set(OPENIMAGEIO_INCLUDE_DIRS ${OPENIMAGEIO}/include)
   set(OPENIMAGEIO_LIBRARIES
-    ${OPENIMAGEIO}/lib/libOpenImageIO.a
+    ${OPENIMAGEIO}/lib/libOpenImageIO.dylib
     ${PNG_LIBRARIES}
     ${JPEG_LIBRARIES}
     ${TIFF_LIBRARY}
@@ -302,29 +321,29 @@
     ${OPENEXR_LIBPATH}
     ${ZLIB_LIBPATH}
   )
-  set(OPENIMAGEIO_DEFINITIONS "-DOIIO_STATIC_BUILD")
-  set(OPENIMAGEIO_IDIFF "${LIBDIR}/openimageio/bin/idiff")
+#  set(OPENIMAGEIO_DEFINITIONS "-DOIIO_STATIC_BUILD")
+  set(OPENIMAGEIO_IDIFF "${LIBDIR}/bin/idiff")
 endif()
 
 if(WITH_OPENCOLORIO)
-  set(OPENCOLORIO ${LIBDIR}/opencolorio)
+  set(OPENCOLORIO ${LIBDIR})
   set(OPENCOLORIO_INCLUDE_DIRS ${OPENCOLORIO}/include)
   set(OPENCOLORIO_LIBRARIES OpenColorIO tinyxml yaml-cpp)
   set(OPENCOLORIO_LIBPATH ${OPENCOLORIO}/lib)
 endif()
 
 if(WITH_OPENVDB)
-  set(OPENVDB ${LIBDIR}/openvdb)
+  set(OPENVDB ${LIBDIR})
   set(OPENVDB_INCLUDE_DIRS ${OPENVDB}/include)
   set(OPENVDB_LIBRARIES openvdb blosc)
-  set(OPENVDB_LIBPATH ${LIBDIR}/openvdb/lib)
+  set(OPENVDB_LIBPATH ${LIBDIR}/lib)
   set(OPENVDB_DEFINITIONS)
 endif()
 
 if(WITH_LLVM)
-  set(LLVM_ROOT_DIR ${LIBDIR}/llvm)
-  if(EXISTS "${LLVM_ROOT_DIR}/bin/llvm-config")
-    set(LLVM_CONFIG "${LLVM_ROOT_DIR}/bin/llvm-config")
+  set(LLVM_ROOT_DIR ${LIBDIR})
+  if(EXISTS "${LLVM_ROOT_DIR}/bin/llvm-config-mp")
+    set(LLVM_CONFIG "${LLVM_ROOT_DIR}/bin/llvm-config-mp")
   else()
     set(LLVM_CONFIG llvm-config)
   endif()
@@ -362,7 +381,7 @@
 endif()
 
 if(WITH_CYCLES_OSL)
-  set(CYCLES_OSL ${LIBDIR}/osl)
+  set(CYCLES_OSL ${LIBDIR})
 
   find_library(OSL_LIB_EXEC NAMES oslexec PATHS ${CYCLES_OSL}/lib)
   find_library(OSL_LIB_COMP NAMES oslcomp PATHS ${CYCLES_OSL}/lib)
@@ -417,20 +436,20 @@
 if(WITH_OPENMP)
   if(CMAKE_C_COMPILER_ID MATCHES "AppleClang" AND CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL "7.0")
     # Use OpenMP from our precompiled libraries.
-    message(STATUS "Using ${LIBDIR}/openmp for OpenMP")
+    message(STATUS "Using ${LIBDIR} for OpenMP")
     set(OPENMP_CUSTOM ON)
     set(OPENMP_FOUND ON)
-    set(OpenMP_C_FLAGS "-Xclang -fopenmp -I'${LIBDIR}/openmp/include'")
-    set(OpenMP_CXX_FLAGS "-Xclang -fopenmp -I'${LIBDIR}/openmp/include'")
-    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L'${LIBDIR}/openmp/lib' -lomp")
+    set(OpenMP_C_FLAGS "-Xclang -fopenmp -I'${LIBDIR}/include/libomp'")
+    set(OpenMP_CXX_FLAGS "-Xclang -fopenmp -I'${LIBDIR}/include/libomp'")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L'${LIBDIR}/lib' -lomp")
 
     # Copy libomp.dylib to allow executables like datatoc and tests to work.
     execute_process(
         COMMAND mkdir -p ${CMAKE_BINARY_DIR}/Resources/lib
-        COMMAND cp -p ${LIBDIR}/openmp/lib/libomp.dylib ${CMAKE_BINARY_DIR}/Resources/lib/libomp.dylib)
+        COMMAND ln -s ${LIBDIR}/lib/libomp.dylib ${CMAKE_BINARY_DIR}/Resources/lib/libomp.dylib)
     execute_process(
         COMMAND mkdir -p ${CMAKE_BINARY_DIR}/bin/Resources/lib
-        COMMAND cp -p ${LIBDIR}/openmp/lib/libomp.dylib ${CMAKE_BINARY_DIR}/bin/Resources/lib/libomp.dylib)
+        COMMAND ln -s ${LIBDIR}/lib/libomp.dylib ${CMAKE_BINARY_DIR}/bin/Resources/lib/libomp.dylib)
   endif()
 endif()
 
