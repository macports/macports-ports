From a867c7a2e02ab8b47b1322f2903cfaa44c756b9b Mon Sep 17 00:00:00 2001
From: Frank Heckenbach
Date: Thu, 17 Nov 2022 00:43:20 +0100
Subject: [PATCH 10/14] demo/FTGLDemo.cpp, demo/FTGLMFontDemo.cpp: support
 Latin1 key strokes (fixes #15)

---
 demo/FTGLDemo.cpp      | 34 +++++++++++++++++++++++++++++-----
 demo/FTGLMFontDemo.cpp | 34 +++++++++++++++++++++++++++++-----
 2 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/demo/FTGLDemo.cpp b/demo/FTGLDemo.cpp
index 01f9049530f2..49e550c9cc86 100644
--- a/demo/FTGLDemo.cpp
+++ b/demo/FTGLDemo.cpp
@@ -526,10 +526,35 @@ void myinit(const char* file)
                      textures[i]);
     }
 }


+/*
+ * Simple conversion from Unicode character to UTF-8 string.
+ * (In real code, you may want want to use a library such as ICU or
+ * newer C++ features instead, but this avoids additional dependencies.)
+ * s must contain enough space for up to 4 bytes.
+ * Returns number of bytes written.
+ */
+int ToUTF8 (unsigned int c, char *s)
+{
+  char *t = s;
+  int n = 0;
+  if (c < 0x80)
+    *s++ = c;
+  else if (c < 0x800)
+    *s++ = c >> (n = 6) | 0xc0;
+  else if (c < 0x10000)
+    *s++ = c >> (n = 12) | 0xe0;
+  else
+    *s++ = c >> (n = 18) | 0xf0;
+  while (n)
+    *s++ = (c >> (n -= 6) & 0x3f) | 0x80;
+  return s - t;
+}
+
+
 void parsekey(unsigned char key, int, int)
 {
     switch (key)
     {
     case 27:
@@ -571,18 +596,17 @@ void parsekey(unsigned char key, int, int)
         }
         break;
     default:
         if(mode == INTERACTIVE)
         {
-            myString[0] = key;
-            myString[1] = 0;
+            myString[ToUTF8 (key, myString)] = 0;
         }
         else
         {
-            myString[carat] = key;
-            myString[carat + 1] = 0;
-            carat = carat > 2000 ? 2000 : carat + 1;
+            int r = ToUTF8 (key, myString + carat) + carat;
+            myString[r] = 0;
+            carat = r > 2000 ? 2000 : r;
         }
         break;
     }

     glutPostRedisplay();
diff --git a/demo/FTGLMFontDemo.cpp b/demo/FTGLMFontDemo.cpp
index 196b54c7b8a8..f5bdb829d3a5 100644
--- a/demo/FTGLMFontDemo.cpp
+++ b/demo/FTGLMFontDemo.cpp
@@ -482,10 +482,35 @@ void myinit(int numFontFiles)
     simpleLayout.SetLineLength(InitialLineLength);
     simpleLayout.SetFont(fonts[current_font]);
 }


+/*
+ * Simple conversion from Unicode character to UTF-8 string.
+ * (In real code, you may want want to use a library such as ICU or
+ * newer C++ features instead, but this avoids additional dependencies.)
+ * s must contain enough space for up to 4 bytes.
+ * Returns number of bytes written.
+ */
+int ToUTF8 (unsigned int c, char *s)
+{
+  char *t = s;
+  int n = 0;
+  if (c < 0x80)
+    *s++ = c;
+  else if (c < 0x800)
+    *s++ = c >> (n = 6) | 0xc0;
+  else if (c < 0x10000)
+    *s++ = c >> (n = 12) | 0xe0;
+  else
+    *s++ = c >> (n = 18) | 0xf0;
+  while (n)
+    *s++ = (c >> (n -= 6) & 0x3f) | 0x80;
+  return s - t;
+}
+
+
 void parsekey(unsigned char key, int, int)
 {
     switch (key)
     {
     case 27:
@@ -527,18 +552,17 @@ void parsekey(unsigned char key, int, int)
         }
         break;
     default:
         if(mode == INTERACTIVE)
         {
-            myString[0] = key;
-            myString[1] = 0;
+            myString[ToUTF8 (key, myString)] = 0;
         }
         else
         {
-            myString[carat] = key;
-            myString[carat + 1] = 0;
-            carat = carat > 2000 ? 2000 : carat + 1;
+            int r = ToUTF8 (key, myString + carat) + carat;
+            myString[r] = 0;
+            carat = r > 2000 ? 2000 : r;
         }
         break;
     }

     glutPostRedisplay();
--
2.47.1

