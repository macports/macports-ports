--- code/PostProcessing/ValidateDataStructure.cpp.orig	2022-10-21 07:21:19
+++ code/PostProcessing/ValidateDataStructure.cpp	2022-10-21 07:23:14
@@ -80,7 +80,7 @@
     va_start(args, msg);
 
     char szBuffer[3000];
-    const int iLen = vsprintf(szBuffer, msg, args);
+    const int iLen = vsnprintf(szBuffer, sizeof(szBuffer), msg, args);
     ai_assert(iLen > 0);
 
     va_end(args);
@@ -95,7 +95,7 @@
     va_start(args, msg);
 
     char szBuffer[3000];
-    const int iLen = vsprintf(szBuffer, msg, args);
+    const int iLen = vsnprintf(szBuffer, sizeof(szBuffer), msg, args);
     ai_assert(iLen > 0);
 
     va_end(args);
--- code/AssetLib/Collada/ColladaParser.cpp.orig	2022-10-21 07:30:44
+++ code/AssetLib/Collada/ColladaParser.cpp	2022-10-21 07:31:51
@@ -67,7 +67,7 @@
     va_start(args, msg);
 
     char szBuffer[3000];
-    const int iLen = vsprintf(szBuffer, msg, args);
+    const int iLen = vsnprintf(szBuffer, sizeof(szBuffer), msg, args);
     ai_assert(iLen > 0);
 
     va_end(args);
--- code/AssetLib/MDL/MDLLoader.cpp.orig	2022-10-21 07:36:05
+++ code/AssetLib/MDL/MDLLoader.cpp	2022-10-21 07:37:07
@@ -298,7 +298,7 @@
         }
 
         char szBuffer[1024];
-        ::sprintf(szBuffer, "Invalid MDL file. The file is too small "
+        ::snprintf(szBuffer, sizeof(szBuffer), "Invalid MDL file. The file is too small "
                             "or contains invalid data (File: %s Line: %u)",
                 szFilePtr, iLine);
 
--- code/AssetLib/MD5/MD5Parser.cpp.orig	2022-10-21 07:39:21
+++ code/AssetLib/MD5/MD5Parser.cpp	2022-10-21 07:40:31
@@ -102,7 +102,7 @@
 // Report warning to the log stream
 /*static*/ void MD5Parser::ReportWarning(const char *warn, unsigned int line) {
     char szBuffer[1024];
-    ::sprintf(szBuffer, "[MD5] Line %u: %s", line, warn);
+    ::snprintf(szBuffer, sizeof(szBuffer), "[MD5] Line %u: %s", line, warn);
     ASSIMP_LOG_WARN(szBuffer);
 }
 
--- code/AssetLib/FBX/FBXExporter.cpp.orig	2022-10-21 07:44:00
+++ code/AssetLib/FBX/FBXExporter.cpp	2022-10-21 07:44:43
@@ -1228,7 +1228,7 @@
                 "Version", int32_t(101), outstream, binary, indent
             );
             char layerName[8];
-            sprintf(layerName, "COLOR_%d", colorChannelIndex);
+            snprintf(layerName, sizeof(layerName), "COLOR_%d", colorChannelIndex);
             FBX::Node::WritePropertyNode(
                 "Name", (const char*)layerName, outstream, binary, indent
             );
--- contrib/openddlparser/code/OpenDDLExport.cpp.orig	2022-10-21 07:48:24
+++ contrib/openddlparser/code/OpenDDLExport.cpp	2022-10-21 07:49:48
@@ -224,7 +224,7 @@
         statement += "[";
         char buffer[256];
         ::memset(buffer, '\0', 256 * sizeof(char));
-        sprintf(buffer, "%d", static_cast<int>(numItems));
+        snprintf(buffer, sizeof(buffer), "%d", static_cast<int>(numItems));
         statement += buffer;
         statement += "]";
     }
@@ -255,7 +255,7 @@
             std::stringstream stream;
             char buffer[256];
             ::memset(buffer, '\0', 256 * sizeof(char));
-            sprintf(buffer, "%d", val->getInt16());
+            snprintf(buffer, sizeof(buffer), "%d", val->getInt16());
             statement += buffer;
         } break;
         case Value::ValueType::ddl_int32: {
@@ -263,7 +263,7 @@
             char buffer[256];
             ::memset(buffer, '\0', 256 * sizeof(char));
             const int i = static_cast<int>(val->getInt32());
-            sprintf(buffer, "%d", i);
+            snprintf(buffer, sizeof(buffer), "%d", i);
             statement += buffer;
         } break;
         case Value::ValueType::ddl_int64: {
