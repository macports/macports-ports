# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cxx11 1.1
PortGroup           github 1.0
PortGroup           xcode 1.0
PortGroup           xcodeversion 1.0

github.setup        KhronosGroup MoltenVK 1.0.22 v
set submodules {
                    USCiLab cereal 51cbda5f30e56c801c07fe3d3aba5d7fb9e6cca4 cereal
                    KhronosGroup Vulkan-Headers 2fd5a24ec4a6df303b2155b3f85b6b8c1d56f6c0 Vulkan-Headers
                    KhronosGroup SPIRV-Cross 2d6ce39bda9af95b78da6bcd8d60fb0ffac4f14d SPIRV-Cross
                    KhronosGroup glslang a8453d4bc00998049db0d448764784a6a0767539 glslang
                    KhronosGroup SPIRV-Tools 9bfe0eb25e3dfdf4f3fd86ab6c0cda009c9bd661 glslang/External/spirv-tools
                    KhronosGroup SPIRV-Headers d5b2e1255f706ce1f88812217e9a554f299848af glslang/External/spirv-tools/external/spirv-headers
                    KhronosGroup Vulkan-Tools f2c941819838c349fe0cc8eb2dddac294fe012e9 Vulkan-Tools
                    LunarG VulkanSamples e268a7b7bf799b92410f35f6fea29cedb021bac1 VulkanSamples
}
checksums           ${distfiles} \
                    rmd160  e9cd9122c3e06a2853bc5640342151cfdf2e3349 \
                    sha256  ba353a8ccea9d3e2c4d7e6c65e65e466ae1dfa7074a69017082ab5d23b5e4835 \
                    size    1141850 \
                    cereal-51cbda5f30e56c801c07fe3d3aba5d7fb9e6cca4.tar.gz \
                    rmd160  33a8f9bd682f36387d3d589410113c6dd1e18bc4 \
                    sha256  26361b539fe50eee308b564faa2742166d2922a7ab0bd4870ac55708581228c8 \
                    size    336138 \
                    Vulkan-Headers-2fd5a24ec4a6df303b2155b3f85b6b8c1d56f6c0.tar.gz \
                    rmd160  78c61b819d0b84bafad24dbec5fb37a7a30eaf70 \
                    sha256  073451c821f00509ef1f18b3d672b2ef595bcd49844e0b180e0f2045f9a2f166 \
                    size    514785 \
                    SPIRV-Cross-2d6ce39bda9af95b78da6bcd8d60fb0ffac4f14d.tar.gz \
                    rmd160  b60af056c779ab90c02466dc8c619cd19e5aab8f \
                    sha256  9a59d96e3b8c4cfb87dc903199c78a534beb6c1a9b441c01cfc806f094b367c2 \
                    size    574044 \
                    glslang-a8453d4bc00998049db0d448764784a6a0767539.tar.gz \
                    rmd160  2e57753226e3a3453430918bdad9d74fe3a34f76 \
                    sha256  f730d1a44f1929a9815157e4690699dd184511289c15d29ea0927b15c552c041 \
                    size    2421286 \
                    SPIRV-Tools-9bfe0eb25e3dfdf4f3fd86ab6c0cda009c9bd661.tar.gz \
                    rmd160  adbc43257c914ac860c7e6c3d4b12882356bc289 \
                    sha256  a1fe809e23fa17bff58ef8ff575701838e4046c05fe460cdc2a68c8e6d3d55d9 \
                    size    1364467 \
                    SPIRV-Headers-d5b2e1255f706ce1f88812217e9a554f299848af.tar.gz \
                    rmd160  f10705d841455bbd7962975a9710c0140f8f7e33 \
                    sha256  ac0dba40509922b3284b90fc896eb1a480d32a503635ea702b003bdff89729e1 \
                    size    291263 \
                    Vulkan-Tools-f2c941819838c349fe0cc8eb2dddac294fe012e9.tar.gz \
                    rmd160  5334ec6fe468b53b221c0d464bf1275f0dd8ce6d \
                    sha256  fa0665e1f5938053eb5fc3c4af1ccf491d7311978461266dc8b3ac54071b936a \
                    size    342507 \
                    VulkanSamples-e268a7b7bf799b92410f35f6fea29cedb021bac1.tar.gz \
                    rmd160  4ecde32c42e4f3f57e629975b27ec657cdfb6092 \
                    sha256  80559b35e6f0dde88f404ece50578954da0cd937fab82a7d008f08e773f6b601 \
                    size    3921408

categories          graphics
maintainers         {ryandesign @ryandesign} openmaintainer
license             Apache-2

# MoltenVK would build for i386, but it uses Metal which only works on x86_64.
supported_archs     x86_64

description         an implementation of Vulkan for Metal

long_description    ${name} is an implementation of the high-performance, \
                    industry-standard Vulkan graphics and compute API, that \
                    runs on Apple's Metal graphics framework.

master_sites        ${master_sites}:${name}
distfiles           ${distfiles}:${name}

foreach {sub_author sub_project sub_commit sub_dest} ${submodules} {
    master_sites-append https://github.com/${sub_author}/${sub_project}/archive/${sub_commit}.tar.gz?dummy=:${sub_project}
    distfiles-append    ${sub_project}-${sub_commit}.tar.gz:${sub_project}
}

post-extract {
    ln -s {*}[glob -directory ${workpath} -tails ${github.author}-${github.project}-*] ${worksrcpath}
    set bad_submodule no
    foreach {sub_author sub_project sub_commit sub_dest} ${submodules} {
        set commit_file ${worksrcpath}/ExternalRevisions/${sub_project}_repo_revision
        if [file exists ${commit_file}] {
            set commit_re {^(\S+)}
        } else {
            set commit_file ${worksrcpath}/External/glslang/known_good.json
            set commit_re "\"subrepo\" : \"${sub_author}/${sub_project}\".*?\"commit\" : \"(\[^\"\]+)\""
        }
        set fp [open ${commit_file} r]
        set commit_file_data [read ${fp}]
        close ${fp}
        regexp ${commit_re} ${commit_file_data} -> commit
        if {${commit} ne ${sub_commit}} {
            set bad_submodule yes
            set submodules [string map "${sub_commit} ${commit}" ${submodules}]
        }
        file mkdir [file dirname ${worksrcpath}/External/${sub_dest}]
        ln -s {*}[glob ${workpath}/${sub_project}-*] ${worksrcpath}/External/${sub_dest}
    }
    if ${bad_submodule} {
        ui_error "The submodules should be:\n${submodules}"
        return -code error "incorrect submodule commit"
    }
}

depends_build-append \
                    path:bin/cmake:cmake

patchfiles          MoltenVK-scripts-create_dylib_macos.sh.patch

build.pre_args      -derivedDataPath ./DerivedData

xcode.configuration Release
xcode.scheme        "MoltenVK Package (${xcode.configuration}) (macOS only)"

pre-build {
    set build_dir ${worksrcpath}/External/glslang/build
    file mkdir ${build_dir}
    system -W ${build_dir} "${prefix}/bin/cmake -DCMAKE_BUILD_TYPE=MacPorts -DCMAKE_INSTALL_PREFIX=install -DCMAKE_INSTALL_NAME_DIR=${prefix}/lib -DCMAKE_C_COMPILER=\"${configure.cc}\" -DCMAKE_CXX_COMPILER=\"${configure.cxx}\" -DCMAKE_OSX_ARCHITECTURES=\"[join [get_canonical_archs] \;]\" -DCMAKE_VERBOSE_MAKEFILE=ON .. && make -j${build.jobs} VERBOSE=ON && make install/fast"
}

destroot {
    set output_dir ${worksrcpath}/build/${xcode.configuration}
    copy ${output_dir}/MoltenVKShaderConverter ${destroot}${prefix}/bin
    copy ${output_dir}/libMoltenVK.dylib ${destroot}${prefix}/lib
    copy {*}[glob ${output_dir}/*.framework] ${destroot}${frameworks_dir}
}

minimum_xcodeversions   {16 9}

platform darwin {
    if {${os.major} < 16} {
        archive_sites
        distfiles
        depends_build
        pre-fetch {
            ui_error "${subport} @${version} requires macOS Sierra or later"
            return -code error "incompatible OS X version"
        }
    }
}
