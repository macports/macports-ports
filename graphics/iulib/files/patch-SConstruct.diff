--- SConstruct.orig	2014-12-16 14:53:37.000000000 -0600
+++ SConstruct	2022-12-27 18:37:00.000000000 -0600
@@ -48,21 +48,29 @@
 # opts.Add(BoolVariable('style', 'Check style', "no"))
 
 env = Environment(options=opts, CXXFLAGS=["${opt}","${warn}"])
+env.Append( CPPPATH=["@@PREFIX@@/include"] )
+env.Append( LIBPATH=["@@PREFIX@@/lib/"] )
+env["CC"] = os.getenv("CC")
+env["CFLAGS"] = Split(os.getenv("CFLAGS"))
+env["CXX"] = os.getenv("CXX")
+env["CXXFLAGS"] = Split(os.getenv("CXXFLAGS"))
+env["LINKFLAGS"] = Split(os.getenv("LINKFLAGS"))
+
 Help(opts.GenerateHelpText(env))
 
 conf = Configure(env)
 if "-DUNSAFE" in env["opt"]:
-    print "WARNING: compile with -DUNSAFE or high optimization only for production use"
+    print ("WARNING: compile with -DUNSAFE or high optimization only for production use")
 
 if re.search(r'-O[234]',env["opt"]):
-    print "compiling with high optimization"
+    print ("compiling with high optimization")
 else:
-    print "compiling for development (slower but safer)"
+    print ("compiling for development (slower but safer)")
 
 assert conf.CheckLibWithHeader('png', 'png.h', 'C', 'png_byte;', 1),"please install: libpng12-dev"
-assert conf.CheckLibWithHeader('jpeg', 'jconfig.h', 'C', 'jpeg_std_error();', 1),"please install: libjpeg62-dev"    
+assert conf.CheckLibWithHeader('jpeg', ['stddef.h', 'stdio.h', 'jpeglib.h'], 'C', 'jpeg_std_error(0);', 1),"please install: libjpeg62-dev"
 assert conf.CheckLibWithHeader('z', 'zlib.h', 'C', 'inflate;', 1), "please install: zlib"
-assert conf.CheckLibWithHeader('tiff', 'tiff.h', 'C', 'TIFFOpen();', 1), "please install: libtiff4-dev"
+assert conf.CheckLibWithHeader('tiff', 'tiffio.h', 'C', 'TIFFOpen(0, 0);', 1), "please install: libtiff4-dev"
 
 ### check for optional parts
 
@@ -118,6 +126,7 @@
 else:
     sources += ["utils/dgraphics_nosdl.cc"]
 
+env.Append(SHLINKFLAGS = '-dynamiclib -install_name "@@PREFIX@@/lib/libiulib.dylib"')
 libiulib = env.SharedLibrary('libiulib',sources)
 
 env.Append(CXXFLAGS=['-g','-fPIC'])
@@ -146,8 +155,10 @@
 progs.Append(BUILDERS={'Test':test_builder})
 
 if env["test"]:
+    progs.Prepend(ENV = {'DYLD_LIBRARY_PATH': '.'})
     for file in glob.glob("*/test-*.cc") + glob.glob("*/*/test-*.cc"):
-        if not file.startswith('vidio'):
+        #Jason C - I exclude test-pbmpng because it depends on convert from ImageMagick
+        if not (file.startswith('vidio') or file.startswith('imgio/tests/test-pbmpng')):
             progs.Program(file[:-3],file)
             progs.Test(file[:-3])
             progs.Alias("test",file[:-3]+".passed")
