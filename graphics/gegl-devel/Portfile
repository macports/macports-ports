# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           meson 1.0
PortGroup           legacysupport 1.0

name                gegl-devel
conflicts           gegl
set my_name         gegl
version             0.4.36
revision            1
set branch          [join [lrange [split ${version} .] 0 1] .]
license             {GPL-3+ LGPL-3+}
categories          graphics
maintainers         {mascguy @mascguy} openmaintainer
platforms           darwin

description         GEGL is a graph based image processing framework.

long_description    GEGL is a graph based image processing framework offering image processing and \
                    compositing on large images. GEGL is suitable for projects ranging from small \
                    one-off projects to interactive applications.

homepage            http://gegl.org/
master_sites        gimp:${my_name}/${branch}/
dist_subdir         ${my_name}
distname            ${my_name}-${version}
use_xz              yes

checksums           rmd160  d4fcb061a356da5ee9231cfe106411052d8699a8 \
                    sha256  6fd58a0cdcc7702258adaeffb573a389228ae8f0eff47578efda2309b61b2ca6 \
                    size    5680876

depends_build-append \
                    port:pkgconfig \
                    port:python310

depends_lib-append \
                    port:babl-devel \
                    path:lib/pkgconfig/cairo.pc:cairo \
                    path:lib/pkgconfig/pango.pc:pango \
                    path:lib/pkgconfig/gdk-pixbuf-2.0.pc:gdk-pixbuf2 \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    path:lib/libluajit-5.1.2.dylib:luajit \
                    port:exiv2 \
                    port:gexiv2 \
                    path:lib/pkgconfig/gobject-introspection-1.0.pc:gobject-introspection \
                    path:lib/pkgconfig/jasper.pc:jasper \
                    port:json-glib \
                    port:lcms2 \
                    port:libraw \
                    path:lib/pkgconfig/librsvg-2.0.pc:librsvg \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:libsdl2 \
                    port:libspiro \
                    port:openexr \
                    port:poly2tri-c \
                    port:py310-gobject3 \
                    port:poppler \
                    port:SuiteSparse_UMFPACK \
                    port:webp

# proposed fix for 32 bit builds
# https://trac.macports.org/ticket/58524
patchfiles-append   patch-gegl-32bit-host-statistics.diff

post-patch {
    # https://trac.macports.org/ticket/35148
    if {${os.major} < 10} {
        reinplace "s|OpenGL/CGLDevice.h|OpenGL/CGLTypes.h|" ${worksrcpath}/gegl/opencl/cl_gl.h
    }
}

# needs C++14 C11
compiler.cxx_standard 2014
compiler.c_standard   2011

# version 0.4.14+ requires apple clang 700.0.72 (Xcode 7.0.0) to build new parallelization code
# ../gegl/gegl-parallel.h:134:29: error: expected expression '[] (gint     i,'
compiler.blacklist-append  {clang < 900}

set python_framework        ${frameworks_dir}/Python.framework/Versions/3.10
configure.pkg_config_path   ${python_framework}/lib/pkgconfig

# disable vala extensions by default (currently broken)
# enable with +vala variant for testing
configure.args-append       -Dvapigen=disabled \
                            -Ddocs=false

# at present, luajit does not build on PowerPC
platform darwin powerpc {
    depends_lib-delete path:lib/libluajit-5.1.2.dylib:luajit
    configure.args-append -Dlua=false
}

# TODO
# Adding --build=whatever doesn't work with meson. How do we do this?
#platform darwin {
#    if {[variant_isset universal]} {
#        # In order to build universal on Leopard, you need MacPorts 2.1
#        set merger_configure_args(x86_64) --build=${build_arch}-apple-${os.platform}${os.version}
#        set merger_configure_cflags(ppc) -fno-altivec
#        set merger_configure_cxxflags(ppc) -fno-altivec
#    } elseif {${build_arch} eq "ppc"} {
#        configure.cflags-append -fno-altivec
#        configure.cxxflags-append -fno-altivec
#    } elseif {${build_arch} eq "x86_64"} {
#        configure.args-append --build=${build_arch}-apple-${os.platform}${os.version}
#    }
#}

if {![info exists universal_possible]} {
    set universal_possible [expr {${os.universal_supported} && [llength ${configure.universal_archs}] >= 2}]
}
# gobject-introspection uses g-ir-scanner, which uses $CC from env
if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_env(${arch})  "CC=${configure.cc} -arch ${arch}"
        lappend merger_destroot_env(${arch})  "CC=${configure.cc} -arch ${arch}"
    }
} else {
    build.env-append       "CC=${configure.cc} ${configure.cc_archflags}"
    destroot.env-append    "CC=${configure.cc} ${configure.cc_archflags}"
}

variant gtk_docs description {Build API docs using gtk-doc} {
    depends_build-append    port:gtk-doc
    configure.args-append -Ddocs=true
}

variant vala description {Enable build of vala extensions} {
    depends_lib-append path:bin/vala:vala
    configure.args-delete -Dvapigen=disabled
}

variant workshop description {Enable build of workshop operations} {
    depends_lib-append port:lensfun
    configure.args-append -Dworkshop=true
}

#
# the following dummy variants are used
# to identify this port's binary dependencies
# inherited from libsdl and librsvg
#

variant x11 conflicts quartz {}
variant quartz conflicts x11 {}

if {![variant_isset quartz]} {
    default_variants +x11
}

livecheck.type      regex
livecheck.url       https://download.gimp.org/pub/${my_name}/${branch}/
livecheck.regex     "${my_name}-(\\d+(?:\\.\\d+)*)"
