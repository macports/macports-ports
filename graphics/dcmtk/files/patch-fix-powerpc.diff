--- config/tests/arith.cc	2023-12-19 18:12:57.000000000 +0800
+++ config/tests/arith.cc	2024-04-28 02:30:36.000000000 +0800
@@ -36,7 +36,7 @@
 #include <ieeefp.h>
 #endif
 
-#if defined(__APPLE__) && !defined(__aarch64__)
+#if defined(__APPLE__) && !defined(__aarch64__) && !defined(__POWERPC__)
 // For controlling floating point exceptions on OS X.
 #include <xmmintrin.h>
 #endif
@@ -336,7 +336,7 @@
 #ifdef HAVE_WINDOWS_H
     _clearfp();
     _controlfp( _controlfp(0,0) & ~_EM_INVALID, _MCW_EM );
-#elif defined(__APPLE__) && !defined(__aarch64__)
+#elif defined(__APPLE__) && !defined(__aarch64__) && !defined(__POWERPC__)
     _MM_SET_EXCEPTION_MASK( _MM_GET_EXCEPTION_MASK() & ~_MM_MASK_INVALID );
 #elif defined(HAVE_FENV_H) && defined(HAVE_PROTOTYPE_FEENABLEEXCEPT)
     feenableexcept( FE_INVALID );
@@ -382,7 +382,7 @@
     _controlfp( _controlfp(0,0) | _EM_INVALID, _MCW_EM );
 #elif defined(HAVE_FENV_H)
     feclearexcept( FE_INVALID );
-#if defined(__APPLE__) && !defined(__aarch64__)
+#if defined(__APPLE__) && !defined(__aarch64__) && !defined(__POWERPC__)
     _MM_SET_EXCEPTION_MASK( _MM_GET_EXCEPTION_MASK() | _MM_MASK_INVALID );
 #elif defined(HAVE_FENV_H) && defined(HAVE_PROTOTYPE_FEENABLEEXCEPT)
     fedisableexcept( FE_INVALID );
