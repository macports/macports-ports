# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           gobject_introspection 1.0

name                gegl-0.4
set gname           gegl
version             0.4.2
set branch          [join [lrange [split ${version} .] 0 1] .]
conflicts           gegl-devel
license             {GPL-3+ LGPL-3+}
categories          graphics
maintainers         {devans @dbevans} openmaintainer
platforms           darwin

description         GEGL is a graph based image processing framework.

long_description    GEGL is a graph based image processing framework offering image processing and \
                    compositing on large images. GEGL is suitable for projects ranging from small \
                    one-off projects to interactive applications.

homepage            http://gegl.org/
master_sites        gimp:${gname}/${branch}/

use_bzip2           yes

distname            ${gname}-${version}

checksums           rmd160  eae74f5b29e2e6038b609c6d007518ff888e6c2d \
                    sha256  6a358bc19d20b8ac1daf645cc8b53cdc2ea6f9c98a6036179a57045a26a07f8d \
                    size    6781136

depends_build       port:pkgconfig \
                    port:w3m \
                    port:python27

depends_lib         port:babl \
                    port:gdk-pixbuf2 \
                    port:gtk2 \
                    port:jpeg \
                    port:lua \
                    path:bin/dot:graphviz \
                    port:openexr \
                    port:exiv2 \
                    port:gexiv2 \
                    port:jasper \
                    port:json-glib \
                    port:lcms2 \
                    port:lensfun \
                    port:libraw \
                    port:librsvg \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:libspiro \
                    port:vala \
                    port:webp

patchfiles          patch-configure.ac.diff

post-patch {
    # http://trac.macports.org/ticket/35148
    if {${os.major} < 10} {
        reinplace "s|OpenGL/CGLDevice.h|OpenGL/CGLTypes.h|" ${worksrcpath}/gegl/opencl/cl_gl.h
    }
}

gobject_introspection yes

# blacklist compilers that do not support C11 (redefinition of typedef 'GeglDownscale2x2Fun' in gegl-algorithms.h at line 51)
# tweak gcc blacklisting for 10.5 ppc per kencu
compiler.blacklist  *gcc-3.* *gcc-4.* {clang < 300}

use_autoreconf      yes
autoreconf.args     -fvi

configure.python    ${prefix}/bin/python2.7

configure.args      --disable-docs \
                    --disable-silent-rules \
                    --without-sdl \
                    --without-umfpack

# use version specific binary suffix to avoid conflict with gegl, gegl-0.3

post-destroot {
    set suffix "-0.4"
    foreach bin [glob -nocomplain -tails -directory "${destroot}${prefix}/bin" *] {
        move ${destroot}${prefix}/bin/${bin} \
             ${destroot}${prefix}/bin/${bin}${suffix}
    }
}

platform darwin {
    if {[variant_isset universal]} {
        # In order to build universal on Leopard, you need MacPorts 2.1
        set merger_configure_args(x86_64) --build=${build_arch}-apple-${os.platform}${os.version}
        set merger_configure_cflags(ppc) -fno-altivec
        set merger_configure_cxxflags(ppc) -fno-altivec
    } elseif {${build_arch} eq "ppc"} {
        configure.cflags-append -fno-altivec
        configure.cxxflags-append -fno-altivec
    } elseif {${build_arch} eq "x86_64"} {
        configure.args-append --build=${build_arch}-apple-${os.platform}${os.version}
    }
}

variant html_doc description {Build html docs with enscript and asciidoc} {
    depends_build-append port:asciidoc
    configure.args-delete --disable-docs
    configure.args-append --enable-docs
}

variant workshop description {Enable build of workshop operations} {
    depends_lib-append port:lensfun
    configure.args-append --enable-workshop
}

#
# the following dummy variants are used
# to identify this port's binary dependencies
# inherited from libsdl and librsvg
#

variant x11 conflicts quartz {}
variant quartz conflicts x11 {}

if {![variant_isset quartz]} {
    default_variants +x11
}

livecheck.type      regex
livecheck.url       http://download.gimp.org/pub/${gname}/${branch}/
livecheck.regex     "${gname}-(\\d+(?:\\.\\d+)*)${extract.suffix}"
